
Primera_funcionalidad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014240  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000092a0  080143d0  080143d0  000243d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d670  0801d670  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  0801d670  0801d670  0002d670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d678  0801d678  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d678  0801d678  0002d678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d67c  0801d67c  0002d67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0801d680  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c8  20000198  0801d818  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001660  0801d818  00031660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .debug_info   00078c09  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00010ab5  00000000  00000000  000a8dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002bd8  00000000  00000000  000b9888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00005d40  00000000  00000000  000bc460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002387c  00000000  00000000  000c21a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025fce  00000000  00000000  000e5a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dab1f  00000000  00000000  0010b9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  001e6509  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d80  00000000  00000000  001e65d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001f73b  00000000  00000000  001f0358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000198 	.word	0x20000198
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080143b8 	.word	0x080143b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000019c 	.word	0x2000019c
 80001cc:	080143b8 	.word	0x080143b8

080001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>:
 80001d0:	f06f 0c03 	mvn.w	ip, #3
 80001d4:	3904      	subs	r1, #4
 80001d6:	e004      	b.n	80001e2 <head_complex>

080001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>:
 80001d8:	f04f 0c04 	mov.w	ip, #4
 80001dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80001e0:	4252      	negs	r2, r2

080001e2 <head_complex>:
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	d100      	bne.n	80001e8 <init_complex>
 80001e6:	4770      	bx	lr

080001e8 <init_complex>:
 80001e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ec:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 80001f0:	eac3 4723 	pkhtb	r7, r3, r3, asr #16
 80001f4:	f8b0 a000 	ldrh.w	sl, [r0]
 80001f8:	8844      	ldrh	r4, [r0, #2]
 80001fa:	8883      	ldrh	r3, [r0, #4]
 80001fc:	88c5      	ldrh	r5, [r0, #6]
 80001fe:	8900      	ldrh	r0, [r0, #8]
 8000200:	f5c5 4570 	rsb	r5, r5, #61440	; 0xf000
 8000204:	eac3 4e00 	pkhbt	lr, r3, r0, lsl #16
 8000208:	4663      	mov	r3, ip
 800020a:	eac4 4c05 	pkhbt	ip, r4, r5, lsl #16
 800020e:	b234      	sxth	r4, r6
 8000210:	b23d      	sxth	r5, r7
 8000212:	ea4f 3804 	mov.w	r8, r4, lsl #12
 8000216:	ea4f 3905 	mov.w	r9, r5, lsl #12
 800021a:	0034      	movs	r4, r6
 800021c:	003d      	movs	r5, r7

0800021e <loop_complex>:
 800021e:	5888      	ldr	r0, [r1, r2]
 8000220:	fb1a 8800 	smlabb	r8, sl, r0, r8
 8000224:	fb1a 9910 	smlabt	r9, sl, r0, r9
 8000228:	fb2c 8804 	smlad	r8, ip, r4, r8
 800022c:	fb2c 9915 	smladx	r9, ip, r5, r9
 8000230:	fb4e 8806 	smlsd	r8, lr, r6, r8
 8000234:	fb4e 9917 	smlsdx	r9, lr, r7, r9
 8000238:	0026      	movs	r6, r4
 800023a:	002f      	movs	r7, r5
 800023c:	eac0 1408 	pkhbt	r4, r0, r8, lsl #4
 8000240:	eac0 3529 	pkhtb	r5, r0, r9, asr #12
 8000244:	0428      	lsls	r0, r5, #16
 8000246:	eac0 4024 	pkhtb	r0, r0, r4, asr #16
 800024a:	5088      	str	r0, [r1, r2]
 800024c:	18d2      	adds	r2, r2, r3
 800024e:	d1e6      	bne.n	800021e <loop_complex>
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000254 <acc_alg_biquad_q3_12_direct_form_1_reverse>:
 8000254:	f06f 0c01 	mvn.w	ip, #1
 8000258:	3902      	subs	r1, #2
 800025a:	e004      	b.n	8000266 <head_real>

0800025c <acc_alg_biquad_q3_12_direct_form_1>:
 800025c:	f05f 0c02 	movs.w	ip, #2
 8000260:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8000264:	4252      	negs	r2, r2

08000266 <head_real>:
 8000266:	0052      	lsls	r2, r2, #1
 8000268:	d100      	bne.n	800026c <init_real>
 800026a:	4770      	bx	lr

0800026c <init_real>:
 800026c:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8000270:	4667      	mov	r7, ip
 8000272:	f8b0 a000 	ldrh.w	sl, [r0]
 8000276:	8844      	ldrh	r4, [r0, #2]
 8000278:	8885      	ldrh	r5, [r0, #4]
 800027a:	88c6      	ldrh	r6, [r0, #6]
 800027c:	8900      	ldrh	r0, [r0, #8]
 800027e:	f5c6 4670 	rsb	r6, r6, #61440	; 0xf000
 8000282:	eac4 4c06 	pkhbt	ip, r4, r6, lsl #16
 8000286:	eac5 4e00 	pkhbt	lr, r5, r0, lsl #16
 800028a:	eac3 4403 	pkhbt	r4, r3, r3, lsl #16
 800028e:	0025      	movs	r5, r4
 8000290:	b21b      	sxth	r3, r3
 8000292:	031e      	lsls	r6, r3, #12

08000294 <loop_real>:
 8000294:	5a88      	ldrh	r0, [r1, r2]
 8000296:	fb1a 6600 	smlabb	r6, sl, r0, r6
 800029a:	fb2c 6604 	smlad	r6, ip, r4, r6
 800029e:	fb4e 6605 	smlsd	r6, lr, r5, r6
 80002a2:	0025      	movs	r5, r4
 80002a4:	eac0 1406 	pkhbt	r4, r0, r6, lsl #4
 80002a8:	1420      	asrs	r0, r4, #16
 80002aa:	5288      	strh	r0, [r1, r2]
 80002ac:	19d2      	adds	r2, r2, r7
 80002ae:	d1f1      	bne.n	8000294 <loop_real>
 80002b0:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b974 	b.w	8000660 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	4604      	mov	r4, r0
 8000398:	468e      	mov	lr, r1
 800039a:	2b00      	cmp	r3, #0
 800039c:	d14d      	bne.n	800043a <__udivmoddi4+0xaa>
 800039e:	428a      	cmp	r2, r1
 80003a0:	4694      	mov	ip, r2
 80003a2:	d969      	bls.n	8000478 <__udivmoddi4+0xe8>
 80003a4:	fab2 f282 	clz	r2, r2
 80003a8:	b152      	cbz	r2, 80003c0 <__udivmoddi4+0x30>
 80003aa:	fa01 f302 	lsl.w	r3, r1, r2
 80003ae:	f1c2 0120 	rsb	r1, r2, #32
 80003b2:	fa20 f101 	lsr.w	r1, r0, r1
 80003b6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ba:	ea41 0e03 	orr.w	lr, r1, r3
 80003be:	4094      	lsls	r4, r2
 80003c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c4:	0c21      	lsrs	r1, r4, #16
 80003c6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ca:	fa1f f78c 	uxth.w	r7, ip
 80003ce:	fb08 e316 	mls	r3, r8, r6, lr
 80003d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003d6:	fb06 f107 	mul.w	r1, r6, r7
 80003da:	4299      	cmp	r1, r3
 80003dc:	d90a      	bls.n	80003f4 <__udivmoddi4+0x64>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003e6:	f080 811f 	bcs.w	8000628 <__udivmoddi4+0x298>
 80003ea:	4299      	cmp	r1, r3
 80003ec:	f240 811c 	bls.w	8000628 <__udivmoddi4+0x298>
 80003f0:	3e02      	subs	r6, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb00 f707 	mul.w	r7, r0, r7
 8000408:	42a7      	cmp	r7, r4
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x92>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	f080 810a 	bcs.w	800062c <__udivmoddi4+0x29c>
 8000418:	42a7      	cmp	r7, r4
 800041a:	f240 8107 	bls.w	800062c <__udivmoddi4+0x29c>
 800041e:	4464      	add	r4, ip
 8000420:	3802      	subs	r0, #2
 8000422:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000426:	1be4      	subs	r4, r4, r7
 8000428:	2600      	movs	r6, #0
 800042a:	b11d      	cbz	r5, 8000434 <__udivmoddi4+0xa4>
 800042c:	40d4      	lsrs	r4, r2
 800042e:	2300      	movs	r3, #0
 8000430:	e9c5 4300 	strd	r4, r3, [r5]
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	428b      	cmp	r3, r1
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0xc2>
 800043e:	2d00      	cmp	r5, #0
 8000440:	f000 80ef 	beq.w	8000622 <__udivmoddi4+0x292>
 8000444:	2600      	movs	r6, #0
 8000446:	e9c5 0100 	strd	r0, r1, [r5]
 800044a:	4630      	mov	r0, r6
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	fab3 f683 	clz	r6, r3
 8000456:	2e00      	cmp	r6, #0
 8000458:	d14a      	bne.n	80004f0 <__udivmoddi4+0x160>
 800045a:	428b      	cmp	r3, r1
 800045c:	d302      	bcc.n	8000464 <__udivmoddi4+0xd4>
 800045e:	4282      	cmp	r2, r0
 8000460:	f200 80f9 	bhi.w	8000656 <__udivmoddi4+0x2c6>
 8000464:	1a84      	subs	r4, r0, r2
 8000466:	eb61 0303 	sbc.w	r3, r1, r3
 800046a:	2001      	movs	r0, #1
 800046c:	469e      	mov	lr, r3
 800046e:	2d00      	cmp	r5, #0
 8000470:	d0e0      	beq.n	8000434 <__udivmoddi4+0xa4>
 8000472:	e9c5 4e00 	strd	r4, lr, [r5]
 8000476:	e7dd      	b.n	8000434 <__udivmoddi4+0xa4>
 8000478:	b902      	cbnz	r2, 800047c <__udivmoddi4+0xec>
 800047a:	deff      	udf	#255	; 0xff
 800047c:	fab2 f282 	clz	r2, r2
 8000480:	2a00      	cmp	r2, #0
 8000482:	f040 8092 	bne.w	80005aa <__udivmoddi4+0x21a>
 8000486:	eba1 010c 	sub.w	r1, r1, ip
 800048a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800048e:	fa1f fe8c 	uxth.w	lr, ip
 8000492:	2601      	movs	r6, #1
 8000494:	0c20      	lsrs	r0, r4, #16
 8000496:	fbb1 f3f7 	udiv	r3, r1, r7
 800049a:	fb07 1113 	mls	r1, r7, r3, r1
 800049e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a2:	fb0e f003 	mul.w	r0, lr, r3
 80004a6:	4288      	cmp	r0, r1
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x12c>
 80004aa:	eb1c 0101 	adds.w	r1, ip, r1
 80004ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x12a>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f200 80cb 	bhi.w	8000650 <__udivmoddi4+0x2c0>
 80004ba:	4643      	mov	r3, r8
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004c4:	fb07 1110 	mls	r1, r7, r0, r1
 80004c8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004cc:	fb0e fe00 	mul.w	lr, lr, r0
 80004d0:	45a6      	cmp	lr, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x156>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004dc:	d202      	bcs.n	80004e4 <__udivmoddi4+0x154>
 80004de:	45a6      	cmp	lr, r4
 80004e0:	f200 80bb 	bhi.w	800065a <__udivmoddi4+0x2ca>
 80004e4:	4608      	mov	r0, r1
 80004e6:	eba4 040e 	sub.w	r4, r4, lr
 80004ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x9a>
 80004f0:	f1c6 0720 	rsb	r7, r6, #32
 80004f4:	40b3      	lsls	r3, r6
 80004f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004fe:	fa20 f407 	lsr.w	r4, r0, r7
 8000502:	fa01 f306 	lsl.w	r3, r1, r6
 8000506:	431c      	orrs	r4, r3
 8000508:	40f9      	lsrs	r1, r7
 800050a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800050e:	fa00 f306 	lsl.w	r3, r0, r6
 8000512:	fbb1 f8f9 	udiv	r8, r1, r9
 8000516:	0c20      	lsrs	r0, r4, #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fb09 1118 	mls	r1, r9, r8, r1
 8000520:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000524:	fb08 f00e 	mul.w	r0, r8, lr
 8000528:	4288      	cmp	r0, r1
 800052a:	fa02 f206 	lsl.w	r2, r2, r6
 800052e:	d90b      	bls.n	8000548 <__udivmoddi4+0x1b8>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f108 3aff 	add.w	sl, r8, #4294967295
 8000538:	f080 8088 	bcs.w	800064c <__udivmoddi4+0x2bc>
 800053c:	4288      	cmp	r0, r1
 800053e:	f240 8085 	bls.w	800064c <__udivmoddi4+0x2bc>
 8000542:	f1a8 0802 	sub.w	r8, r8, #2
 8000546:	4461      	add	r1, ip
 8000548:	1a09      	subs	r1, r1, r0
 800054a:	b2a4      	uxth	r4, r4
 800054c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000550:	fb09 1110 	mls	r1, r9, r0, r1
 8000554:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000558:	fb00 fe0e 	mul.w	lr, r0, lr
 800055c:	458e      	cmp	lr, r1
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x1e2>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f100 34ff 	add.w	r4, r0, #4294967295
 8000568:	d26c      	bcs.n	8000644 <__udivmoddi4+0x2b4>
 800056a:	458e      	cmp	lr, r1
 800056c:	d96a      	bls.n	8000644 <__udivmoddi4+0x2b4>
 800056e:	3802      	subs	r0, #2
 8000570:	4461      	add	r1, ip
 8000572:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000576:	fba0 9402 	umull	r9, r4, r0, r2
 800057a:	eba1 010e 	sub.w	r1, r1, lr
 800057e:	42a1      	cmp	r1, r4
 8000580:	46c8      	mov	r8, r9
 8000582:	46a6      	mov	lr, r4
 8000584:	d356      	bcc.n	8000634 <__udivmoddi4+0x2a4>
 8000586:	d053      	beq.n	8000630 <__udivmoddi4+0x2a0>
 8000588:	b15d      	cbz	r5, 80005a2 <__udivmoddi4+0x212>
 800058a:	ebb3 0208 	subs.w	r2, r3, r8
 800058e:	eb61 010e 	sbc.w	r1, r1, lr
 8000592:	fa01 f707 	lsl.w	r7, r1, r7
 8000596:	fa22 f306 	lsr.w	r3, r2, r6
 800059a:	40f1      	lsrs	r1, r6
 800059c:	431f      	orrs	r7, r3
 800059e:	e9c5 7100 	strd	r7, r1, [r5]
 80005a2:	2600      	movs	r6, #0
 80005a4:	4631      	mov	r1, r6
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	40d8      	lsrs	r0, r3
 80005b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005b4:	fa21 f303 	lsr.w	r3, r1, r3
 80005b8:	4091      	lsls	r1, r2
 80005ba:	4301      	orrs	r1, r0
 80005bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005c0:	fa1f fe8c 	uxth.w	lr, ip
 80005c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005c8:	fb07 3610 	mls	r6, r7, r0, r3
 80005cc:	0c0b      	lsrs	r3, r1, #16
 80005ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005d2:	fb00 f60e 	mul.w	r6, r0, lr
 80005d6:	429e      	cmp	r6, r3
 80005d8:	fa04 f402 	lsl.w	r4, r4, r2
 80005dc:	d908      	bls.n	80005f0 <__udivmoddi4+0x260>
 80005de:	eb1c 0303 	adds.w	r3, ip, r3
 80005e2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005e6:	d22f      	bcs.n	8000648 <__udivmoddi4+0x2b8>
 80005e8:	429e      	cmp	r6, r3
 80005ea:	d92d      	bls.n	8000648 <__udivmoddi4+0x2b8>
 80005ec:	3802      	subs	r0, #2
 80005ee:	4463      	add	r3, ip
 80005f0:	1b9b      	subs	r3, r3, r6
 80005f2:	b289      	uxth	r1, r1
 80005f4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005f8:	fb07 3316 	mls	r3, r7, r6, r3
 80005fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000600:	fb06 f30e 	mul.w	r3, r6, lr
 8000604:	428b      	cmp	r3, r1
 8000606:	d908      	bls.n	800061a <__udivmoddi4+0x28a>
 8000608:	eb1c 0101 	adds.w	r1, ip, r1
 800060c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000610:	d216      	bcs.n	8000640 <__udivmoddi4+0x2b0>
 8000612:	428b      	cmp	r3, r1
 8000614:	d914      	bls.n	8000640 <__udivmoddi4+0x2b0>
 8000616:	3e02      	subs	r6, #2
 8000618:	4461      	add	r1, ip
 800061a:	1ac9      	subs	r1, r1, r3
 800061c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000620:	e738      	b.n	8000494 <__udivmoddi4+0x104>
 8000622:	462e      	mov	r6, r5
 8000624:	4628      	mov	r0, r5
 8000626:	e705      	b.n	8000434 <__udivmoddi4+0xa4>
 8000628:	4606      	mov	r6, r0
 800062a:	e6e3      	b.n	80003f4 <__udivmoddi4+0x64>
 800062c:	4618      	mov	r0, r3
 800062e:	e6f8      	b.n	8000422 <__udivmoddi4+0x92>
 8000630:	454b      	cmp	r3, r9
 8000632:	d2a9      	bcs.n	8000588 <__udivmoddi4+0x1f8>
 8000634:	ebb9 0802 	subs.w	r8, r9, r2
 8000638:	eb64 0e0c 	sbc.w	lr, r4, ip
 800063c:	3801      	subs	r0, #1
 800063e:	e7a3      	b.n	8000588 <__udivmoddi4+0x1f8>
 8000640:	4646      	mov	r6, r8
 8000642:	e7ea      	b.n	800061a <__udivmoddi4+0x28a>
 8000644:	4620      	mov	r0, r4
 8000646:	e794      	b.n	8000572 <__udivmoddi4+0x1e2>
 8000648:	4640      	mov	r0, r8
 800064a:	e7d1      	b.n	80005f0 <__udivmoddi4+0x260>
 800064c:	46d0      	mov	r8, sl
 800064e:	e77b      	b.n	8000548 <__udivmoddi4+0x1b8>
 8000650:	3b02      	subs	r3, #2
 8000652:	4461      	add	r1, ip
 8000654:	e732      	b.n	80004bc <__udivmoddi4+0x12c>
 8000656:	4630      	mov	r0, r6
 8000658:	e709      	b.n	800046e <__udivmoddi4+0xde>
 800065a:	4464      	add	r4, ip
 800065c:	3802      	subs	r0, #2
 800065e:	e742      	b.n	80004e6 <__udivmoddi4+0x156>

08000660 <__aeabi_idiv0>:
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop

08000664 <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 24000000


static inline void disable_interrupts(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
	__disable_irq();
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800067a:	b662      	cpsie	i
}
 800067c:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800067e:	f3bf 8f6f 	isb	sy
}
 8000682:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af02      	add	r7, sp, #8
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 800069c:	f241 3388 	movw	r3, #5000	; 0x1388
 80006a0:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2110      	movs	r1, #16
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f002 faf9 	bl	8002ca0 <HAL_GPIO_WritePin>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	4613      	mov	r3, r2
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <acc_hal_integration_sensor_transfer+0x48>)
 80006be:	f003 fe72 	bl	80043a6 <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2110      	movs	r1, #16
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ca:	f002 fae9 	bl	8002ca0 <HAL_GPIO_WritePin>
}
 80006ce:	bf00      	nop
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200001d8 	.word	0x200001d8

080006dc <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2108      	movs	r1, #8
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f002 fad8 	bl	8002ca0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2110      	movs	r1, #16
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f002 fad2 	bl	8002ca0 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 80006fc:	2002      	movs	r0, #2
 80006fe:	f001 ff99 	bl	8002634 <HAL_Delay>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2110      	movs	r1, #16
 8000716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071a:	f002 fac1 	bl	8002ca0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2108      	movs	r1, #8
 8000722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000726:	f002 fabb 	bl	8002ca0 <HAL_GPIO_WritePin>

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 800072a:	2002      	movs	r0, #2
 800072c:	f001 ff82 	bl	8002634 <HAL_Delay>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 8000742:	f001 ff6b 	bl	800261c <HAL_GetTick>
 8000746:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000748:	e00b      	b.n	8000762 <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 800074a:	f7ff ff8b 	bl	8000664 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 800074e:	2101      	movs	r1, #1
 8000750:	4812      	ldr	r0, [pc, #72]	; (800079c <acc_hal_integration_wait_for_sensor_interrupt+0x64>)
 8000752:	f002 fa8d 	bl	8002c70 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d000      	beq.n	800075e <acc_hal_integration_wait_for_sensor_interrupt+0x26>
		{
			__WFI();
 800075c:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 800075e:	f7ff ff8a 	bl	8000676 <enable_interrupts>
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000762:	2101      	movs	r1, #1
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <acc_hal_integration_wait_for_sensor_interrupt+0x64>)
 8000766:	f002 fa83 	bl	8002c70 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d007      	beq.n	8000780 <acc_hal_integration_wait_for_sensor_interrupt+0x48>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8000770:	f001 ff54 	bl	800261c <HAL_GetTick>
 8000774:	4602      	mov	r2, r0
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d8e4      	bhi.n	800074a <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 8000780:	2101      	movs	r1, #1
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <acc_hal_integration_wait_for_sensor_interrupt+0x64>)
 8000784:	f002 fa74 	bl	8002c70 <HAL_GPIO_ReadPin>
 8000788:	4603      	mov	r3, r0
 800078a:	2b01      	cmp	r3, #1
 800078c:	bf0c      	ite	eq
 800078e:	2301      	moveq	r3, #1
 8000790:	2300      	movne	r3, #0
 8000792:	b2db      	uxtb	r3, r3
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	48000400 	.word	0x48000400

080007a0 <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <acc_hal_integration_get_reference_frequency+0x18>)
 80007a6:	ee07 3a90 	vmov	s15, r3
}
 80007aa:	eeb0 0a67 	vmov.f32	s0, s15
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	4bb71b00 	.word	0x4bb71b00

080007bc <acc_hal_integration_get_implementation>:
	.log.log       = acc_integration_log
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return &hal;
 80007c0:	4b02      	ldr	r3, [pc, #8]	; (80007cc <acc_hal_integration_get_implementation+0x10>)
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	08017d64 	.word	0x08017d64

080007d0 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 80007d0:	b40c      	push	{r2, r3}
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b0b4      	sub	sp, #208	; 0xd0
 80007d6:	af04      	add	r7, sp, #16
 80007d8:	4603      	mov	r3, r0
 80007da:	6039      	str	r1, [r7, #0]
 80007dc:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 80007de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007e2:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80007e4:	f107 000c 	add.w	r0, r7, #12
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80007ee:	2196      	movs	r1, #150	; 0x96
 80007f0:	f012 fc92 	bl	8013118 <vsniprintf>
 80007f4:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	if (ret >= LOG_BUFFER_MAX_SIZE)
 80007f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80007fc:	2b95      	cmp	r3, #149	; 0x95
 80007fe:	dd0b      	ble.n	8000818 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8000800:	232e      	movs	r3, #46	; 0x2e
 8000802:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8000806:	232e      	movs	r3, #46	; 0x2e
 8000808:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 800080c:	232e      	movs	r3, #46	; 0x2e
 800080e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 8000818:	f000 f881 	bl	800091e <acc_integration_get_time>
 800081c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 8000820:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8000828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800082c:	4a2f      	ldr	r2, [pc, #188]	; (80008ec <acc_integration_log+0x11c>)
 800082e:	fba2 2303 	umull	r2, r3, r2, r3
 8000832:	0d5b      	lsrs	r3, r3, #21
 8000834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8000838:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800083c:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <acc_integration_log+0x120>)
 800083e:	fba2 2303 	umull	r2, r3, r2, r3
 8000842:	0b9a      	lsrs	r2, r3, #14
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <acc_integration_log+0x124>)
 8000846:	fba3 1302 	umull	r1, r3, r3, r2
 800084a:	0959      	lsrs	r1, r3, #5
 800084c:	460b      	mov	r3, r1
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	1a5b      	subs	r3, r3, r1
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 800085a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800085e:	4a26      	ldr	r2, [pc, #152]	; (80008f8 <acc_integration_log+0x128>)
 8000860:	fba2 2303 	umull	r2, r3, r2, r3
 8000864:	099a      	lsrs	r2, r3, #6
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <acc_integration_log+0x124>)
 8000868:	fba3 1302 	umull	r1, r3, r3, r2
 800086c:	0959      	lsrs	r1, r3, #5
 800086e:	460b      	mov	r3, r1
 8000870:	011b      	lsls	r3, r3, #4
 8000872:	1a5b      	subs	r3, r3, r1
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 800087c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000880:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <acc_integration_log+0x128>)
 8000882:	fba2 1203 	umull	r1, r2, r2, r3
 8000886:	0992      	lsrs	r2, r2, #6
 8000888:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800088c:	fb01 f202 	mul.w	r2, r1, r2
 8000890:	1a9b      	subs	r3, r3, r2
 8000892:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b04      	cmp	r3, #4
 800089a:	d803      	bhi.n	80008a4 <acc_integration_log+0xd4>
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <acc_integration_log+0x12c>)
 80008a0:	5cd3      	ldrb	r3, [r2, r3]
 80008a2:	e000      	b.n	80008a6 <acc_integration_log+0xd6>
 80008a4:	233f      	movs	r3, #63	; 0x3f
 80008a6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 80008aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80008ae:	f107 020c 	add.w	r2, r7, #12
 80008b2:	9203      	str	r2, [sp, #12]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	9202      	str	r2, [sp, #8]
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80008c8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <acc_integration_log+0x130>)
 80008ce:	f012 fb17 	bl	8012f00 <iprintf>

	fflush(stdout);
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <acc_integration_log+0x134>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	4618      	mov	r0, r3
 80008da:	f012 f8c1 	bl	8012a60 <fflush>

	va_end(ap);
}
 80008de:	bf00      	nop
 80008e0:	37c0      	adds	r7, #192	; 0xc0
 80008e2:	46bd      	mov	sp, r7
 80008e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008e8:	b002      	add	sp, #8
 80008ea:	4770      	bx	lr
 80008ec:	95217cb1 	.word	0x95217cb1
 80008f0:	45e7b273 	.word	0x45e7b273
 80008f4:	88888889 	.word	0x88888889
 80008f8:	10624dd3 	.word	0x10624dd3
 80008fc:	080143f4 	.word	0x080143f4
 8000900:	080143d0 	.word	0x080143d0
 8000904:	20000134 	.word	0x20000134

08000908 <acc_integration_sleep_ms>:

#include "acc_integration.h"


void acc_integration_sleep_ms(uint32_t time_msec)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	HAL_Delay(time_msec);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f001 fe8f 	bl	8002634 <HAL_Delay>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <acc_integration_get_time>:
	HAL_Delay(time_msec);
}


uint32_t acc_integration_get_time(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000922:	f001 fe7b 	bl	800261c <HAL_GetTick>
 8000926:	4603      	mov	r3, r0
}
 8000928:	4618      	mov	r0, r3
 800092a:	bd80      	pop	{r7, pc}

0800092c <_write>:
return len ;
}*/


int _write(int file ,char*ptr ,int len)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
(void) file ;
HAL_UART_Transmit (&huart1, ptr, len, 0xFFFF);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	b29a      	uxth	r2, r3
 800093c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	4804      	ldr	r0, [pc, #16]	; (8000954 <_write+0x28>)
 8000944:	f004 f8f0 	bl	8004b28 <HAL_UART_Transmit>
return len ;
 8000948:	687b      	ldr	r3, [r7, #4]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000023c 	.word	0x2000023c

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095c:	f001 fdf5 	bl	800254a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000960:	f000 f81e 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000964:	f000 f914 	bl	8000b90 <MX_GPIO_Init>
  MX_RTC_Init();
 8000968:	f000 f87c 	bl	8000a64 <MX_RTC_Init>
  MX_SPI1_Init();
 800096c:	f000 f8a2 	bl	8000ab4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000970:	f000 f8de 	bl	8000b30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  acc_ref_app_parking(0, NULL);
 8000974:	2100      	movs	r1, #0
 8000976:	2000      	movs	r0, #0
 8000978:	f000 f974 	bl	8000c64 <acc_ref_app_parking>
  acc_ref_app_smart_presence(0, NULL);
 800097c:	2100      	movs	r1, #0
 800097e:	2000      	movs	r0, #0
 8000980:	f000 fec4 	bl	800170c <acc_ref_app_smart_presence>
  acc_ref_app_tank_level(0, NULL);
 8000984:	2100      	movs	r1, #0
 8000986:	2000      	movs	r0, #0
 8000988:	f000 ff9e 	bl	80018c8 <acc_ref_app_tank_level>

  //acc_example_error_handling(0, NULL);    // check_distance_config_tool
  //acc_example_bring_up(0, NULL);
  //acc_ref_app_rf_certification_test(0, NULL);

  HAL_UART_Receive_IT (&huart1, UART1_rxBuffer, 12);
 800098c:	220c      	movs	r2, #12
 800098e:	4902      	ldr	r1, [pc, #8]	; (8000998 <main+0x40>)
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <main+0x44>)
 8000992:	f004 f95d 	bl	8004c50 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000996:	e7fe      	b.n	8000996 <main+0x3e>
 8000998:	200002c0 	.word	0x200002c0
 800099c:	2000023c 	.word	0x2000023c

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b096      	sub	sp, #88	; 0x58
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2244      	movs	r2, #68	; 0x44
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f012 f9be 	bl	8012d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009c6:	f002 f9c5 	bl	8002d54 <HAL_PWREx_ControlVoltageScaling>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009d0:	f000 f942 	bl	8000c58 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009d4:	f002 f9a0 	bl	8002d18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <SystemClock_Config+0xc0>)
 80009da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009de:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <SystemClock_Config+0xc0>)
 80009e0:	f023 0318 	bic.w	r3, r3, #24
 80009e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009e8:	2314      	movs	r3, #20
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009f0:	2301      	movs	r3, #1
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009f8:	2360      	movs	r3, #96	; 0x60
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fc:	2302      	movs	r3, #2
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a00:	2301      	movs	r3, #1
 8000a02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a08:	2328      	movs	r3, #40	; 0x28
 8000a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 f9ef 	bl	8002e00 <HAL_RCC_OscConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a28:	f000 f916 	bl	8000c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a30:	2303      	movs	r3, #3
 8000a32:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	2104      	movs	r1, #4
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 fdfb 	bl	8003640 <HAL_RCC_ClockConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a50:	f000 f902 	bl	8000c58 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a54:	f003 f9f0 	bl	8003e38 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a58:	bf00      	nop
 8000a5a:	3758      	adds	r7, #88	; 0x58
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40021000 	.word	0x40021000

08000a64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_RTC_Init+0x48>)
 8000a6a:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <MX_RTC_Init+0x4c>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_RTC_Init+0x48>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_RTC_Init+0x48>)
 8000a76:	227f      	movs	r2, #127	; 0x7f
 8000a78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_RTC_Init+0x48>)
 8000a7c:	22ff      	movs	r2, #255	; 0xff
 8000a7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_RTC_Init+0x48>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_RTC_Init+0x48>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_RTC_Init+0x48>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_RTC_Init+0x48>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_RTC_Init+0x48>)
 8000a9a:	f003 facf 	bl	800403c <HAL_RTC_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000aa4:	f000 f8d8 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200001b4 	.word	0x200001b4
 8000ab0:	40002800 	.word	0x40002800

08000ab4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000aba:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <MX_SPI1_Init+0x78>)
 8000abc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000ace:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ad2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000b02:	2207      	movs	r2, #7
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000b0e:	2208      	movs	r2, #8
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_SPI1_Init+0x74>)
 8000b14:	f003 fba4 	bl	8004260 <HAL_SPI_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b1e:	f000 f89b 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200001d8 	.word	0x200001d8
 8000b2c:	40013000 	.word	0x40013000

08000b30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <MX_USART1_UART_Init+0x5c>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b74:	f003 ff8a 	bl	8004a8c <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b7e:	f000 f86b 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000023c 	.word	0x2000023c
 8000b8c:	40013800 	.word	0x40013800

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <MX_GPIO_Init+0xbc>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a28      	ldr	r2, [pc, #160]	; (8000c4c <MX_GPIO_Init+0xbc>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <MX_GPIO_Init+0xbc>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_GPIO_Init+0xbc>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <MX_GPIO_Init+0xbc>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_GPIO_Init+0xbc>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_GPIO_Init+0xbc>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <MX_GPIO_Init+0xbc>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_GPIO_Init+0xbc>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A111_ENABLE_Pin|A111_CS_N_Pin|LED_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f002 f852 	bl	8002ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A111_ENABLE_Pin A111_CS_N_Pin LED_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin|A111_CS_N_Pin|LED_Pin;
 8000bfc:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000c00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f001 fec0 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_GPIO_Init+0xc0>)
 8000c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4809      	ldr	r0, [pc, #36]	; (8000c54 <MX_GPIO_Init+0xc4>)
 8000c30:	f001 feb4 	bl	800299c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2006      	movs	r0, #6
 8000c3a:	f001 fdfa 	bl	8002832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c3e:	2006      	movs	r0, #6
 8000c40:	f001 fe13 	bl	800286a <HAL_NVIC_EnableIRQ>

}
 8000c44:	bf00      	nop
 8000c46:	3720      	adds	r7, #32
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	10110000 	.word	0x10110000
 8000c54:	48000400 	.word	0x48000400

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <acc_ref_app_parking>:

int acc_ref_app_parking(int argc, char *argv[]);


int acc_ref_app_parking(int argc, char *argv[])
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b09b      	sub	sp, #108	; 0x6c
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;
	printf("Acconeer software version %s\n", acc_version_get());
 8000c6e:	f009 f9d9 	bl	800a024 <acc_version_get>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4619      	mov	r1, r3
 8000c76:	4871      	ldr	r0, [pc, #452]	; (8000e3c <acc_ref_app_parking+0x1d8>)
 8000c78:	f012 f942 	bl	8012f00 <iprintf>

	const acc_hal_t *hal = acc_hal_integration_get_implementation();
 8000c7c:	f7ff fd9e 	bl	80007bc <acc_hal_integration_get_implementation>
 8000c80:	64f8      	str	r0, [r7, #76]	; 0x4c

	if (!acc_rss_activate(hal))
 8000c82:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000c84:	f008 f9c4 	bl	8009010 <acc_rss_activate>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f083 0301 	eor.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d004      	beq.n	8000c9e <acc_ref_app_parking+0x3a>
	{
		printf("Failed to activate RSS\n");
 8000c94:	486a      	ldr	r0, [pc, #424]	; (8000e40 <acc_ref_app_parking+0x1dc>)
 8000c96:	f012 f9b9 	bl	801300c <puts>
		return EXIT_FAILURE;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e1c8      	b.n	8001030 <acc_ref_app_parking+0x3cc>
	}

	acc_service_configuration_t configuration = acc_service_envelope_configuration_create();
 8000c9e:	f008 faff 	bl	80092a0 <acc_service_envelope_configuration_create>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	643b      	str	r3, [r7, #64]	; 0x40

	if (configuration == NULL)
 8000ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d106      	bne.n	8000cba <acc_ref_app_parking+0x56>
	{
		printf("Failed to create service configuration\n");
 8000cac:	4865      	ldr	r0, [pc, #404]	; (8000e44 <acc_ref_app_parking+0x1e0>)
 8000cae:	f012 f9ad 	bl	801300c <puts>
		acc_rss_deactivate();
 8000cb2:	f008 f9e7 	bl	8009084 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e1ba      	b.n	8001030 <acc_ref_app_parking+0x3cc>
	}

	if (!sensor_calibration())
 8000cba:	f000 f9f8 	bl	80010ae <sensor_calibration>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f083 0301 	eor.w	r3, r3, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00b      	beq.n	8000ce2 <acc_ref_app_parking+0x7e>
	{
		printf("Failed to calibrate sensor\n");
 8000cca:	485f      	ldr	r0, [pc, #380]	; (8000e48 <acc_ref_app_parking+0x1e4>)
 8000ccc:	f012 f99e 	bl	801300c <puts>
		acc_service_envelope_configuration_destroy(&configuration);
 8000cd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f008 fb77 	bl	80093c8 <acc_service_envelope_configuration_destroy>
		acc_rss_deactivate();
 8000cda:	f008 f9d3 	bl	8009084 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e1a6      	b.n	8001030 <acc_ref_app_parking+0x3cc>
	}

	configure_service(configuration);
 8000ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fa05 	bl	80010f4 <configure_service>

	acc_service_handle_t handle = acc_service_create(configuration);
 8000cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cec:	4618      	mov	r0, r3
 8000cee:	f008 fc4d 	bl	800958c <acc_service_create>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (handle == NULL)
 8000cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10b      	bne.n	8000d14 <acc_ref_app_parking+0xb0>
	{
		printf("Failed to create service handle\n");
 8000cfc:	4853      	ldr	r0, [pc, #332]	; (8000e4c <acc_ref_app_parking+0x1e8>)
 8000cfe:	f012 f985 	bl	801300c <puts>
		acc_service_envelope_configuration_destroy(&configuration);
 8000d02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d06:	4618      	mov	r0, r3
 8000d08:	f008 fb5e 	bl	80093c8 <acc_service_envelope_configuration_destroy>
		acc_rss_deactivate();
 8000d0c:	f008 f9ba 	bl	8009084 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e18d      	b.n	8001030 <acc_ref_app_parking+0x3cc>
	}

	acc_service_envelope_metadata_t metadata;
	acc_service_envelope_get_metadata(handle, &metadata);
 8000d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d16:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f008 fbb1 	bl	8009484 <acc_service_envelope_get_metadata>

	uint16_t leak_sample_index = (uint16_t)(((LEAKAGE_SAMPLE_POSITION_M - metadata.start_m) / metadata.step_length_m) + 0.5f);
 8000d22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d26:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000e50 <acc_ref_app_parking+0x1ec>
 8000d2a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000d2e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d42:	ee17 3a90 	vmov	r3, s15
 8000d46:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t leak_end_index    = (uint16_t)(((LEAKAGE_END_POSITION_M - metadata.start_m) / metadata.step_length_m) + 0.5f);
 8000d4a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d4e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000e54 <acc_ref_app_parking+0x1f0>
 8000d52:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000d56:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d6a:	ee17 3a90 	vmov	r3, s15
 8000d6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	bool     valid_leak_setup  = (leak_sample_index < leak_end_index && leak_sample_index < metadata.data_length);
 8000d72:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000d76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d206      	bcs.n	8000d8c <acc_ref_app_parking+0x128>
 8000d7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d80:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d201      	bcs.n	8000d8c <acc_ref_app_parking+0x128>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e000      	b.n	8000d8e <acc_ref_app_parking+0x12a>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000d92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint16_t                           *data = NULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
	acc_service_envelope_result_info_t result_info;
	sweep_observable_t                 observations[DETECTION_OBSERVATION_COUNT];
	uint16_t                           observation_count   = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	817b      	strh	r3, [r7, #10]
	uint32_t                           last_update_ms      = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t                           last_activate_ms    = hal->os.gettime();
 8000daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	4798      	blx	r3
 8000db0:	65b8      	str	r0, [r7, #88]	; 0x58
	uint32_t                           last_calibration_ms = hal->os.gettime();
 8000db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	4798      	blx	r3
 8000db8:	6578      	str	r0, [r7, #84]	; 0x54
	uint16_t                           sweep_index         = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	bool status = true;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

	if (!valid_leak_setup)
 8000dc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000dca:	f083 0301 	eor.w	r3, r3, #1
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <acc_ref_app_parking+0x17e>
	{
		printf("Parameters are not valid\n");
 8000dd4:	4820      	ldr	r0, [pc, #128]	; (8000e58 <acc_ref_app_parking+0x1f4>)
 8000dd6:	f012 f919 	bl	801300c <puts>
		status = false;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8000de0:	e10c      	b.n	8000ffc <acc_ref_app_parking+0x398>
	}
	else
	{
		status = acc_service_activate(handle);
 8000de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000de4:	4618      	mov	r0, r3
 8000de6:	f008 fe87 	bl	8009af8 <acc_service_activate>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	}

	while (status)
 8000df0:	e104      	b.n	8000ffc <acc_ref_app_parking+0x398>
	{
		if (hal->os.gettime() - last_activate_ms > SERVICE_UPTIME_MAX_S * 1000)
 8000df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	4798      	blx	r3
 8000df8:	4602      	mov	r2, r0
 8000dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e06:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000e60 <acc_ref_app_parking+0x1fc>
 8000e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e12:	dd0d      	ble.n	8000e30 <acc_ref_app_parking+0x1cc>
		{
			status           = service_recreate(configuration, &handle);
 8000e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e16:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f913 	bl	8001048 <service_recreate>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
			last_activate_ms = hal->os.gettime();
 8000e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	4798      	blx	r3
 8000e2e:	65b8      	str	r0, [r7, #88]	; 0x58
		}

		if (status)
 8000e30:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d04c      	beq.n	8000ed2 <acc_ref_app_parking+0x26e>
		{
			while (last_update_ms != 0 && hal->os.gettime() - last_update_ms < DETECTOR_SWEEP_PERIOD_S * 1000)
 8000e38:	e028      	b.n	8000e8c <acc_ref_app_parking+0x228>
 8000e3a:	bf00      	nop
 8000e3c:	080143fc 	.word	0x080143fc
 8000e40:	0801441c 	.word	0x0801441c
 8000e44:	08014434 	.word	0x08014434
 8000e48:	0801445c 	.word	0x0801445c
 8000e4c:	08014478 	.word	0x08014478
 8000e50:	3e19999a 	.word	0x3e19999a
 8000e54:	3e99999a 	.word	0x3e99999a
 8000e58:	08014498 	.word	0x08014498
 8000e5c:	461c4000 	.word	0x461c4000
 8000e60:	495bba00 	.word	0x495bba00
			{
				acc_integration_sleep_ms((DETECTOR_SWEEP_PERIOD_S * 1000) - (hal->os.gettime() - last_update_ms));
 8000e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	4798      	blx	r3
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	ee07 3a90 	vmov	s15, r3
 8000e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e78:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8000e5c <acc_ref_app_parking+0x1f8>
 8000e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e84:	ee17 0a90 	vmov	r0, s15
 8000e88:	f7ff fd3e 	bl	8000908 <acc_integration_sleep_ms>
			while (last_update_ms != 0 && hal->os.gettime() - last_update_ms < DETECTOR_SWEEP_PERIOD_S * 1000)
 8000e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d010      	beq.n	8000eb4 <acc_ref_app_parking+0x250>
 8000e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	4798      	blx	r3
 8000e98:	4602      	mov	r2, r0
 8000e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ea6:	ed1f 7a13 	vldr	s14, [pc, #-76]	; 8000e5c <acc_ref_app_parking+0x1f8>
 8000eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb2:	d4d7      	bmi.n	8000e64 <acc_ref_app_parking+0x200>
			}

			status         = acc_service_envelope_get_next_by_reference(handle, &data, &result_info);
 8000eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000eba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f008 fb02 	bl	80094c8 <acc_service_envelope_get_next_by_reference>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
			last_update_ms = hal->os.gettime();
 8000eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	4798      	blx	r3
 8000ed0:	65f8      	str	r0, [r7, #92]	; 0x5c
		}

		if (status && result_info.data_quality_warning &&
 8000ed2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d05c      	beq.n	8000f94 <acc_ref_app_parking+0x330>
 8000eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d058      	beq.n	8000f94 <acc_ref_app_parking+0x330>
		    hal->os.gettime() - last_calibration_ms > SERVICE_RUNTIME_MIN_S * 1000)
 8000ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	4798      	blx	r3
 8000ee8:	4602      	mov	r2, r0
 8000eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
		if (status && result_info.data_quality_warning &&
 8000ef6:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 8000e60 <acc_ref_app_parking+0x1fc>
 8000efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f02:	dd47      	ble.n	8000f94 <acc_ref_app_parking+0x330>
		{
			status = acc_service_deactivate(handle);
 8000f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f06:	4618      	mov	r0, r3
 8000f08:	f008 fe46 	bl	8009b98 <acc_service_deactivate>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

			if (status)
 8000f12:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d009      	beq.n	8000f2e <acc_ref_app_parking+0x2ca>
			{
				acc_service_destroy(&handle);
 8000f1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f008 fbaa 	bl	8009678 <acc_service_destroy>

				status = sensor_calibration();
 8000f24:	f000 f8c3 	bl	80010ae <sensor_calibration>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
			}

			if (status)
 8000f2e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00c      	beq.n	8000f50 <acc_ref_app_parking+0x2ec>
			{
				handle = acc_service_create(configuration);
 8000f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f008 fb27 	bl	800958c <acc_service_create>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c

				status = handle != NULL;
 8000f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bf14      	ite	ne
 8000f48:	2301      	movne	r3, #1
 8000f4a:	2300      	moveq	r3, #0
 8000f4c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
			}

			if (status)
 8000f50:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <acc_ref_app_parking+0x302>
			{
				status = acc_service_activate(handle);
 8000f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f008 fdcc 	bl	8009af8 <acc_service_activate>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
			}

			last_calibration_ms = hal->os.gettime();
 8000f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	4798      	blx	r3
 8000f6c:	6578      	str	r0, [r7, #84]	; 0x54

			if (status)
 8000f6e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00e      	beq.n	8000f94 <acc_ref_app_parking+0x330>
			{
				status         = acc_service_envelope_get_next_by_reference(handle, &data, &result_info);
 8000f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000f7c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f80:	4618      	mov	r0, r3
 8000f82:	f008 faa1 	bl	80094c8 <acc_service_envelope_get_next_by_reference>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
				last_update_ms = hal->os.gettime();
 8000f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	4798      	blx	r3
 8000f92:	65f8      	str	r0, [r7, #92]	; 0x5c
			}
		}

		if (status)
 8000f94:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d02f      	beq.n	8000ffc <acc_ref_app_parking+0x398>
		{
			bool detection = parking_detection(&metadata, leak_sample_index, leak_end_index, observations, &observation_count, data);
 8000f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9e:	f107 040c 	add.w	r4, r7, #12
 8000fa2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8000fa6:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8000faa:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	f107 030a 	add.w	r3, r7, #10
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	f000 f8c8 	bl	800114c <parking_detection>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

			if (sweep_index < DETECTION_OBSERVATION_COUNT - 1)
 8000fc2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d806      	bhi.n	8000fd8 <acc_ref_app_parking+0x374>
			{
				printf("%" PRIu16 ": No result\n", sweep_index);
 8000fca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4819      	ldr	r0, [pc, #100]	; (8001038 <acc_ref_app_parking+0x3d4>)
 8000fd2:	f011 ff95 	bl	8012f00 <iprintf>
 8000fd6:	e00c      	b.n	8000ff2 <acc_ref_app_parking+0x38e>
			}
			else
			{
				printf("%" PRIu16 ": %s\n", sweep_index, detection ? "Car" : "No car");
 8000fd8:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 8000fdc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <acc_ref_app_parking+0x384>
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <acc_ref_app_parking+0x3d8>)
 8000fe6:	e000      	b.n	8000fea <acc_ref_app_parking+0x386>
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <acc_ref_app_parking+0x3dc>)
 8000fea:	461a      	mov	r2, r3
 8000fec:	4815      	ldr	r0, [pc, #84]	; (8001044 <acc_ref_app_parking+0x3e0>)
 8000fee:	f011 ff87 	bl	8012f00 <iprintf>
			}

			sweep_index++;
 8000ff2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	while (status)
 8000ffc:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001000:	2b00      	cmp	r3, #0
 8001002:	f47f aef6 	bne.w	8000df2 <acc_ref_app_parking+0x18e>
		}
	}

	acc_service_envelope_configuration_destroy(&configuration);
 8001006:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800100a:	4618      	mov	r0, r3
 800100c:	f008 f9dc 	bl	80093c8 <acc_service_envelope_configuration_destroy>
	acc_service_deactivate(handle);
 8001010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001012:	4618      	mov	r0, r3
 8001014:	f008 fdc0 	bl	8009b98 <acc_service_deactivate>
	acc_service_destroy(&handle);
 8001018:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800101c:	4618      	mov	r0, r3
 800101e:	f008 fb2b 	bl	8009678 <acc_service_destroy>
	acc_rss_deactivate();
 8001022:	f008 f82f 	bl	8009084 <acc_rss_deactivate>

	return status ? EXIT_SUCCESS : EXIT_FAILURE;
 8001026:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800102a:	f083 0301 	eor.w	r3, r3, #1
 800102e:	b2db      	uxtb	r3, r3
}
 8001030:	4618      	mov	r0, r3
 8001032:	3764      	adds	r7, #100	; 0x64
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	080144b4 	.word	0x080144b4
 800103c:	080144c4 	.word	0x080144c4
 8001040:	080144c8 	.word	0x080144c8
 8001044:	080144d0 	.word	0x080144d0

08001048 <service_recreate>:


bool service_recreate(const acc_service_configuration_t configuration, acc_service_handle_t *handle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	if (!acc_service_deactivate(*handle))
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f008 fd9e 	bl	8009b98 <acc_service_deactivate>
 800105c:	4603      	mov	r3, r0
 800105e:	f083 0301 	eor.w	r3, r3, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <service_recreate+0x24>
	{
		return false;
 8001068:	2300      	movs	r3, #0
 800106a:	e01c      	b.n	80010a6 <service_recreate+0x5e>
	}

	acc_service_destroy(handle);
 800106c:	6838      	ldr	r0, [r7, #0]
 800106e:	f008 fb03 	bl	8009678 <acc_service_destroy>

	*handle = acc_service_create(configuration);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f008 fa8a 	bl	800958c <acc_service_create>
 8001078:	4602      	mov	r2, r0
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	601a      	str	r2, [r3, #0]

	if (*handle == NULL)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <service_recreate+0x42>
	{
		return false;
 8001086:	2300      	movs	r3, #0
 8001088:	e00d      	b.n	80010a6 <service_recreate+0x5e>
	}

	if (!acc_service_activate(*handle))
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f008 fd32 	bl	8009af8 <acc_service_activate>
 8001094:	4603      	mov	r3, r0
 8001096:	f083 0301 	eor.w	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <service_recreate+0x5c>
	{
		return false;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e000      	b.n	80010a6 <service_recreate+0x5e>
	}

	return true;
 80010a4:	2301      	movs	r3, #1
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <sensor_calibration>:


bool sensor_calibration(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b090      	sub	sp, #64	; 0x40
 80010b2:	af00      	add	r7, sp, #0
	acc_calibration_context_t calibration_context;

	if (!acc_rss_calibration_context_get(SENSOR_ID, &calibration_context))
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	2001      	movs	r0, #1
 80010ba:	f007 ff85 	bl	8008fc8 <acc_rss_calibration_context_get>
 80010be:	4603      	mov	r3, r0
 80010c0:	f083 0301 	eor.w	r3, r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <sensor_calibration+0x20>
	{
		return false;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e00d      	b.n	80010ea <sensor_calibration+0x3c>
	}

	if (!acc_rss_calibration_context_forced_set(SENSOR_ID, &calibration_context))
 80010ce:	463b      	mov	r3, r7
 80010d0:	4619      	mov	r1, r3
 80010d2:	2001      	movs	r0, #1
 80010d4:	f007 ff92 	bl	8008ffc <acc_rss_calibration_context_forced_set>
 80010d8:	4603      	mov	r3, r0
 80010da:	f083 0301 	eor.w	r3, r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <sensor_calibration+0x3a>
	{
		return false;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e000      	b.n	80010ea <sensor_calibration+0x3c>
	}

	return true;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3740      	adds	r7, #64	; 0x40
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <configure_service>:


void configure_service(acc_service_configuration_t configuration)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	acc_service_sensor_set(configuration, SENSOR_ID);
 80010fc:	2101      	movs	r1, #1
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f008 fd94 	bl	8009c2c <acc_service_sensor_set>
	acc_service_requested_start_set(configuration, RANGE_START_M);
 8001104:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001144 <configure_service+0x50>
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f008 fda1 	bl	8009c50 <acc_service_requested_start_set>
	acc_service_requested_length_set(configuration, RANGE_LENGTH_M);
 800110e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f008 fdac 	bl	8009c70 <acc_service_requested_length_set>
	acc_service_envelope_downsampling_factor_set(configuration, SERVICE_DOWNSAMPLING);
 8001118:	2102      	movs	r1, #2
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f008 f966 	bl	80093ec <acc_service_envelope_downsampling_factor_set>
	acc_service_hw_accelerated_average_samples_set(configuration, SERVICE_HWAAS);
 8001120:	2114      	movs	r1, #20
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f008 fdde 	bl	8009ce4 <acc_service_hw_accelerated_average_samples_set>
	acc_service_envelope_running_average_factor_set(configuration, RUNNING_AVERAGE_FACTOR);
 8001128:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001148 <configure_service+0x54>
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f008 f96b 	bl	8009408 <acc_service_envelope_running_average_factor_set>
	acc_service_power_save_mode_set(configuration, POWER_SAVE_MODE);
 8001132:	2100      	movs	r1, #0
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f008 fdb3 	bl	8009ca0 <acc_service_power_save_mode_set>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	3df5c28f 	.word	0x3df5c28f
 8001148:	00000000 	.word	0x00000000

0800114c <parking_detection>:


bool parking_detection(const acc_service_envelope_metadata_t *metadata, uint16_t leak_sample_index,
                       uint16_t leak_end_index, sweep_observable_t *observations, uint16_t *observation_count,
                       const uint16_t *data)
{
 800114c:	b480      	push	{r7}
 800114e:	b097      	sub	sp, #92	; 0x5c
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	460b      	mov	r3, r1
 8001158:	817b      	strh	r3, [r7, #10]
 800115a:	4613      	mov	r3, r2
 800115c:	813b      	strh	r3, [r7, #8]
	float    weight_sum     = 0.0f;
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	657b      	str	r3, [r7, #84]	; 0x54
	float    weight_sum_r   = 0.0f;
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	653b      	str	r3, [r7, #80]	; 0x50
	float    leak_start     = 0.0f;
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t leak_amplitude = MAX_LEAK_AMPLITUDE < data[leak_sample_index] ? MAX_LEAK_AMPLITUDE : data[leak_sample_index];
 8001170:	897b      	ldrh	r3, [r7, #10]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001176:	4413      	add	r3, r2
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800117e:	bf28      	it	cs
 8001180:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 8001184:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t a_leak         = leak_amplitude < ENVELOPE_BACKGROUND_LEVEL ? 0 : leak_amplitude - ENVELOPE_BACKGROUND_LEVEL;
 8001186:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001188:	2b64      	cmp	r3, #100	; 0x64
 800118a:	bf38      	it	cc
 800118c:	2364      	movcc	r3, #100	; 0x64
 800118e:	b29b      	uxth	r3, r3
 8001190:	3b64      	subs	r3, #100	; 0x64
 8001192:	853b      	strh	r3, [r7, #40]	; 0x28
	float    leak_step      = ((float)(a_leak) / (leak_end_index - leak_sample_index));
 8001194:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800119e:	893a      	ldrh	r2, [r7, #8]
 80011a0:	897b      	ldrh	r3, [r7, #10]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	leak_start = leak_end_index * leak_step + ENVELOPE_BACKGROUND_LEVEL;
 80011b4:	893b      	ldrh	r3, [r7, #8]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c6:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 80014dc <parking_detection+0x390>
 80011ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	for (uint16_t i = 0; i < metadata->data_length; i++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80011d8:	e083      	b.n	80012e2 <parking_detection+0x196>
	{
		float r  = metadata->start_m + i * metadata->step_length_m;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	ed93 7a00 	vldr	s14, [r3]
 80011e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80011f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fa:	edc7 7a07 	vstr	s15, [r7, #28]
		float bg = 0.0f;
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i <= leak_end_index)
 8001204:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001208:	893b      	ldrh	r3, [r7, #8]
 800120a:	429a      	cmp	r2, r3
 800120c:	d810      	bhi.n	8001230 <parking_detection+0xe4>
		{
			bg = leak_start - i * leak_step;
 800120e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800121e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001222:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 800122e:	e001      	b.n	8001234 <parking_detection+0xe8>
		}
		else
		{
			bg = ENVELOPE_BACKGROUND_LEVEL;
 8001230:	4bab      	ldr	r3, [pc, #684]	; (80014e0 <parking_detection+0x394>)
 8001232:	64bb      	str	r3, [r7, #72]	; 0x48
		}

		float sweep_above_bg = data[i] - bg;
 8001234:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800123c:	4413      	add	r3, r2
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001248:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800124c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001250:	edc7 7a06 	vstr	s15, [r7, #24]
		sweep_above_bg = sweep_above_bg > 0.0f ? sweep_above_bg : 0.0f;
 8001254:	edd7 7a06 	vldr	s15, [r7, #24]
 8001258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	dd01      	ble.n	8001266 <parking_detection+0x11a>
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	e001      	b.n	800126a <parking_detection+0x11e>
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]

		float weight = sweep_above_bg / ENVELOPE_BACKGROUND_LEVEL;
 800126c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001270:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80014dc <parking_detection+0x390>
 8001274:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001278:	edc7 7a05 	vstr	s15, [r7, #20]
		weight = weight < 1.0f ? weight : 1.0f;
 800127c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001280:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	d501      	bpl.n	8001292 <parking_detection+0x146>
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	e001      	b.n	8001296 <parking_detection+0x14a>
 8001292:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001296:	617b      	str	r3, [r7, #20]
		weight = weight * sweep_above_bg * r;
 8001298:	ed97 7a05 	vldr	s14, [r7, #20]
 800129c:	edd7 7a06 	vldr	s15, [r7, #24]
 80012a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80012a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ac:	edc7 7a05 	vstr	s15, [r7, #20]

		weight_sum   += weight;
 80012b0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80012b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012bc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		weight_sum_r += weight * r;
 80012c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80012c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80012c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012cc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80012d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	for (uint16_t i = 0; i < metadata->data_length; i++)
 80012d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012dc:	3301      	adds	r3, #1
 80012de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	891b      	ldrh	r3, [r3, #8]
 80012e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80012ea:	429a      	cmp	r2, r3
 80012ec:	f4ff af75 	bcc.w	80011da <parking_detection+0x8e>
	}

	if (*observation_count == DETECTION_OBSERVATION_COUNT)
 80012f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d12b      	bne.n	8001350 <parking_detection+0x204>
	{
		for (uint16_t i = 1; i < DETECTION_OBSERVATION_COUNT; i++)
 80012f8:	2301      	movs	r3, #1
 80012fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80012fe:	e022      	b.n	8001346 <parking_detection+0x1fa>
		{
			observations[i - 1].weight   = observations[i].weight;
 8001300:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	441a      	add	r2, r3
 800130a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800130e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001312:	3b01      	subs	r3, #1
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	440b      	add	r3, r1
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	601a      	str	r2, [r3, #0]
			observations[i - 1].distance = observations[i].distance;
 800131e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	441a      	add	r2, r3
 8001328:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800132c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001330:	3b01      	subs	r3, #1
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	440b      	add	r3, r1
 8001338:	6852      	ldr	r2, [r2, #4]
 800133a:	605a      	str	r2, [r3, #4]
		for (uint16_t i = 1; i < DETECTION_OBSERVATION_COUNT; i++)
 800133c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001340:	3301      	adds	r3, #1
 8001342:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001346:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800134a:	2b02      	cmp	r3, #2
 800134c:	d9d8      	bls.n	8001300 <parking_detection+0x1b4>
 800134e:	e005      	b.n	800135c <parking_detection+0x210>
		}
	}
	else
	{
		(*observation_count)++;
 8001350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	b29a      	uxth	r2, r3
 8001358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800135a:	801a      	strh	r2, [r3, #0]
	}

	observations[*observation_count - 1].weight   = weight_sum / metadata->data_length;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	891b      	ldrh	r3, [r3, #8]
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001370:	3b01      	subs	r3, #1
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800137c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001380:	edc3 7a00 	vstr	s15, [r3]
	observations[*observation_count - 1].distance = weight_sum_r / weight_sum;
 8001384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800138c:	3b01      	subs	r3, #1
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001398:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800139c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a0:	edc3 7a01 	vstr	s15, [r3, #4]

	float weight_min   = __FLT_MAX__;
 80013a4:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <parking_detection+0x398>)
 80013a6:	643b      	str	r3, [r7, #64]	; 0x40
	float weight_max   = 0.0f;
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	float distance_min = __FLT_MAX__;
 80013ae:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <parking_detection+0x398>)
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
	float distance_max = 0.0f;
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34

	for (uint16_t i = 0; i < *observation_count; i++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	867b      	strh	r3, [r7, #50]	; 0x32
 80013bc:	e04e      	b.n	800145c <parking_detection+0x310>
	{
		if (weight_min > observations[i].weight)
 80013be:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80013ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d6:	dd05      	ble.n	80013e4 <parking_detection+0x298>
		{
			weight_min = observations[i].weight;
 80013d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (weight_max < observations[i].weight)
 80013e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80013f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	d505      	bpl.n	800140a <parking_detection+0x2be>
		{
			weight_max = observations[i].weight;
 80013fe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		if (distance_min > observations[i].distance)
 800140a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	edd3 7a01 	vldr	s15, [r3, #4]
 8001416:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800141a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001422:	dd05      	ble.n	8001430 <parking_detection+0x2e4>
		{
			distance_min = observations[i].distance;
 8001424:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (distance_max < observations[i].distance)
 8001430:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	edd3 7a01 	vldr	s15, [r3, #4]
 800143c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001448:	d505      	bpl.n	8001456 <parking_detection+0x30a>
		{
			distance_max = observations[i].distance;
 800144a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
	for (uint16_t i = 0; i < *observation_count; i++)
 8001456:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001458:	3301      	adds	r3, #1
 800145a:	867b      	strh	r3, [r7, #50]	; 0x32
 800145c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001462:	429a      	cmp	r2, r3
 8001464:	d3ab      	bcc.n	80013be <parking_detection+0x272>
		}
	}

	bool detection = *observation_count == DETECTION_OBSERVATION_COUNT &&
 8001466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001468:	881b      	ldrh	r3, [r3, #0]
	                 weight_min >= DETECTION_WEIGHT_THRESHOLD &&
	                 weight_max / weight_min <= DETECTION_WEIGHT_RATIO_LIMIT &&
 800146a:	2b03      	cmp	r3, #3
 800146c:	d124      	bne.n	80014b8 <parking_detection+0x36c>
	bool detection = *observation_count == DETECTION_OBSERVATION_COUNT &&
 800146e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001472:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	db1b      	blt.n	80014b8 <parking_detection+0x36c>
	                 weight_max / weight_min <= DETECTION_WEIGHT_RATIO_LIMIT &&
 8001480:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001484:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001488:	eec6 7a87 	vdiv.f32	s15, s13, s14
	                 weight_min >= DETECTION_WEIGHT_THRESHOLD &&
 800148c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	d80e      	bhi.n	80014b8 <parking_detection+0x36c>
	                 distance_max - distance_min <= DETECTION_DISPLACEMENT_LIMIT;
 800149a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800149e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80014a2:	ee77 7a67 	vsub.f32	s15, s14, s15
	                 weight_max / weight_min <= DETECTION_WEIGHT_RATIO_LIMIT &&
 80014a6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80014e8 <parking_detection+0x39c>
 80014aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	d801      	bhi.n	80014b8 <parking_detection+0x36c>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <parking_detection+0x36e>
 80014b8:	2300      	movs	r3, #0
	bool detection = *observation_count == DETECTION_OBSERVATION_COUNT &&
 80014ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80014be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	return detection;
 80014ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	375c      	adds	r7, #92	; 0x5c
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	42c80000 	.word	0x42c80000
 80014e0:	42c80000 	.word	0x42c80000
 80014e4:	7f7fffff 	.word	0x7f7fffff
 80014e8:	3dcccccd 	.word	0x3dcccccd

080014ec <set_default_configuration>:
 * @brief Set default values in presence configuration
 *
 * @param[in] presence_configuration The presence configuration to set default values in
 */
static void set_default_configuration(acc_detector_presence_configuration_t presence_configuration)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	acc_detector_presence_configuration_sensor_set(presence_configuration, DEFAULT_SENSOR_ID);
 80014f4:	2101      	movs	r1, #1
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f005 fd3e 	bl	8006f78 <acc_detector_presence_configuration_sensor_set>

	acc_detector_presence_configuration_update_rate_set(presence_configuration, DEFAULT_UPDATE_RATE_WAKEUP);
 80014fc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f005 fd65 	bl	8006fd0 <acc_detector_presence_configuration_update_rate_set>
	acc_detector_presence_configuration_detection_threshold_set(presence_configuration, DEFAULT_THRESHOLD);
 8001506:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f005 fd4a 	bl	8006fa4 <acc_detector_presence_configuration_detection_threshold_set>

	acc_detector_presence_configuration_start_set(presence_configuration, DEFAULT_START_M);
 8001510:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800154c <set_default_configuration+0x60>
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f005 fd03 	bl	8006f20 <acc_detector_presence_configuration_start_set>
	acc_detector_presence_configuration_length_set(presence_configuration, DEFAULT_LENGTH_M);
 800151a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f005 fd14 	bl	8006f4c <acc_detector_presence_configuration_length_set>

	acc_detector_presence_configuration_filter_parameters_t filter = acc_detector_presence_configuration_filter_parameters_get(
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	f005 fd66 	bl	8006ffc <acc_detector_presence_configuration_filter_parameters_get>
		presence_configuration);

	filter.output_time_const = 0.0f;
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
	acc_detector_presence_configuration_filter_parameters_set(presence_configuration, &filter);
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	4619      	mov	r1, r3
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f005 fd87 	bl	8007050 <acc_detector_presence_configuration_filter_parameters_set>
}
 8001542:	bf00      	nop
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	3e3851ec 	.word	0x3e3851ec

08001550 <execute_wakeup>:
 * @brief Use the presence detector to detect movement with low power
 *
 * @param[in] handle The presence detector handle
 */
static bool execute_wakeup(acc_detector_presence_handle_t handle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	acc_detector_presence_result_t result;

	if (!acc_detector_presence_activate(handle))
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f005 fc5f 	bl	8006e1c <acc_detector_presence_activate>
 800155e:	4603      	mov	r3, r0
 8001560:	f083 0301 	eor.w	r3, r3, #1
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d004      	beq.n	8001574 <execute_wakeup+0x24>
	{
		printf("Failed to activate detector\n");
 800156a:	4827      	ldr	r0, [pc, #156]	; (8001608 <execute_wakeup+0xb8>)
 800156c:	f011 fd4e 	bl	801300c <puts>
		return false;
 8001570:	2300      	movs	r3, #0
 8001572:	e045      	b.n	8001600 <execute_wakeup+0xb0>
	}

	do
	{
		if (!acc_detector_presence_get_next(handle, &result))
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4619      	mov	r1, r3
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f005 fc90 	bl	8006ea0 <acc_detector_presence_get_next>
 8001580:	4603      	mov	r3, r0
 8001582:	f083 0301 	eor.w	r3, r3, #1
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d004      	beq.n	8001596 <execute_wakeup+0x46>
		{
			printf("Failed to get data from sensor\n");
 800158c:	481f      	ldr	r0, [pc, #124]	; (800160c <execute_wakeup+0xbc>)
 800158e:	f011 fd3d 	bl	801300c <puts>
			return false;
 8001592:	2300      	movs	r3, #0
 8001594:	e034      	b.n	8001600 <execute_wakeup+0xb0>
		}

		acc_integration_sleep_ms(1000 / DEFAULT_UPDATE_RATE_WAKEUP);
 8001596:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800159a:	f7ff f9b5 	bl	8000908 <acc_integration_sleep_ms>
	} while (!result.presence_detected);
 800159e:	7b3b      	ldrb	r3, [r7, #12]
 80015a0:	f083 0301 	eor.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1e4      	bne.n	8001574 <execute_wakeup+0x24>

	uint32_t detected_zone = (uint32_t)((float)(result.presence_distance - DEFAULT_START_M) / (float)DEFAULT_ZONE_LENGTH);
 80015aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001610 <execute_wakeup+0xc0>
 80015b2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015b6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001614 <execute_wakeup+0xc4>
 80015ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c2:	ee17 3a90 	vmov	r3, s15
 80015c6:	61fb      	str	r3, [r7, #28]
	printf("Motion in zone: %u, distance: %d, score: %d\n", (unsigned int)detected_zone, (int)(result.presence_distance * 1000.0f),
 80015c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80015cc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001618 <execute_wakeup+0xc8>
 80015d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	       (int)(result.presence_score * 1000.0f));
 80015d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015dc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001618 <execute_wakeup+0xc8>
 80015e0:	ee67 7a87 	vmul.f32	s15, s15, s14
	printf("Motion in zone: %u, distance: %d, score: %d\n", (unsigned int)detected_zone, (int)(result.presence_distance * 1000.0f),
 80015e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e8:	ee17 3a90 	vmov	r3, s15
 80015ec:	ee16 2a90 	vmov	r2, s13
 80015f0:	69f9      	ldr	r1, [r7, #28]
 80015f2:	480a      	ldr	r0, [pc, #40]	; (800161c <execute_wakeup+0xcc>)
 80015f4:	f011 fc84 	bl	8012f00 <iprintf>

	acc_detector_presence_deactivate(handle);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f005 fc2b 	bl	8006e54 <acc_detector_presence_deactivate>

	return true;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	080144dc 	.word	0x080144dc
 800160c:	080144f8 	.word	0x080144f8
 8001610:	3e3851ec 	.word	0x3e3851ec
 8001614:	3ecccccd 	.word	0x3ecccccd
 8001618:	447a0000 	.word	0x447a0000
 800161c:	08014518 	.word	0x08014518

08001620 <execute_movement_tracking>:
 * @brief Use the presence detector to track movement in front of the sensor
 *
 * @param[in] handle The presence detector handle
 */
static bool execute_movement_tracking(acc_detector_presence_handle_t handle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	acc_detector_presence_result_t result;

	if (!acc_detector_presence_activate(handle))
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f005 fbf7 	bl	8006e1c <acc_detector_presence_activate>
 800162e:	4603      	mov	r3, r0
 8001630:	f083 0301 	eor.w	r3, r3, #1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <execute_movement_tracking+0x24>
	{
		printf("Failed to activate detector\n");
 800163a:	482d      	ldr	r0, [pc, #180]	; (80016f0 <execute_movement_tracking+0xd0>)
 800163c:	f011 fce6 	bl	801300c <puts>
		return false;
 8001640:	2300      	movs	r3, #0
 8001642:	e051      	b.n	80016e8 <execute_movement_tracking+0xc8>
	}

	do
	{
		if (!acc_detector_presence_get_next(handle, &result))
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4619      	mov	r1, r3
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f005 fc28 	bl	8006ea0 <acc_detector_presence_get_next>
 8001650:	4603      	mov	r3, r0
 8001652:	f083 0301 	eor.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d004      	beq.n	8001666 <execute_movement_tracking+0x46>
		{
			printf("Failed to get data from sensor\n");
 800165c:	4825      	ldr	r0, [pc, #148]	; (80016f4 <execute_movement_tracking+0xd4>)
 800165e:	f011 fcd5 	bl	801300c <puts>
			return false;
 8001662:	2300      	movs	r3, #0
 8001664:	e040      	b.n	80016e8 <execute_movement_tracking+0xc8>
		}

		if (result.presence_detected)
 8001666:	7b3b      	ldrb	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d026      	beq.n	80016ba <execute_movement_tracking+0x9a>
		{
			uint32_t detected_zone = (uint32_t)((float)(result.presence_distance - DEFAULT_START_M) / (float)DEFAULT_ZONE_LENGTH);
 800166c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001670:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80016f8 <execute_movement_tracking+0xd8>
 8001674:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001678:	eddf 6a20 	vldr	s13, [pc, #128]	; 80016fc <execute_movement_tracking+0xdc>
 800167c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001684:	ee17 3a90 	vmov	r3, s15
 8001688:	61fb      	str	r3, [r7, #28]
			printf("Motion in zone: %u, distance: %d, score: %d\n", (unsigned int)detected_zone,
			       (int)(result.presence_distance * 1000.0f),
 800168a:	edd7 7a05 	vldr	s15, [r7, #20]
 800168e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001700 <execute_movement_tracking+0xe0>
 8001692:	ee67 7a87 	vmul.f32	s15, s15, s14
			printf("Motion in zone: %u, distance: %d, score: %d\n", (unsigned int)detected_zone,
 8001696:	eefd 6ae7 	vcvt.s32.f32	s13, s15
			       (int)(result.presence_score * 1000.0f));
 800169a:	edd7 7a04 	vldr	s15, [r7, #16]
 800169e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001700 <execute_movement_tracking+0xe0>
 80016a2:	ee67 7a87 	vmul.f32	s15, s15, s14
			printf("Motion in zone: %u, distance: %d, score: %d\n", (unsigned int)detected_zone,
 80016a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016aa:	ee17 3a90 	vmov	r3, s15
 80016ae:	ee16 2a90 	vmov	r2, s13
 80016b2:	69f9      	ldr	r1, [r7, #28]
 80016b4:	4813      	ldr	r0, [pc, #76]	; (8001704 <execute_movement_tracking+0xe4>)
 80016b6:	f011 fc23 	bl	8012f00 <iprintf>
		}

		acc_integration_sleep_ms(1000 / DEFAULT_UPDATE_RATE_TRACKING);
 80016ba:	2032      	movs	r0, #50	; 0x32
 80016bc:	f7ff f924 	bl	8000908 <acc_integration_sleep_ms>
	} while (result.presence_detected);
 80016c0:	7b3b      	ldrb	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1be      	bne.n	8001644 <execute_movement_tracking+0x24>

	printf("No motion, score: %d\n", (int)(result.presence_score * 1000.0f));
 80016c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001700 <execute_movement_tracking+0xe0>
 80016ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d6:	ee17 1a90 	vmov	r1, s15
 80016da:	480b      	ldr	r0, [pc, #44]	; (8001708 <execute_movement_tracking+0xe8>)
 80016dc:	f011 fc10 	bl	8012f00 <iprintf>

	acc_detector_presence_deactivate(handle);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f005 fbb7 	bl	8006e54 <acc_detector_presence_deactivate>

	return true;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	080144dc 	.word	0x080144dc
 80016f4:	080144f8 	.word	0x080144f8
 80016f8:	3e3851ec 	.word	0x3e3851ec
 80016fc:	3ecccccd 	.word	0x3ecccccd
 8001700:	447a0000 	.word	0x447a0000
 8001704:	08014518 	.word	0x08014518
 8001708:	08014548 	.word	0x08014548

0800170c <acc_ref_app_smart_presence>:

int acc_ref_app_smart_presence(int argc, char *argv[]);


int acc_ref_app_smart_presence(int argc, char *argv[])
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;
	printf("Acconeer software version %s\n", acc_version_get());
 8001716:	f008 fc85 	bl	800a024 <acc_version_get>
 800171a:	4603      	mov	r3, r0
 800171c:	4619      	mov	r1, r3
 800171e:	4865      	ldr	r0, [pc, #404]	; (80018b4 <acc_ref_app_smart_presence+0x1a8>)
 8001720:	f011 fbee 	bl	8012f00 <iprintf>

	const acc_hal_t *hal = acc_hal_integration_get_implementation();
 8001724:	f7ff f84a 	bl	80007bc <acc_hal_integration_get_implementation>
 8001728:	6178      	str	r0, [r7, #20]

	if (!acc_rss_activate(hal))
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f007 fc70 	bl	8009010 <acc_rss_activate>
 8001730:	4603      	mov	r3, r0
 8001732:	f083 0301 	eor.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <acc_ref_app_smart_presence+0x3a>
	{
		printf("Failed to activate RSS\n");
 800173c:	485e      	ldr	r0, [pc, #376]	; (80018b8 <acc_ref_app_smart_presence+0x1ac>)
 800173e:	f011 fc65 	bl	801300c <puts>
		return EXIT_FAILURE;
 8001742:	2301      	movs	r3, #1
 8001744:	e0b1      	b.n	80018aa <acc_ref_app_smart_presence+0x19e>
	}

	acc_detector_presence_configuration_t presence_configuration = acc_detector_presence_configuration_create();
 8001746:	f005 fa4f 	bl	8006be8 <acc_detector_presence_configuration_create>
 800174a:	4603      	mov	r3, r0
 800174c:	613b      	str	r3, [r7, #16]
	if (presence_configuration == NULL)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d106      	bne.n	8001762 <acc_ref_app_smart_presence+0x56>
	{
		printf("Failed to create configuration\n");
 8001754:	4859      	ldr	r0, [pc, #356]	; (80018bc <acc_ref_app_smart_presence+0x1b0>)
 8001756:	f011 fc59 	bl	801300c <puts>
		acc_rss_deactivate();
 800175a:	f007 fc93 	bl	8009084 <acc_rss_deactivate>
		return EXIT_FAILURE;
 800175e:	2301      	movs	r3, #1
 8001760:	e0a3      	b.n	80018aa <acc_ref_app_smart_presence+0x19e>
	}

	set_default_configuration(presence_configuration);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fec1 	bl	80014ec <set_default_configuration>
	acc_detector_presence_configuration_power_save_mode_set(presence_configuration, ACC_POWER_SAVE_MODE_OFF);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f005 fc90 	bl	8007094 <acc_detector_presence_configuration_power_save_mode_set>

	acc_detector_presence_handle_t handle = acc_detector_presence_create(presence_configuration);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4618      	mov	r0, r3
 8001778:	f005 faae 	bl	8006cd8 <acc_detector_presence_create>
 800177c:	4603      	mov	r3, r0
 800177e:	60fb      	str	r3, [r7, #12]
	if (handle == NULL)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d110      	bne.n	80017a8 <acc_ref_app_smart_presence+0x9c>
	{
		printf("Failed to create detector\n");
 8001786:	484e      	ldr	r0, [pc, #312]	; (80018c0 <acc_ref_app_smart_presence+0x1b4>)
 8001788:	f011 fc40 	bl	801300c <puts>
		acc_detector_presence_configuration_destroy(&presence_configuration);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4618      	mov	r0, r3
 8001792:	f005 fa7f 	bl	8006c94 <acc_detector_presence_configuration_destroy>
		acc_detector_presence_destroy(&handle);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4618      	mov	r0, r3
 800179c:	f005 fadc 	bl	8006d58 <acc_detector_presence_destroy>
		acc_rss_deactivate();
 80017a0:	f007 fc70 	bl	8009084 <acc_rss_deactivate>
		return EXIT_FAILURE;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e080      	b.n	80018aa <acc_ref_app_smart_presence+0x19e>
	}

	while (true)
	{
		if (!execute_wakeup(handle))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fed0 	bl	8001550 <execute_wakeup>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f083 0301 	eor.w	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00d      	beq.n	80017d8 <acc_ref_app_smart_presence+0xcc>
		{
			acc_detector_presence_configuration_destroy(&presence_configuration);
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4618      	mov	r0, r3
 80017c2:	f005 fa67 	bl	8006c94 <acc_detector_presence_configuration_destroy>
			acc_detector_presence_destroy(&handle);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4618      	mov	r0, r3
 80017cc:	f005 fac4 	bl	8006d58 <acc_detector_presence_destroy>
			acc_rss_deactivate();
 80017d0:	f007 fc58 	bl	8009084 <acc_rss_deactivate>
			return EXIT_FAILURE;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e068      	b.n	80018aa <acc_ref_app_smart_presence+0x19e>
		}

		acc_detector_presence_configuration_update_rate_set(presence_configuration, DEFAULT_UPDATE_RATE_TRACKING);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80017de:	4618      	mov	r0, r3
 80017e0:	f005 fbf6 	bl	8006fd0 <acc_detector_presence_configuration_update_rate_set>
		acc_detector_presence_configuration_power_save_mode_set(presence_configuration, ACC_POWER_SAVE_MODE_SLEEP);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	2101      	movs	r1, #1
 80017e8:	4618      	mov	r0, r3
 80017ea:	f005 fc53 	bl	8007094 <acc_detector_presence_configuration_power_save_mode_set>

		if (!acc_detector_presence_reconfigure(&handle, presence_configuration))
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 fad2 	bl	8006da0 <acc_detector_presence_reconfigure>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f083 0301 	eor.w	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d010      	beq.n	800182a <acc_ref_app_smart_presence+0x11e>
		{
			printf("Failed to reconfigure detector\n");
 8001808:	482e      	ldr	r0, [pc, #184]	; (80018c4 <acc_ref_app_smart_presence+0x1b8>)
 800180a:	f011 fbff 	bl	801300c <puts>
			acc_detector_presence_configuration_destroy(&presence_configuration);
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	4618      	mov	r0, r3
 8001814:	f005 fa3e 	bl	8006c94 <acc_detector_presence_configuration_destroy>
			acc_detector_presence_destroy(&handle);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4618      	mov	r0, r3
 800181e:	f005 fa9b 	bl	8006d58 <acc_detector_presence_destroy>
			acc_rss_deactivate();
 8001822:	f007 fc2f 	bl	8009084 <acc_rss_deactivate>
			return EXIT_FAILURE;
 8001826:	2301      	movs	r3, #1
 8001828:	e03f      	b.n	80018aa <acc_ref_app_smart_presence+0x19e>
		}

		if (!execute_movement_tracking(handle))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fef7 	bl	8001620 <execute_movement_tracking>
 8001832:	4603      	mov	r3, r0
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00d      	beq.n	800185a <acc_ref_app_smart_presence+0x14e>
		{
			acc_detector_presence_configuration_destroy(&presence_configuration);
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	4618      	mov	r0, r3
 8001844:	f005 fa26 	bl	8006c94 <acc_detector_presence_configuration_destroy>
			acc_detector_presence_destroy(&handle);
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4618      	mov	r0, r3
 800184e:	f005 fa83 	bl	8006d58 <acc_detector_presence_destroy>
			acc_rss_deactivate();
 8001852:	f007 fc17 	bl	8009084 <acc_rss_deactivate>
			return EXIT_FAILURE;
 8001856:	2301      	movs	r3, #1
 8001858:	e027      	b.n	80018aa <acc_ref_app_smart_presence+0x19e>
		}

		acc_detector_presence_configuration_update_rate_set(presence_configuration, DEFAULT_UPDATE_RATE_WAKEUP);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001860:	4618      	mov	r0, r3
 8001862:	f005 fbb5 	bl	8006fd0 <acc_detector_presence_configuration_update_rate_set>
		acc_detector_presence_configuration_power_save_mode_set(presence_configuration, ACC_POWER_SAVE_MODE_OFF);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f005 fc12 	bl	8007094 <acc_detector_presence_configuration_power_save_mode_set>

		if (!acc_detector_presence_reconfigure(&handle, presence_configuration))
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f005 fa91 	bl	8006da0 <acc_detector_presence_reconfigure>
 800187e:	4603      	mov	r3, r0
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d08e      	beq.n	80017a8 <acc_ref_app_smart_presence+0x9c>
		{
			printf("Failed to reconfigure detector\n");
 800188a:	480e      	ldr	r0, [pc, #56]	; (80018c4 <acc_ref_app_smart_presence+0x1b8>)
 800188c:	f011 fbbe 	bl	801300c <puts>
			acc_detector_presence_configuration_destroy(&presence_configuration);
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4618      	mov	r0, r3
 8001896:	f005 f9fd 	bl	8006c94 <acc_detector_presence_configuration_destroy>
			acc_detector_presence_destroy(&handle);
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	4618      	mov	r0, r3
 80018a0:	f005 fa5a 	bl	8006d58 <acc_detector_presence_destroy>
			acc_rss_deactivate();
 80018a4:	f007 fbee 	bl	8009084 <acc_rss_deactivate>
			return EXIT_FAILURE;
 80018a8:	2301      	movs	r3, #1
	}

	// We will never exit so no need to destroy the configuration or detector

	return EXIT_SUCCESS;
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	08014560 	.word	0x08014560
 80018b8:	08014580 	.word	0x08014580
 80018bc:	08014598 	.word	0x08014598
 80018c0:	080145b8 	.word	0x080145b8
 80018c4:	080145d4 	.word	0x080145d4

080018c8 <acc_ref_app_tank_level>:

int acc_ref_app_tank_level(int argc, char *argv[]);


int acc_ref_app_tank_level(int argc, char *argv[])
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;
	printf("Acconeer software version %s\n", acc_version_get());
 80018d2:	f008 fba7 	bl	800a024 <acc_version_get>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4619      	mov	r1, r3
 80018da:	4873      	ldr	r0, [pc, #460]	; (8001aa8 <acc_ref_app_tank_level+0x1e0>)
 80018dc:	f011 fb10 	bl	8012f00 <iprintf>

	const acc_hal_t *hal = acc_hal_integration_get_implementation();
 80018e0:	f7fe ff6c 	bl	80007bc <acc_hal_integration_get_implementation>
 80018e4:	61b8      	str	r0, [r7, #24]

	if (!acc_rss_activate(hal))
 80018e6:	69b8      	ldr	r0, [r7, #24]
 80018e8:	f007 fb92 	bl	8009010 <acc_rss_activate>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f083 0301 	eor.w	r3, r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d004      	beq.n	8001902 <acc_ref_app_tank_level+0x3a>
	{
		printf("Failed to activate RSS\n");
 80018f8:	486c      	ldr	r0, [pc, #432]	; (8001aac <acc_ref_app_tank_level+0x1e4>)
 80018fa:	f011 fb87 	bl	801300c <puts>
		return EXIT_FAILURE;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0cd      	b.n	8001a9e <acc_ref_app_tank_level+0x1d6>
	}

	acc_detector_distance_configuration_t distance_configuration = acc_detector_distance_configuration_create();
 8001902:	f004 f9f5 	bl	8005cf0 <acc_detector_distance_configuration_create>
 8001906:	4603      	mov	r3, r0
 8001908:	617b      	str	r3, [r7, #20]

	if (distance_configuration == NULL)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d106      	bne.n	800191e <acc_ref_app_tank_level+0x56>
	{
		printf("Failed to create detector configuration\n");
 8001910:	4867      	ldr	r0, [pc, #412]	; (8001ab0 <acc_ref_app_tank_level+0x1e8>)
 8001912:	f011 fb7b 	bl	801300c <puts>
		acc_rss_deactivate();
 8001916:	f007 fbb5 	bl	8009084 <acc_rss_deactivate>
		return EXIT_FAILURE;
 800191a:	2301      	movs	r3, #1
 800191c:	e0bf      	b.n	8001a9e <acc_ref_app_tank_level+0x1d6>
	}

	acc_detector_distance_handle_t distance_handle = acc_detector_distance_create(distance_configuration);
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	4618      	mov	r0, r3
 8001922:	f004 fa5f 	bl	8005de4 <acc_detector_distance_create>
 8001926:	4603      	mov	r3, r0
 8001928:	613b      	str	r3, [r7, #16]

	if (distance_handle == NULL)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10b      	bne.n	8001948 <acc_ref_app_tank_level+0x80>
	{
		printf("Failed to create detector\n");
 8001930:	4860      	ldr	r0, [pc, #384]	; (8001ab4 <acc_ref_app_tank_level+0x1ec>)
 8001932:	f011 fb6b 	bl	801300c <puts>
		acc_detector_distance_configuration_destroy(&distance_configuration);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4618      	mov	r0, r3
 800193c:	f004 fa30 	bl	8005da0 <acc_detector_distance_configuration_destroy>
		acc_rss_deactivate();
 8001940:	f007 fba0 	bl	8009084 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8001944:	2301      	movs	r3, #1
 8001946:	e0aa      	b.n	8001a9e <acc_ref_app_tank_level+0x1d6>
	}

	if (!record_backgrounds(&distance_handle, distance_configuration))
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fa35 	bl	8001dc0 <record_backgrounds>
 8001956:	4603      	mov	r3, r0
 8001958:	f083 0301 	eor.w	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d010      	beq.n	8001984 <acc_ref_app_tank_level+0xbc>
	{
		printf("Failed to calibrate detector\n");
 8001962:	4855      	ldr	r0, [pc, #340]	; (8001ab8 <acc_ref_app_tank_level+0x1f0>)
 8001964:	f011 fb52 	bl	801300c <puts>
		acc_detector_distance_configuration_destroy(&distance_configuration);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4618      	mov	r0, r3
 800196e:	f004 fa17 	bl	8005da0 <acc_detector_distance_configuration_destroy>
		acc_detector_distance_destroy(&distance_handle);
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fa80 	bl	8005e7c <acc_detector_distance_destroy>
		acc_rss_deactivate();
 800197c:	f007 fb82 	bl	8009084 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8001980:	2301      	movs	r3, #1
 8001982:	e08c      	b.n	8001a9e <acc_ref_app_tank_level+0x1d6>
	}

	// If there is a long time between measurements it is good to calibrate the sensor
	// before each measurement
	acc_detector_distance_destroy(&distance_handle);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fa77 	bl	8005e7c <acc_detector_distance_destroy>

	if (!sensor_calibration())
 800198e:	f000 f8a5 	bl	8001adc <sensor_calibration>
 8001992:	4603      	mov	r3, r0
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <acc_ref_app_tank_level+0xe0>
	{
		printf("Failed to calibrate sensor\n");
 800199e:	4847      	ldr	r0, [pc, #284]	; (8001abc <acc_ref_app_tank_level+0x1f4>)
 80019a0:	f011 fb34 	bl	801300c <puts>
		return EXIT_FAILURE;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e07a      	b.n	8001a9e <acc_ref_app_tank_level+0x1d6>
	}

	distance_handle = acc_detector_distance_create(distance_configuration);
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 fa1a 	bl	8005de4 <acc_detector_distance_create>
 80019b0:	4603      	mov	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]

	bool status = true;
 80019b4:	2301      	movs	r3, #1
 80019b6:	77fb      	strb	r3, [r7, #31]

	while (status)
 80019b8:	e05e      	b.n	8001a78 <acc_ref_app_tank_level+0x1b0>
	{
		float distance          = 0.0f;
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
		bool  distance_detected = false;
 80019c0:	2300      	movs	r3, #0
 80019c2:	72fb      	strb	r3, [r7, #11]

		printf("Measure close range\n");
 80019c4:	483e      	ldr	r0, [pc, #248]	; (8001ac0 <acc_ref_app_tank_level+0x1f8>)
 80019c6:	f011 fb21 	bl	801300c <puts>
		status = measure_close_range(&distance_handle, distance_configuration, &distance_detected, &distance);
 80019ca:	6979      	ldr	r1, [r7, #20]
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	f107 020b 	add.w	r2, r7, #11
 80019d4:	f107 0010 	add.w	r0, r7, #16
 80019d8:	f000 fafc 	bl	8001fd4 <measure_close_range>
 80019dc:	4603      	mov	r3, r0
 80019de:	77fb      	strb	r3, [r7, #31]
		if (status && !distance_detected)
 80019e0:	7ffb      	ldrb	r3, [r7, #31]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d013      	beq.n	8001a0e <acc_ref_app_tank_level+0x146>
 80019e6:	7afb      	ldrb	r3, [r7, #11]
 80019e8:	f083 0301 	eor.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00d      	beq.n	8001a0e <acc_ref_app_tank_level+0x146>
		{
			printf("Measure mid range\n");
 80019f2:	4834      	ldr	r0, [pc, #208]	; (8001ac4 <acc_ref_app_tank_level+0x1fc>)
 80019f4:	f011 fb0a 	bl	801300c <puts>
			status = measure_mid_range(&distance_handle, distance_configuration, &distance_detected, &distance);
 80019f8:	6979      	ldr	r1, [r7, #20]
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	f107 020b 	add.w	r2, r7, #11
 8001a02:	f107 0010 	add.w	r0, r7, #16
 8001a06:	f000 fb2f 	bl	8002068 <measure_mid_range>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	77fb      	strb	r3, [r7, #31]
		}

		if (status && !distance_detected)
 8001a0e:	7ffb      	ldrb	r3, [r7, #31]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <acc_ref_app_tank_level+0x174>
 8001a14:	7afb      	ldrb	r3, [r7, #11]
 8001a16:	f083 0301 	eor.w	r3, r3, #1
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00d      	beq.n	8001a3c <acc_ref_app_tank_level+0x174>
		{
			printf("Measure far range\n");
 8001a20:	4829      	ldr	r0, [pc, #164]	; (8001ac8 <acc_ref_app_tank_level+0x200>)
 8001a22:	f011 faf3 	bl	801300c <puts>
			status = measure_far_range(&distance_handle, distance_configuration, &distance_detected, &distance);
 8001a26:	6979      	ldr	r1, [r7, #20]
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	f107 020b 	add.w	r2, r7, #11
 8001a30:	f107 0010 	add.w	r0, r7, #16
 8001a34:	f000 fb60 	bl	80020f8 <measure_far_range>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	77fb      	strb	r3, [r7, #31]
		}

		if (!status)
 8001a3c:	7ffb      	ldrb	r3, [r7, #31]
 8001a3e:	f083 0301 	eor.w	r3, r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <acc_ref_app_tank_level+0x188>
		{
			printf("Measurement failed\n");
 8001a48:	4820      	ldr	r0, [pc, #128]	; (8001acc <acc_ref_app_tank_level+0x204>)
 8001a4a:	f011 fadf 	bl	801300c <puts>
 8001a4e:	e016      	b.n	8001a7e <acc_ref_app_tank_level+0x1b6>
			break;
		}

		if (distance_detected)
 8001a50:	7afb      	ldrb	r3, [r7, #11]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00d      	beq.n	8001a72 <acc_ref_app_tank_level+0x1aa>
		{
			printf("Peak at %u mm\n", (unsigned int)(distance * 1000));
 8001a56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a5a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001ad0 <acc_ref_app_tank_level+0x208>
 8001a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a66:	ee17 1a90 	vmov	r1, s15
 8001a6a:	481a      	ldr	r0, [pc, #104]	; (8001ad4 <acc_ref_app_tank_level+0x20c>)
 8001a6c:	f011 fa48 	bl	8012f00 <iprintf>
 8001a70:	e002      	b.n	8001a78 <acc_ref_app_tank_level+0x1b0>
		}
		else
		{
			printf("No peak found\n");
 8001a72:	4819      	ldr	r0, [pc, #100]	; (8001ad8 <acc_ref_app_tank_level+0x210>)
 8001a74:	f011 faca 	bl	801300c <puts>
	while (status)
 8001a78:	7ffb      	ldrb	r3, [r7, #31]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d19d      	bne.n	80019ba <acc_ref_app_tank_level+0xf2>
		}

		//Add a call to a sleep function here to limit measurement update rate
	}

	acc_detector_distance_configuration_destroy(&distance_configuration);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4618      	mov	r0, r3
 8001a84:	f004 f98c 	bl	8005da0 <acc_detector_distance_configuration_destroy>
	acc_detector_distance_destroy(&distance_handle);
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 f9f5 	bl	8005e7c <acc_detector_distance_destroy>
	acc_rss_deactivate();
 8001a92:	f007 faf7 	bl	8009084 <acc_rss_deactivate>

	return status ? EXIT_SUCCESS : EXIT_FAILURE;
 8001a96:	7ffb      	ldrb	r3, [r7, #31]
 8001a98:	f083 0301 	eor.w	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	080145f4 	.word	0x080145f4
 8001aac:	08014614 	.word	0x08014614
 8001ab0:	0801462c 	.word	0x0801462c
 8001ab4:	08014654 	.word	0x08014654
 8001ab8:	08014670 	.word	0x08014670
 8001abc:	08014690 	.word	0x08014690
 8001ac0:	080146ac 	.word	0x080146ac
 8001ac4:	080146c0 	.word	0x080146c0
 8001ac8:	080146d4 	.word	0x080146d4
 8001acc:	080146e8 	.word	0x080146e8
 8001ad0:	447a0000 	.word	0x447a0000
 8001ad4:	080146fc 	.word	0x080146fc
 8001ad8:	0801470c 	.word	0x0801470c

08001adc <sensor_calibration>:


bool sensor_calibration(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b090      	sub	sp, #64	; 0x40
 8001ae0:	af00      	add	r7, sp, #0
	acc_calibration_context_t calibration_context;

	if (!acc_rss_calibration_context_get(DEFAULT_SENSOR, &calibration_context))
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f007 fa6e 	bl	8008fc8 <acc_rss_calibration_context_get>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f083 0301 	eor.w	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <sensor_calibration+0x20>
	{
		return false;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e00d      	b.n	8001b18 <sensor_calibration+0x3c>
	}

	if (!acc_rss_calibration_context_forced_set(DEFAULT_SENSOR, &calibration_context))
 8001afc:	463b      	mov	r3, r7
 8001afe:	4619      	mov	r1, r3
 8001b00:	2001      	movs	r0, #1
 8001b02:	f007 fa7b 	bl	8008ffc <acc_rss_calibration_context_forced_set>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f083 0301 	eor.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <sensor_calibration+0x3a>
	{
		return false;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <sensor_calibration+0x3c>
	}

	return true;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3740      	adds	r7, #64	; 0x40
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <configure_close_range>:


bool configure_close_range(acc_detector_distance_handle_t        *distance_handle,
                           acc_detector_distance_configuration_t distance_configuration)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
	acc_detector_distance_configuration_sensor_set(distance_configuration, DEFAULT_SENSOR);
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	6838      	ldr	r0, [r7, #0]
 8001b2e:	f004 fa4f 	bl	8005fd0 <acc_detector_distance_configuration_sensor_set>
	acc_detector_distance_configuration_mur_set(distance_configuration, DEFAULT_CLOSE_RANGE_MUR);
 8001b32:	2106      	movs	r1, #6
 8001b34:	6838      	ldr	r0, [r7, #0]
 8001b36:	f004 fb9f 	bl	8006278 <acc_detector_distance_configuration_mur_set>
	acc_detector_distance_configuration_requested_start_set(distance_configuration, DEFAULT_CLOSE_RANGE_START);
 8001b3a:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001bac <configure_close_range+0x8c>
 8001b3e:	6838      	ldr	r0, [r7, #0]
 8001b40:	f004 fa5c 	bl	8005ffc <acc_detector_distance_configuration_requested_start_set>
	acc_detector_distance_configuration_requested_length_set(distance_configuration, DEFAULT_CLOSE_RANGE_LENGTH);
 8001b44:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001bb0 <configure_close_range+0x90>
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f004 fa6d 	bl	8006028 <acc_detector_distance_configuration_requested_length_set>
	acc_detector_distance_configuration_receiver_gain_set(distance_configuration, close_range_gain);
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <configure_close_range+0x94>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	eeb0 0a67 	vmov.f32	s0, s15
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f004 fadb 	bl	8006114 <acc_detector_distance_configuration_receiver_gain_set>
	acc_detector_distance_configuration_maximize_signal_attenuation_set(distance_configuration,
 8001b5e:	2101      	movs	r1, #1
 8001b60:	6838      	ldr	r0, [r7, #0]
 8001b62:	f004 faa3 	bl	80060ac <acc_detector_distance_configuration_maximize_signal_attenuation_set>
	                                                                    DEFAULT_CLOSE_MAXIMIZE_SIGNAL_ATTENUATION);
	acc_detector_distance_configuration_service_profile_set(distance_configuration,
 8001b66:	2101      	movs	r1, #1
 8001b68:	6838      	ldr	r0, [r7, #0]
 8001b6a:	f004 fa89 	bl	8006080 <acc_detector_distance_configuration_service_profile_set>
	                                                        DEFAULT_CLOSE_RANGE_SERVICE_PROFILE);
	acc_detector_distance_configuration_downsampling_factor_set(distance_configuration,
 8001b6e:	2101      	movs	r1, #1
 8001b70:	6838      	ldr	r0, [r7, #0]
 8001b72:	f004 fa6f 	bl	8006054 <acc_detector_distance_configuration_downsampling_factor_set>
	                                                            DEFAULT_CLOSE_RANGE_DOWNSAMPLIG_FACTOR);
	acc_detector_distance_configuration_sweep_averaging_set(distance_configuration,
 8001b76:	211e      	movs	r1, #30
 8001b78:	6838      	ldr	r0, [r7, #0]
 8001b7a:	f004 fae1 	bl	8006140 <acc_detector_distance_configuration_sweep_averaging_set>
	                                                        DEFAULT_CLOSE_RANGE_SWEEP_AVERAGING);
	acc_detector_distance_configuration_threshold_type_set(distance_configuration,
 8001b7e:	2101      	movs	r1, #1
 8001b80:	6838      	ldr	r0, [r7, #0]
 8001b82:	f004 fb03 	bl	800618c <acc_detector_distance_configuration_threshold_type_set>
	                                                       DEFAULT_CLOSE_RANGE_THRESHOLD_TYPE);
	acc_detector_distance_configuration_record_background_sweeps_set(distance_configuration,
 8001b86:	211e      	movs	r1, #30
 8001b88:	6838      	ldr	r0, [r7, #0]
 8001b8a:	f004 fb33 	bl	80061f4 <acc_detector_distance_configuration_record_background_sweeps_set>
	                                                                 DEFAULT_CLOSE_RANGE_RECORD_BACKGROUND_SWEEPS);
	acc_detector_distance_configuration_threshold_sensitivity_set(distance_configuration,
 8001b8e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001bb8 <configure_close_range+0x98>
 8001b92:	6838      	ldr	r0, [r7, #0]
 8001b94:	f004 fb18 	bl	80061c8 <acc_detector_distance_configuration_threshold_sensitivity_set>
	                                                              DEFAULT_CLOSE_RANGE_THRESHOLD_SENSITIVITY);

	return acc_detector_distance_reconfigure(distance_handle, distance_configuration);
 8001b98:	6839      	ldr	r1, [r7, #0]
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f004 f9de 	bl	8005f5c <acc_detector_distance_reconfigure>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	bde147ae 	.word	0xbde147ae
 8001bb0:	3e6b851f 	.word	0x3e6b851f
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	3e4ccccd 	.word	0x3e4ccccd

08001bbc <configure_mid_range>:


bool configure_mid_range(acc_detector_distance_handle_t        *distance_handle,
                         acc_detector_distance_configuration_t distance_configuration)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
	acc_detector_distance_configuration_mur_set(distance_configuration, DEFAULT_MID_RANGE_MUR);
 8001bc6:	2106      	movs	r1, #6
 8001bc8:	6838      	ldr	r0, [r7, #0]
 8001bca:	f004 fb55 	bl	8006278 <acc_detector_distance_configuration_mur_set>
	acc_detector_distance_configuration_requested_start_set(distance_configuration, DEFAULT_MID_RANGE_START);
 8001bce:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001c40 <configure_mid_range+0x84>
 8001bd2:	6838      	ldr	r0, [r7, #0]
 8001bd4:	f004 fa12 	bl	8005ffc <acc_detector_distance_configuration_requested_start_set>
	acc_detector_distance_configuration_requested_length_set(distance_configuration, DEFAULT_MID_RANGE_LENGTH);
 8001bd8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001c44 <configure_mid_range+0x88>
 8001bdc:	6838      	ldr	r0, [r7, #0]
 8001bde:	f004 fa23 	bl	8006028 <acc_detector_distance_configuration_requested_length_set>
	acc_detector_distance_configuration_receiver_gain_set(distance_configuration, mid_range_gain);
 8001be2:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <configure_mid_range+0x8c>)
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	6838      	ldr	r0, [r7, #0]
 8001bee:	f004 fa91 	bl	8006114 <acc_detector_distance_configuration_receiver_gain_set>
	acc_detector_distance_configuration_maximize_signal_attenuation_set(distance_configuration,
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	6838      	ldr	r0, [r7, #0]
 8001bf6:	f004 fa59 	bl	80060ac <acc_detector_distance_configuration_maximize_signal_attenuation_set>
	                                                                    DEFAULT_MID_MAXIMIZE_SIGNAL_ATTENUATION);
	acc_detector_distance_configuration_service_profile_set(distance_configuration,
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	6838      	ldr	r0, [r7, #0]
 8001bfe:	f004 fa3f 	bl	8006080 <acc_detector_distance_configuration_service_profile_set>
	                                                        DEFAULT_MID_RANGE_SERVICE_PROFILE);
	acc_detector_distance_configuration_downsampling_factor_set(distance_configuration,
 8001c02:	2101      	movs	r1, #1
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	f004 fa25 	bl	8006054 <acc_detector_distance_configuration_downsampling_factor_set>
	                                                            DEFAULT_MID_RANGE_DOWNSAMPLING_FACTOR);
	acc_detector_distance_configuration_sweep_averaging_set(distance_configuration,
 8001c0a:	211e      	movs	r1, #30
 8001c0c:	6838      	ldr	r0, [r7, #0]
 8001c0e:	f004 fa97 	bl	8006140 <acc_detector_distance_configuration_sweep_averaging_set>
	                                                        DEFAULT_MID_RANGE_SWEEP_AVERAGING);
	acc_detector_distance_configuration_threshold_type_set(distance_configuration,
 8001c12:	2101      	movs	r1, #1
 8001c14:	6838      	ldr	r0, [r7, #0]
 8001c16:	f004 fab9 	bl	800618c <acc_detector_distance_configuration_threshold_type_set>
	                                                       DEFAULT_MID_RANGE_THRESHOLD_TYPE);
	acc_detector_distance_configuration_record_background_sweeps_set(distance_configuration,
 8001c1a:	211e      	movs	r1, #30
 8001c1c:	6838      	ldr	r0, [r7, #0]
 8001c1e:	f004 fae9 	bl	80061f4 <acc_detector_distance_configuration_record_background_sweeps_set>
	                                                                 DEFAULT_MID_RANGE_RECORD_BACKGROUND_SWEEPS);
	acc_detector_distance_configuration_threshold_sensitivity_set(distance_configuration,
 8001c22:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001c4c <configure_mid_range+0x90>
 8001c26:	6838      	ldr	r0, [r7, #0]
 8001c28:	f004 face 	bl	80061c8 <acc_detector_distance_configuration_threshold_sensitivity_set>
	                                                              DEFAULT_MID_RANGE_THRESHOLD_SENSITIVITY);

	return acc_detector_distance_reconfigure(distance_handle, distance_configuration);
 8001c2c:	6839      	ldr	r1, [r7, #0]
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f004 f994 	bl	8005f5c <acc_detector_distance_reconfigure>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	3dcccccd 	.word	0x3dcccccd
 8001c44:	3ebd70a4 	.word	0x3ebd70a4
 8001c48:	20000004 	.word	0x20000004
 8001c4c:	3e4ccccd 	.word	0x3e4ccccd

08001c50 <configure_far_range>:


bool configure_far_range(acc_detector_distance_handle_t        *distance_handle,
                         acc_detector_distance_configuration_t distance_configuration)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
	acc_detector_distance_configuration_mur_set(distance_configuration, DEFAULT_FAR_RANGE_MUR);
 8001c5a:	2106      	movs	r1, #6
 8001c5c:	6838      	ldr	r0, [r7, #0]
 8001c5e:	f004 fb0b 	bl	8006278 <acc_detector_distance_configuration_mur_set>
	acc_detector_distance_configuration_requested_start_set(distance_configuration, DEFAULT_FAR_RANGE_START);
 8001c62:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001cd8 <configure_far_range+0x88>
 8001c66:	6838      	ldr	r0, [r7, #0]
 8001c68:	f004 f9c8 	bl	8005ffc <acc_detector_distance_configuration_requested_start_set>
	acc_detector_distance_configuration_requested_length_set(distance_configuration, DEFAULT_FAR_RANGE_LENGTH);
 8001c6c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001cdc <configure_far_range+0x8c>
 8001c70:	6838      	ldr	r0, [r7, #0]
 8001c72:	f004 f9d9 	bl	8006028 <acc_detector_distance_configuration_requested_length_set>
	acc_detector_distance_configuration_receiver_gain_set(distance_configuration, DEFAULT_FAR_RANGE_GAIN);
 8001c76:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001ce0 <configure_far_range+0x90>
 8001c7a:	6838      	ldr	r0, [r7, #0]
 8001c7c:	f004 fa4a 	bl	8006114 <acc_detector_distance_configuration_receiver_gain_set>
	acc_detector_distance_configuration_maximize_signal_attenuation_set(distance_configuration,
 8001c80:	2100      	movs	r1, #0
 8001c82:	6838      	ldr	r0, [r7, #0]
 8001c84:	f004 fa12 	bl	80060ac <acc_detector_distance_configuration_maximize_signal_attenuation_set>
	                                                                    DEFAULT_FAR_MAXIMIZE_SIGNAL_ATTENUATION);
	acc_detector_distance_configuration_service_profile_set(distance_configuration,
 8001c88:	2102      	movs	r1, #2
 8001c8a:	6838      	ldr	r0, [r7, #0]
 8001c8c:	f004 f9f8 	bl	8006080 <acc_detector_distance_configuration_service_profile_set>
	                                                        DEFAULT_FAR_RANGE_SERVICE_PROFILE);
	acc_detector_distance_configuration_downsampling_factor_set(distance_configuration,
 8001c90:	2104      	movs	r1, #4
 8001c92:	6838      	ldr	r0, [r7, #0]
 8001c94:	f004 f9de 	bl	8006054 <acc_detector_distance_configuration_downsampling_factor_set>
	                                                            DEFAULT_FAR_RANGE_DOWNSAMPLING_FACTOR);
	acc_detector_distance_configuration_sweep_averaging_set(distance_configuration,
 8001c98:	210a      	movs	r1, #10
 8001c9a:	6838      	ldr	r0, [r7, #0]
 8001c9c:	f004 fa50 	bl	8006140 <acc_detector_distance_configuration_sweep_averaging_set>
	                                                        DEFAULT_FAR_RANGE_SWEEP_AVERAGING);
	acc_detector_distance_configuration_threshold_type_set(distance_configuration,
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	6838      	ldr	r0, [r7, #0]
 8001ca4:	f004 fa72 	bl	800618c <acc_detector_distance_configuration_threshold_type_set>
	                                                       DEFAULT_FAR_RANGE_THRESHOLD_TYPE);
	acc_detector_distance_configuration_threshold_sensitivity_set(distance_configuration,
 8001ca8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001ce4 <configure_far_range+0x94>
 8001cac:	6838      	ldr	r0, [r7, #0]
 8001cae:	f004 fa8b 	bl	80061c8 <acc_detector_distance_configuration_threshold_sensitivity_set>
	                                                              DEFAULT_FAR_RANGE_THRESHOLD_SENSITIVITY);
	acc_detector_distance_configuration_cfar_threshold_guard_set(distance_configuration,
 8001cb2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001ce8 <configure_far_range+0x98>
 8001cb6:	6838      	ldr	r0, [r7, #0]
 8001cb8:	f004 fab2 	bl	8006220 <acc_detector_distance_configuration_cfar_threshold_guard_set>
	                                                             DEFAULT_FAR_RANGE_CFAR_THRESHOLD_GUARD);
	acc_detector_distance_configuration_cfar_threshold_window_set(distance_configuration,
 8001cbc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001cec <configure_far_range+0x9c>
 8001cc0:	6838      	ldr	r0, [r7, #0]
 8001cc2:	f004 fac3 	bl	800624c <acc_detector_distance_configuration_cfar_threshold_window_set>
	                                                              DEFAULT_FAR_RANGE_CFAR_THRESHOLD_WINDOW);

	return acc_detector_distance_reconfigure(distance_handle, distance_configuration);
 8001cc6:	6839      	ldr	r1, [r7, #0]
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f004 f947 	bl	8005f5c <acc_detector_distance_reconfigure>
 8001cce:	4603      	mov	r3, r0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	3e428f5c 	.word	0x3e428f5c
 8001cdc:	3fa66666 	.word	0x3fa66666
 8001ce0:	3f51758e 	.word	0x3f51758e
 8001ce4:	3ecccccd 	.word	0x3ecccccd
 8001ce8:	3df5c28f 	.word	0x3df5c28f
 8001cec:	3cf5c28f 	.word	0x3cf5c28f

08001cf0 <record_background>:


bool record_background(acc_detector_distance_handle_t *distance_handle,
                       acc_detector_distance_configuration_t distance_configuration,
                       float *range_gain, uint16_t *background, uint16_t background_length)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
	acc_detector_distance_recorded_background_info_t recorded_background_info;
	bool                                             status                  = true;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	77fb      	strb	r3, [r7, #31]
	bool                                             previous_gain_saturated = true;
 8001d02:	2301      	movs	r3, #1
 8001d04:	77bb      	strb	r3, [r7, #30]

	float gain = acc_detector_distance_configuration_receiver_gain_get(distance_configuration);
 8001d06:	68b8      	ldr	r0, [r7, #8]
 8001d08:	f004 f9e6 	bl	80060d8 <acc_detector_distance_configuration_receiver_gain_get>
 8001d0c:	ed87 0a06 	vstr	s0, [r7, #24]

	recorded_background_info.data_saturated = true;
 8001d10:	2301      	movs	r3, #1
 8001d12:	75bb      	strb	r3, [r7, #22]

	while (status && gain > 0)
 8001d14:	e033      	b.n	8001d7e <record_background+0x8e>
	{
		acc_detector_distance_configuration_receiver_gain_set(distance_configuration, gain);
 8001d16:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d1a:	68b8      	ldr	r0, [r7, #8]
 8001d1c:	f004 f9fa 	bl	8006114 <acc_detector_distance_configuration_receiver_gain_set>

		status = acc_detector_distance_reconfigure(distance_handle, distance_configuration);
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f004 f91a 	bl	8005f5c <acc_detector_distance_reconfigure>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	77fb      	strb	r3, [r7, #31]

		if (status)
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d025      	beq.n	8001d7e <record_background+0x8e>
		{
			status = acc_detector_distance_record_background(*distance_handle, background, background_length,
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d3c:	6839      	ldr	r1, [r7, #0]
 8001d3e:	f004 fb15 	bl	800636c <acc_detector_distance_record_background>
 8001d42:	4603      	mov	r3, r0
 8001d44:	77fb      	strb	r3, [r7, #31]
			                                                 &recorded_background_info);

			if (!status || (!previous_gain_saturated && !recorded_background_info.data_saturated))
 8001d46:	7ffb      	ldrb	r3, [r7, #31]
 8001d48:	f083 0301 	eor.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d11f      	bne.n	8001d92 <record_background+0xa2>
 8001d52:	7fbb      	ldrb	r3, [r7, #30]
 8001d54:	f083 0301 	eor.w	r3, r3, #1
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <record_background+0x7a>
 8001d5e:	7dbb      	ldrb	r3, [r7, #22]
 8001d60:	f083 0301 	eor.w	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d113      	bne.n	8001d92 <record_background+0xa2>
			{
				break;
			}

			previous_gain_saturated = recorded_background_info.data_saturated;
 8001d6a:	7dbb      	ldrb	r3, [r7, #22]
 8001d6c:	77bb      	strb	r3, [r7, #30]

			gain = gain - GAIN_STEP;
 8001d6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d72:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001db8 <record_background+0xc8>
 8001d76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d7a:	edc7 7a06 	vstr	s15, [r7, #24]
	while (status && gain > 0)
 8001d7e:	7ffb      	ldrb	r3, [r7, #31]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <record_background+0xa2>
 8001d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	dcc1      	bgt.n	8001d16 <record_background+0x26>
		}
	}

	if (status && recorded_background_info.data_saturated)
 8001d92:	7ffb      	ldrb	r3, [r7, #31]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <record_background+0xb8>
 8001d98:	7dbb      	ldrb	r3, [r7, #22]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <record_background+0xb8>
	{
		printf("Unable to record background without data saturation\n");
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <record_background+0xcc>)
 8001da0:	f011 f934 	bl	801300c <puts>
		status = false;
 8001da4:	2300      	movs	r3, #0
 8001da6:	77fb      	strb	r3, [r7, #31]
	}

	*range_gain = gain;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	601a      	str	r2, [r3, #0]

	return status;
 8001dae:	7ffb      	ldrb	r3, [r7, #31]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	3d3a2e8c 	.word	0x3d3a2e8c
 8001dbc:	0801471c 	.word	0x0801471c

08001dc0 <record_backgrounds>:


bool record_backgrounds(acc_detector_distance_handle_t        *distance_handle,
                        acc_detector_distance_configuration_t distance_configuration)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
	acc_detector_distance_metadata_t metadata;

	if (!configure_close_range(distance_handle, distance_configuration))
 8001dca:	6839      	ldr	r1, [r7, #0]
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff fea7 	bl	8001b20 <configure_close_range>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f083 0301 	eor.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <record_backgrounds+0x22>
	{
		return false;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e05a      	b.n	8001e98 <record_backgrounds+0xd8>
	}

	if (!acc_detector_distance_metadata_get(*distance_handle, &metadata))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f107 020c 	add.w	r2, r7, #12
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f004 f855 	bl	8005e9c <acc_detector_distance_metadata_get>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f083 0301 	eor.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <record_backgrounds+0x42>
	{
		return false;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e04a      	b.n	8001e98 <record_backgrounds+0xd8>
	}

	close_background_length = metadata.background_length;
 8001e02:	8aba      	ldrh	r2, [r7, #20]
 8001e04:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <record_backgrounds+0xe0>)
 8001e06:	801a      	strh	r2, [r3, #0]
	printf("Record close range\n");
 8001e08:	4826      	ldr	r0, [pc, #152]	; (8001ea4 <record_backgrounds+0xe4>)
 8001e0a:	f011 f8ff 	bl	801300c <puts>

	if (!record_background(distance_handle, distance_configuration, &close_range_gain,
 8001e0e:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <record_backgrounds+0xe0>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <record_backgrounds+0xe8>)
 8001e16:	4a25      	ldr	r2, [pc, #148]	; (8001eac <record_backgrounds+0xec>)
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff68 	bl	8001cf0 <record_background>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f083 0301 	eor.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <record_backgrounds+0x70>
	                       close_background, close_background_length))
	{
		return false;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e033      	b.n	8001e98 <record_backgrounds+0xd8>
	}

	if (!configure_mid_range(distance_handle, distance_configuration))
 8001e30:	6839      	ldr	r1, [r7, #0]
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fec2 	bl	8001bbc <configure_mid_range>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f083 0301 	eor.w	r3, r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <record_backgrounds+0x88>
	{
		return false;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e027      	b.n	8001e98 <record_backgrounds+0xd8>
	}

	if (!acc_detector_distance_metadata_get(*distance_handle, &metadata))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f107 020c 	add.w	r2, r7, #12
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 f822 	bl	8005e9c <acc_detector_distance_metadata_get>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f083 0301 	eor.w	r3, r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <record_backgrounds+0xa8>
	{
		return false;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e017      	b.n	8001e98 <record_backgrounds+0xd8>
	}

	mid_background_length = metadata.background_length;
 8001e68:	8aba      	ldrh	r2, [r7, #20]
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <record_backgrounds+0xf0>)
 8001e6c:	801a      	strh	r2, [r3, #0]
	printf("Record mid range\n");
 8001e6e:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <record_backgrounds+0xf4>)
 8001e70:	f011 f8cc 	bl	801300c <puts>

	if (!record_background(distance_handle, distance_configuration, &mid_range_gain,
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <record_backgrounds+0xf0>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <record_backgrounds+0xf8>)
 8001e7c:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <record_backgrounds+0xfc>)
 8001e7e:	6839      	ldr	r1, [r7, #0]
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff35 	bl	8001cf0 <record_background>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f083 0301 	eor.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <record_backgrounds+0xd6>
	                       mid_background, mid_background_length))
	{
		return false;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <record_backgrounds+0xd8>
	}

	return true;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000c2c 	.word	0x20000c2c
 8001ea4:	08014750 	.word	0x08014750
 8001ea8:	200002cc 	.word	0x200002cc
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	20001590 	.word	0x20001590
 8001eb4:	08014764 	.word	0x08014764
 8001eb8:	20000c30 	.word	0x20000c30
 8001ebc:	20000004 	.word	0x20000004

08001ec0 <measurement>:

bool measurement(acc_detector_distance_handle_t        *distance_handle,
                 acc_detector_distance_configuration_t distance_configuration,
                 acc_detector_distance_result_t        *result,
                 acc_detector_distance_result_info_t   *result_info)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
	float gain = acc_detector_distance_configuration_receiver_gain_get(distance_configuration);
 8001ece:	68b8      	ldr	r0, [r7, #8]
 8001ed0:	f004 f902 	bl	80060d8 <acc_detector_distance_configuration_receiver_gain_get>
 8001ed4:	ed87 0a05 	vstr	s0, [r7, #20]

	result_info->data_saturated = true;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2201      	movs	r2, #1
 8001edc:	709a      	strb	r2, [r3, #2]

	while (gain > 0)
 8001ede:	e05a      	b.n	8001f96 <measurement+0xd6>
	{
		if (!acc_detector_distance_activate(*distance_handle))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 f821 	bl	8005f2c <acc_detector_distance_activate>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f083 0301 	eor.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d004      	beq.n	8001f00 <measurement+0x40>
		{
			printf("Failed to activate detector\n");
 8001ef6:	4832      	ldr	r0, [pc, #200]	; (8001fc0 <measurement+0x100>)
 8001ef8:	f011 f888 	bl	801300c <puts>
			return false;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e05b      	b.n	8001fb8 <measurement+0xf8>
		}

		if (!acc_detector_distance_get_next(*distance_handle, result, 1, result_info))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2201      	movs	r2, #1
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f004 fb13 	bl	8006534 <acc_detector_distance_get_next>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <measurement+0x64>
		{
			printf("Failed to get next from detector\n");
 8001f1a:	482a      	ldr	r0, [pc, #168]	; (8001fc4 <measurement+0x104>)
 8001f1c:	f011 f876 	bl	801300c <puts>
			return false;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e049      	b.n	8001fb8 <measurement+0xf8>
		}

		if (!acc_detector_distance_deactivate(*distance_handle))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f004 f80b 	bl	8005f44 <acc_detector_distance_deactivate>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f083 0301 	eor.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <measurement+0x84>
		{
			printf("Failed to deactivate detector\n");
 8001f3a:	4823      	ldr	r0, [pc, #140]	; (8001fc8 <measurement+0x108>)
 8001f3c:	f011 f866 	bl	801300c <puts>
			return false;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e039      	b.n	8001fb8 <measurement+0xf8>
		}

		if (!result_info->data_saturated || gain < GAIN_STEP)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	789b      	ldrb	r3, [r3, #2]
 8001f48:	f083 0301 	eor.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d128      	bne.n	8001fa4 <measurement+0xe4>
 8001f52:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f56:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001fcc <measurement+0x10c>
 8001f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f62:	d41f      	bmi.n	8001fa4 <measurement+0xe4>
		{
			break;
		}

		gain = gain - GAIN_STEP;
 8001f64:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f68:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001fcc <measurement+0x10c>
 8001f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f70:	edc7 7a05 	vstr	s15, [r7, #20]

		acc_detector_distance_configuration_receiver_gain_set(distance_configuration, gain);
 8001f74:	ed97 0a05 	vldr	s0, [r7, #20]
 8001f78:	68b8      	ldr	r0, [r7, #8]
 8001f7a:	f004 f8cb 	bl	8006114 <acc_detector_distance_configuration_receiver_gain_set>

		if (!acc_detector_distance_reconfigure(distance_handle, distance_configuration))
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f003 ffeb 	bl	8005f5c <acc_detector_distance_reconfigure>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f083 0301 	eor.w	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <measurement+0xd6>
		{
			return false;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e010      	b.n	8001fb8 <measurement+0xf8>
	while (gain > 0)
 8001f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa2:	dc9d      	bgt.n	8001ee0 <measurement+0x20>
		}
	}

	if (result_info->data_saturated)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	789b      	ldrb	r3, [r3, #2]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <measurement+0xf6>
	{
		printf("Unable to measure without data saturation\n");
 8001fac:	4808      	ldr	r0, [pc, #32]	; (8001fd0 <measurement+0x110>)
 8001fae:	f011 f82d 	bl	801300c <puts>
		return false;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <measurement+0xf8>
	}

	return true;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	08014778 	.word	0x08014778
 8001fc4:	08014794 	.word	0x08014794
 8001fc8:	080147b8 	.word	0x080147b8
 8001fcc:	3d3a2e8c 	.word	0x3d3a2e8c
 8001fd0:	080147d8 	.word	0x080147d8

08001fd4 <measure_close_range>:


bool measure_close_range(acc_detector_distance_handle_t *distance_handle,
                         acc_detector_distance_configuration_t distance_configuration,
                         bool *distance_detected, float *distance)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
	*distance_detected = false;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
	acc_detector_distance_result_info_t result_info;
	acc_detector_distance_result_t      result;

	if (!configure_close_range(distance_handle, distance_configuration))
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7ff fd98 	bl	8001b20 <configure_close_range>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f083 0301 	eor.w	r3, r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <measure_close_range+0x2c>
	{
		return false;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e02a      	b.n	8002056 <measure_close_range+0x82>
	}

	if (!acc_detector_distance_set_background(*distance_handle, close_background, close_background_length))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a16      	ldr	r2, [pc, #88]	; (8002060 <measure_close_range+0x8c>)
 8002006:	8812      	ldrh	r2, [r2, #0]
 8002008:	4916      	ldr	r1, [pc, #88]	; (8002064 <measure_close_range+0x90>)
 800200a:	4618      	mov	r0, r3
 800200c:	f003 ff62 	bl	8005ed4 <acc_detector_distance_set_background>
 8002010:	4603      	mov	r3, r0
 8002012:	f083 0301 	eor.w	r3, r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <measure_close_range+0x4c>
	{
		return false;
 800201c:	2300      	movs	r3, #0
 800201e:	e01a      	b.n	8002056 <measure_close_range+0x82>
	}

	if (!measurement(distance_handle, distance_configuration, &result, &result_info))
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	f107 0214 	add.w	r2, r7, #20
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f7ff ff48 	bl	8001ec0 <measurement>
 8002030:	4603      	mov	r3, r0
 8002032:	f083 0301 	eor.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <measure_close_range+0x6c>
	{
		return false;
 800203c:	2300      	movs	r3, #0
 800203e:	e00a      	b.n	8002056 <measure_close_range+0x82>
	}

	if (result_info.measurement_sample_above_threshold)
 8002040:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <measure_close_range+0x80>
	{
		*distance_detected = true;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
		*distance          = result_info.closest_detection_m;
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002054:	2301      	movs	r3, #1
}
 8002056:	4618      	mov	r0, r3
 8002058:	3728      	adds	r7, #40	; 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000c2c 	.word	0x20000c2c
 8002064:	200002cc 	.word	0x200002cc

08002068 <measure_mid_range>:


bool measure_mid_range(acc_detector_distance_handle_t *distance_handle,
                       acc_detector_distance_configuration_t distance_configuration,
                       bool *distance_detected, float *distance)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
	*distance_detected = false;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
	acc_detector_distance_result_info_t result_info;
	acc_detector_distance_result_t      result;

	if (!configure_mid_range(distance_handle, distance_configuration))
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7ff fd9c 	bl	8001bbc <configure_mid_range>
 8002084:	4603      	mov	r3, r0
 8002086:	f083 0301 	eor.w	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <measure_mid_range+0x2c>
	{
		return false;
 8002090:	2300      	movs	r3, #0
 8002092:	e029      	b.n	80020e8 <measure_mid_range+0x80>
	}

	if (!acc_detector_distance_set_background(*distance_handle, mid_background, mid_background_length))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <measure_mid_range+0x88>)
 800209a:	8812      	ldrh	r2, [r2, #0]
 800209c:	4915      	ldr	r1, [pc, #84]	; (80020f4 <measure_mid_range+0x8c>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 ff18 	bl	8005ed4 <acc_detector_distance_set_background>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f083 0301 	eor.w	r3, r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <measure_mid_range+0x4c>
	{
		return false;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e019      	b.n	80020e8 <measure_mid_range+0x80>
	}

	if (!measurement(distance_handle, distance_configuration, &result, &result_info))
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	f107 0214 	add.w	r2, r7, #20
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f7ff fefe 	bl	8001ec0 <measurement>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <measure_mid_range+0x6c>
	{
		return false;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e009      	b.n	80020e8 <measure_mid_range+0x80>
	}

	if (result_info.number_of_peaks > 0)
 80020d4:	8c3b      	ldrh	r3, [r7, #32]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <measure_mid_range+0x7e>
	{
		*distance_detected = true;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
		*distance          = result.distance_m;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	601a      	str	r2, [r3, #0]
	}

	return true;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3728      	adds	r7, #40	; 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20001590 	.word	0x20001590
 80020f4:	20000c30 	.word	0x20000c30

080020f8 <measure_far_range>:


bool measure_far_range(acc_detector_distance_handle_t *distance_handle,
                       acc_detector_distance_configuration_t distance_configuration,
                       bool *distance_detected, float *distance)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
	*distance_detected = false;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
	acc_detector_distance_result_info_t result_info;
	acc_detector_distance_result_t      result;

	if (!configure_far_range(distance_handle, distance_configuration))
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7ff fd9e 	bl	8001c50 <configure_far_range>
 8002114:	4603      	mov	r3, r0
 8002116:	f083 0301 	eor.w	r3, r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <measure_far_range+0x2c>
	{
		return false;
 8002120:	2300      	movs	r3, #0
 8002122:	e019      	b.n	8002158 <measure_far_range+0x60>
	}

	if (!measurement(distance_handle, distance_configuration, &result, &result_info))
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	f107 0214 	add.w	r2, r7, #20
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f7ff fec6 	bl	8001ec0 <measurement>
 8002134:	4603      	mov	r3, r0
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <measure_far_range+0x4c>
	{
		return false;
 8002140:	2300      	movs	r3, #0
 8002142:	e009      	b.n	8002158 <measure_far_range+0x60>
	}

	if (result_info.number_of_peaks > 0)
 8002144:	8c3b      	ldrh	r3, [r7, #32]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <measure_far_range+0x5e>
	{
		*distance_detected = true;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
		*distance          = result.distance_m;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_MspInit+0x44>)
 8002168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_MspInit+0x44>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6613      	str	r3, [r2, #96]	; 0x60
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_MspInit+0x44>)
 8002174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_MspInit+0x44>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <HAL_MspInit+0x44>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_MspInit+0x44>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000

080021a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b098      	sub	sp, #96	; 0x60
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	2254      	movs	r2, #84	; 0x54
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f010 fdb9 	bl	8012d30 <memset>
  if(hrtc->Instance==RTC)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a0f      	ldr	r2, [pc, #60]	; (8002200 <HAL_RTC_MspInit+0x58>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d117      	bne.n	80021f8 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	4618      	mov	r0, r3
 80021da:	f001 fc37 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80021e4:	f7fe fd38 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RTC_MspInit+0x5c>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <HAL_RTC_MspInit+0x5c>)
 80021f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021f8:	bf00      	nop
 80021fa:	3760      	adds	r7, #96	; 0x60
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40002800 	.word	0x40002800
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_SPI_MspInit+0x7c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d128      	bne.n	800227c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_SPI_MspInit+0x80>)
 800222c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222e:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_SPI_MspInit+0x80>)
 8002230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002234:	6613      	str	r3, [r2, #96]	; 0x60
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_SPI_MspInit+0x80>)
 8002238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_SPI_MspInit+0x80>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_SPI_MspInit+0x80>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_SPI_MspInit+0x80>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 800225a:	23e0      	movs	r3, #224	; 0xe0
 800225c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800226a:	2305      	movs	r3, #5
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002278:	f000 fb90 	bl	800299c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800227c:	bf00      	nop
 800227e:	3728      	adds	r7, #40	; 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40013000 	.word	0x40013000
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b09e      	sub	sp, #120	; 0x78
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	2254      	movs	r2, #84	; 0x54
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f010 fd3f 	bl	8012d30 <memset>
  if(huart->Instance==USART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a23      	ldr	r2, [pc, #140]	; (8002344 <HAL_UART_MspInit+0xb8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d13f      	bne.n	800233c <HAL_UART_MspInit+0xb0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022bc:	2301      	movs	r3, #1
 80022be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022c0:	2300      	movs	r3, #0
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 fbbf 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022d4:	f7fe fcc0 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_UART_MspInit+0xbc>)
 80022da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022dc:	4a1a      	ldr	r2, [pc, #104]	; (8002348 <HAL_UART_MspInit+0xbc>)
 80022de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e2:	6613      	str	r3, [r2, #96]	; 0x60
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_UART_MspInit+0xbc>)
 80022e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_UART_MspInit+0xbc>)
 80022f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <HAL_UART_MspInit+0xbc>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_UART_MspInit+0xbc>)
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002308:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800230c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800231a:	2307      	movs	r3, #7
 800231c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002322:	4619      	mov	r1, r3
 8002324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002328:	f000 fb38 	bl	800299c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2100      	movs	r1, #0
 8002330:	2025      	movs	r0, #37	; 0x25
 8002332:	f000 fa7e 	bl	8002832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002336:	2025      	movs	r0, #37	; 0x25
 8002338:	f000 fa97 	bl	800286a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800233c:	bf00      	nop
 800233e:	3778      	adds	r7, #120	; 0x78
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40013800 	.word	0x40013800
 8002348:	40021000 	.word	0x40021000

0800234c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <NMI_Handler+0x4>

08002352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002356:	e7fe      	b.n	8002356 <HardFault_Handler+0x4>

08002358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800235c:	e7fe      	b.n	800235c <MemManage_Handler+0x4>

0800235e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002362:	e7fe      	b.n	8002362 <BusFault_Handler+0x4>

08002364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <UsageFault_Handler+0x4>

0800236a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002398:	f000 f92c 	bl	80025f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}

080023a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023a4:	2001      	movs	r0, #1
 80023a6:	f000 fc93 	bl	8002cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <USART1_IRQHandler+0x10>)
 80023b6:	f002 fc8f 	bl	8004cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000023c 	.word	0x2000023c

080023c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	e00a      	b.n	80023ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023d6:	f3af 8000 	nop.w
 80023da:	4601      	mov	r1, r0
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	60ba      	str	r2, [r7, #8]
 80023e2:	b2ca      	uxtb	r2, r1
 80023e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	3301      	adds	r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	dbf0      	blt.n	80023d6 <_read+0x12>
	}

return len;
 80023f4:	687b      	ldr	r3, [r7, #4]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <_close>:
	}
	return len;
}

int _close(int file)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
	return -1;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002426:	605a      	str	r2, [r3, #4]
	return 0;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_isatty>:

int _isatty(int file)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
	return 1;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
	return 0;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002470:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <_sbrk+0x5c>)
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <_sbrk+0x60>)
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d102      	bne.n	800248a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <_sbrk+0x64>)
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <_sbrk+0x68>)
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <_sbrk+0x64>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	429a      	cmp	r2, r3
 8002496:	d207      	bcs.n	80024a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002498:	f010 fa1a 	bl	80128d0 <__errno>
 800249c:	4603      	mov	r3, r0
 800249e:	220c      	movs	r2, #12
 80024a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
 80024a6:	e009      	b.n	80024bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	4a05      	ldr	r2, [pc, #20]	; (80024cc <_sbrk+0x64>)
 80024b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ba:	68fb      	ldr	r3, [r7, #12]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	2000c000 	.word	0x2000c000
 80024c8:	00000400 	.word	0x00000400
 80024cc:	20001594 	.word	0x20001594
 80024d0:	20001660 	.word	0x20001660

080024d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <SystemInit+0x20>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024de:	4a05      	ldr	r2, [pc, #20]	; (80024f4 <SystemInit+0x20>)
 80024e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002530 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024fc:	f7ff ffea 	bl	80024d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002500:	480c      	ldr	r0, [pc, #48]	; (8002534 <LoopForever+0x6>)
  ldr r1, =_edata
 8002502:	490d      	ldr	r1, [pc, #52]	; (8002538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <LoopForever+0xe>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002508:	e002      	b.n	8002510 <LoopCopyDataInit>

0800250a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800250c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800250e:	3304      	adds	r3, #4

08002510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002514:	d3f9      	bcc.n	800250a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002518:	4c0a      	ldr	r4, [pc, #40]	; (8002544 <LoopForever+0x16>)
  movs r3, #0
 800251a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800251c:	e001      	b.n	8002522 <LoopFillZerobss>

0800251e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800251e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002520:	3204      	adds	r2, #4

08002522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002524:	d3fb      	bcc.n	800251e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002526:	f010 fba3 	bl	8012c70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800252a:	f7fe fa15 	bl	8000958 <main>

0800252e <LoopForever>:

LoopForever:
    b LoopForever
 800252e:	e7fe      	b.n	800252e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002530:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002538:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 800253c:	0801d680 	.word	0x0801d680
  ldr r2, =_sbss
 8002540:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002544:	20001660 	.word	0x20001660

08002548 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002548:	e7fe      	b.n	8002548 <ADC1_IRQHandler>

0800254a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002554:	2003      	movs	r0, #3
 8002556:	f000 f961 	bl	800281c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800255a:	200f      	movs	r0, #15
 800255c:	f000 f80e 	bl	800257c <HAL_InitTick>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	71fb      	strb	r3, [r7, #7]
 800256a:	e001      	b.n	8002570 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800256c:	f7ff fdf8 	bl	8002160 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002570:	79fb      	ldrb	r3, [r7, #7]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002588:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <HAL_InitTick+0x6c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d023      	beq.n	80025d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_InitTick+0x70>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <HAL_InitTick+0x6c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	4619      	mov	r1, r3
 800259a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259e:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f96d 	bl	8002886 <HAL_SYSTICK_Config>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0f      	cmp	r3, #15
 80025b6:	d809      	bhi.n	80025cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b8:	2200      	movs	r2, #0
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f000 f937 	bl	8002832 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025c4:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <HAL_InitTick+0x74>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e007      	b.n	80025dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e004      	b.n	80025dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
 80025d6:	e001      	b.n	80025dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000010 	.word	0x20000010
 80025ec:	20000008 	.word	0x20000008
 80025f0:	2000000c 	.word	0x2000000c

080025f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_IncTick+0x20>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_IncTick+0x24>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4413      	add	r3, r2
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <HAL_IncTick+0x24>)
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000010 	.word	0x20000010
 8002618:	20001598 	.word	0x20001598

0800261c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return uwTick;
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <HAL_GetTick+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20001598 	.word	0x20001598

08002634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800263c:	f7ff ffee 	bl	800261c <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264c:	d005      	beq.n	800265a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800264e:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <HAL_Delay+0x44>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4413      	add	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800265a:	bf00      	nop
 800265c:	f7ff ffde 	bl	800261c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	429a      	cmp	r2, r3
 800266a:	d8f7      	bhi.n	800265c <HAL_Delay+0x28>
  {
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000010 	.word	0x20000010

0800267c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002698:	4013      	ands	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	60d3      	str	r3, [r2, #12]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <__NVIC_GetPriorityGrouping+0x18>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	f003 0307 	and.w	r3, r3, #7
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	db0b      	blt.n	800270a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	f003 021f 	and.w	r2, r3, #31
 80026f8:	4907      	ldr	r1, [pc, #28]	; (8002718 <__NVIC_EnableIRQ+0x38>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2001      	movs	r0, #1
 8002702:	fa00 f202 	lsl.w	r2, r0, r2
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000e100 	.word	0xe000e100

0800271c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	2b00      	cmp	r3, #0
 800272e:	db0a      	blt.n	8002746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	490c      	ldr	r1, [pc, #48]	; (8002768 <__NVIC_SetPriority+0x4c>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	440b      	add	r3, r1
 8002740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002744:	e00a      	b.n	800275c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4908      	ldr	r1, [pc, #32]	; (800276c <__NVIC_SetPriority+0x50>)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3b04      	subs	r3, #4
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	440b      	add	r3, r1
 800275a:	761a      	strb	r2, [r3, #24]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000e100 	.word	0xe000e100
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f1c3 0307 	rsb	r3, r3, #7
 800278a:	2b04      	cmp	r3, #4
 800278c:	bf28      	it	cs
 800278e:	2304      	movcs	r3, #4
 8002790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3304      	adds	r3, #4
 8002796:	2b06      	cmp	r3, #6
 8002798:	d902      	bls.n	80027a0 <NVIC_EncodePriority+0x30>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3b03      	subs	r3, #3
 800279e:	e000      	b.n	80027a2 <NVIC_EncodePriority+0x32>
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	401a      	ands	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	4313      	orrs	r3, r2
         );
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e8:	d301      	bcc.n	80027ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00f      	b.n	800280e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <SysTick_Config+0x40>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f6:	210f      	movs	r1, #15
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	f7ff ff8e 	bl	800271c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <SysTick_Config+0x40>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <SysTick_Config+0x40>)
 8002808:	2207      	movs	r2, #7
 800280a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	e000e010 	.word	0xe000e010

0800281c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff29 	bl	800267c <__NVIC_SetPriorityGrouping>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002844:	f7ff ff3e 	bl	80026c4 <__NVIC_GetPriorityGrouping>
 8002848:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f7ff ff8e 	bl	8002770 <NVIC_EncodePriority>
 8002854:	4602      	mov	r2, r0
 8002856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff5d 	bl	800271c <__NVIC_SetPriority>
}
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff31 	bl	80026e0 <__NVIC_EnableIRQ>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ffa2 	bl	80027d8 <SysTick_Config>
 8002894:	4603      	mov	r3, r0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d008      	beq.n	80028c8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2204      	movs	r2, #4
 80028ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e022      	b.n	800290e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 020e 	bic.w	r2, r2, #14
 80028d6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	f003 021c 	and.w	r2, r3, #28
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	2101      	movs	r1, #1
 80028f6:	fa01 f202 	lsl.w	r2, r1, r2
 80028fa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d005      	beq.n	800293e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2204      	movs	r2, #4
 8002936:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	e029      	b.n	8002992 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 020e 	bic.w	r2, r2, #14
 800294c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0201 	bic.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f003 021c 	and.w	r2, r3, #28
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	2101      	movs	r1, #1
 800296c:	fa01 f202 	lsl.w	r2, r1, r2
 8002970:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
    }
  }
  return status;
 8002992:	7bfb      	ldrb	r3, [r7, #15]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029aa:	e148      	b.n	8002c3e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	4013      	ands	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 813a 	beq.w	8002c38 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d00b      	beq.n	80029e4 <HAL_GPIO_Init+0x48>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d007      	beq.n	80029e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029d8:	2b11      	cmp	r3, #17
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b12      	cmp	r3, #18
 80029e2:	d130      	bne.n	8002a46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	2203      	movs	r2, #3
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	091b      	lsrs	r3, r3, #4
 8002a30:	f003 0201 	and.w	r2, r3, #1
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0xea>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b12      	cmp	r3, #18
 8002a84:	d123      	bne.n	8002ace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	08da      	lsrs	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3208      	adds	r2, #8
 8002a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	08da      	lsrs	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3208      	adds	r2, #8
 8002ac8:	6939      	ldr	r1, [r7, #16]
 8002aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0203 	and.w	r2, r3, #3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8094 	beq.w	8002c38 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b10:	4b52      	ldr	r3, [pc, #328]	; (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b14:	4a51      	ldr	r2, [pc, #324]	; (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6613      	str	r3, [r2, #96]	; 0x60
 8002b1c:	4b4f      	ldr	r3, [pc, #316]	; (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b28:	4a4d      	ldr	r2, [pc, #308]	; (8002c60 <HAL_GPIO_Init+0x2c4>)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	3302      	adds	r3, #2
 8002b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	220f      	movs	r2, #15
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b52:	d00d      	beq.n	8002b70 <HAL_GPIO_Init+0x1d4>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a43      	ldr	r2, [pc, #268]	; (8002c64 <HAL_GPIO_Init+0x2c8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d007      	beq.n	8002b6c <HAL_GPIO_Init+0x1d0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a42      	ldr	r2, [pc, #264]	; (8002c68 <HAL_GPIO_Init+0x2cc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d101      	bne.n	8002b68 <HAL_GPIO_Init+0x1cc>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e004      	b.n	8002b72 <HAL_GPIO_Init+0x1d6>
 8002b68:	2307      	movs	r3, #7
 8002b6a:	e002      	b.n	8002b72 <HAL_GPIO_Init+0x1d6>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_GPIO_Init+0x1d6>
 8002b70:	2300      	movs	r3, #0
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	f002 0203 	and.w	r2, r2, #3
 8002b78:	0092      	lsls	r2, r2, #2
 8002b7a:	4093      	lsls	r3, r2
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b82:	4937      	ldr	r1, [pc, #220]	; (8002c60 <HAL_GPIO_Init+0x2c4>)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	3302      	adds	r3, #2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b90:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <HAL_GPIO_Init+0x2d0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bb4:	4a2d      	ldr	r2, [pc, #180]	; (8002c6c <HAL_GPIO_Init+0x2d0>)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002bba:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <HAL_GPIO_Init+0x2d0>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bde:	4a23      	ldr	r2, [pc, #140]	; (8002c6c <HAL_GPIO_Init+0x2d0>)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002be4:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <HAL_GPIO_Init+0x2d0>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c08:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <HAL_GPIO_Init+0x2d0>)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c0e:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <HAL_GPIO_Init+0x2d0>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c32:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <HAL_GPIO_Init+0x2d0>)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f47f aeaf 	bne.w	80029ac <HAL_GPIO_Init+0x10>
  }
}
 8002c4e:	bf00      	nop
 8002c50:	bf00      	nop
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40010000 	.word	0x40010000
 8002c64:	48000400 	.word	0x48000400
 8002c68:	48000800 	.word	0x48000800
 8002c6c:	40010400 	.word	0x40010400

08002c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	887b      	ldrh	r3, [r7, #2]
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e001      	b.n	8002c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
 8002cac:	4613      	mov	r3, r2
 8002cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb0:	787b      	ldrb	r3, [r7, #1]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d006      	beq.n	8002cf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ce6:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f806 	bl	8002d00 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40007000 	.word	0x40007000

08002d38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40007000 	.word	0x40007000

08002d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d62:	d130      	bne.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d64:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d70:	d038      	beq.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2232      	movs	r2, #50	; 0x32
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0c9b      	lsrs	r3, r3, #18
 8002d94:	3301      	adds	r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d98:	e002      	b.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dac:	d102      	bne.n	8002db4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f2      	bne.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc0:	d110      	bne.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e00f      	b.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd2:	d007      	beq.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ddc:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40007000 	.word	0x40007000
 8002df8:	20000008 	.word	0x20000008
 8002dfc:	431bde83 	.word	0x431bde83

08002e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f000 bc10 	b.w	8003634 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e14:	4b96      	ldr	r3, [pc, #600]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e1e:	4b94      	ldr	r3, [pc, #592]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80e4 	beq.w	8002ffe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4c>
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	f040 808b 	bne.w	8002f5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f040 8087 	bne.w	8002f5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e4c:	4b88      	ldr	r3, [pc, #544]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_OscConfig+0x64>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e3e7      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1a      	ldr	r2, [r3, #32]
 8002e68:	4b81      	ldr	r3, [pc, #516]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_RCC_OscConfig+0x7e>
 8002e74:	4b7e      	ldr	r3, [pc, #504]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7c:	e005      	b.n	8002e8a <HAL_RCC_OscConfig+0x8a>
 8002e7e:	4b7c      	ldr	r3, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d223      	bcs.n	8002ed6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fd7a 	bl	800398c <RCC_SetFlashLatencyFromMSIRange>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e3c8      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea2:	4b73      	ldr	r3, [pc, #460]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a72      	ldr	r2, [pc, #456]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	f043 0308 	orr.w	r3, r3, #8
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b70      	ldr	r3, [pc, #448]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	496d      	ldr	r1, [pc, #436]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec0:	4b6b      	ldr	r3, [pc, #428]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	4968      	ldr	r1, [pc, #416]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	604b      	str	r3, [r1, #4]
 8002ed4:	e025      	b.n	8002f22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed6:	4b66      	ldr	r3, [pc, #408]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a65      	ldr	r2, [pc, #404]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002edc:	f043 0308 	orr.w	r3, r3, #8
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b63      	ldr	r3, [pc, #396]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4960      	ldr	r1, [pc, #384]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef4:	4b5e      	ldr	r3, [pc, #376]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	495b      	ldr	r1, [pc, #364]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fd3a 	bl	800398c <RCC_SetFlashLatencyFromMSIRange>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e388      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f22:	f000 fc6f 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 8002f26:	4602      	mov	r2, r0
 8002f28:	4b51      	ldr	r3, [pc, #324]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	4950      	ldr	r1, [pc, #320]	; (8003074 <HAL_RCC_OscConfig+0x274>)
 8002f34:	5ccb      	ldrb	r3, [r1, r3]
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a4e      	ldr	r2, [pc, #312]	; (8003078 <HAL_RCC_OscConfig+0x278>)
 8002f40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f42:	4b4e      	ldr	r3, [pc, #312]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fb18 	bl	800257c <HAL_InitTick>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d052      	beq.n	8002ffc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	e36c      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d032      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f62:	4b43      	ldr	r3, [pc, #268]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a42      	ldr	r2, [pc, #264]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f6e:	f7ff fb55 	bl	800261c <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f76:	f7ff fb51 	bl	800261c <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e355      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f88:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a35      	ldr	r2, [pc, #212]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	f043 0308 	orr.w	r3, r3, #8
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b33      	ldr	r3, [pc, #204]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4930      	ldr	r1, [pc, #192]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb2:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	492b      	ldr	r1, [pc, #172]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
 8002fc6:	e01a      	b.n	8002ffe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fc8:	4b29      	ldr	r3, [pc, #164]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a28      	ldr	r2, [pc, #160]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fd4:	f7ff fb22 	bl	800261c <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fdc:	f7ff fb1e 	bl	800261c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e322      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1dc>
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ffc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d073      	beq.n	80030f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d005      	beq.n	800301c <HAL_RCC_OscConfig+0x21c>
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d10e      	bne.n	8003034 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d10b      	bne.n	8003034 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	4b14      	ldr	r3, [pc, #80]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d063      	beq.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d15f      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e2ff      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303c:	d106      	bne.n	800304c <HAL_RCC_OscConfig+0x24c>
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a0b      	ldr	r2, [pc, #44]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e025      	b.n	8003098 <HAL_RCC_OscConfig+0x298>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003054:	d114      	bne.n	8003080 <HAL_RCC_OscConfig+0x280>
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a05      	ldr	r2, [pc, #20]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 800305c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a02      	ldr	r2, [pc, #8]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e013      	b.n	8003098 <HAL_RCC_OscConfig+0x298>
 8003070:	40021000 	.word	0x40021000
 8003074:	08017d9c 	.word	0x08017d9c
 8003078:	20000008 	.word	0x20000008
 800307c:	2000000c 	.word	0x2000000c
 8003080:	4ba0      	ldr	r3, [pc, #640]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a9f      	ldr	r2, [pc, #636]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b9d      	ldr	r3, [pc, #628]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a9c      	ldr	r2, [pc, #624]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7ff fabc 	bl	800261c <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7ff fab8 	bl	800261c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e2bc      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ba:	4b92      	ldr	r3, [pc, #584]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x2a8>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7ff faa8 	bl	800261c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7ff faa4 	bl	800261c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e2a8      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e2:	4b88      	ldr	r3, [pc, #544]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x2d0>
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d060      	beq.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b04      	cmp	r3, #4
 8003102:	d005      	beq.n	8003110 <HAL_RCC_OscConfig+0x310>
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d119      	bne.n	800313e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d116      	bne.n	800313e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003110:	4b7c      	ldr	r3, [pc, #496]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_OscConfig+0x328>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e285      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	4973      	ldr	r1, [pc, #460]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800313c:	e040      	b.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d023      	beq.n	800318e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003146:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a6e      	ldr	r2, [pc, #440]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800314c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003152:	f7ff fa63 	bl	800261c <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315a:	f7ff fa5f 	bl	800261c <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e263      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800316c:	4b65      	ldr	r3, [pc, #404]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003178:	4b62      	ldr	r3, [pc, #392]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	495f      	ldr	r1, [pc, #380]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
 800318c:	e018      	b.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318e:	4b5d      	ldr	r3, [pc, #372]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a5c      	ldr	r2, [pc, #368]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7ff fa3f 	bl	800261c <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a2:	f7ff fa3b 	bl	800261c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e23f      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b4:	4b53      	ldr	r3, [pc, #332]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f0      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d03c      	beq.n	8003246 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01c      	beq.n	800320e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d4:	4b4b      	ldr	r3, [pc, #300]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031da:	4a4a      	ldr	r2, [pc, #296]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7ff fa1a 	bl	800261c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ec:	f7ff fa16 	bl	800261c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e21a      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031fe:	4b41      	ldr	r3, [pc, #260]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ef      	beq.n	80031ec <HAL_RCC_OscConfig+0x3ec>
 800320c:	e01b      	b.n	8003246 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003214:	4a3b      	ldr	r2, [pc, #236]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7ff f9fd 	bl	800261c <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003226:	f7ff f9f9 	bl	800261c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e1fd      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003238:	4b32      	ldr	r3, [pc, #200]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800323a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1ef      	bne.n	8003226 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80a6 	beq.w	80033a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003254:	2300      	movs	r3, #0
 8003256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003258:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10d      	bne.n	8003280 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	4a26      	ldr	r2, [pc, #152]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 800326a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326e:	6593      	str	r3, [r2, #88]	; 0x58
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327c:	2301      	movs	r3, #1
 800327e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003280:	4b21      	ldr	r3, [pc, #132]	; (8003308 <HAL_RCC_OscConfig+0x508>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d118      	bne.n	80032be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800328c:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <HAL_RCC_OscConfig+0x508>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <HAL_RCC_OscConfig+0x508>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003298:	f7ff f9c0 	bl	800261c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7ff f9bc 	bl	800261c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e1c0      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_RCC_OscConfig+0x508>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d108      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4d8>
 80032c6:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032d6:	e029      	b.n	800332c <HAL_RCC_OscConfig+0x52c>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d115      	bne.n	800330c <HAL_RCC_OscConfig+0x50c>
 80032e0:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	4a07      	ldr	r2, [pc, #28]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	4a03      	ldr	r2, [pc, #12]	; (8003304 <HAL_RCC_OscConfig+0x504>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003300:	e014      	b.n	800332c <HAL_RCC_OscConfig+0x52c>
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	40007000 	.word	0x40007000
 800330c:	4b9a      	ldr	r3, [pc, #616]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	4a99      	ldr	r2, [pc, #612]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800331c:	4b96      	ldr	r3, [pc, #600]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	4a95      	ldr	r2, [pc, #596]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d016      	beq.n	8003362 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7ff f972 	bl	800261c <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7ff f96e 	bl	800261c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e170      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003352:	4b89      	ldr	r3, [pc, #548]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ed      	beq.n	800333c <HAL_RCC_OscConfig+0x53c>
 8003360:	e015      	b.n	800338e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003362:	f7ff f95b 	bl	800261c <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336a:	f7ff f957 	bl	800261c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	; 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e159      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003380:	4b7d      	ldr	r3, [pc, #500]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ed      	bne.n	800336a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338e:	7ffb      	ldrb	r3, [r7, #31]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003394:	4b78      	ldr	r3, [pc, #480]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	4a77      	ldr	r2, [pc, #476]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 800339a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d03c      	beq.n	8003426 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01c      	beq.n	80033ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033b4:	4b70      	ldr	r3, [pc, #448]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80033b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ba:	4a6f      	ldr	r2, [pc, #444]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7ff f92a 	bl	800261c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033cc:	f7ff f926 	bl	800261c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e12a      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033de:	4b66      	ldr	r3, [pc, #408]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80033e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ef      	beq.n	80033cc <HAL_RCC_OscConfig+0x5cc>
 80033ec:	e01b      	b.n	8003426 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033ee:	4b62      	ldr	r3, [pc, #392]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80033f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f4:	4a60      	ldr	r2, [pc, #384]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7ff f90d 	bl	800261c <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003406:	f7ff f909 	bl	800261c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e10d      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003418:	4b57      	ldr	r3, [pc, #348]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 800341a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ef      	bne.n	8003406 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 8101 	beq.w	8003632 <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	2b02      	cmp	r3, #2
 8003436:	f040 80c9 	bne.w	80035cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800343a:	4b4f      	ldr	r3, [pc, #316]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 0203 	and.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	429a      	cmp	r2, r3
 800344c:	d12c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	3b01      	subs	r3, #1
 800345a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d123      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d11b      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d113      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	3b01      	subs	r3, #1
 800348e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d109      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	3b01      	subs	r3, #1
 80034a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d06b      	beq.n	8003580 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d062      	beq.n	8003574 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034ae:	4b32      	ldr	r3, [pc, #200]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e0ba      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034be:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2d      	ldr	r2, [pc, #180]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80034c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034ca:	f7ff f8a7 	bl	800261c <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d2:	f7ff f8a3 	bl	800261c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0a7      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e4:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f0      	bne.n	80034d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f0:	4b21      	ldr	r3, [pc, #132]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	4b21      	ldr	r3, [pc, #132]	; (800357c <HAL_RCC_OscConfig+0x77c>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003500:	3a01      	subs	r2, #1
 8003502:	0112      	lsls	r2, r2, #4
 8003504:	4311      	orrs	r1, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800350a:	0212      	lsls	r2, r2, #8
 800350c:	4311      	orrs	r1, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003512:	0852      	lsrs	r2, r2, #1
 8003514:	3a01      	subs	r2, #1
 8003516:	0552      	lsls	r2, r2, #21
 8003518:	4311      	orrs	r1, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800351e:	0852      	lsrs	r2, r2, #1
 8003520:	3a01      	subs	r2, #1
 8003522:	0652      	lsls	r2, r2, #25
 8003524:	4311      	orrs	r1, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800352a:	06d2      	lsls	r2, r2, #27
 800352c:	430a      	orrs	r2, r1
 800352e:	4912      	ldr	r1, [pc, #72]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003530:	4313      	orrs	r3, r2
 8003532:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003534:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 800353a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a0c      	ldr	r2, [pc, #48]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800354c:	f7ff f866 	bl	800261c <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7ff f862 	bl	800261c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e066      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003566:	4b04      	ldr	r3, [pc, #16]	; (8003578 <HAL_RCC_OscConfig+0x778>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003572:	e05e      	b.n	8003632 <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e05d      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
 8003578:	40021000 	.word	0x40021000
 800357c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003580:	4b2e      	ldr	r3, [pc, #184]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d152      	bne.n	8003632 <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800358c:	4b2b      	ldr	r3, [pc, #172]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a2a      	ldr	r2, [pc, #168]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 8003592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003596:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003598:	4b28      	ldr	r3, [pc, #160]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4a27      	ldr	r2, [pc, #156]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 800359e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035a4:	f7ff f83a 	bl	800261c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ac:	f7ff f836 	bl	800261c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e03a      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035be:	4b1f      	ldr	r3, [pc, #124]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x7ac>
 80035ca:	e032      	b.n	8003632 <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d02d      	beq.n	800362e <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a19      	ldr	r2, [pc, #100]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 80035d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035dc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035de:	4b17      	ldr	r3, [pc, #92]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035ea:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	4a13      	ldr	r2, [pc, #76]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 80035f0:	f023 0303 	bic.w	r3, r3, #3
 80035f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 80035fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003604:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7ff f809 	bl	800261c <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360e:	f7ff f805 	bl	800261c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e009      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_OscConfig+0x83c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x80e>
 800362c:	e001      	b.n	8003632 <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000

08003640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0c8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b66      	ldr	r3, [pc, #408]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b63      	ldr	r3, [pc, #396]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4961      	ldr	r1, [pc, #388]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b5f      	ldr	r3, [pc, #380]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0b0      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d04c      	beq.n	800372a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003698:	4b56      	ldr	r3, [pc, #344]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d121      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e09e      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d107      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b0:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d115      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e092      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036c8:	4b4a      	ldr	r3, [pc, #296]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e086      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d8:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e07e      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036e8:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f023 0203 	bic.w	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	493f      	ldr	r1, [pc, #252]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036fa:	f7fe ff8f 	bl	800261c <HAL_GetTick>
 80036fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003700:	e00a      	b.n	8003718 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003702:	f7fe ff8b 	bl	800261c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e066      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 020c 	and.w	r2, r3, #12
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	429a      	cmp	r2, r3
 8003728:	d1eb      	bne.n	8003702 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003736:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	492c      	ldr	r1, [pc, #176]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003748:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d210      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 0207 	bic.w	r2, r3, #7
 800375e:	4924      	ldr	r1, [pc, #144]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e036      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4918      	ldr	r1, [pc, #96]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a2:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4910      	ldr	r1, [pc, #64]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037b6:	f000 f825 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80037ba:	4602      	mov	r2, r0
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	490c      	ldr	r1, [pc, #48]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	5ccb      	ldrb	r3, [r1, r3]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fece 	bl	800257c <HAL_InitTick>
 80037e0:	4603      	mov	r3, r0
 80037e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80037e4:	7afb      	ldrb	r3, [r7, #11]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40022000 	.word	0x40022000
 80037f4:	40021000 	.word	0x40021000
 80037f8:	08017d9c 	.word	0x08017d9c
 80037fc:	20000008 	.word	0x20000008
 8003800:	2000000c 	.word	0x2000000c

08003804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003812:	4b3e      	ldr	r3, [pc, #248]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800381c:	4b3b      	ldr	r3, [pc, #236]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x34>
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d121      	bne.n	8003876 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d11e      	bne.n	8003876 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003838:	4b34      	ldr	r3, [pc, #208]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d107      	bne.n	8003854 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003844:	4b31      	ldr	r3, [pc, #196]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	e005      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003854:	4b2d      	ldr	r3, [pc, #180]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003860:	4a2b      	ldr	r2, [pc, #172]	; (8003910 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003868:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003874:	e00a      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b04      	cmp	r3, #4
 800387a:	d102      	bne.n	8003882 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800387c:	4b25      	ldr	r3, [pc, #148]	; (8003914 <HAL_RCC_GetSysClockFreq+0x110>)
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	e004      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b08      	cmp	r3, #8
 8003886:	d101      	bne.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003888:	4b23      	ldr	r3, [pc, #140]	; (8003918 <HAL_RCC_GetSysClockFreq+0x114>)
 800388a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b0c      	cmp	r3, #12
 8003890:	d134      	bne.n	80038fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003892:	4b1e      	ldr	r3, [pc, #120]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0xa6>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d003      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0xac>
 80038a8:	e005      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038aa:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ac:	617b      	str	r3, [r7, #20]
      break;
 80038ae:	e005      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_RCC_GetSysClockFreq+0x114>)
 80038b2:	617b      	str	r3, [r7, #20]
      break;
 80038b4:	e002      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	617b      	str	r3, [r7, #20]
      break;
 80038ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038bc:	4b13      	ldr	r3, [pc, #76]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	3301      	adds	r3, #1
 80038c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	fb03 f202 	mul.w	r2, r3, r2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	0e5b      	lsrs	r3, r3, #25
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	3301      	adds	r3, #1
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038fc:	69bb      	ldr	r3, [r7, #24]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3724      	adds	r7, #36	; 0x24
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	08017db4 	.word	0x08017db4
 8003914:	00f42400 	.word	0x00f42400
 8003918:	007a1200 	.word	0x007a1200

0800391c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <HAL_RCC_GetHCLKFreq+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000008 	.word	0x20000008

08003934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003938:	f7ff fff0 	bl	800391c <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4904      	ldr	r1, [pc, #16]	; (800395c <HAL_RCC_GetPCLK1Freq+0x28>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	08017dac 	.word	0x08017dac

08003960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003964:	f7ff ffda 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0adb      	lsrs	r3, r3, #11
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4904      	ldr	r1, [pc, #16]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	08017dac 	.word	0x08017dac

0800398c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003994:	2300      	movs	r3, #0
 8003996:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003998:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039a4:	f7ff f9c8 	bl	8002d38 <HAL_PWREx_GetVoltageRange>
 80039a8:	6178      	str	r0, [r7, #20]
 80039aa:	e014      	b.n	80039d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039ac:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	4a24      	ldr	r2, [pc, #144]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b6:	6593      	str	r3, [r2, #88]	; 0x58
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039c4:	f7ff f9b8 	bl	8002d38 <HAL_PWREx_GetVoltageRange>
 80039c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039dc:	d10b      	bne.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b80      	cmp	r3, #128	; 0x80
 80039e2:	d919      	bls.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2ba0      	cmp	r3, #160	; 0xa0
 80039e8:	d902      	bls.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039ea:	2302      	movs	r3, #2
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e013      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039f0:	2301      	movs	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	e010      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b80      	cmp	r3, #128	; 0x80
 80039fa:	d902      	bls.n	8003a02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039fc:	2303      	movs	r3, #3
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	e00a      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b80      	cmp	r3, #128	; 0x80
 8003a06:	d102      	bne.n	8003a0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a08:	2302      	movs	r3, #2
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	e004      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b70      	cmp	r3, #112	; 0x70
 8003a12:	d101      	bne.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a14:	2301      	movs	r3, #1
 8003a16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 0207 	bic.w	r2, r3, #7
 8003a20:	4909      	ldr	r1, [pc, #36]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d001      	beq.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a54:	2300      	movs	r3, #0
 8003a56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a58:	2300      	movs	r3, #0
 8003a5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d031      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a70:	d01a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003a72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a76:	d814      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a80:	d10f      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003a82:	4b5d      	ldr	r3, [pc, #372]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	4a5c      	ldr	r2, [pc, #368]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a8e:	e00c      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f9de 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aa0:	e003      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	74fb      	strb	r3, [r7, #19]
      break;
 8003aa6:	e000      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ab0:	4b51      	ldr	r3, [pc, #324]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	494e      	ldr	r1, [pc, #312]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ac6:	e001      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	7cfb      	ldrb	r3, [r7, #19]
 8003aca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 809e 	beq.w	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ada:	2300      	movs	r3, #0
 8003adc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ade:	4b46      	ldr	r3, [pc, #280]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003aee:	2300      	movs	r3, #0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00d      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af4:	4b40      	ldr	r3, [pc, #256]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af8:	4a3f      	ldr	r2, [pc, #252]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6593      	str	r3, [r2, #88]	; 0x58
 8003b00:	4b3d      	ldr	r3, [pc, #244]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b10:	4b3a      	ldr	r3, [pc, #232]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a39      	ldr	r2, [pc, #228]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b1c:	f7fe fd7e 	bl	800261c <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b22:	e009      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b24:	f7fe fd7a 	bl	800261c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d902      	bls.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	74fb      	strb	r3, [r7, #19]
        break;
 8003b36:	e005      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b38:	4b30      	ldr	r3, [pc, #192]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0ef      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d15a      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01e      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d019      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b66:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b70:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b72:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b78:	4a1f      	ldr	r2, [pc, #124]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b82:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b88:	4a1b      	ldr	r2, [pc, #108]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b92:	4a19      	ldr	r2, [pc, #100]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d016      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fd3a 	bl	800261c <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003baa:	e00b      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7fe fd36 	bl	800261c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d902      	bls.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	74fb      	strb	r3, [r7, #19]
            break;
 8003bc2:	e006      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ec      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be6:	4904      	ldr	r1, [pc, #16]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bee:	e009      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf0:	7cfb      	ldrb	r3, [r7, #19]
 8003bf2:	74bb      	strb	r3, [r7, #18]
 8003bf4:	e006      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c04:	7c7b      	ldrb	r3, [r7, #17]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d105      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0a:	4b8a      	ldr	r3, [pc, #552]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	4a89      	ldr	r2, [pc, #548]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c22:	4b84      	ldr	r3, [pc, #528]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	f023 0203 	bic.w	r2, r3, #3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	4980      	ldr	r1, [pc, #512]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c44:	4b7b      	ldr	r3, [pc, #492]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f023 020c 	bic.w	r2, r3, #12
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	4978      	ldr	r1, [pc, #480]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c66:	4b73      	ldr	r3, [pc, #460]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	496f      	ldr	r1, [pc, #444]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c88:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c96:	4967      	ldr	r1, [pc, #412]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003caa:	4b62      	ldr	r3, [pc, #392]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	495e      	ldr	r1, [pc, #376]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ccc:	4b59      	ldr	r3, [pc, #356]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	4956      	ldr	r1, [pc, #344]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cee:	4b51      	ldr	r3, [pc, #324]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	494d      	ldr	r1, [pc, #308]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d028      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d10:	4b48      	ldr	r3, [pc, #288]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	4945      	ldr	r1, [pc, #276]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d30:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a3f      	ldr	r2, [pc, #252]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d3a:	60d3      	str	r3, [r2, #12]
 8003d3c:	e011      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d46:	d10c      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f882 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d58:	7cfb      	ldrb	r3, [r7, #19]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
 8003d60:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d028      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7c:	492d      	ldr	r1, [pc, #180]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d8c:	d106      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d8e:	4b29      	ldr	r3, [pc, #164]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	4a28      	ldr	r2, [pc, #160]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d98:	60d3      	str	r3, [r2, #12]
 8003d9a:	e011      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	2101      	movs	r1, #1
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f853 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01c      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dda:	4916      	ldr	r1, [pc, #88]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dea:	d10c      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	2102      	movs	r1, #2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f830 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003e02:	7cfb      	ldrb	r3, [r7, #19]
 8003e04:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e12:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e18:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e20:	4904      	ldr	r1, [pc, #16]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e28:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000

08003e38 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e42:	f043 0304 	orr.w	r3, r3, #4
 8003e46:	6013      	str	r3, [r2, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000

08003e58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e66:	4b74      	ldr	r3, [pc, #464]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d018      	beq.n	8003ea4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e72:	4b71      	ldr	r3, [pc, #452]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0203 	and.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d10d      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
       ||
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e8a:	4b6b      	ldr	r3, [pc, #428]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
       ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d047      	beq.n	8003f2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	e044      	b.n	8003f2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d018      	beq.n	8003ede <RCCEx_PLLSAI1_Config+0x86>
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d825      	bhi.n	8003efc <RCCEx_PLLSAI1_Config+0xa4>
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d002      	beq.n	8003eba <RCCEx_PLLSAI1_Config+0x62>
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d009      	beq.n	8003ecc <RCCEx_PLLSAI1_Config+0x74>
 8003eb8:	e020      	b.n	8003efc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eba:	4b5f      	ldr	r3, [pc, #380]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11d      	bne.n	8003f02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eca:	e01a      	b.n	8003f02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ecc:	4b5a      	ldr	r3, [pc, #360]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d116      	bne.n	8003f06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003edc:	e013      	b.n	8003f06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ede:	4b56      	ldr	r3, [pc, #344]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eea:	4b53      	ldr	r3, [pc, #332]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003efa:	e006      	b.n	8003f0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
      break;
 8003f00:	e004      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f12:	4b49      	ldr	r3, [pc, #292]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	430b      	orrs	r3, r1
 8003f28:	4943      	ldr	r1, [pc, #268]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d17c      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f34:	4b40      	ldr	r3, [pc, #256]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a3f      	ldr	r2, [pc, #252]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f40:	f7fe fb6c 	bl	800261c <HAL_GetTick>
 8003f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f46:	e009      	b.n	8003f5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f48:	f7fe fb68 	bl	800261c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d902      	bls.n	8003f5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	73fb      	strb	r3, [r7, #15]
        break;
 8003f5a:	e005      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f5c:	4b36      	ldr	r3, [pc, #216]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ef      	bne.n	8003f48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d15f      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d110      	bne.n	8003f96 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f74:	4b30      	ldr	r3, [pc, #192]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6892      	ldr	r2, [r2, #8]
 8003f84:	0211      	lsls	r1, r2, #8
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68d2      	ldr	r2, [r2, #12]
 8003f8a:	06d2      	lsls	r2, r2, #27
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	492a      	ldr	r1, [pc, #168]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	610b      	str	r3, [r1, #16]
 8003f94:	e027      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d112      	bne.n	8003fc2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f9c:	4b26      	ldr	r3, [pc, #152]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6892      	ldr	r2, [r2, #8]
 8003fac:	0211      	lsls	r1, r2, #8
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6912      	ldr	r2, [r2, #16]
 8003fb2:	0852      	lsrs	r2, r2, #1
 8003fb4:	3a01      	subs	r2, #1
 8003fb6:	0552      	lsls	r2, r2, #21
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	491f      	ldr	r1, [pc, #124]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	610b      	str	r3, [r1, #16]
 8003fc0:	e011      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6892      	ldr	r2, [r2, #8]
 8003fd2:	0211      	lsls	r1, r2, #8
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6952      	ldr	r2, [r2, #20]
 8003fd8:	0852      	lsrs	r2, r2, #1
 8003fda:	3a01      	subs	r2, #1
 8003fdc:	0652      	lsls	r2, r2, #25
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	4915      	ldr	r1, [pc, #84]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fe6:	4b14      	ldr	r3, [pc, #80]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a13      	ldr	r2, [pc, #76]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff2:	f7fe fb13 	bl	800261c <HAL_GetTick>
 8003ff6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ff8:	e009      	b.n	800400e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ffa:	f7fe fb0f 	bl	800261c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d902      	bls.n	800400e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	73fb      	strb	r3, [r7, #15]
          break;
 800400c:	e005      	b.n	800401a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0ef      	beq.n	8003ffa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	4903      	ldr	r1, [pc, #12]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 800402a:	4313      	orrs	r3, r2
 800402c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800402e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000

0800403c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d06c      	beq.n	8004128 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fe f8a0 	bl	80021a8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	22ca      	movs	r2, #202	; 0xca
 8004076:	625a      	str	r2, [r3, #36]	; 0x24
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2253      	movs	r2, #83	; 0x53
 800407e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f87c 	bl	800417e <RTC_EnterInitMode>
 8004086:	4603      	mov	r3, r0
 8004088:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d14b      	bne.n	8004128 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800409e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6899      	ldr	r1, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68d2      	ldr	r2, [r2, #12]
 80040ca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6919      	ldr	r1, [r3, #16]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	041a      	lsls	r2, r3, #16
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f87f 	bl	80041e4 <RTC_ExitInitMode>
 80040e6:	4603      	mov	r3, r0
 80040e8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d11b      	bne.n	8004128 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0203 	bic.w	r2, r2, #3
 80040fe:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	22ff      	movs	r2, #255	; 0xff
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004128:	7bfb      	ldrb	r3, [r7, #15]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004148:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800414a:	f7fe fa67 	bl	800261c <HAL_GetTick>
 800414e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004150:	e009      	b.n	8004166 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004152:	f7fe fa63 	bl	800261c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004160:	d901      	bls.n	8004166 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e007      	b.n	8004176 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0ee      	beq.n	8004152 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d120      	bne.n	80041da <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f04f 32ff 	mov.w	r2, #4294967295
 80041a0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80041a2:	f7fe fa3b 	bl	800261c <HAL_GetTick>
 80041a6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041a8:	e00d      	b.n	80041c6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80041aa:	f7fe fa37 	bl	800261c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041b8:	d905      	bls.n	80041c6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2203      	movs	r2, #3
 80041c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <RTC_EnterInitMode+0x5c>
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d1e7      	bne.n	80041aa <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <RTC_ExitInitMode+0x78>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4a19      	ldr	r2, [pc, #100]	; (800425c <RTC_ExitInitMode+0x78>)
 80041f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041fa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80041fc:	4b17      	ldr	r3, [pc, #92]	; (800425c <RTC_ExitInitMode+0x78>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10c      	bne.n	8004222 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff92 	bl	8004132 <HAL_RTC_WaitForSynchro>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01e      	beq.n	8004252 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2203      	movs	r2, #3
 8004218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	73fb      	strb	r3, [r7, #15]
 8004220:	e017      	b.n	8004252 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004222:	4b0e      	ldr	r3, [pc, #56]	; (800425c <RTC_ExitInitMode+0x78>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	4a0d      	ldr	r2, [pc, #52]	; (800425c <RTC_ExitInitMode+0x78>)
 8004228:	f023 0320 	bic.w	r3, r3, #32
 800422c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ff7f 	bl	8004132 <HAL_RTC_WaitForSynchro>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2203      	movs	r2, #3
 800423e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <RTC_ExitInitMode+0x78>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	4a04      	ldr	r2, [pc, #16]	; (800425c <RTC_ExitInitMode+0x78>)
 800424c:	f043 0320 	orr.w	r3, r3, #32
 8004250:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40002800 	.word	0x40002800

08004260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e095      	b.n	800439e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d108      	bne.n	800428c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004282:	d009      	beq.n	8004298 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
 800428a:	e005      	b.n	8004298 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fd ffa8 	bl	8002208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042d8:	d902      	bls.n	80042e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e002      	b.n	80042e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042ee:	d007      	beq.n	8004300 <HAL_SPI_Init+0xa0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042f8:	d002      	beq.n	8004300 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	ea42 0103 	orr.w	r1, r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	f003 0204 	and.w	r2, r3, #4
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800437c:	ea42 0103 	orr.w	r1, r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b08a      	sub	sp, #40	; 0x28
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043b4:	2301      	movs	r3, #1
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x26>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e1fb      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x41e>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043d4:	f7fe f922 	bl	800261c <HAL_GetTick>
 80043d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80043e8:	887b      	ldrh	r3, [r7, #2]
 80043ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80043ec:	887b      	ldrh	r3, [r7, #2]
 80043ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043f0:	7efb      	ldrb	r3, [r7, #27]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d00e      	beq.n	8004414 <HAL_SPI_TransmitReceive+0x6e>
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fc:	d106      	bne.n	800440c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d102      	bne.n	800440c <HAL_SPI_TransmitReceive+0x66>
 8004406:	7efb      	ldrb	r3, [r7, #27]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d003      	beq.n	8004414 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800440c:	2302      	movs	r3, #2
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004412:	e1cd      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_SPI_TransmitReceive+0x80>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_SPI_TransmitReceive+0x80>
 8004420:	887b      	ldrh	r3, [r7, #2]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800442c:	e1c0      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b04      	cmp	r3, #4
 8004438:	d003      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2205      	movs	r2, #5
 800443e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	887a      	ldrh	r2, [r7, #2]
 8004452:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	887a      	ldrh	r2, [r7, #2]
 800445a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	887a      	ldrh	r2, [r7, #2]
 8004468:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	887a      	ldrh	r2, [r7, #2]
 800446e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004484:	d802      	bhi.n	800448c <HAL_SPI_TransmitReceive+0xe6>
 8004486:	8a3b      	ldrh	r3, [r7, #16]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d908      	bls.n	800449e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800449a:	605a      	str	r2, [r3, #4]
 800449c:	e007      	b.n	80044ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d007      	beq.n	80044cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044d4:	d97c      	bls.n	80045d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_TransmitReceive+0x13e>
 80044de:	8a7b      	ldrh	r3, [r7, #18]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d169      	bne.n	80045b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	881a      	ldrh	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	1c9a      	adds	r2, r3, #2
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004508:	e056      	b.n	80045b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b02      	cmp	r3, #2
 8004516:	d11b      	bne.n	8004550 <HAL_SPI_TransmitReceive+0x1aa>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d016      	beq.n	8004550 <HAL_SPI_TransmitReceive+0x1aa>
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	2b01      	cmp	r3, #1
 8004526:	d113      	bne.n	8004550 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	881a      	ldrh	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	1c9a      	adds	r2, r3, #2
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004542:	b29b      	uxth	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d11c      	bne.n	8004598 <HAL_SPI_TransmitReceive+0x1f2>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d016      	beq.n	8004598 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	b292      	uxth	r2, r2
 8004576:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	1c9a      	adds	r2, r3, #2
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004594:	2301      	movs	r3, #1
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004598:	f7fe f840 	bl	800261c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d807      	bhi.n	80045b8 <HAL_SPI_TransmitReceive+0x212>
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d003      	beq.n	80045b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80045b6:	e0fb      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1a3      	bne.n	800450a <HAL_SPI_TransmitReceive+0x164>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d19d      	bne.n	800450a <HAL_SPI_TransmitReceive+0x164>
 80045ce:	e0df      	b.n	8004790 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_SPI_TransmitReceive+0x23a>
 80045d8:	8a7b      	ldrh	r3, [r7, #18]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	f040 80cb 	bne.w	8004776 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d912      	bls.n	8004610 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b02      	subs	r3, #2
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800460e:	e0b2      	b.n	8004776 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	7812      	ldrb	r2, [r2, #0]
 800461c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004636:	e09e      	b.n	8004776 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d134      	bne.n	80046b0 <HAL_SPI_TransmitReceive+0x30a>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02f      	beq.n	80046b0 <HAL_SPI_TransmitReceive+0x30a>
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	2b01      	cmp	r3, #1
 8004654:	d12c      	bne.n	80046b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	d912      	bls.n	8004686 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	881a      	ldrh	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	1c9a      	adds	r2, r3, #2
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b02      	subs	r3, #2
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004684:	e012      	b.n	80046ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	7812      	ldrb	r2, [r2, #0]
 8004692:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d148      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x3aa>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d042      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d923      	bls.n	800471e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	b292      	uxth	r2, r2
 80046e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	1c9a      	adds	r2, r3, #2
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b02      	subs	r3, #2
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d81f      	bhi.n	800474c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	e016      	b.n	800474c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f103 020c 	add.w	r2, r3, #12
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	7812      	ldrb	r2, [r2, #0]
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004740:	b29b      	uxth	r3, r3
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800474c:	2301      	movs	r3, #1
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004750:	f7fd ff64 	bl	800261c <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475c:	429a      	cmp	r2, r3
 800475e:	d803      	bhi.n	8004768 <HAL_SPI_TransmitReceive+0x3c2>
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d102      	bne.n	800476e <HAL_SPI_TransmitReceive+0x3c8>
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004774:	e01c      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	f47f af5b 	bne.w	8004638 <HAL_SPI_TransmitReceive+0x292>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	f47f af54 	bne.w	8004638 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f933 	bl	8004a00 <SPI_EndRxTxTransaction>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d006      	beq.n	80047ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2220      	movs	r2, #32
 80047aa:	661a      	str	r2, [r3, #96]	; 0x60
 80047ac:	e000      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80047ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80047c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3728      	adds	r7, #40	; 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047dc:	f7fd ff1e 	bl	800261c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	4413      	add	r3, r2
 80047ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047ec:	f7fd ff16 	bl	800261c <HAL_GetTick>
 80047f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047f2:	4b39      	ldr	r3, [pc, #228]	; (80048d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	015b      	lsls	r3, r3, #5
 80047f8:	0d1b      	lsrs	r3, r3, #20
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	fb02 f303 	mul.w	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004802:	e054      	b.n	80048ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d050      	beq.n	80048ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800480c:	f7fd ff06 	bl	800261c <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	429a      	cmp	r2, r3
 800481a:	d902      	bls.n	8004822 <SPI_WaitFlagStateUntilTimeout+0x56>
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d13d      	bne.n	800489e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800483a:	d111      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x94>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004844:	d004      	beq.n	8004850 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484e:	d107      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004868:	d10f      	bne.n	800488a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e017      	b.n	80048ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	bf0c      	ite	eq
 80048be:	2301      	moveq	r3, #1
 80048c0:	2300      	movne	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	461a      	mov	r2, r3
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d19b      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000008 	.word	0x20000008

080048dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048ea:	f7fd fe97 	bl	800261c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	4413      	add	r3, r2
 80048f8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048fa:	f7fd fe8f 	bl	800261c <HAL_GetTick>
 80048fe:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004900:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	00da      	lsls	r2, r3, #3
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	0d1b      	lsrs	r3, r3, #20
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004918:	e062      	b.n	80049e0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004920:	d109      	bne.n	8004936 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	330c      	adds	r3, #12
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004934:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d050      	beq.n	80049e0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800493e:	f7fd fe6d 	bl	800261c <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	429a      	cmp	r2, r3
 800494c:	d902      	bls.n	8004954 <SPI_WaitFifoStateUntilTimeout+0x78>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d13d      	bne.n	80049d0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004962:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496c:	d111      	bne.n	8004992 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004976:	d004      	beq.n	8004982 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004980:	d107      	bne.n	8004992 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004990:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499a:	d10f      	bne.n	80049bc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e010      	b.n	80049f2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	3b01      	subs	r3, #1
 80049de:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d194      	bne.n	800491a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000008 	.word	0x20000008

08004a00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff ff5f 	bl	80048dc <SPI_WaitFifoStateUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e027      	b.n	8004a84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2180      	movs	r1, #128	; 0x80
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7ff fec4 	bl	80047cc <SPI_WaitFlagStateUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	f043 0220 	orr.w	r2, r3, #32
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e014      	b.n	8004a84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff ff38 	bl	80048dc <SPI_WaitFifoStateUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a76:	f043 0220 	orr.w	r2, r3, #32
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e000      	b.n	8004a84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e040      	b.n	8004b20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fd fbec 	bl	800228c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2224      	movs	r2, #36	; 0x24
 8004ab8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fb30 	bl	8005130 <UART_SetConfig>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e022      	b.n	8004b20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fd52 	bl	800558c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004af6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fdd9 	bl	80056d0 <UART_CheckIdleState>
 8004b1e:	4603      	mov	r3, r0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08a      	sub	sp, #40	; 0x28
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	4613      	mov	r3, r2
 8004b36:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	f040 8082 	bne.w	8004c46 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <HAL_UART_Transmit+0x26>
 8004b48:	88fb      	ldrh	r3, [r7, #6]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e07a      	b.n	8004c48 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_UART_Transmit+0x38>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e073      	b.n	8004c48 <HAL_UART_Transmit+0x120>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2221      	movs	r2, #33	; 0x21
 8004b74:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b76:	f7fd fd51 	bl	800261c <HAL_GetTick>
 8004b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	88fa      	ldrh	r2, [r7, #6]
 8004b80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b94:	d108      	bne.n	8004ba8 <HAL_UART_Transmit+0x80>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d104      	bne.n	8004ba8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	e003      	b.n	8004bb0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004bb8:	e02d      	b.n	8004c16 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2180      	movs	r1, #128	; 0x80
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 fdcc 	bl	8005762 <UART_WaitOnFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e039      	b.n	8004c48 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	881a      	ldrh	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be6:	b292      	uxth	r2, r2
 8004be8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	3302      	adds	r3, #2
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	e008      	b.n	8004c04 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	781a      	ldrb	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	b292      	uxth	r2, r2
 8004bfc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3301      	adds	r3, #1
 8004c02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1cb      	bne.n	8004bba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2140      	movs	r1, #64	; 0x40
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 fd98 	bl	8005762 <UART_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e005      	b.n	8004c48 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e000      	b.n	8004c48 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
  }
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d131      	bne.n	8004cca <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_UART_Receive_IT+0x22>
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e02a      	b.n	8004ccc <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_UART_Receive_IT+0x34>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e023      	b.n	8004ccc <HAL_UART_Receive_IT+0x7c>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a0f      	ldr	r2, [pc, #60]	; (8004cd4 <HAL_UART_Receive_IT+0x84>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00e      	beq.n	8004cba <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004cb8:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fdcb 	bl	800585c <UART_Start_Receive_IT>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	e000      	b.n	8004ccc <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004cca:	2302      	movs	r3, #2
  }
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40008000 	.word	0x40008000

08004cd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	f640 030f 	movw	r3, #2063	; 0x80f
 8004cfe:	4013      	ands	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d113      	bne.n	8004d30 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00e      	beq.n	8004d30 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d009      	beq.n	8004d30 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 81cf 	beq.w	80050c4 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	4798      	blx	r3
      }
      return;
 8004d2e:	e1c9      	b.n	80050c4 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80e8 	beq.w	8004f08 <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d105      	bne.n	8004d4e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4b6e      	ldr	r3, [pc, #440]	; (8004f00 <HAL_UART_IRQHandler+0x228>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80dd 	beq.w	8004f08 <HAL_UART_IRQHandler+0x230>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <HAL_UART_IRQHandler+0xa2>
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2201      	movs	r2, #1
 8004d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d70:	f043 0201 	orr.w	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d010      	beq.n	8004da6 <HAL_UART_IRQHandler+0xce>
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2202      	movs	r2, #2
 8004d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9c:	f043 0204 	orr.w	r2, r3, #4
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d010      	beq.n	8004dd2 <HAL_UART_IRQHandler+0xfa>
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00b      	beq.n	8004dd2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc8:	f043 0202 	orr.w	r2, r3, #2
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d015      	beq.n	8004e08 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00b      	beq.n	8004e08 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2208      	movs	r2, #8
 8004df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dfe:	f043 0208 	orr.w	r2, r3, #8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d011      	beq.n	8004e36 <HAL_UART_IRQHandler+0x15e>
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00c      	beq.n	8004e36 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e2c:	f043 0220 	orr.w	r2, r3, #32
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8143 	beq.w	80050c8 <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e6c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	d004      	beq.n	8004e86 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d031      	beq.n	8004eea <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fd70 	bl	800596c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d123      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d013      	beq.n	8004eda <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <HAL_UART_IRQHandler+0x22c>)
 8004eb8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fd fd2b 	bl	800291a <HAL_DMA_Abort_IT>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d017      	beq.n	8004efa <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed8:	e00f      	b.n	8004efa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f912 	bl	8005104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	e00b      	b.n	8004efa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f90e 	bl	8005104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	e007      	b.n	8004efa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f90a 	bl	8005104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004ef8:	e0e6      	b.n	80050c8 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efa:	bf00      	nop
    return;
 8004efc:	e0e4      	b.n	80050c8 <HAL_UART_IRQHandler+0x3f0>
 8004efe:	bf00      	nop
 8004f00:	04000120 	.word	0x04000120
 8004f04:	080059cb 	.word	0x080059cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	f040 80a5 	bne.w	800505c <HAL_UART_IRQHandler+0x384>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 809f 	beq.w	800505c <HAL_UART_IRQHandler+0x384>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8099 	beq.w	800505c <HAL_UART_IRQHandler+0x384>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2210      	movs	r2, #16
 8004f30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d154      	bne.n	8004fea <HAL_UART_IRQHandler+0x312>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004f4a:	893b      	ldrh	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80bd 	beq.w	80050cc <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f58:	893a      	ldrh	r2, [r7, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	f080 80b6 	bcs.w	80050cc <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	893a      	ldrh	r2, [r7, #8]
 8004f64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d12a      	bne.n	8004fce <HAL_UART_IRQHandler+0x2f6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f86:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0201 	bic.w	r2, r2, #1
 8004f96:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0210 	bic.w	r2, r2, #16
 8004fc2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fd fc68 	bl	800289e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f898 	bl	8005118 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004fe8:	e070      	b.n	80050cc <HAL_UART_IRQHandler+0x3f4>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d063      	beq.n	80050d0 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8005008:	897b      	ldrh	r3, [r7, #10]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d060      	beq.n	80050d0 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800501c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0201 	bic.w	r2, r2, #1
 800502c:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0210 	bic.w	r2, r2, #16
 800504e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005050:	897b      	ldrh	r3, [r7, #10]
 8005052:	4619      	mov	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f85f 	bl	8005118 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800505a:	e039      	b.n	80050d0 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00d      	beq.n	8005082 <HAL_UART_IRQHandler+0x3aa>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005078:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fdac 	bl	8005bd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005080:	e029      	b.n	80050d6 <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00d      	beq.n	80050a8 <HAL_UART_IRQHandler+0x3d0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b00      	cmp	r3, #0
 8005094:	d008      	beq.n	80050a8 <HAL_UART_IRQHandler+0x3d0>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01a      	beq.n	80050d4 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
    }
    return;
 80050a6:	e015      	b.n	80050d4 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d011      	beq.n	80050d6 <HAL_UART_IRQHandler+0x3fe>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00c      	beq.n	80050d6 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fc9a 	bl	80059f6 <UART_EndTransmit_IT>
    return;
 80050c2:	e008      	b.n	80050d6 <HAL_UART_IRQHandler+0x3fe>
      return;
 80050c4:	bf00      	nop
 80050c6:	e006      	b.n	80050d6 <HAL_UART_IRQHandler+0x3fe>
    return;
 80050c8:	bf00      	nop
 80050ca:	e004      	b.n	80050d6 <HAL_UART_IRQHandler+0x3fe>
      return;
 80050cc:	bf00      	nop
 80050ce:	e002      	b.n	80050d6 <HAL_UART_IRQHandler+0x3fe>
      return;
 80050d0:	bf00      	nop
 80050d2:	e000      	b.n	80050d6 <HAL_UART_IRQHandler+0x3fe>
    return;
 80050d4:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005134:	b08a      	sub	sp, #40	; 0x28
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	431a      	orrs	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	431a      	orrs	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	4313      	orrs	r3, r2
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4bb4      	ldr	r3, [pc, #720]	; (8005430 <UART_SetConfig+0x300>)
 8005160:	4013      	ands	r3, r2
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005168:	430b      	orrs	r3, r1
 800516a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4aa9      	ldr	r2, [pc, #676]	; (8005434 <UART_SetConfig+0x304>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005198:	4313      	orrs	r3, r2
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ac:	430a      	orrs	r2, r1
 80051ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4aa0      	ldr	r2, [pc, #640]	; (8005438 <UART_SetConfig+0x308>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d126      	bne.n	8005208 <UART_SetConfig+0xd8>
 80051ba:	4ba0      	ldr	r3, [pc, #640]	; (800543c <UART_SetConfig+0x30c>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d81b      	bhi.n	8005200 <UART_SetConfig+0xd0>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0xa0>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051f1 	.word	0x080051f1
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	080051f9 	.word	0x080051f9
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e6:	e080      	b.n	80052ea <UART_SetConfig+0x1ba>
 80051e8:	2302      	movs	r3, #2
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ee:	e07c      	b.n	80052ea <UART_SetConfig+0x1ba>
 80051f0:	2304      	movs	r3, #4
 80051f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f6:	e078      	b.n	80052ea <UART_SetConfig+0x1ba>
 80051f8:	2308      	movs	r3, #8
 80051fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fe:	e074      	b.n	80052ea <UART_SetConfig+0x1ba>
 8005200:	2310      	movs	r3, #16
 8005202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005206:	e070      	b.n	80052ea <UART_SetConfig+0x1ba>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a8c      	ldr	r2, [pc, #560]	; (8005440 <UART_SetConfig+0x310>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d138      	bne.n	8005284 <UART_SetConfig+0x154>
 8005212:	4b8a      	ldr	r3, [pc, #552]	; (800543c <UART_SetConfig+0x30c>)
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005218:	f003 030c 	and.w	r3, r3, #12
 800521c:	2b0c      	cmp	r3, #12
 800521e:	d82d      	bhi.n	800527c <UART_SetConfig+0x14c>
 8005220:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <UART_SetConfig+0xf8>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	0800525d 	.word	0x0800525d
 800522c:	0800527d 	.word	0x0800527d
 8005230:	0800527d 	.word	0x0800527d
 8005234:	0800527d 	.word	0x0800527d
 8005238:	0800526d 	.word	0x0800526d
 800523c:	0800527d 	.word	0x0800527d
 8005240:	0800527d 	.word	0x0800527d
 8005244:	0800527d 	.word	0x0800527d
 8005248:	08005265 	.word	0x08005265
 800524c:	0800527d 	.word	0x0800527d
 8005250:	0800527d 	.word	0x0800527d
 8005254:	0800527d 	.word	0x0800527d
 8005258:	08005275 	.word	0x08005275
 800525c:	2300      	movs	r3, #0
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005262:	e042      	b.n	80052ea <UART_SetConfig+0x1ba>
 8005264:	2302      	movs	r3, #2
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526a:	e03e      	b.n	80052ea <UART_SetConfig+0x1ba>
 800526c:	2304      	movs	r3, #4
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005272:	e03a      	b.n	80052ea <UART_SetConfig+0x1ba>
 8005274:	2308      	movs	r3, #8
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e036      	b.n	80052ea <UART_SetConfig+0x1ba>
 800527c:	2310      	movs	r3, #16
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e032      	b.n	80052ea <UART_SetConfig+0x1ba>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a6a      	ldr	r2, [pc, #424]	; (8005434 <UART_SetConfig+0x304>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d12a      	bne.n	80052e4 <UART_SetConfig+0x1b4>
 800528e:	4b6b      	ldr	r3, [pc, #428]	; (800543c <UART_SetConfig+0x30c>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005298:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800529c:	d01a      	beq.n	80052d4 <UART_SetConfig+0x1a4>
 800529e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052a2:	d81b      	bhi.n	80052dc <UART_SetConfig+0x1ac>
 80052a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a8:	d00c      	beq.n	80052c4 <UART_SetConfig+0x194>
 80052aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ae:	d815      	bhi.n	80052dc <UART_SetConfig+0x1ac>
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <UART_SetConfig+0x18c>
 80052b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b8:	d008      	beq.n	80052cc <UART_SetConfig+0x19c>
 80052ba:	e00f      	b.n	80052dc <UART_SetConfig+0x1ac>
 80052bc:	2300      	movs	r3, #0
 80052be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c2:	e012      	b.n	80052ea <UART_SetConfig+0x1ba>
 80052c4:	2302      	movs	r3, #2
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ca:	e00e      	b.n	80052ea <UART_SetConfig+0x1ba>
 80052cc:	2304      	movs	r3, #4
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d2:	e00a      	b.n	80052ea <UART_SetConfig+0x1ba>
 80052d4:	2308      	movs	r3, #8
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052da:	e006      	b.n	80052ea <UART_SetConfig+0x1ba>
 80052dc:	2310      	movs	r3, #16
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e2:	e002      	b.n	80052ea <UART_SetConfig+0x1ba>
 80052e4:	2310      	movs	r3, #16
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a51      	ldr	r2, [pc, #324]	; (8005434 <UART_SetConfig+0x304>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d17a      	bne.n	80053ea <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d824      	bhi.n	8005346 <UART_SetConfig+0x216>
 80052fc:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <UART_SetConfig+0x1d4>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005329 	.word	0x08005329
 8005308:	08005347 	.word	0x08005347
 800530c:	08005331 	.word	0x08005331
 8005310:	08005347 	.word	0x08005347
 8005314:	08005337 	.word	0x08005337
 8005318:	08005347 	.word	0x08005347
 800531c:	08005347 	.word	0x08005347
 8005320:	08005347 	.word	0x08005347
 8005324:	0800533f 	.word	0x0800533f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005328:	f7fe fb04 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 800532c:	61f8      	str	r0, [r7, #28]
        break;
 800532e:	e010      	b.n	8005352 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005330:	4b44      	ldr	r3, [pc, #272]	; (8005444 <UART_SetConfig+0x314>)
 8005332:	61fb      	str	r3, [r7, #28]
        break;
 8005334:	e00d      	b.n	8005352 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005336:	f7fe fa65 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 800533a:	61f8      	str	r0, [r7, #28]
        break;
 800533c:	e009      	b.n	8005352 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800533e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005342:	61fb      	str	r3, [r7, #28]
        break;
 8005344:	e005      	b.n	8005352 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8109 	beq.w	800556c <UART_SetConfig+0x43c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	4413      	add	r3, r2
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	429a      	cmp	r2, r3
 8005368:	d305      	bcc.n	8005376 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	429a      	cmp	r2, r3
 8005374:	d903      	bls.n	800537e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800537c:	e0f6      	b.n	800556c <UART_SetConfig+0x43c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	2200      	movs	r2, #0
 8005382:	461c      	mov	r4, r3
 8005384:	4615      	mov	r5, r2
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	022b      	lsls	r3, r5, #8
 8005390:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005394:	0222      	lsls	r2, r4, #8
 8005396:	68f9      	ldr	r1, [r7, #12]
 8005398:	6849      	ldr	r1, [r1, #4]
 800539a:	0849      	lsrs	r1, r1, #1
 800539c:	2000      	movs	r0, #0
 800539e:	4688      	mov	r8, r1
 80053a0:	4681      	mov	r9, r0
 80053a2:	eb12 0a08 	adds.w	sl, r2, r8
 80053a6:	eb43 0b09 	adc.w	fp, r3, r9
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053b8:	4650      	mov	r0, sl
 80053ba:	4659      	mov	r1, fp
 80053bc:	f7fa ffd0 	bl	8000360 <__aeabi_uldivmod>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4613      	mov	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ce:	d308      	bcc.n	80053e2 <UART_SetConfig+0x2b2>
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d6:	d204      	bcs.n	80053e2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	60da      	str	r2, [r3, #12]
 80053e0:	e0c4      	b.n	800556c <UART_SetConfig+0x43c>
        }
        else
        {
          ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053e8:	e0c0      	b.n	800556c <UART_SetConfig+0x43c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f2:	d16b      	bne.n	80054cc <UART_SetConfig+0x39c>
  {
    switch (clocksource)
 80053f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d834      	bhi.n	8005466 <UART_SetConfig+0x336>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <UART_SetConfig+0x2d4>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005429 	.word	0x08005429
 8005408:	08005449 	.word	0x08005449
 800540c:	08005451 	.word	0x08005451
 8005410:	08005467 	.word	0x08005467
 8005414:	08005457 	.word	0x08005457
 8005418:	08005467 	.word	0x08005467
 800541c:	08005467 	.word	0x08005467
 8005420:	08005467 	.word	0x08005467
 8005424:	0800545f 	.word	0x0800545f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005428:	f7fe fa84 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 800542c:	61f8      	str	r0, [r7, #28]
        break;
 800542e:	e020      	b.n	8005472 <UART_SetConfig+0x342>
 8005430:	efff69f3 	.word	0xefff69f3
 8005434:	40008000 	.word	0x40008000
 8005438:	40013800 	.word	0x40013800
 800543c:	40021000 	.word	0x40021000
 8005440:	40004400 	.word	0x40004400
 8005444:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005448:	f7fe fa8a 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 800544c:	61f8      	str	r0, [r7, #28]
        break;
 800544e:	e010      	b.n	8005472 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005450:	4b4d      	ldr	r3, [pc, #308]	; (8005588 <UART_SetConfig+0x458>)
 8005452:	61fb      	str	r3, [r7, #28]
        break;
 8005454:	e00d      	b.n	8005472 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005456:	f7fe f9d5 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 800545a:	61f8      	str	r0, [r7, #28]
        break;
 800545c:	e009      	b.n	8005472 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800545e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005462:	61fb      	str	r3, [r7, #28]
        break;
 8005464:	e005      	b.n	8005472 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d079      	beq.n	800556c <UART_SetConfig+0x43c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	005a      	lsls	r2, r3, #1
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	085b      	lsrs	r3, r3, #1
 8005482:	441a      	add	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	b29b      	uxth	r3, r3
 800548e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b0f      	cmp	r3, #15
 8005494:	d916      	bls.n	80054c4 <UART_SetConfig+0x394>
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549c:	d212      	bcs.n	80054c4 <UART_SetConfig+0x394>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f023 030f 	bic.w	r3, r3, #15
 80054a6:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	8afb      	ldrh	r3, [r7, #22]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	8afa      	ldrh	r2, [r7, #22]
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	e053      	b.n	800556c <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054ca:	e04f      	b.n	800556c <UART_SetConfig+0x43c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d828      	bhi.n	8005526 <UART_SetConfig+0x3f6>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x3ac>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	08005501 	.word	0x08005501
 80054e0:	08005509 	.word	0x08005509
 80054e4:	08005511 	.word	0x08005511
 80054e8:	08005527 	.word	0x08005527
 80054ec:	08005517 	.word	0x08005517
 80054f0:	08005527 	.word	0x08005527
 80054f4:	08005527 	.word	0x08005527
 80054f8:	08005527 	.word	0x08005527
 80054fc:	0800551f 	.word	0x0800551f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005500:	f7fe fa18 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8005504:	61f8      	str	r0, [r7, #28]
        break;
 8005506:	e014      	b.n	8005532 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005508:	f7fe fa2a 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 800550c:	61f8      	str	r0, [r7, #28]
        break;
 800550e:	e010      	b.n	8005532 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005510:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <UART_SetConfig+0x458>)
 8005512:	61fb      	str	r3, [r7, #28]
        break;
 8005514:	e00d      	b.n	8005532 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005516:	f7fe f975 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 800551a:	61f8      	str	r0, [r7, #28]
        break;
 800551c:	e009      	b.n	8005532 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005522:	61fb      	str	r3, [r7, #28]
        break;
 8005524:	e005      	b.n	8005532 <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005530:	bf00      	nop
    }

    if (pclk != 0U)
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d019      	beq.n	800556c <UART_SetConfig+0x43c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	085a      	lsrs	r2, r3, #1
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	441a      	add	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	fbb2 f3f3 	udiv	r3, r2, r3
 800554a:	b29b      	uxth	r3, r3
 800554c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b0f      	cmp	r3, #15
 8005552:	d908      	bls.n	8005566 <UART_SetConfig+0x436>
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555a:	d204      	bcs.n	8005566 <UART_SetConfig+0x436>
      {
        huart->Instance->BRR = usartdiv;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	60da      	str	r2, [r3, #12]
 8005564:	e002      	b.n	800556c <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005578:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800557c:	4618      	mov	r0, r3
 800557e:	3728      	adds	r7, #40	; 0x28
 8005580:	46bd      	mov	sp, r7
 8005582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005586:	bf00      	nop
 8005588:	00f42400 	.word	0x00f42400

0800558c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01a      	beq.n	80056a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800568a:	d10a      	bne.n	80056a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	605a      	str	r2, [r3, #4]
  }
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056e0:	f7fc ff9c 	bl	800261c <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d10e      	bne.n	8005712 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f82d 	bl	8005762 <UART_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e023      	b.n	800575a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b04      	cmp	r3, #4
 800571e:	d10e      	bne.n	800573e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f817 	bl	8005762 <UART_WaitOnFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e00d      	b.n	800575a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	4613      	mov	r3, r2
 8005770:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005772:	e05e      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d05a      	beq.n	8005832 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577c:	f7fc ff4e 	bl	800261c <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	429a      	cmp	r2, r3
 800578a:	d302      	bcc.n	8005792 <UART_WaitOnFlagUntilTimeout+0x30>
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d11b      	bne.n	80057ca <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057a0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0201 	bic.w	r2, r2, #1
 80057b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2220      	movs	r2, #32
 80057bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e043      	b.n	8005852 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d02c      	beq.n	8005832 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e6:	d124      	bne.n	8005832 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057f0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005800:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0201 	bic.w	r2, r2, #1
 8005810:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2220      	movs	r2, #32
 8005822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e00f      	b.n	8005852 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4013      	ands	r3, r2
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	429a      	cmp	r2, r3
 8005840:	bf0c      	ite	eq
 8005842:	2301      	moveq	r3, #1
 8005844:	2300      	movne	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	461a      	mov	r2, r3
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	429a      	cmp	r2, r3
 800584e:	d091      	beq.n	8005774 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	4613      	mov	r3, r2
 8005868:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	d10e      	bne.n	80058ae <UART_Start_Receive_IT+0x52>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d105      	bne.n	80058a4 <UART_Start_Receive_IT+0x48>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800589e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058a2:	e02d      	b.n	8005900 <UART_Start_Receive_IT+0xa4>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	22ff      	movs	r2, #255	; 0xff
 80058a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058ac:	e028      	b.n	8005900 <UART_Start_Receive_IT+0xa4>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10d      	bne.n	80058d2 <UART_Start_Receive_IT+0x76>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <UART_Start_Receive_IT+0x6c>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	22ff      	movs	r2, #255	; 0xff
 80058c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058c6:	e01b      	b.n	8005900 <UART_Start_Receive_IT+0xa4>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	227f      	movs	r2, #127	; 0x7f
 80058cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058d0:	e016      	b.n	8005900 <UART_Start_Receive_IT+0xa4>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058da:	d10d      	bne.n	80058f8 <UART_Start_Receive_IT+0x9c>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d104      	bne.n	80058ee <UART_Start_Receive_IT+0x92>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	227f      	movs	r2, #127	; 0x7f
 80058e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058ec:	e008      	b.n	8005900 <UART_Start_Receive_IT+0xa4>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	223f      	movs	r2, #63	; 0x3f
 80058f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058f6:	e003      	b.n	8005900 <UART_Start_Receive_IT+0xa4>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2222      	movs	r2, #34	; 0x22
 800590c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0201 	orr.w	r2, r2, #1
 800591c:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005926:	d107      	bne.n	8005938 <UART_Start_Receive_IT+0xdc>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a0c      	ldr	r2, [pc, #48]	; (8005964 <UART_Start_Receive_IT+0x108>)
 8005934:	665a      	str	r2, [r3, #100]	; 0x64
 8005936:	e002      	b.n	800593e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a0b      	ldr	r2, [pc, #44]	; (8005968 <UART_Start_Receive_IT+0x10c>)
 800593c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005954:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	08005b01 	.word	0x08005b01
 8005968:	08005a29 	.word	0x08005a29

0800596c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005982:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005998:	2b01      	cmp	r3, #1
 800599a:	d107      	bne.n	80059ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0210 	bic.w	r2, r2, #16
 80059aa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff fb8b 	bl	8005104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff fb5e 	bl	80050dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a36:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a3c:	2b22      	cmp	r3, #34	; 0x22
 8005a3e:	d151      	bne.n	8005ae4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a46:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a48:	89bb      	ldrh	r3, [r7, #12]
 8005a4a:	b2d9      	uxtb	r1, r3
 8005a4c:	89fb      	ldrh	r3, [r7, #14]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a54:	400a      	ands	r2, r1
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d13a      	bne.n	8005af8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a90:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d10f      	bne.n	8005ad6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0210 	bic.w	r2, r2, #16
 8005ac4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fb22 	bl	8005118 <HAL_UARTEx_RxEventCallback>
 8005ad4:	e002      	b.n	8005adc <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff fb0a 	bl	80050f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ae2:	e009      	b.n	8005af8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	8b1b      	ldrh	r3, [r3, #24]
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0208 	orr.w	r2, r2, #8
 8005af4:	b292      	uxth	r2, r2
 8005af6:	831a      	strh	r2, [r3, #24]
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b0e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b14:	2b22      	cmp	r3, #34	; 0x22
 8005b16:	d151      	bne.n	8005bbc <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b1e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b24:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b26:	89ba      	ldrh	r2, [r7, #12]
 8005b28:	89fb      	ldrh	r3, [r7, #14]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b36:	1c9a      	adds	r2, r3, #2
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d13a      	bne.n	8005bd0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b68:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0201 	bic.w	r2, r2, #1
 8005b78:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d10f      	bne.n	8005bae <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0210 	bic.w	r2, r2, #16
 8005b9c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff fab6 	bl	8005118 <HAL_UARTEx_RxEventCallback>
 8005bac:	e002      	b.n	8005bb4 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff fa9e 	bl	80050f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bba:	e009      	b.n	8005bd0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	8b1b      	ldrh	r3, [r3, #24]
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0208 	orr.w	r2, r2, #8
 8005bcc:	b292      	uxth	r2, r2
 8005bce:	831a      	strh	r2, [r3, #24]
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <handle_valid>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4604      	mov	r4, r0
 8005bf0:	b958      	cbnz	r0, 8005c0a <handle_valid+0x1e>
 8005bf2:	4d0d      	ldr	r5, [pc, #52]	; (8005c28 <handle_valid+0x3c>)
 8005bf4:	4a0d      	ldr	r2, [pc, #52]	; (8005c2c <handle_valid+0x40>)
 8005bf6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005bf8:	490d      	ldr	r1, [pc, #52]	; (8005c30 <handle_valid+0x44>)
 8005bfa:	4798      	blx	r3
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005c00:	4a0c      	ldr	r2, [pc, #48]	; (8005c34 <handle_valid+0x48>)
 8005c02:	490b      	ldr	r1, [pc, #44]	; (8005c30 <handle_valid+0x44>)
 8005c04:	4798      	blx	r3
 8005c06:	4620      	mov	r0, r4
 8005c08:	bd38      	pop	{r3, r4, r5, pc}
 8005c0a:	6802      	ldr	r2, [r0, #0]
 8005c0c:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <handle_valid+0x4c>)
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d007      	beq.n	8005c22 <handle_valid+0x36>
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <handle_valid+0x3c>)
 8005c14:	4a05      	ldr	r2, [pc, #20]	; (8005c2c <handle_valid+0x40>)
 8005c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c18:	4905      	ldr	r1, [pc, #20]	; (8005c30 <handle_valid+0x44>)
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	4798      	blx	r3
 8005c1e:	2000      	movs	r0, #0
 8005c20:	bd38      	pop	{r3, r4, r5, pc}
 8005c22:	2001      	movs	r0, #1
 8005c24:	bd38      	pop	{r3, r4, r5, pc}
 8005c26:	bf00      	nop
 8005c28:	20001628 	.word	0x20001628
 8005c2c:	08017f98 	.word	0x08017f98
 8005c30:	08017fa8 	.word	0x08017fa8
 8005c34:	08017fbc 	.word	0x08017fbc
 8005c38:	acc02845 	.word	0xacc02845

08005c3c <teardown_detector>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4605      	mov	r5, r0
 8005c40:	f7ff ffd4 	bl	8005bec <handle_valid>
 8005c44:	4604      	mov	r4, r0
 8005c46:	b130      	cbz	r0, 8005c56 <teardown_detector+0x1a>
 8005c48:	f105 0008 	add.w	r0, r5, #8
 8005c4c:	f003 fd14 	bl	8009678 <acc_service_destroy>
 8005c50:	1d28      	adds	r0, r5, #4
 8005c52:	f000 fdb1 	bl	80067b8 <acc_detector_distance_processing_destroy>
 8005c56:	4620      	mov	r0, r4
 8005c58:	bd38      	pop	{r3, r4, r5, pc}
 8005c5a:	bf00      	nop

08005c5c <setup_detector>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	460d      	mov	r5, r1
 8005c60:	4606      	mov	r6, r0
 8005c62:	f7ff ffc3 	bl	8005bec <handle_valid>
 8005c66:	4604      	mov	r4, r0
 8005c68:	b138      	cbz	r0, 8005c7a <setup_detector+0x1e>
 8005c6a:	b945      	cbnz	r5, 8005c7e <setup_detector+0x22>
 8005c6c:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <setup_detector+0x7c>)
 8005c6e:	4a1b      	ldr	r2, [pc, #108]	; (8005cdc <setup_detector+0x80>)
 8005c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c72:	491b      	ldr	r1, [pc, #108]	; (8005ce0 <setup_detector+0x84>)
 8005c74:	2000      	movs	r0, #0
 8005c76:	4798      	blx	r3
 8005c78:	2400      	movs	r4, #0
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	bd70      	pop	{r4, r5, r6, pc}
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <setup_detector+0x88>)
 8005c80:	682a      	ldr	r2, [r5, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d1f2      	bne.n	8005c6c <setup_detector+0x10>
 8005c86:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8005c88:	f003 fc80 	bl	800958c <acc_service_create>
 8005c8c:	60b0      	str	r0, [r6, #8]
 8005c8e:	b930      	cbnz	r0, 8005c9e <setup_detector+0x42>
 8005c90:	4911      	ldr	r1, [pc, #68]	; (8005cd8 <setup_detector+0x7c>)
 8005c92:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <setup_detector+0x8c>)
 8005c94:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8005c96:	4912      	ldr	r1, [pc, #72]	; (8005ce0 <setup_detector+0x84>)
 8005c98:	4604      	mov	r4, r0
 8005c9a:	47a8      	blx	r5
 8005c9c:	e7ed      	b.n	8005c7a <setup_detector+0x1e>
 8005c9e:	f106 010c 	add.w	r1, r6, #12
 8005ca2:	f003 fbef 	bl	8009484 <acc_service_envelope_get_metadata>
 8005ca6:	8ab3      	ldrh	r3, [r6, #20]
 8005ca8:	68f1      	ldr	r1, [r6, #12]
 8005caa:	69b2      	ldr	r2, [r6, #24]
 8005cac:	80ab      	strh	r3, [r5, #4]
 8005cae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005cb0:	62a9      	str	r1, [r5, #40]	; 0x28
 8005cb2:	62ea      	str	r2, [r5, #44]	; 0x2c
 8005cb4:	1d28      	adds	r0, r5, #4
 8005cb6:	61f3      	str	r3, [r6, #28]
 8005cb8:	f000 fccc 	bl	8006654 <acc_detector_distance_processing_create>
 8005cbc:	4605      	mov	r5, r0
 8005cbe:	6070      	str	r0, [r6, #4]
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d1da      	bne.n	8005c7a <setup_detector+0x1e>
 8005cc4:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <setup_detector+0x7c>)
 8005cc6:	4a09      	ldr	r2, [pc, #36]	; (8005cec <setup_detector+0x90>)
 8005cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cca:	4905      	ldr	r1, [pc, #20]	; (8005ce0 <setup_detector+0x84>)
 8005ccc:	4798      	blx	r3
 8005cce:	4630      	mov	r0, r6
 8005cd0:	462c      	mov	r4, r5
 8005cd2:	f7ff ffb3 	bl	8005c3c <teardown_detector>
 8005cd6:	e7d0      	b.n	8005c7a <setup_detector+0x1e>
 8005cd8:	20001628 	.word	0x20001628
 8005cdc:	08018008 	.word	0x08018008
 8005ce0:	08017fa8 	.word	0x08017fa8
 8005ce4:	acc12845 	.word	0xacc12845
 8005ce8:	08017fcc 	.word	0x08017fcc
 8005cec:	08017fe4 	.word	0x08017fe4

08005cf0 <acc_detector_distance_configuration_create>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	2264      	movs	r2, #100	; 0x64
 8005cf4:	ed2d 8b02 	vpush	{d8}
 8005cf8:	4920      	ldr	r1, [pc, #128]	; (8005d7c <acc_detector_distance_configuration_create+0x8c>)
 8005cfa:	203c      	movs	r0, #60	; 0x3c
 8005cfc:	f003 f87a 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 8005d00:	4604      	mov	r4, r0
 8005d02:	b368      	cbz	r0, 8005d60 <acc_detector_distance_configuration_create+0x70>
 8005d04:	4b1e      	ldr	r3, [pc, #120]	; (8005d80 <acc_detector_distance_configuration_create+0x90>)
 8005d06:	6003      	str	r3, [r0, #0]
 8005d08:	f003 faca 	bl	80092a0 <acc_service_envelope_configuration_create>
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	6360      	str	r0, [r4, #52]	; 0x34
 8005d10:	b378      	cbz	r0, 8005d72 <acc_detector_distance_configuration_create+0x82>
 8005d12:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8005d84 <acc_detector_distance_configuration_create+0x94>
 8005d16:	4d1c      	ldr	r5, [pc, #112]	; (8005d88 <acc_detector_distance_configuration_create+0x98>)
 8005d18:	eeb0 0a48 	vmov.f32	s0, s16
 8005d1c:	f003 fb74 	bl	8009408 <acc_service_envelope_running_average_factor_set>
 8005d20:	481a      	ldr	r0, [pc, #104]	; (8005d8c <acc_detector_distance_configuration_create+0x9c>)
 8005d22:	491b      	ldr	r1, [pc, #108]	; (8005d90 <acc_detector_distance_configuration_create+0xa0>)
 8005d24:	61a5      	str	r5, [r4, #24]
 8005d26:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f44f 7548 	mov.w	r5, #800	; 0x320
 8005d30:	61e0      	str	r0, [r4, #28]
 8005d32:	6261      	str	r1, [r4, #36]	; 0x24
 8005d34:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8005d38:	2114      	movs	r1, #20
 8005d3a:	6062      	str	r2, [r4, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 8005d42:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
 8005d46:	7223      	strb	r3, [r4, #8]
 8005d48:	f884 3020 	strb.w	r3, [r4, #32]
 8005d4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005d4e:	81a5      	strh	r5, [r4, #12]
 8005d50:	6120      	str	r0, [r4, #16]
 8005d52:	82a1      	strh	r1, [r4, #20]
 8005d54:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8005d58:	ecbd 8b02 	vpop	{d8}
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <acc_detector_distance_configuration_create+0xa4>)
 8005d62:	4a0d      	ldr	r2, [pc, #52]	; (8005d98 <acc_detector_distance_configuration_create+0xa8>)
 8005d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d66:	490d      	ldr	r1, [pc, #52]	; (8005d9c <acc_detector_distance_configuration_create+0xac>)
 8005d68:	4798      	blx	r3
 8005d6a:	ecbd 8b02 	vpop	{d8}
 8005d6e:	4620      	mov	r0, r4
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
 8005d72:	4620      	mov	r0, r4
 8005d74:	f003 f882 	bl	8008e7c <acc_rss_integration_mem_free>
 8005d78:	462c      	mov	r4, r5
 8005d7a:	e7ed      	b.n	8005d58 <acc_detector_distance_configuration_create+0x68>
 8005d7c:	08017de4 	.word	0x08017de4
 8005d80:	acc12845 	.word	0xacc12845
 8005d84:	00000000 	.word	0x00000000
 8005d88:	3df5c28f 	.word	0x3df5c28f
 8005d8c:	3cf5c28f 	.word	0x3cf5c28f
 8005d90:	3ba3d70a 	.word	0x3ba3d70a
 8005d94:	20001628 	.word	0x20001628
 8005d98:	08017e14 	.word	0x08017e14
 8005d9c:	08017fa8 	.word	0x08017fa8

08005da0 <acc_detector_distance_configuration_destroy>:
 8005da0:	b138      	cbz	r0, 8005db2 <acc_detector_distance_configuration_destroy+0x12>
 8005da2:	6803      	ldr	r3, [r0, #0]
 8005da4:	b933      	cbnz	r3, 8005db4 <acc_detector_distance_configuration_destroy+0x14>
 8005da6:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <acc_detector_distance_configuration_destroy+0x34>)
 8005da8:	4a0b      	ldr	r2, [pc, #44]	; (8005dd8 <acc_detector_distance_configuration_destroy+0x38>)
 8005daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dac:	490b      	ldr	r1, [pc, #44]	; (8005ddc <acc_detector_distance_configuration_destroy+0x3c>)
 8005dae:	2000      	movs	r0, #0
 8005db0:	4718      	bx	r3
 8005db2:	4770      	bx	lr
 8005db4:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <acc_detector_distance_configuration_destroy+0x40>)
 8005db6:	6819      	ldr	r1, [r3, #0]
 8005db8:	4291      	cmp	r1, r2
 8005dba:	d1f4      	bne.n	8005da6 <acc_detector_distance_configuration_destroy+0x6>
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005dc4:	f003 fb00 	bl	80093c8 <acc_service_envelope_configuration_destroy>
 8005dc8:	6820      	ldr	r0, [r4, #0]
 8005dca:	f003 f857 	bl	8008e7c <acc_rss_integration_mem_free>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd10      	pop	{r4, pc}
 8005dd4:	20001628 	.word	0x20001628
 8005dd8:	08018008 	.word	0x08018008
 8005ddc:	08017fa8 	.word	0x08017fa8
 8005de0:	acc12845 	.word	0xacc12845

08005de4 <acc_detector_distance_create>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	b940      	cbnz	r0, 8005dfa <acc_detector_distance_create+0x16>
 8005de8:	4b1c      	ldr	r3, [pc, #112]	; (8005e5c <acc_detector_distance_create+0x78>)
 8005dea:	4a1d      	ldr	r2, [pc, #116]	; (8005e60 <acc_detector_distance_create+0x7c>)
 8005dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dee:	491d      	ldr	r1, [pc, #116]	; (8005e64 <acc_detector_distance_create+0x80>)
 8005df0:	2000      	movs	r0, #0
 8005df2:	4798      	blx	r3
 8005df4:	2400      	movs	r4, #0
 8005df6:	4620      	mov	r0, r4
 8005df8:	bd38      	pop	{r3, r4, r5, pc}
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <acc_detector_distance_create+0x84>)
 8005dfc:	6802      	ldr	r2, [r0, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	4605      	mov	r5, r0
 8005e02:	d1f1      	bne.n	8005de8 <acc_detector_distance_create+0x4>
 8005e04:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005e06:	f003 ff1b 	bl	8009c40 <acc_service_requested_start_get>
 8005e0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e12:	d41a      	bmi.n	8005e4a <acc_detector_distance_create+0x66>
 8005e14:	22a4      	movs	r2, #164	; 0xa4
 8005e16:	4915      	ldr	r1, [pc, #84]	; (8005e6c <acc_detector_distance_create+0x88>)
 8005e18:	2020      	movs	r0, #32
 8005e1a:	f002 ffeb 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 8005e1e:	4604      	mov	r4, r0
 8005e20:	b160      	cbz	r0, 8005e3c <acc_detector_distance_create+0x58>
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <acc_detector_distance_create+0x8c>)
 8005e24:	6003      	str	r3, [r0, #0]
 8005e26:	4629      	mov	r1, r5
 8005e28:	f7ff ff18 	bl	8005c5c <setup_detector>
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d1e1      	bne.n	8005df6 <acc_detector_distance_create+0x12>
 8005e32:	4620      	mov	r0, r4
 8005e34:	f003 f822 	bl	8008e7c <acc_rss_integration_mem_free>
 8005e38:	462c      	mov	r4, r5
 8005e3a:	e7dc      	b.n	8005df6 <acc_detector_distance_create+0x12>
 8005e3c:	4b07      	ldr	r3, [pc, #28]	; (8005e5c <acc_detector_distance_create+0x78>)
 8005e3e:	4a0d      	ldr	r2, [pc, #52]	; (8005e74 <acc_detector_distance_create+0x90>)
 8005e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e42:	4908      	ldr	r1, [pc, #32]	; (8005e64 <acc_detector_distance_create+0x80>)
 8005e44:	4798      	blx	r3
 8005e46:	4620      	mov	r0, r4
 8005e48:	bd38      	pop	{r3, r4, r5, pc}
 8005e4a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8005e4e:	3b02      	subs	r3, #2
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d8df      	bhi.n	8005e14 <acc_detector_distance_create+0x30>
 8005e54:	4b01      	ldr	r3, [pc, #4]	; (8005e5c <acc_detector_distance_create+0x78>)
 8005e56:	4a08      	ldr	r2, [pc, #32]	; (8005e78 <acc_detector_distance_create+0x94>)
 8005e58:	e7c8      	b.n	8005dec <acc_detector_distance_create+0x8>
 8005e5a:	bf00      	nop
 8005e5c:	20001628 	.word	0x20001628
 8005e60:	08018008 	.word	0x08018008
 8005e64:	08017fa8 	.word	0x08017fa8
 8005e68:	acc12845 	.word	0xacc12845
 8005e6c:	08017de4 	.word	0x08017de4
 8005e70:	acc02845 	.word	0xacc02845
 8005e74:	08017ea0 	.word	0x08017ea0
 8005e78:	08017e70 	.word	0x08017e70

08005e7c <acc_detector_distance_destroy>:
 8005e7c:	b160      	cbz	r0, 8005e98 <acc_detector_distance_destroy+0x1c>
 8005e7e:	b510      	push	{r4, lr}
 8005e80:	4604      	mov	r4, r0
 8005e82:	6800      	ldr	r0, [r0, #0]
 8005e84:	f7ff feda 	bl	8005c3c <teardown_detector>
 8005e88:	b900      	cbnz	r0, 8005e8c <acc_detector_distance_destroy+0x10>
 8005e8a:	bd10      	pop	{r4, pc}
 8005e8c:	6820      	ldr	r0, [r4, #0]
 8005e8e:	f002 fff5 	bl	8008e7c <acc_rss_integration_mem_free>
 8005e92:	2300      	movs	r3, #0
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd10      	pop	{r4, pc}
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop

08005e9c <acc_detector_distance_metadata_get>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	f7ff fea3 	bl	8005bec <handle_valid>
 8005ea6:	b138      	cbz	r0, 8005eb8 <acc_detector_distance_metadata_get+0x1c>
 8005ea8:	b93c      	cbnz	r4, 8005eba <acc_detector_distance_metadata_get+0x1e>
 8005eaa:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <acc_detector_distance_metadata_get+0x2c>)
 8005eac:	4a07      	ldr	r2, [pc, #28]	; (8005ecc <acc_detector_distance_metadata_get+0x30>)
 8005eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb0:	4907      	ldr	r1, [pc, #28]	; (8005ed0 <acc_detector_distance_metadata_get+0x34>)
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	4798      	blx	r3
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	bd38      	pop	{r3, r4, r5, pc}
 8005eba:	68e9      	ldr	r1, [r5, #12]
 8005ebc:	692a      	ldr	r2, [r5, #16]
 8005ebe:	8aab      	ldrh	r3, [r5, #20]
 8005ec0:	8123      	strh	r3, [r4, #8]
 8005ec2:	6021      	str	r1, [r4, #0]
 8005ec4:	6062      	str	r2, [r4, #4]
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	20001628 	.word	0x20001628
 8005ecc:	08017ed4 	.word	0x08017ed4
 8005ed0:	08017fa8 	.word	0x08017fa8

08005ed4 <acc_detector_distance_set_background>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	4616      	mov	r6, r2
 8005eda:	4605      	mov	r5, r0
 8005edc:	f7ff fe86 	bl	8005bec <handle_valid>
 8005ee0:	b130      	cbz	r0, 8005ef0 <acc_detector_distance_set_background+0x1c>
 8005ee2:	b93c      	cbnz	r4, 8005ef4 <acc_detector_distance_set_background+0x20>
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <acc_detector_distance_set_background+0x48>)
 8005ee6:	4a0e      	ldr	r2, [pc, #56]	; (8005f20 <acc_detector_distance_set_background+0x4c>)
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eea:	490e      	ldr	r1, [pc, #56]	; (8005f24 <acc_detector_distance_set_background+0x50>)
 8005eec:	4620      	mov	r0, r4
 8005eee:	4798      	blx	r3
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}
 8005ef4:	6868      	ldr	r0, [r5, #4]
 8005ef6:	f000 fc7d 	bl	80067f4 <acc_detector_distance_processing_threshold_type>
 8005efa:	2801      	cmp	r0, #1
 8005efc:	d006      	beq.n	8005f0c <acc_detector_distance_set_background+0x38>
 8005efe:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <acc_detector_distance_set_background+0x48>)
 8005f00:	4a09      	ldr	r2, [pc, #36]	; (8005f28 <acc_detector_distance_set_background+0x54>)
 8005f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f04:	4907      	ldr	r1, [pc, #28]	; (8005f24 <acc_detector_distance_set_background+0x50>)
 8005f06:	2000      	movs	r0, #0
 8005f08:	4798      	blx	r3
 8005f0a:	e7f1      	b.n	8005ef0 <acc_detector_distance_set_background+0x1c>
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	4621      	mov	r1, r4
 8005f10:	6868      	ldr	r0, [r5, #4]
 8005f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f16:	f000 bcf5 	b.w	8006904 <acc_detector_distance_processing_threshold_recording_set>
 8005f1a:	bf00      	nop
 8005f1c:	20001628 	.word	0x20001628
 8005f20:	08017f68 	.word	0x08017f68
 8005f24:	08017fa8 	.word	0x08017fa8
 8005f28:	08017f80 	.word	0x08017f80

08005f2c <acc_detector_distance_activate>:
 8005f2c:	b510      	push	{r4, lr}
 8005f2e:	4604      	mov	r4, r0
 8005f30:	f7ff fe5c 	bl	8005bec <handle_valid>
 8005f34:	b900      	cbnz	r0, 8005f38 <acc_detector_distance_activate+0xc>
 8005f36:	bd10      	pop	{r4, pc}
 8005f38:	68a0      	ldr	r0, [r4, #8]
 8005f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f3e:	f003 bddb 	b.w	8009af8 <acc_service_activate>
 8005f42:	bf00      	nop

08005f44 <acc_detector_distance_deactivate>:
 8005f44:	b510      	push	{r4, lr}
 8005f46:	4604      	mov	r4, r0
 8005f48:	f7ff fe50 	bl	8005bec <handle_valid>
 8005f4c:	b900      	cbnz	r0, 8005f50 <acc_detector_distance_deactivate+0xc>
 8005f4e:	bd10      	pop	{r4, pc}
 8005f50:	68a0      	ldr	r0, [r4, #8]
 8005f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f56:	f003 be1f 	b.w	8009b98 <acc_service_deactivate>
 8005f5a:	bf00      	nop

08005f5c <acc_detector_distance_reconfigure>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4604      	mov	r4, r0
 8005f60:	6800      	ldr	r0, [r0, #0]
 8005f62:	460d      	mov	r5, r1
 8005f64:	f7ff fe6a 	bl	8005c3c <teardown_detector>
 8005f68:	b938      	cbnz	r0, 8005f7a <acc_detector_distance_reconfigure+0x1e>
 8005f6a:	4c13      	ldr	r4, [pc, #76]	; (8005fb8 <acc_detector_distance_reconfigure+0x5c>)
 8005f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f6e:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <acc_detector_distance_reconfigure+0x60>)
 8005f70:	4913      	ldr	r1, [pc, #76]	; (8005fc0 <acc_detector_distance_reconfigure+0x64>)
 8005f72:	2000      	movs	r0, #0
 8005f74:	4798      	blx	r3
 8005f76:	2000      	movs	r0, #0
 8005f78:	bd38      	pop	{r3, r4, r5, pc}
 8005f7a:	6820      	ldr	r0, [r4, #0]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	6003      	str	r3, [r0, #0]
 8005f80:	f002 ff7c 	bl	8008e7c <acc_rss_integration_mem_free>
 8005f84:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8005f88:	490e      	ldr	r1, [pc, #56]	; (8005fc4 <acc_detector_distance_reconfigure+0x68>)
 8005f8a:	2020      	movs	r0, #32
 8005f8c:	f002 ff32 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 8005f90:	6020      	str	r0, [r4, #0]
 8005f92:	b928      	cbnz	r0, 8005fa0 <acc_detector_distance_reconfigure+0x44>
 8005f94:	4c08      	ldr	r4, [pc, #32]	; (8005fb8 <acc_detector_distance_reconfigure+0x5c>)
 8005f96:	4a0c      	ldr	r2, [pc, #48]	; (8005fc8 <acc_detector_distance_reconfigure+0x6c>)
 8005f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f9a:	4909      	ldr	r1, [pc, #36]	; (8005fc0 <acc_detector_distance_reconfigure+0x64>)
 8005f9c:	4798      	blx	r3
 8005f9e:	e7e5      	b.n	8005f6c <acc_detector_distance_reconfigure+0x10>
 8005fa0:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <acc_detector_distance_reconfigure+0x70>)
 8005fa2:	6002      	str	r2, [r0, #0]
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	f7ff fe59 	bl	8005c5c <setup_detector>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d1e4      	bne.n	8005f78 <acc_detector_distance_reconfigure+0x1c>
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f7ff ff64 	bl	8005e7c <acc_detector_distance_destroy>
 8005fb4:	e7d9      	b.n	8005f6a <acc_detector_distance_reconfigure+0xe>
 8005fb6:	bf00      	nop
 8005fb8:	20001628 	.word	0x20001628
 8005fbc:	08017f0c 	.word	0x08017f0c
 8005fc0:	08017fa8 	.word	0x08017fa8
 8005fc4:	08017de4 	.word	0x08017de4
 8005fc8:	08017ea0 	.word	0x08017ea0
 8005fcc:	acc02845 	.word	0xacc02845

08005fd0 <acc_detector_distance_configuration_sensor_set>:
 8005fd0:	b928      	cbnz	r0, 8005fde <acc_detector_distance_configuration_sensor_set+0xe>
 8005fd2:	4b06      	ldr	r3, [pc, #24]	; (8005fec <acc_detector_distance_configuration_sensor_set+0x1c>)
 8005fd4:	4a06      	ldr	r2, [pc, #24]	; (8005ff0 <acc_detector_distance_configuration_sensor_set+0x20>)
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd8:	4906      	ldr	r1, [pc, #24]	; (8005ff4 <acc_detector_distance_configuration_sensor_set+0x24>)
 8005fda:	2000      	movs	r0, #0
 8005fdc:	4718      	bx	r3
 8005fde:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <acc_detector_distance_configuration_sensor_set+0x28>)
 8005fe0:	6802      	ldr	r2, [r0, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d1f5      	bne.n	8005fd2 <acc_detector_distance_configuration_sensor_set+0x2>
 8005fe6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005fe8:	f003 be20 	b.w	8009c2c <acc_service_sensor_set>
 8005fec:	20001628 	.word	0x20001628
 8005ff0:	08018008 	.word	0x08018008
 8005ff4:	08017fa8 	.word	0x08017fa8
 8005ff8:	acc12845 	.word	0xacc12845

08005ffc <acc_detector_distance_configuration_requested_start_set>:
 8005ffc:	b928      	cbnz	r0, 800600a <acc_detector_distance_configuration_requested_start_set+0xe>
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <acc_detector_distance_configuration_requested_start_set+0x1c>)
 8006000:	4a06      	ldr	r2, [pc, #24]	; (800601c <acc_detector_distance_configuration_requested_start_set+0x20>)
 8006002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006004:	4906      	ldr	r1, [pc, #24]	; (8006020 <acc_detector_distance_configuration_requested_start_set+0x24>)
 8006006:	2000      	movs	r0, #0
 8006008:	4718      	bx	r3
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <acc_detector_distance_configuration_requested_start_set+0x28>)
 800600c:	6802      	ldr	r2, [r0, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d1f5      	bne.n	8005ffe <acc_detector_distance_configuration_requested_start_set+0x2>
 8006012:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8006014:	f003 be1c 	b.w	8009c50 <acc_service_requested_start_set>
 8006018:	20001628 	.word	0x20001628
 800601c:	08018008 	.word	0x08018008
 8006020:	08017fa8 	.word	0x08017fa8
 8006024:	acc12845 	.word	0xacc12845

08006028 <acc_detector_distance_configuration_requested_length_set>:
 8006028:	b928      	cbnz	r0, 8006036 <acc_detector_distance_configuration_requested_length_set+0xe>
 800602a:	4b06      	ldr	r3, [pc, #24]	; (8006044 <acc_detector_distance_configuration_requested_length_set+0x1c>)
 800602c:	4a06      	ldr	r2, [pc, #24]	; (8006048 <acc_detector_distance_configuration_requested_length_set+0x20>)
 800602e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006030:	4906      	ldr	r1, [pc, #24]	; (800604c <acc_detector_distance_configuration_requested_length_set+0x24>)
 8006032:	2000      	movs	r0, #0
 8006034:	4718      	bx	r3
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <acc_detector_distance_configuration_requested_length_set+0x28>)
 8006038:	6802      	ldr	r2, [r0, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d1f5      	bne.n	800602a <acc_detector_distance_configuration_requested_length_set+0x2>
 800603e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8006040:	f003 be16 	b.w	8009c70 <acc_service_requested_length_set>
 8006044:	20001628 	.word	0x20001628
 8006048:	08018008 	.word	0x08018008
 800604c:	08017fa8 	.word	0x08017fa8
 8006050:	acc12845 	.word	0xacc12845

08006054 <acc_detector_distance_configuration_downsampling_factor_set>:
 8006054:	b928      	cbnz	r0, 8006062 <acc_detector_distance_configuration_downsampling_factor_set+0xe>
 8006056:	4b06      	ldr	r3, [pc, #24]	; (8006070 <acc_detector_distance_configuration_downsampling_factor_set+0x1c>)
 8006058:	4a06      	ldr	r2, [pc, #24]	; (8006074 <acc_detector_distance_configuration_downsampling_factor_set+0x20>)
 800605a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605c:	4906      	ldr	r1, [pc, #24]	; (8006078 <acc_detector_distance_configuration_downsampling_factor_set+0x24>)
 800605e:	2000      	movs	r0, #0
 8006060:	4718      	bx	r3
 8006062:	4b06      	ldr	r3, [pc, #24]	; (800607c <acc_detector_distance_configuration_downsampling_factor_set+0x28>)
 8006064:	6802      	ldr	r2, [r0, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d1f5      	bne.n	8006056 <acc_detector_distance_configuration_downsampling_factor_set+0x2>
 800606a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800606c:	f003 b9be 	b.w	80093ec <acc_service_envelope_downsampling_factor_set>
 8006070:	20001628 	.word	0x20001628
 8006074:	08018008 	.word	0x08018008
 8006078:	08017fa8 	.word	0x08017fa8
 800607c:	acc12845 	.word	0xacc12845

08006080 <acc_detector_distance_configuration_service_profile_set>:
 8006080:	b928      	cbnz	r0, 800608e <acc_detector_distance_configuration_service_profile_set+0xe>
 8006082:	4b06      	ldr	r3, [pc, #24]	; (800609c <acc_detector_distance_configuration_service_profile_set+0x1c>)
 8006084:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <acc_detector_distance_configuration_service_profile_set+0x20>)
 8006086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006088:	4906      	ldr	r1, [pc, #24]	; (80060a4 <acc_detector_distance_configuration_service_profile_set+0x24>)
 800608a:	2000      	movs	r0, #0
 800608c:	4718      	bx	r3
 800608e:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <acc_detector_distance_configuration_service_profile_set+0x28>)
 8006090:	6802      	ldr	r2, [r0, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d1f5      	bne.n	8006082 <acc_detector_distance_configuration_service_profile_set+0x2>
 8006096:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8006098:	f003 bf3a 	b.w	8009f10 <acc_service_profile_set>
 800609c:	20001628 	.word	0x20001628
 80060a0:	08018008 	.word	0x08018008
 80060a4:	08017fa8 	.word	0x08017fa8
 80060a8:	acc12845 	.word	0xacc12845

080060ac <acc_detector_distance_configuration_maximize_signal_attenuation_set>:
 80060ac:	b928      	cbnz	r0, 80060ba <acc_detector_distance_configuration_maximize_signal_attenuation_set+0xe>
 80060ae:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <acc_detector_distance_configuration_maximize_signal_attenuation_set+0x1c>)
 80060b0:	4a06      	ldr	r2, [pc, #24]	; (80060cc <acc_detector_distance_configuration_maximize_signal_attenuation_set+0x20>)
 80060b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b4:	4906      	ldr	r1, [pc, #24]	; (80060d0 <acc_detector_distance_configuration_maximize_signal_attenuation_set+0x24>)
 80060b6:	2000      	movs	r0, #0
 80060b8:	4718      	bx	r3
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <acc_detector_distance_configuration_maximize_signal_attenuation_set+0x28>)
 80060bc:	6802      	ldr	r2, [r0, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d1f5      	bne.n	80060ae <acc_detector_distance_configuration_maximize_signal_attenuation_set+0x2>
 80060c2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80060c4:	f003 bf3c 	b.w	8009f40 <acc_service_maximize_signal_attenuation_set>
 80060c8:	20001628 	.word	0x20001628
 80060cc:	08018008 	.word	0x08018008
 80060d0:	08017fa8 	.word	0x08017fa8
 80060d4:	acc12845 	.word	0xacc12845

080060d8 <acc_detector_distance_configuration_receiver_gain_get>:
 80060d8:	b508      	push	{r3, lr}
 80060da:	b940      	cbnz	r0, 80060ee <acc_detector_distance_configuration_receiver_gain_get+0x16>
 80060dc:	4b08      	ldr	r3, [pc, #32]	; (8006100 <acc_detector_distance_configuration_receiver_gain_get+0x28>)
 80060de:	4a09      	ldr	r2, [pc, #36]	; (8006104 <acc_detector_distance_configuration_receiver_gain_get+0x2c>)
 80060e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e2:	4909      	ldr	r1, [pc, #36]	; (8006108 <acc_detector_distance_configuration_receiver_gain_get+0x30>)
 80060e4:	2000      	movs	r0, #0
 80060e6:	4798      	blx	r3
 80060e8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800610c <acc_detector_distance_configuration_receiver_gain_get+0x34>
 80060ec:	bd08      	pop	{r3, pc}
 80060ee:	4b08      	ldr	r3, [pc, #32]	; (8006110 <acc_detector_distance_configuration_receiver_gain_get+0x38>)
 80060f0:	6802      	ldr	r2, [r0, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d1f2      	bne.n	80060dc <acc_detector_distance_configuration_receiver_gain_get+0x4>
 80060f6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80060f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060fc:	f003 bdda 	b.w	8009cb4 <acc_service_receiver_gain_get>
 8006100:	20001628 	.word	0x20001628
 8006104:	08018008 	.word	0x08018008
 8006108:	08017fa8 	.word	0x08017fa8
 800610c:	00000000 	.word	0x00000000
 8006110:	acc12845 	.word	0xacc12845

08006114 <acc_detector_distance_configuration_receiver_gain_set>:
 8006114:	b928      	cbnz	r0, 8006122 <acc_detector_distance_configuration_receiver_gain_set+0xe>
 8006116:	4b06      	ldr	r3, [pc, #24]	; (8006130 <acc_detector_distance_configuration_receiver_gain_set+0x1c>)
 8006118:	4a06      	ldr	r2, [pc, #24]	; (8006134 <acc_detector_distance_configuration_receiver_gain_set+0x20>)
 800611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611c:	4906      	ldr	r1, [pc, #24]	; (8006138 <acc_detector_distance_configuration_receiver_gain_set+0x24>)
 800611e:	2000      	movs	r0, #0
 8006120:	4718      	bx	r3
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <acc_detector_distance_configuration_receiver_gain_set+0x28>)
 8006124:	6802      	ldr	r2, [r0, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d1f5      	bne.n	8006116 <acc_detector_distance_configuration_receiver_gain_set+0x2>
 800612a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800612c:	f003 bdca 	b.w	8009cc4 <acc_service_receiver_gain_set>
 8006130:	20001628 	.word	0x20001628
 8006134:	08018008 	.word	0x08018008
 8006138:	08017fa8 	.word	0x08017fa8
 800613c:	acc12845 	.word	0xacc12845

08006140 <acc_detector_distance_configuration_sweep_averaging_set>:
 8006140:	b131      	cbz	r1, 8006150 <acc_detector_distance_configuration_sweep_averaging_set+0x10>
 8006142:	b988      	cbnz	r0, 8006168 <acc_detector_distance_configuration_sweep_averaging_set+0x28>
 8006144:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <acc_detector_distance_configuration_sweep_averaging_set+0x38>)
 8006146:	4a0d      	ldr	r2, [pc, #52]	; (800617c <acc_detector_distance_configuration_sweep_averaging_set+0x3c>)
 8006148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614a:	490d      	ldr	r1, [pc, #52]	; (8006180 <acc_detector_distance_configuration_sweep_averaging_set+0x40>)
 800614c:	2000      	movs	r0, #0
 800614e:	4718      	bx	r3
 8006150:	b510      	push	{r4, lr}
 8006152:	f002 fea5 	bl	8008ea0 <acc_rss_integration_log_level>
 8006156:	b168      	cbz	r0, 8006174 <acc_detector_distance_configuration_sweep_averaging_set+0x34>
 8006158:	4b07      	ldr	r3, [pc, #28]	; (8006178 <acc_detector_distance_configuration_sweep_averaging_set+0x38>)
 800615a:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <acc_detector_distance_configuration_sweep_averaging_set+0x44>)
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	4908      	ldr	r1, [pc, #32]	; (8006180 <acc_detector_distance_configuration_sweep_averaging_set+0x40>)
 8006160:	2001      	movs	r0, #1
 8006162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006166:	4718      	bx	r3
 8006168:	4b07      	ldr	r3, [pc, #28]	; (8006188 <acc_detector_distance_configuration_sweep_averaging_set+0x48>)
 800616a:	6802      	ldr	r2, [r0, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d1e9      	bne.n	8006144 <acc_detector_distance_configuration_sweep_averaging_set+0x4>
 8006170:	80c1      	strh	r1, [r0, #6]
 8006172:	4770      	bx	lr
 8006174:	bd10      	pop	{r4, pc}
 8006176:	bf00      	nop
 8006178:	20001628 	.word	0x20001628
 800617c:	08018008 	.word	0x08018008
 8006180:	08017fa8 	.word	0x08017fa8
 8006184:	08017e34 	.word	0x08017e34
 8006188:	acc12845 	.word	0xacc12845

0800618c <acc_detector_distance_configuration_threshold_type_set>:
 800618c:	b928      	cbnz	r0, 800619a <acc_detector_distance_configuration_threshold_type_set+0xe>
 800618e:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <acc_detector_distance_configuration_threshold_type_set+0x2c>)
 8006190:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <acc_detector_distance_configuration_threshold_type_set+0x30>)
 8006192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006194:	490a      	ldr	r1, [pc, #40]	; (80061c0 <acc_detector_distance_configuration_threshold_type_set+0x34>)
 8006196:	2000      	movs	r0, #0
 8006198:	4718      	bx	r3
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <acc_detector_distance_configuration_threshold_type_set+0x38>)
 800619c:	6802      	ldr	r2, [r0, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d1f5      	bne.n	800618e <acc_detector_distance_configuration_threshold_type_set+0x2>
 80061a2:	2901      	cmp	r1, #1
 80061a4:	d002      	beq.n	80061ac <acc_detector_distance_configuration_threshold_type_set+0x20>
 80061a6:	d304      	bcc.n	80061b2 <acc_detector_distance_configuration_threshold_type_set+0x26>
 80061a8:	2902      	cmp	r1, #2
 80061aa:	d101      	bne.n	80061b0 <acc_detector_distance_configuration_threshold_type_set+0x24>
 80061ac:	7201      	strb	r1, [r0, #8]
 80061ae:	4770      	bx	lr
 80061b0:	4770      	bx	lr
 80061b2:	2300      	movs	r3, #0
 80061b4:	7203      	strb	r3, [r0, #8]
 80061b6:	4770      	bx	lr
 80061b8:	20001628 	.word	0x20001628
 80061bc:	08018008 	.word	0x08018008
 80061c0:	08017fa8 	.word	0x08017fa8
 80061c4:	acc12845 	.word	0xacc12845

080061c8 <acc_detector_distance_configuration_threshold_sensitivity_set>:
 80061c8:	b928      	cbnz	r0, 80061d6 <acc_detector_distance_configuration_threshold_sensitivity_set+0xe>
 80061ca:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <acc_detector_distance_configuration_threshold_sensitivity_set+0x1c>)
 80061cc:	4a06      	ldr	r2, [pc, #24]	; (80061e8 <acc_detector_distance_configuration_threshold_sensitivity_set+0x20>)
 80061ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d0:	4906      	ldr	r1, [pc, #24]	; (80061ec <acc_detector_distance_configuration_threshold_sensitivity_set+0x24>)
 80061d2:	2000      	movs	r0, #0
 80061d4:	4718      	bx	r3
 80061d6:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <acc_detector_distance_configuration_threshold_sensitivity_set+0x28>)
 80061d8:	6802      	ldr	r2, [r0, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d1f5      	bne.n	80061ca <acc_detector_distance_configuration_threshold_sensitivity_set+0x2>
 80061de:	ed80 0a04 	vstr	s0, [r0, #16]
 80061e2:	4770      	bx	lr
 80061e4:	20001628 	.word	0x20001628
 80061e8:	08018008 	.word	0x08018008
 80061ec:	08017fa8 	.word	0x08017fa8
 80061f0:	acc12845 	.word	0xacc12845

080061f4 <acc_detector_distance_configuration_record_background_sweeps_set>:
 80061f4:	b928      	cbnz	r0, 8006202 <acc_detector_distance_configuration_record_background_sweeps_set+0xe>
 80061f6:	4b06      	ldr	r3, [pc, #24]	; (8006210 <acc_detector_distance_configuration_record_background_sweeps_set+0x1c>)
 80061f8:	4a06      	ldr	r2, [pc, #24]	; (8006214 <acc_detector_distance_configuration_record_background_sweeps_set+0x20>)
 80061fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fc:	4906      	ldr	r1, [pc, #24]	; (8006218 <acc_detector_distance_configuration_record_background_sweeps_set+0x24>)
 80061fe:	2000      	movs	r0, #0
 8006200:	4718      	bx	r3
 8006202:	4b06      	ldr	r3, [pc, #24]	; (800621c <acc_detector_distance_configuration_record_background_sweeps_set+0x28>)
 8006204:	6802      	ldr	r2, [r0, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d1f5      	bne.n	80061f6 <acc_detector_distance_configuration_record_background_sweeps_set+0x2>
 800620a:	8281      	strh	r1, [r0, #20]
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	20001628 	.word	0x20001628
 8006214:	08018008 	.word	0x08018008
 8006218:	08017fa8 	.word	0x08017fa8
 800621c:	acc12845 	.word	0xacc12845

08006220 <acc_detector_distance_configuration_cfar_threshold_guard_set>:
 8006220:	b928      	cbnz	r0, 800622e <acc_detector_distance_configuration_cfar_threshold_guard_set+0xe>
 8006222:	4b06      	ldr	r3, [pc, #24]	; (800623c <acc_detector_distance_configuration_cfar_threshold_guard_set+0x1c>)
 8006224:	4a06      	ldr	r2, [pc, #24]	; (8006240 <acc_detector_distance_configuration_cfar_threshold_guard_set+0x20>)
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	4906      	ldr	r1, [pc, #24]	; (8006244 <acc_detector_distance_configuration_cfar_threshold_guard_set+0x24>)
 800622a:	2000      	movs	r0, #0
 800622c:	4718      	bx	r3
 800622e:	4b06      	ldr	r3, [pc, #24]	; (8006248 <acc_detector_distance_configuration_cfar_threshold_guard_set+0x28>)
 8006230:	6802      	ldr	r2, [r0, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d1f5      	bne.n	8006222 <acc_detector_distance_configuration_cfar_threshold_guard_set+0x2>
 8006236:	ed80 0a06 	vstr	s0, [r0, #24]
 800623a:	4770      	bx	lr
 800623c:	20001628 	.word	0x20001628
 8006240:	08018008 	.word	0x08018008
 8006244:	08017fa8 	.word	0x08017fa8
 8006248:	acc12845 	.word	0xacc12845

0800624c <acc_detector_distance_configuration_cfar_threshold_window_set>:
 800624c:	b928      	cbnz	r0, 800625a <acc_detector_distance_configuration_cfar_threshold_window_set+0xe>
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <acc_detector_distance_configuration_cfar_threshold_window_set+0x1c>)
 8006250:	4a06      	ldr	r2, [pc, #24]	; (800626c <acc_detector_distance_configuration_cfar_threshold_window_set+0x20>)
 8006252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006254:	4906      	ldr	r1, [pc, #24]	; (8006270 <acc_detector_distance_configuration_cfar_threshold_window_set+0x24>)
 8006256:	2000      	movs	r0, #0
 8006258:	4718      	bx	r3
 800625a:	4b06      	ldr	r3, [pc, #24]	; (8006274 <acc_detector_distance_configuration_cfar_threshold_window_set+0x28>)
 800625c:	6802      	ldr	r2, [r0, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d1f5      	bne.n	800624e <acc_detector_distance_configuration_cfar_threshold_window_set+0x2>
 8006262:	ed80 0a07 	vstr	s0, [r0, #28]
 8006266:	4770      	bx	lr
 8006268:	20001628 	.word	0x20001628
 800626c:	08018008 	.word	0x08018008
 8006270:	08017fa8 	.word	0x08017fa8
 8006274:	acc12845 	.word	0xacc12845

08006278 <acc_detector_distance_configuration_mur_set>:
 8006278:	b928      	cbnz	r0, 8006286 <acc_detector_distance_configuration_mur_set+0xe>
 800627a:	4b06      	ldr	r3, [pc, #24]	; (8006294 <acc_detector_distance_configuration_mur_set+0x1c>)
 800627c:	4a06      	ldr	r2, [pc, #24]	; (8006298 <acc_detector_distance_configuration_mur_set+0x20>)
 800627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006280:	4906      	ldr	r1, [pc, #24]	; (800629c <acc_detector_distance_configuration_mur_set+0x24>)
 8006282:	2000      	movs	r0, #0
 8006284:	4718      	bx	r3
 8006286:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <acc_detector_distance_configuration_mur_set+0x28>)
 8006288:	6802      	ldr	r2, [r0, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d1f5      	bne.n	800627a <acc_detector_distance_configuration_mur_set+0x2>
 800628e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8006290:	f003 be80 	b.w	8009f94 <acc_service_mur_set>
 8006294:	20001628 	.word	0x20001628
 8006298:	08018008 	.word	0x08018008
 800629c:	08017fa8 	.word	0x08017fa8
 80062a0:	acc12845 	.word	0xacc12845

080062a4 <acc_detector_distance_recorded_threshold_allocate_statistics>:
 80062a4:	b510      	push	{r4, lr}
 80062a6:	4604      	mov	r4, r0
 80062a8:	f7ff fca0 	bl	8005bec <handle_valid>
 80062ac:	b908      	cbnz	r0, 80062b2 <acc_detector_distance_recorded_threshold_allocate_statistics+0xe>
 80062ae:	2000      	movs	r0, #0
 80062b0:	bd10      	pop	{r4, pc}
 80062b2:	6860      	ldr	r0, [r4, #4]
 80062b4:	f000 fa9e 	bl	80067f4 <acc_detector_distance_processing_threshold_type>
 80062b8:	2801      	cmp	r0, #1
 80062ba:	d007      	beq.n	80062cc <acc_detector_distance_recorded_threshold_allocate_statistics+0x28>
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <acc_detector_distance_recorded_threshold_allocate_statistics+0x34>)
 80062be:	4a07      	ldr	r2, [pc, #28]	; (80062dc <acc_detector_distance_recorded_threshold_allocate_statistics+0x38>)
 80062c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c2:	4907      	ldr	r1, [pc, #28]	; (80062e0 <acc_detector_distance_recorded_threshold_allocate_statistics+0x3c>)
 80062c4:	2000      	movs	r0, #0
 80062c6:	4798      	blx	r3
 80062c8:	2000      	movs	r0, #0
 80062ca:	bd10      	pop	{r4, pc}
 80062cc:	6860      	ldr	r0, [r4, #4]
 80062ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d2:	f000 baa9 	b.w	8006828 <acc_detector_distance_processing_recorded_threshold_allocate_statistics>
 80062d6:	bf00      	nop
 80062d8:	20001628 	.word	0x20001628
 80062dc:	08017f80 	.word	0x08017f80
 80062e0:	08017fa8 	.word	0x08017fa8

080062e4 <acc_detector_distance_recorded_threshold_deallocate_statistics>:
 80062e4:	b510      	push	{r4, lr}
 80062e6:	4604      	mov	r4, r0
 80062e8:	f7ff fc80 	bl	8005bec <handle_valid>
 80062ec:	b900      	cbnz	r0, 80062f0 <acc_detector_distance_recorded_threshold_deallocate_statistics+0xc>
 80062ee:	bd10      	pop	{r4, pc}
 80062f0:	6860      	ldr	r0, [r4, #4]
 80062f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f6:	f000 ba9b 	b.w	8006830 <acc_detector_distance_processing_recorded_threshold_deallocate_statistics>
 80062fa:	bf00      	nop

080062fc <acc_detector_distance_process_background_data>:
 80062fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006300:	b083      	sub	sp, #12
 8006302:	460e      	mov	r6, r1
 8006304:	4617      	mov	r7, r2
 8006306:	4698      	mov	r8, r3
 8006308:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 800630c:	4605      	mov	r5, r0
 800630e:	f7ff fc6d 	bl	8005bec <handle_valid>
 8006312:	4604      	mov	r4, r0
 8006314:	b918      	cbnz	r0, 800631e <acc_detector_distance_process_background_data+0x22>
 8006316:	4620      	mov	r0, r4
 8006318:	b003      	add	sp, #12
 800631a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800631e:	6868      	ldr	r0, [r5, #4]
 8006320:	f000 fa8a 	bl	8006838 <acc_detector_distance_processing_threshold_recording_done>
 8006324:	b990      	cbnz	r0, 800634c <acc_detector_distance_process_background_data+0x50>
 8006326:	6868      	ldr	r0, [r5, #4]
 8006328:	f8cd 9000 	str.w	r9, [sp]
 800632c:	4643      	mov	r3, r8
 800632e:	463a      	mov	r2, r7
 8006330:	4631      	mov	r1, r6
 8006332:	f000 fa9d 	bl	8006870 <acc_detector_distance_processing_threshold_recording_update>
 8006336:	b948      	cbnz	r0, 800634c <acc_detector_distance_process_background_data+0x50>
 8006338:	4909      	ldr	r1, [pc, #36]	; (8006360 <acc_detector_distance_process_background_data+0x64>)
 800633a:	4a0a      	ldr	r2, [pc, #40]	; (8006364 <acc_detector_distance_process_background_data+0x68>)
 800633c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800633e:	490a      	ldr	r1, [pc, #40]	; (8006368 <acc_detector_distance_process_background_data+0x6c>)
 8006340:	4604      	mov	r4, r0
 8006342:	47a8      	blx	r5
 8006344:	4620      	mov	r0, r4
 8006346:	b003      	add	sp, #12
 8006348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800634c:	6868      	ldr	r0, [r5, #4]
 800634e:	f000 fa73 	bl	8006838 <acc_detector_distance_processing_threshold_recording_done>
 8006352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006354:	7018      	strb	r0, [r3, #0]
 8006356:	4620      	mov	r0, r4
 8006358:	b003      	add	sp, #12
 800635a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800635e:	bf00      	nop
 8006360:	20001628 	.word	0x20001628
 8006364:	08017ee8 	.word	0x08017ee8
 8006368:	08017fa8 	.word	0x08017fa8

0800636c <acc_detector_distance_record_background>:
 800636c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006370:	b087      	sub	sp, #28
 8006372:	460f      	mov	r7, r1
 8006374:	4690      	mov	r8, r2
 8006376:	461e      	mov	r6, r3
 8006378:	4605      	mov	r5, r0
 800637a:	f7ff fc37 	bl	8005bec <handle_valid>
 800637e:	4604      	mov	r4, r0
 8006380:	b918      	cbnz	r0, 800638a <acc_detector_distance_record_background+0x1e>
 8006382:	4620      	mov	r0, r4
 8006384:	b007      	add	sp, #28
 8006386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800638a:	6868      	ldr	r0, [r5, #4]
 800638c:	f000 fa32 	bl	80067f4 <acc_detector_distance_processing_threshold_type>
 8006390:	2801      	cmp	r0, #1
 8006392:	d00a      	beq.n	80063aa <acc_detector_distance_record_background+0x3e>
 8006394:	4b2e      	ldr	r3, [pc, #184]	; (8006450 <acc_detector_distance_record_background+0xe4>)
 8006396:	4a2f      	ldr	r2, [pc, #188]	; (8006454 <acc_detector_distance_record_background+0xe8>)
 8006398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639a:	492f      	ldr	r1, [pc, #188]	; (8006458 <acc_detector_distance_record_background+0xec>)
 800639c:	2000      	movs	r0, #0
 800639e:	4798      	blx	r3
 80063a0:	2400      	movs	r4, #0
 80063a2:	4620      	mov	r0, r4
 80063a4:	b007      	add	sp, #28
 80063a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063aa:	4628      	mov	r0, r5
 80063ac:	f7ff ff7a 	bl	80062a4 <acc_detector_distance_recorded_threshold_allocate_statistics>
 80063b0:	4604      	mov	r4, r0
 80063b2:	b928      	cbnz	r0, 80063c0 <acc_detector_distance_record_background+0x54>
 80063b4:	4b26      	ldr	r3, [pc, #152]	; (8006450 <acc_detector_distance_record_background+0xe4>)
 80063b6:	4a29      	ldr	r2, [pc, #164]	; (800645c <acc_detector_distance_record_background+0xf0>)
 80063b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ba:	4927      	ldr	r1, [pc, #156]	; (8006458 <acc_detector_distance_record_background+0xec>)
 80063bc:	4798      	blx	r3
 80063be:	e7e0      	b.n	8006382 <acc_detector_distance_record_background+0x16>
 80063c0:	6868      	ldr	r0, [r5, #4]
 80063c2:	f000 fa87 	bl	80068d4 <acc_detector_distance_processing_threshold_recording_reset>
 80063c6:	68a8      	ldr	r0, [r5, #8]
 80063c8:	f003 fb96 	bl	8009af8 <acc_service_activate>
 80063cc:	2300      	movs	r3, #0
 80063ce:	f88d 300f 	strb.w	r3, [sp, #15]
 80063d2:	b11e      	cbz	r6, 80063dc <acc_detector_distance_record_background+0x70>
 80063d4:	70b3      	strb	r3, [r6, #2]
 80063d6:	70f3      	strb	r3, [r6, #3]
 80063d8:	7033      	strb	r3, [r6, #0]
 80063da:	7073      	strb	r3, [r6, #1]
 80063dc:	f10d 090f 	add.w	r9, sp, #15
 80063e0:	aa04      	add	r2, sp, #16
 80063e2:	a905      	add	r1, sp, #20
 80063e4:	68a8      	ldr	r0, [r5, #8]
 80063e6:	f003 f86f 	bl	80094c8 <acc_service_envelope_get_next_by_reference>
 80063ea:	4604      	mov	r4, r0
 80063ec:	b348      	cbz	r0, 8006442 <acc_detector_distance_record_background+0xd6>
 80063ee:	b19e      	cbz	r6, 8006418 <acc_detector_distance_record_background+0xac>
 80063f0:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80063f4:	b902      	cbnz	r2, 80063f8 <acc_detector_distance_record_background+0x8c>
 80063f6:	78b2      	ldrb	r2, [r6, #2]
 80063f8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80063fc:	70b2      	strb	r2, [r6, #2]
 80063fe:	b903      	cbnz	r3, 8006402 <acc_detector_distance_record_background+0x96>
 8006400:	78f3      	ldrb	r3, [r6, #3]
 8006402:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8006406:	70f3      	strb	r3, [r6, #3]
 8006408:	b902      	cbnz	r2, 800640c <acc_detector_distance_record_background+0xa0>
 800640a:	7832      	ldrb	r2, [r6, #0]
 800640c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8006410:	7032      	strb	r2, [r6, #0]
 8006412:	b903      	cbnz	r3, 8006416 <acc_detector_distance_record_background+0xaa>
 8006414:	7873      	ldrb	r3, [r6, #1]
 8006416:	7073      	strb	r3, [r6, #1]
 8006418:	8aaa      	ldrh	r2, [r5, #20]
 800641a:	9905      	ldr	r1, [sp, #20]
 800641c:	e9cd 8900 	strd	r8, r9, [sp]
 8006420:	463b      	mov	r3, r7
 8006422:	4628      	mov	r0, r5
 8006424:	f7ff ff6a 	bl	80062fc <acc_detector_distance_process_background_data>
 8006428:	4604      	mov	r4, r0
 800642a:	b118      	cbz	r0, 8006434 <acc_detector_distance_record_background+0xc8>
 800642c:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8006430:	2c00      	cmp	r4, #0
 8006432:	d0d5      	beq.n	80063e0 <acc_detector_distance_record_background+0x74>
 8006434:	68a8      	ldr	r0, [r5, #8]
 8006436:	f003 fbaf 	bl	8009b98 <acc_service_deactivate>
 800643a:	4628      	mov	r0, r5
 800643c:	f7ff ff52 	bl	80062e4 <acc_detector_distance_recorded_threshold_deallocate_statistics>
 8006440:	e79f      	b.n	8006382 <acc_detector_distance_record_background+0x16>
 8006442:	4b03      	ldr	r3, [pc, #12]	; (8006450 <acc_detector_distance_record_background+0xe4>)
 8006444:	4a06      	ldr	r2, [pc, #24]	; (8006460 <acc_detector_distance_record_background+0xf4>)
 8006446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006448:	4903      	ldr	r1, [pc, #12]	; (8006458 <acc_detector_distance_record_background+0xec>)
 800644a:	4798      	blx	r3
 800644c:	e7f2      	b.n	8006434 <acc_detector_distance_record_background+0xc8>
 800644e:	bf00      	nop
 8006450:	20001628 	.word	0x20001628
 8006454:	08017f80 	.word	0x08017f80
 8006458:	08017fa8 	.word	0x08017fa8
 800645c:	08017f28 	.word	0x08017f28
 8006460:	08017f48 	.word	0x08017f48

08006464 <acc_detector_distance_process_data>:
 8006464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006468:	b083      	sub	sp, #12
 800646a:	460c      	mov	r4, r1
 800646c:	4691      	mov	r9, r2
 800646e:	461d      	mov	r5, r3
 8006470:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8006474:	4680      	mov	r8, r0
 8006476:	f7ff fbb9 	bl	8005bec <handle_valid>
 800647a:	4606      	mov	r6, r0
 800647c:	b918      	cbnz	r0, 8006486 <acc_detector_distance_process_data+0x22>
 800647e:	4630      	mov	r0, r6
 8006480:	b003      	add	sp, #12
 8006482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006486:	464a      	mov	r2, r9
 8006488:	ab01      	add	r3, sp, #4
 800648a:	4621      	mov	r1, r4
 800648c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006490:	f000 fa5e 	bl	8006950 <acc_detector_distance_processing_next>
 8006494:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800649a:	7013      	strb	r3, [r2, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0ee      	beq.n	800647e <acc_detector_distance_process_data+0x1a>
 80064a0:	4287      	cmp	r7, r0
 80064a2:	bf28      	it	cs
 80064a4:	4607      	movcs	r7, r0
 80064a6:	b2bf      	uxth	r7, r7
 80064a8:	ed98 7a03 	vldr	s14, [r8, #12]
 80064ac:	edd8 6a06 	vldr	s13, [r8, #24]
 80064b0:	b30f      	cbz	r7, 80064f6 <acc_detector_distance_process_data+0x92>
 80064b2:	1e78      	subs	r0, r7, #1
 80064b4:	1d22      	adds	r2, r4, #4
 80064b6:	b280      	uxth	r0, r0
 80064b8:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8006530 <acc_detector_distance_process_data+0xcc>
 80064bc:	4621      	mov	r1, r4
 80064be:	1d2b      	adds	r3, r5, #4
 80064c0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80064c4:	880a      	ldrh	r2, [r1, #0]
 80064c6:	ee07 2a90 	vmov	s15, r2
 80064ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064ce:	884a      	ldrh	r2, [r1, #2]
 80064d0:	f823 2c04 	strh.w	r2, [r3, #-4]
 80064d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80064d8:	3104      	adds	r1, #4
 80064da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064de:	3308      	adds	r3, #8
 80064e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e8:	bfd8      	it	le
 80064ea:	eef0 7a46 	vmovle.f32	s15, s12
 80064ee:	4288      	cmp	r0, r1
 80064f0:	ed43 7a02 	vstr	s15, [r3, #-8]
 80064f4:	d1e6      	bne.n	80064c4 <acc_detector_distance_process_data+0x60>
 80064f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80064fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006506:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800650a:	809f      	strh	r7, [r3, #4]
 800650c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006510:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006514:	7193      	strb	r3, [r2, #6]
 8006516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800651a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651e:	bfd8      	it	le
 8006520:	eddf 7a03 	vldrle	s15, [pc, #12]	; 8006530 <acc_detector_distance_process_data+0xcc>
 8006524:	4630      	mov	r0, r6
 8006526:	edc2 7a02 	vstr	s15, [r2, #8]
 800652a:	b003      	add	sp, #12
 800652c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006530:	00000000 	.word	0x00000000

08006534 <acc_detector_distance_get_next>:
 8006534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006538:	b089      	sub	sp, #36	; 0x24
 800653a:	460f      	mov	r7, r1
 800653c:	4690      	mov	r8, r2
 800653e:	461c      	mov	r4, r3
 8006540:	4605      	mov	r5, r0
 8006542:	f7ff fb53 	bl	8005bec <handle_valid>
 8006546:	b158      	cbz	r0, 8006560 <acc_detector_distance_get_next+0x2c>
 8006548:	b97c      	cbnz	r4, 800656a <acc_detector_distance_get_next+0x36>
 800654a:	4b2a      	ldr	r3, [pc, #168]	; (80065f4 <acc_detector_distance_get_next+0xc0>)
 800654c:	4a2a      	ldr	r2, [pc, #168]	; (80065f8 <acc_detector_distance_get_next+0xc4>)
 800654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006550:	492a      	ldr	r1, [pc, #168]	; (80065fc <acc_detector_distance_get_next+0xc8>)
 8006552:	4620      	mov	r0, r4
 8006554:	4798      	blx	r3
 8006556:	4626      	mov	r6, r4
 8006558:	4630      	mov	r0, r6
 800655a:	b009      	add	sp, #36	; 0x24
 800655c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006560:	2600      	movs	r6, #0
 8006562:	4630      	mov	r0, r6
 8006564:	b009      	add	sp, #36	; 0x24
 8006566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800656a:	2300      	movs	r3, #0
 800656c:	f88d 3017 	strb.w	r3, [sp, #23]
 8006570:	70a3      	strb	r3, [r4, #2]
 8006572:	70e3      	strb	r3, [r4, #3]
 8006574:	7023      	strb	r3, [r4, #0]
 8006576:	7063      	strb	r3, [r4, #1]
 8006578:	f10d 0917 	add.w	r9, sp, #23
 800657c:	e02b      	b.n	80065d6 <acc_detector_distance_get_next+0xa2>
 800657e:	69eb      	ldr	r3, [r5, #28]
 8006580:	9806      	ldr	r0, [sp, #24]
 8006582:	8aaa      	ldrh	r2, [r5, #20]
 8006584:	b11b      	cbz	r3, 800658e <acc_detector_distance_get_next+0x5a>
 8006586:	4611      	mov	r1, r2
 8006588:	4798      	blx	r3
 800658a:	9806      	ldr	r0, [sp, #24]
 800658c:	8aaa      	ldrh	r2, [r5, #20]
 800658e:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8006592:	b901      	cbnz	r1, 8006596 <acc_detector_distance_get_next+0x62>
 8006594:	78a1      	ldrb	r1, [r4, #2]
 8006596:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800659a:	70a1      	strb	r1, [r4, #2]
 800659c:	b903      	cbnz	r3, 80065a0 <acc_detector_distance_get_next+0x6c>
 800659e:	78e3      	ldrb	r3, [r4, #3]
 80065a0:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80065a4:	70e3      	strb	r3, [r4, #3]
 80065a6:	b901      	cbnz	r1, 80065aa <acc_detector_distance_get_next+0x76>
 80065a8:	7821      	ldrb	r1, [r4, #0]
 80065aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80065ae:	7021      	strb	r1, [r4, #0]
 80065b0:	b903      	cbnz	r3, 80065b4 <acc_detector_distance_get_next+0x80>
 80065b2:	7863      	ldrb	r3, [r4, #1]
 80065b4:	7063      	strb	r3, [r4, #1]
 80065b6:	4601      	mov	r1, r0
 80065b8:	463b      	mov	r3, r7
 80065ba:	e9cd 4901 	strd	r4, r9, [sp, #4]
 80065be:	f8cd 8000 	str.w	r8, [sp]
 80065c2:	4628      	mov	r0, r5
 80065c4:	f7ff ff4e 	bl	8006464 <acc_detector_distance_process_data>
 80065c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80065cc:	4606      	mov	r6, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1c7      	bne.n	8006562 <acc_detector_distance_get_next+0x2e>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d0c4      	beq.n	8006560 <acc_detector_distance_get_next+0x2c>
 80065d6:	aa07      	add	r2, sp, #28
 80065d8:	a906      	add	r1, sp, #24
 80065da:	68a8      	ldr	r0, [r5, #8]
 80065dc:	f002 ff74 	bl	80094c8 <acc_service_envelope_get_next_by_reference>
 80065e0:	4606      	mov	r6, r0
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d1cb      	bne.n	800657e <acc_detector_distance_get_next+0x4a>
 80065e6:	4b03      	ldr	r3, [pc, #12]	; (80065f4 <acc_detector_distance_get_next+0xc0>)
 80065e8:	4a05      	ldr	r2, [pc, #20]	; (8006600 <acc_detector_distance_get_next+0xcc>)
 80065ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ec:	4903      	ldr	r1, [pc, #12]	; (80065fc <acc_detector_distance_get_next+0xc8>)
 80065ee:	4798      	blx	r3
 80065f0:	e7b7      	b.n	8006562 <acc_detector_distance_get_next+0x2e>
 80065f2:	bf00      	nop
 80065f4:	20001628 	.word	0x20001628
 80065f8:	08017eb8 	.word	0x08017eb8
 80065fc:	08017fa8 	.word	0x08017fa8
 8006600:	08017f48 	.word	0x08017f48

08006604 <destroy_handle>:
 8006604:	b510      	push	{r4, lr}
 8006606:	4604      	mov	r4, r0
 8006608:	6900      	ldr	r0, [r0, #16]
 800660a:	b150      	cbz	r0, 8006622 <destroy_handle+0x1e>
 800660c:	7803      	ldrb	r3, [r0, #0]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d01a      	beq.n	8006648 <destroy_handle+0x44>
 8006612:	d313      	bcc.n	800663c <destroy_handle+0x38>
 8006614:	2b02      	cmp	r3, #2
 8006616:	d104      	bne.n	8006622 <destroy_handle+0x1e>
 8006618:	f104 0010 	add.w	r0, r4, #16
 800661c:	f001 fdcc 	bl	80081b8 <acc_alg_threshold_cfar_free>
 8006620:	6920      	ldr	r0, [r4, #16]
 8006622:	f002 fc2b 	bl	8008e7c <acc_rss_integration_mem_free>
 8006626:	6960      	ldr	r0, [r4, #20]
 8006628:	f002 fc28 	bl	8008e7c <acc_rss_integration_mem_free>
 800662c:	68a0      	ldr	r0, [r4, #8]
 800662e:	f002 fc25 	bl	8008e7c <acc_rss_integration_mem_free>
 8006632:	4620      	mov	r0, r4
 8006634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006638:	f002 bc20 	b.w	8008e7c <acc_rss_integration_mem_free>
 800663c:	f104 0010 	add.w	r0, r4, #16
 8006640:	f001 fd5c 	bl	80080fc <acc_alg_threshold_fixed_free>
 8006644:	6920      	ldr	r0, [r4, #16]
 8006646:	e7ec      	b.n	8006622 <destroy_handle+0x1e>
 8006648:	f104 0010 	add.w	r0, r4, #16
 800664c:	f001 fd8a 	bl	8008164 <acc_alg_threshold_stationary_clutter_free>
 8006650:	6920      	ldr	r0, [r4, #16]
 8006652:	e7e6      	b.n	8006622 <destroy_handle+0x1e>

08006654 <acc_detector_distance_processing_create>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	223b      	movs	r2, #59	; 0x3b
 8006658:	4605      	mov	r5, r0
 800665a:	494e      	ldr	r1, [pc, #312]	; (8006794 <acc_detector_distance_processing_create+0x140>)
 800665c:	202c      	movs	r0, #44	; 0x2c
 800665e:	f002 fbc9 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 8006662:	4604      	mov	r4, r0
 8006664:	2800      	cmp	r0, #0
 8006666:	d05b      	beq.n	8006720 <acc_detector_distance_processing_create+0xcc>
 8006668:	886a      	ldrh	r2, [r5, #2]
 800666a:	494b      	ldr	r1, [pc, #300]	; (8006798 <acc_detector_distance_processing_create+0x144>)
 800666c:	8082      	strh	r2, [r0, #4]
 800666e:	2300      	movs	r3, #0
 8006670:	2a01      	cmp	r2, #1
 8006672:	6001      	str	r1, [r0, #0]
 8006674:	80c3      	strh	r3, [r0, #6]
 8006676:	d83e      	bhi.n	80066f6 <acc_detector_distance_processing_create+0xa2>
 8006678:	8183      	strh	r3, [r0, #12]
 800667a:	6083      	str	r3, [r0, #8]
 800667c:	792b      	ldrb	r3, [r5, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	2b01      	cmp	r3, #1
 8006682:	8322      	strh	r2, [r4, #24]
 8006684:	d068      	beq.n	8006758 <acc_detector_distance_processing_create+0x104>
 8006686:	d361      	bcc.n	800674c <acc_detector_distance_processing_create+0xf8>
 8006688:	2b02      	cmp	r3, #2
 800668a:	d150      	bne.n	800672e <acc_detector_distance_processing_create+0xda>
 800668c:	edd5 6a0a 	vldr	s13, [r5, #40]	; 0x28
 8006690:	edd5 7a06 	vldr	s15, [r5, #24]
 8006694:	ed95 6a05 	vldr	s12, [r5, #20]
 8006698:	7f2a      	ldrb	r2, [r5, #28]
 800669a:	ed95 0a03 	vldr	s0, [r5, #12]
 800669e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80066a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80066a6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80066aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ae:	ee17 3a10 	vmov	r3, s14
 80066b2:	b299      	uxth	r1, r3
 80066b4:	ee17 3a90 	vmov	r3, s15
 80066b8:	b298      	uxth	r0, r3
 80066ba:	f001 fd63 	bl	8008184 <acc_alg_threshold_cfar_threshold_allocate>
 80066be:	4606      	mov	r6, r0
 80066c0:	6120      	str	r0, [r4, #16]
 80066c2:	2e00      	cmp	r6, #0
 80066c4:	d036      	beq.n	8006734 <acc_detector_distance_processing_create+0xe0>
 80066c6:	8828      	ldrh	r0, [r5, #0]
 80066c8:	4a32      	ldr	r2, [pc, #200]	; (8006794 <acc_detector_distance_processing_create+0x140>)
 80066ca:	301f      	adds	r0, #31
 80066cc:	0940      	lsrs	r0, r0, #5
 80066ce:	238e      	movs	r3, #142	; 0x8e
 80066d0:	2104      	movs	r1, #4
 80066d2:	f002 fbb5 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 80066d6:	4606      	mov	r6, r0
 80066d8:	6160      	str	r0, [r4, #20]
 80066da:	2800      	cmp	r0, #0
 80066dc:	d050      	beq.n	8006780 <acc_detector_distance_processing_create+0x12c>
 80066de:	6a28      	ldr	r0, [r5, #32]
 80066e0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80066e2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80066e4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80066e8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80066ec:	61e0      	str	r0, [r4, #28]
 80066ee:	6221      	str	r1, [r4, #32]
 80066f0:	6262      	str	r2, [r4, #36]	; 0x24
 80066f2:	4620      	mov	r0, r4
 80066f4:	bd70      	pop	{r4, r5, r6, pc}
 80066f6:	8828      	ldrh	r0, [r5, #0]
 80066f8:	81a0      	strh	r0, [r4, #12]
 80066fa:	234c      	movs	r3, #76	; 0x4c
 80066fc:	4a25      	ldr	r2, [pc, #148]	; (8006794 <acc_detector_distance_processing_create+0x140>)
 80066fe:	2102      	movs	r1, #2
 8006700:	f002 fb9e 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 8006704:	4606      	mov	r6, r0
 8006706:	60a0      	str	r0, [r4, #8]
 8006708:	2800      	cmp	r0, #0
 800670a:	d1b7      	bne.n	800667c <acc_detector_distance_processing_create+0x28>
 800670c:	4b23      	ldr	r3, [pc, #140]	; (800679c <acc_detector_distance_processing_create+0x148>)
 800670e:	4a24      	ldr	r2, [pc, #144]	; (80067a0 <acc_detector_distance_processing_create+0x14c>)
 8006710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006712:	4924      	ldr	r1, [pc, #144]	; (80067a4 <acc_detector_distance_processing_create+0x150>)
 8006714:	4798      	blx	r3
 8006716:	4620      	mov	r0, r4
 8006718:	f002 fbb0 	bl	8008e7c <acc_rss_integration_mem_free>
 800671c:	4634      	mov	r4, r6
 800671e:	e004      	b.n	800672a <acc_detector_distance_processing_create+0xd6>
 8006720:	4b1e      	ldr	r3, [pc, #120]	; (800679c <acc_detector_distance_processing_create+0x148>)
 8006722:	4a21      	ldr	r2, [pc, #132]	; (80067a8 <acc_detector_distance_processing_create+0x154>)
 8006724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006726:	491f      	ldr	r1, [pc, #124]	; (80067a4 <acc_detector_distance_processing_create+0x150>)
 8006728:	4798      	blx	r3
 800672a:	4620      	mov	r0, r4
 800672c:	bd70      	pop	{r4, r5, r6, pc}
 800672e:	6926      	ldr	r6, [r4, #16]
 8006730:	2e00      	cmp	r6, #0
 8006732:	d1c8      	bne.n	80066c6 <acc_detector_distance_processing_create+0x72>
 8006734:	4b19      	ldr	r3, [pc, #100]	; (800679c <acc_detector_distance_processing_create+0x148>)
 8006736:	4a1d      	ldr	r2, [pc, #116]	; (80067ac <acc_detector_distance_processing_create+0x158>)
 8006738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673a:	491a      	ldr	r1, [pc, #104]	; (80067a4 <acc_detector_distance_processing_create+0x150>)
 800673c:	4630      	mov	r0, r6
 800673e:	4798      	blx	r3
 8006740:	4620      	mov	r0, r4
 8006742:	4634      	mov	r4, r6
 8006744:	f7ff ff5e 	bl	8006604 <destroy_handle>
 8006748:	4620      	mov	r0, r4
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	8928      	ldrh	r0, [r5, #8]
 800674e:	f001 fcc7 	bl	80080e0 <acc_alg_threshold_fixed_allocate>
 8006752:	4606      	mov	r6, r0
 8006754:	6120      	str	r0, [r4, #16]
 8006756:	e7b4      	b.n	80066c2 <acc_detector_distance_processing_create+0x6e>
 8006758:	edd5 7a03 	vldr	s15, [r5, #12]
 800675c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80067b0 <acc_detector_distance_processing_create+0x15c>
 8006760:	8a2b      	ldrh	r3, [r5, #16]
 8006762:	8323      	strh	r3, [r4, #24]
 8006764:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800676c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006770:	8828      	ldrh	r0, [r5, #0]
 8006772:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006776:	f001 fccb 	bl	8008110 <acc_alg_threshold_stationary_clutter_allocate>
 800677a:	4606      	mov	r6, r0
 800677c:	6120      	str	r0, [r4, #16]
 800677e:	e7a0      	b.n	80066c2 <acc_detector_distance_processing_create+0x6e>
 8006780:	4b06      	ldr	r3, [pc, #24]	; (800679c <acc_detector_distance_processing_create+0x148>)
 8006782:	4a0c      	ldr	r2, [pc, #48]	; (80067b4 <acc_detector_distance_processing_create+0x160>)
 8006784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006786:	4907      	ldr	r1, [pc, #28]	; (80067a4 <acc_detector_distance_processing_create+0x150>)
 8006788:	4798      	blx	r3
 800678a:	4620      	mov	r0, r4
 800678c:	f7ff ff3a 	bl	8006604 <destroy_handle>
 8006790:	4634      	mov	r4, r6
 8006792:	e7ca      	b.n	800672a <acc_detector_distance_processing_create+0xd6>
 8006794:	08018020 	.word	0x08018020
 8006798:	acc22845 	.word	0xacc22845
 800679c:	20001628 	.word	0x20001628
 80067a0:	080180a0 	.word	0x080180a0
 80067a4:	08018080 	.word	0x08018080
 80067a8:	0801805c 	.word	0x0801805c
 80067ac:	080180c0 	.word	0x080180c0
 80067b0:	2edbe6ff 	.word	0x2edbe6ff
 80067b4:	080180e4 	.word	0x080180e4

080067b8 <acc_detector_distance_processing_destroy>:
 80067b8:	b138      	cbz	r0, 80067ca <acc_detector_distance_processing_destroy+0x12>
 80067ba:	6803      	ldr	r3, [r0, #0]
 80067bc:	b933      	cbnz	r3, 80067cc <acc_detector_distance_processing_destroy+0x14>
 80067be:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <acc_detector_distance_processing_destroy+0x2c>)
 80067c0:	4a09      	ldr	r2, [pc, #36]	; (80067e8 <acc_detector_distance_processing_destroy+0x30>)
 80067c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c4:	4909      	ldr	r1, [pc, #36]	; (80067ec <acc_detector_distance_processing_destroy+0x34>)
 80067c6:	2000      	movs	r0, #0
 80067c8:	4718      	bx	r3
 80067ca:	4770      	bx	lr
 80067cc:	4a08      	ldr	r2, [pc, #32]	; (80067f0 <acc_detector_distance_processing_destroy+0x38>)
 80067ce:	6819      	ldr	r1, [r3, #0]
 80067d0:	4291      	cmp	r1, r2
 80067d2:	d1f4      	bne.n	80067be <acc_detector_distance_processing_destroy+0x6>
 80067d4:	b510      	push	{r4, lr}
 80067d6:	4604      	mov	r4, r0
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff ff13 	bl	8006604 <destroy_handle>
 80067de:	2300      	movs	r3, #0
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd10      	pop	{r4, pc}
 80067e4:	20001628 	.word	0x20001628
 80067e8:	08018108 	.word	0x08018108
 80067ec:	08018080 	.word	0x08018080
 80067f0:	acc22845 	.word	0xacc22845

080067f4 <acc_detector_distance_processing_threshold_type>:
 80067f4:	b508      	push	{r3, lr}
 80067f6:	b938      	cbnz	r0, 8006808 <acc_detector_distance_processing_threshold_type+0x14>
 80067f8:	4b07      	ldr	r3, [pc, #28]	; (8006818 <acc_detector_distance_processing_threshold_type+0x24>)
 80067fa:	4a08      	ldr	r2, [pc, #32]	; (800681c <acc_detector_distance_processing_threshold_type+0x28>)
 80067fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fe:	4908      	ldr	r1, [pc, #32]	; (8006820 <acc_detector_distance_processing_threshold_type+0x2c>)
 8006800:	2000      	movs	r0, #0
 8006802:	4798      	blx	r3
 8006804:	2000      	movs	r0, #0
 8006806:	bd08      	pop	{r3, pc}
 8006808:	4b06      	ldr	r3, [pc, #24]	; (8006824 <acc_detector_distance_processing_threshold_type+0x30>)
 800680a:	6802      	ldr	r2, [r0, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d1f3      	bne.n	80067f8 <acc_detector_distance_processing_threshold_type+0x4>
 8006810:	6903      	ldr	r3, [r0, #16]
 8006812:	7818      	ldrb	r0, [r3, #0]
 8006814:	bd08      	pop	{r3, pc}
 8006816:	bf00      	nop
 8006818:	20001628 	.word	0x20001628
 800681c:	08018108 	.word	0x08018108
 8006820:	08018080 	.word	0x08018080
 8006824:	acc22845 	.word	0xacc22845

08006828 <acc_detector_distance_processing_recorded_threshold_allocate_statistics>:
 8006828:	6900      	ldr	r0, [r0, #16]
 800682a:	f001 bc8b 	b.w	8008144 <acc_alg_threshold_stationary_clutter_allocate_statistics>
 800682e:	bf00      	nop

08006830 <acc_detector_distance_processing_recorded_threshold_deallocate_statistics>:
 8006830:	6900      	ldr	r0, [r0, #16]
 8006832:	f001 bc91 	b.w	8008158 <acc_alg_threshold_stationary_clutter_deallocate_statistics>
 8006836:	bf00      	nop

08006838 <acc_detector_distance_processing_threshold_recording_done>:
 8006838:	b508      	push	{r3, lr}
 800683a:	b938      	cbnz	r0, 800684c <acc_detector_distance_processing_threshold_recording_done+0x14>
 800683c:	4b08      	ldr	r3, [pc, #32]	; (8006860 <acc_detector_distance_processing_threshold_recording_done+0x28>)
 800683e:	4a09      	ldr	r2, [pc, #36]	; (8006864 <acc_detector_distance_processing_threshold_recording_done+0x2c>)
 8006840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006842:	4909      	ldr	r1, [pc, #36]	; (8006868 <acc_detector_distance_processing_threshold_recording_done+0x30>)
 8006844:	2000      	movs	r0, #0
 8006846:	4798      	blx	r3
 8006848:	2000      	movs	r0, #0
 800684a:	bd08      	pop	{r3, pc}
 800684c:	4b07      	ldr	r3, [pc, #28]	; (800686c <acc_detector_distance_processing_threshold_recording_done+0x34>)
 800684e:	6802      	ldr	r2, [r0, #0]
 8006850:	429a      	cmp	r2, r3
 8006852:	d1f3      	bne.n	800683c <acc_detector_distance_processing_threshold_recording_done+0x4>
 8006854:	8b40      	ldrh	r0, [r0, #26]
 8006856:	fab0 f080 	clz	r0, r0
 800685a:	0940      	lsrs	r0, r0, #5
 800685c:	bd08      	pop	{r3, pc}
 800685e:	bf00      	nop
 8006860:	20001628 	.word	0x20001628
 8006864:	08018108 	.word	0x08018108
 8006868:	08018080 	.word	0x08018080
 800686c:	acc22845 	.word	0xacc22845

08006870 <acc_detector_distance_processing_threshold_recording_update>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8006878:	b948      	cbnz	r0, 800688e <acc_detector_distance_processing_threshold_recording_update+0x1e>
 800687a:	4b12      	ldr	r3, [pc, #72]	; (80068c4 <acc_detector_distance_processing_threshold_recording_update+0x54>)
 800687c:	4a12      	ldr	r2, [pc, #72]	; (80068c8 <acc_detector_distance_processing_threshold_recording_update+0x58>)
 800687e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006880:	4912      	ldr	r1, [pc, #72]	; (80068cc <acc_detector_distance_processing_threshold_recording_update+0x5c>)
 8006882:	2000      	movs	r0, #0
 8006884:	4798      	blx	r3
 8006886:	2500      	movs	r5, #0
 8006888:	4628      	mov	r0, r5
 800688a:	b002      	add	sp, #8
 800688c:	bd70      	pop	{r4, r5, r6, pc}
 800688e:	4604      	mov	r4, r0
 8006890:	480f      	ldr	r0, [pc, #60]	; (80068d0 <acc_detector_distance_processing_threshold_recording_update+0x60>)
 8006892:	6825      	ldr	r5, [r4, #0]
 8006894:	4285      	cmp	r5, r0
 8006896:	d1f0      	bne.n	800687a <acc_detector_distance_processing_threshold_recording_update+0xa>
 8006898:	8b65      	ldrh	r5, [r4, #26]
 800689a:	2d00      	cmp	r5, #0
 800689c:	d0f4      	beq.n	8006888 <acc_detector_distance_processing_threshold_recording_update+0x18>
 800689e:	6920      	ldr	r0, [r4, #16]
 80068a0:	9301      	str	r3, [sp, #4]
 80068a2:	f001 fca5 	bl	80081f0 <acc_alg_threshold_update_threshold_recording>
 80068a6:	9b01      	ldr	r3, [sp, #4]
 80068a8:	8b62      	ldrh	r2, [r4, #26]
 80068aa:	4605      	mov	r5, r0
 80068ac:	b110      	cbz	r0, 80068b4 <acc_detector_distance_processing_threshold_recording_update+0x44>
 80068ae:	3a01      	subs	r2, #1
 80068b0:	b292      	uxth	r2, r2
 80068b2:	8362      	strh	r2, [r4, #26]
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	d1e7      	bne.n	8006888 <acc_detector_distance_processing_threshold_recording_update+0x18>
 80068b8:	4632      	mov	r2, r6
 80068ba:	4619      	mov	r1, r3
 80068bc:	6920      	ldr	r0, [r4, #16]
 80068be:	f001 fcaf 	bl	8008220 <acc_alg_threshold_calculate_threshold_recording>
 80068c2:	e7e1      	b.n	8006888 <acc_detector_distance_processing_threshold_recording_update+0x18>
 80068c4:	20001628 	.word	0x20001628
 80068c8:	08018108 	.word	0x08018108
 80068cc:	08018080 	.word	0x08018080
 80068d0:	acc22845 	.word	0xacc22845

080068d4 <acc_detector_distance_processing_threshold_recording_reset>:
 80068d4:	b928      	cbnz	r0, 80068e2 <acc_detector_distance_processing_threshold_recording_reset+0xe>
 80068d6:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <acc_detector_distance_processing_threshold_recording_reset+0x20>)
 80068d8:	4a07      	ldr	r2, [pc, #28]	; (80068f8 <acc_detector_distance_processing_threshold_recording_reset+0x24>)
 80068da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068dc:	4907      	ldr	r1, [pc, #28]	; (80068fc <acc_detector_distance_processing_threshold_recording_reset+0x28>)
 80068de:	2000      	movs	r0, #0
 80068e0:	4718      	bx	r3
 80068e2:	4b07      	ldr	r3, [pc, #28]	; (8006900 <acc_detector_distance_processing_threshold_recording_reset+0x2c>)
 80068e4:	6802      	ldr	r2, [r0, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d1f5      	bne.n	80068d6 <acc_detector_distance_processing_threshold_recording_reset+0x2>
 80068ea:	8b03      	ldrh	r3, [r0, #24]
 80068ec:	8343      	strh	r3, [r0, #26]
 80068ee:	6900      	ldr	r0, [r0, #16]
 80068f0:	f001 bc6c 	b.w	80081cc <acc_alg_threshold_reset_threshold_recording>
 80068f4:	20001628 	.word	0x20001628
 80068f8:	08018108 	.word	0x08018108
 80068fc:	08018080 	.word	0x08018080
 8006900:	acc22845 	.word	0xacc22845

08006904 <acc_detector_distance_processing_threshold_recording_set>:
 8006904:	b510      	push	{r4, lr}
 8006906:	b940      	cbnz	r0, 800691a <acc_detector_distance_processing_threshold_recording_set+0x16>
 8006908:	4b0c      	ldr	r3, [pc, #48]	; (800693c <acc_detector_distance_processing_threshold_recording_set+0x38>)
 800690a:	4a0d      	ldr	r2, [pc, #52]	; (8006940 <acc_detector_distance_processing_threshold_recording_set+0x3c>)
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	490d      	ldr	r1, [pc, #52]	; (8006944 <acc_detector_distance_processing_threshold_recording_set+0x40>)
 8006910:	2000      	movs	r0, #0
 8006912:	4798      	blx	r3
 8006914:	2400      	movs	r4, #0
 8006916:	4620      	mov	r0, r4
 8006918:	bd10      	pop	{r4, pc}
 800691a:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <acc_detector_distance_processing_threshold_recording_set+0x44>)
 800691c:	6804      	ldr	r4, [r0, #0]
 800691e:	429c      	cmp	r4, r3
 8006920:	d1f2      	bne.n	8006908 <acc_detector_distance_processing_threshold_recording_set+0x4>
 8006922:	6900      	ldr	r0, [r0, #16]
 8006924:	f001 fcae 	bl	8008284 <acc_alg_threshold_set_threshold_recording>
 8006928:	4604      	mov	r4, r0
 800692a:	2800      	cmp	r0, #0
 800692c:	d1f3      	bne.n	8006916 <acc_detector_distance_processing_threshold_recording_set+0x12>
 800692e:	4b03      	ldr	r3, [pc, #12]	; (800693c <acc_detector_distance_processing_threshold_recording_set+0x38>)
 8006930:	4a06      	ldr	r2, [pc, #24]	; (800694c <acc_detector_distance_processing_threshold_recording_set+0x48>)
 8006932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006934:	4903      	ldr	r1, [pc, #12]	; (8006944 <acc_detector_distance_processing_threshold_recording_set+0x40>)
 8006936:	4798      	blx	r3
 8006938:	e7ed      	b.n	8006916 <acc_detector_distance_processing_threshold_recording_set+0x12>
 800693a:	bf00      	nop
 800693c:	20001628 	.word	0x20001628
 8006940:	08018108 	.word	0x08018108
 8006944:	08018080 	.word	0x08018080
 8006948:	acc22845 	.word	0xacc22845
 800694c:	08018138 	.word	0x08018138

08006950 <acc_detector_distance_processing_next>:
 8006950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006954:	b085      	sub	sp, #20
 8006956:	b948      	cbnz	r0, 800696c <acc_detector_distance_processing_next+0x1c>
 8006958:	4b5d      	ldr	r3, [pc, #372]	; (8006ad0 <acc_detector_distance_processing_next+0x180>)
 800695a:	4a5e      	ldr	r2, [pc, #376]	; (8006ad4 <acc_detector_distance_processing_next+0x184>)
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	495e      	ldr	r1, [pc, #376]	; (8006ad8 <acc_detector_distance_processing_next+0x188>)
 8006960:	2000      	movs	r0, #0
 8006962:	4798      	blx	r3
 8006964:	2000      	movs	r0, #0
 8006966:	b005      	add	sp, #20
 8006968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800696c:	4616      	mov	r6, r2
 800696e:	461d      	mov	r5, r3
 8006970:	6802      	ldr	r2, [r0, #0]
 8006972:	4b5a      	ldr	r3, [pc, #360]	; (8006adc <acc_detector_distance_processing_next+0x18c>)
 8006974:	429a      	cmp	r2, r3
 8006976:	4604      	mov	r4, r0
 8006978:	d1ee      	bne.n	8006958 <acc_detector_distance_processing_next+0x8>
 800697a:	b915      	cbnz	r5, 8006982 <acc_detector_distance_processing_next+0x32>
 800697c:	4b54      	ldr	r3, [pc, #336]	; (8006ad0 <acc_detector_distance_processing_next+0x180>)
 800697e:	4a58      	ldr	r2, [pc, #352]	; (8006ae0 <acc_detector_distance_processing_next+0x190>)
 8006980:	e7ec      	b.n	800695c <acc_detector_distance_processing_next+0xc>
 8006982:	8882      	ldrh	r2, [r0, #4]
 8006984:	2300      	movs	r3, #0
 8006986:	2a01      	cmp	r2, #1
 8006988:	4688      	mov	r8, r1
 800698a:	702b      	strb	r3, [r5, #0]
 800698c:	d936      	bls.n	80069fc <acc_detector_distance_processing_next+0xac>
 800698e:	88c3      	ldrh	r3, [r0, #6]
 8006990:	ee07 3a90 	vmov	s15, r3
 8006994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800699c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80069a4:	b326      	cbz	r6, 80069f0 <acc_detector_distance_processing_next+0xa0>
 80069a6:	1e71      	subs	r1, r6, #1
 80069a8:	6883      	ldr	r3, [r0, #8]
 80069aa:	b289      	uxth	r1, r1
 80069ac:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 80069b0:	3b02      	subs	r3, #2
 80069b2:	f1a8 0202 	sub.w	r2, r8, #2
 80069b6:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80069ba:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80069be:	ee07 0a90 	vmov	s15, r0
 80069c2:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 80069c6:	ee07 0a10 	vmov	s14, r0
 80069ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80069d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80069d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80069da:	4291      	cmp	r1, r2
 80069dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069e4:	ee17 0a90 	vmov	r0, s15
 80069e8:	8018      	strh	r0, [r3, #0]
 80069ea:	d1e6      	bne.n	80069ba <acc_detector_distance_processing_next+0x6a>
 80069ec:	88e3      	ldrh	r3, [r4, #6]
 80069ee:	88a2      	ldrh	r2, [r4, #4]
 80069f0:	3301      	adds	r3, #1
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d05f      	beq.n	8006ab8 <acc_detector_distance_processing_next+0x168>
 80069f8:	80e3      	strh	r3, [r4, #6]
 80069fa:	e7b3      	b.n	8006964 <acc_detector_distance_processing_next+0x14>
 80069fc:	4689      	mov	r9, r1
 80069fe:	f1b9 0f00 	cmp.w	r9, #0
 8006a02:	d0af      	beq.n	8006964 <acc_detector_distance_processing_next+0x14>
 8006a04:	ed94 7a08 	vldr	s14, [r4, #32]
 8006a08:	ed94 6a07 	vldr	s12, [r4, #28]
 8006a0c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8006a10:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a18:	db57      	blt.n	8006aca <acc_detector_distance_processing_next+0x17a>
 8006a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a22:	ee17 3a90 	vmov	r3, s15
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006a2c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006a30:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8006a34:	6961      	ldr	r1, [r4, #20]
 8006a36:	9202      	str	r2, [sp, #8]
 8006a38:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006a3c:	4632      	mov	r2, r6
 8006a3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a42:	4648      	mov	r0, r9
 8006a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a48:	ee17 7a90 	vmov	r7, s15
 8006a4c:	b2bf      	uxth	r7, r7
 8006a4e:	9701      	str	r7, [sp, #4]
 8006a50:	6927      	ldr	r7, [r4, #16]
 8006a52:	9700      	str	r7, [sp, #0]
 8006a54:	f001 f99a 	bl	8007d8c <acc_alg_peak_get_peaks>
 8006a58:	88a3      	ldrh	r3, [r4, #4]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d910      	bls.n	8006a80 <acc_detector_distance_processing_next+0x130>
 8006a5e:	b178      	cbz	r0, 8006a80 <acc_detector_distance_processing_next+0x130>
 8006a60:	2202      	movs	r2, #2
 8006a62:	2300      	movs	r3, #0
 8006a64:	f839 1023 	ldrh.w	r1, [r9, r3, lsl #2]
 8006a68:	f828 1023 	strh.w	r1, [r8, r3, lsl #2]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	f839 1002 	ldrh.w	r1, [r9, r2]
 8006a72:	f828 1002 	strh.w	r1, [r8, r2]
 8006a76:	b299      	uxth	r1, r3
 8006a78:	4288      	cmp	r0, r1
 8006a7a:	f102 0204 	add.w	r2, r2, #4
 8006a7e:	d8f1      	bhi.n	8006a64 <acc_detector_distance_processing_next+0x114>
 8006a80:	2100      	movs	r1, #0
 8006a82:	7069      	strb	r1, [r5, #1]
 8006a84:	b1ae      	cbz	r6, 8006ab2 <acc_detector_distance_processing_next+0x162>
 8006a86:	6967      	ldr	r7, [r4, #20]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	07db      	lsls	r3, r3, #31
 8006a8c:	d419      	bmi.n	8006ac2 <acc_detector_distance_processing_next+0x172>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	469c      	mov	ip, r3
 8006a92:	e003      	b.n	8006a9c <acc_detector_distance_processing_next+0x14c>
 8006a94:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8006a98:	4222      	tst	r2, r4
 8006a9a:	d112      	bne.n	8006ac2 <acc_detector_distance_processing_next+0x172>
 8006a9c:	b299      	uxth	r1, r3
 8006a9e:	f001 021f 	and.w	r2, r1, #31
 8006aa2:	428e      	cmp	r6, r1
 8006aa4:	ea4f 1453 	mov.w	r4, r3, lsr #5
 8006aa8:	fa0c f202 	lsl.w	r2, ip, r2
 8006aac:	f103 0301 	add.w	r3, r3, #1
 8006ab0:	d8f0      	bhi.n	8006a94 <acc_detector_distance_processing_next+0x144>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	702b      	strb	r3, [r5, #0]
 8006ab6:	e756      	b.n	8006966 <acc_detector_distance_processing_next+0x16>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	80e3      	strh	r3, [r4, #6]
 8006abc:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8006ac0:	e79d      	b.n	80069fe <acc_detector_distance_processing_next+0xae>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	8069      	strh	r1, [r5, #2]
 8006ac6:	706b      	strb	r3, [r5, #1]
 8006ac8:	e7f3      	b.n	8006ab2 <acc_detector_distance_processing_next+0x162>
 8006aca:	2300      	movs	r3, #0
 8006acc:	e7ac      	b.n	8006a28 <acc_detector_distance_processing_next+0xd8>
 8006ace:	bf00      	nop
 8006ad0:	20001628 	.word	0x20001628
 8006ad4:	08018108 	.word	0x08018108
 8006ad8:	08018080 	.word	0x08018080
 8006adc:	acc22845 	.word	0xacc22845
 8006ae0:	08018124 	.word	0x08018124

08006ae4 <get_sparse_data>:
 8006ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	b087      	sub	sp, #28
 8006aea:	6840      	ldr	r0, [r0, #4]
 8006aec:	460e      	mov	r6, r1
 8006aee:	4617      	mov	r7, r2
 8006af0:	f002 ffa8 	bl	8009a44 <acc_service_sparse_get_next_by_reference>
 8006af4:	4605      	mov	r5, r0
 8006af6:	b938      	cbnz	r0, 8006b08 <get_sparse_data+0x24>
 8006af8:	4b1e      	ldr	r3, [pc, #120]	; (8006b74 <get_sparse_data+0x90>)
 8006afa:	4a1f      	ldr	r2, [pc, #124]	; (8006b78 <get_sparse_data+0x94>)
 8006afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afe:	491f      	ldr	r1, [pc, #124]	; (8006b7c <get_sparse_data+0x98>)
 8006b00:	4798      	blx	r3
 8006b02:	4628      	mov	r0, r5
 8006b04:	b007      	add	sp, #28
 8006b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b08:	783b      	ldrb	r3, [r7, #0]
 8006b0a:	b1ab      	cbz	r3, 8006b38 <get_sparse_data+0x54>
 8006b0c:	4c19      	ldr	r4, [pc, #100]	; (8006b74 <get_sparse_data+0x90>)
 8006b0e:	4a1c      	ldr	r2, [pc, #112]	; (8006b80 <get_sparse_data+0x9c>)
 8006b10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b12:	491a      	ldr	r1, [pc, #104]	; (8006b7c <get_sparse_data+0x98>)
 8006b14:	2000      	movs	r0, #0
 8006b16:	4798      	blx	r3
 8006b18:	787b      	ldrb	r3, [r7, #1]
 8006b1a:	b91b      	cbnz	r3, 8006b24 <get_sparse_data+0x40>
 8006b1c:	2500      	movs	r5, #0
 8006b1e:	4628      	mov	r0, r5
 8006b20:	b007      	add	sp, #28
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b24:	f002 f9bc 	bl	8008ea0 <acc_rss_integration_log_level>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d0f7      	beq.n	8006b1c <get_sparse_data+0x38>
 8006b2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b2e:	4a15      	ldr	r2, [pc, #84]	; (8006b84 <get_sparse_data+0xa0>)
 8006b30:	4912      	ldr	r1, [pc, #72]	; (8006b7c <get_sparse_data+0x98>)
 8006b32:	2001      	movs	r0, #1
 8006b34:	4798      	blx	r3
 8006b36:	e7f1      	b.n	8006b1c <get_sparse_data+0x38>
 8006b38:	787b      	ldrb	r3, [r7, #1]
 8006b3a:	68e7      	ldr	r7, [r4, #12]
 8006b3c:	b973      	cbnz	r3, 8006b5c <get_sparse_data+0x78>
 8006b3e:	2f00      	cmp	r7, #0
 8006b40:	d0df      	beq.n	8006b02 <get_sparse_data+0x1e>
 8006b42:	a901      	add	r1, sp, #4
 8006b44:	6860      	ldr	r0, [r4, #4]
 8006b46:	f002 ff59 	bl	80099fc <acc_service_sparse_get_metadata>
 8006b4a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8006b4e:	6830      	ldr	r0, [r6, #0]
 8006b50:	6922      	ldr	r2, [r4, #16]
 8006b52:	0049      	lsls	r1, r1, #1
 8006b54:	47b8      	blx	r7
 8006b56:	4628      	mov	r0, r5
 8006b58:	b007      	add	sp, #28
 8006b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5c:	f002 f9a0 	bl	8008ea0 <acc_rss_integration_log_level>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d0ec      	beq.n	8006b3e <get_sparse_data+0x5a>
 8006b64:	4b03      	ldr	r3, [pc, #12]	; (8006b74 <get_sparse_data+0x90>)
 8006b66:	4a07      	ldr	r2, [pc, #28]	; (8006b84 <get_sparse_data+0xa0>)
 8006b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6a:	4904      	ldr	r1, [pc, #16]	; (8006b7c <get_sparse_data+0x98>)
 8006b6c:	2001      	movs	r0, #1
 8006b6e:	4798      	blx	r3
 8006b70:	e7e5      	b.n	8006b3e <get_sparse_data+0x5a>
 8006b72:	bf00      	nop
 8006b74:	20001628 	.word	0x20001628
 8006b78:	080181ec 	.word	0x080181ec
 8006b7c:	080181c8 	.word	0x080181c8
 8006b80:	080181b4 	.word	0x080181b4
 8006b84:	080181dc 	.word	0x080181dc

08006b88 <presence_service_setup.isra.0>:
 8006b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b8a:	4607      	mov	r7, r0
 8006b8c:	b087      	sub	sp, #28
 8006b8e:	6850      	ldr	r0, [r2, #4]
 8006b90:	460e      	mov	r6, r1
 8006b92:	4615      	mov	r5, r2
 8006b94:	f002 fcfa 	bl	800958c <acc_service_create>
 8006b98:	6030      	str	r0, [r6, #0]
 8006b9a:	b940      	cbnz	r0, 8006bae <presence_service_setup.isra.0+0x26>
 8006b9c:	4b0e      	ldr	r3, [pc, #56]	; (8006bd8 <presence_service_setup.isra.0+0x50>)
 8006b9e:	4a0f      	ldr	r2, [pc, #60]	; (8006bdc <presence_service_setup.isra.0+0x54>)
 8006ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba2:	490f      	ldr	r1, [pc, #60]	; (8006be0 <presence_service_setup.isra.0+0x58>)
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	4798      	blx	r3
 8006ba8:	4620      	mov	r0, r4
 8006baa:	b007      	add	sp, #28
 8006bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bae:	2300      	movs	r3, #0
 8006bb0:	a901      	add	r1, sp, #4
 8006bb2:	ac01      	add	r4, sp, #4
 8006bb4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006bb8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006bbc:	9305      	str	r3, [sp, #20]
 8006bbe:	f002 ff1d 	bl	80099fc <acc_service_sparse_get_metadata>
 8006bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bc4:	3534      	adds	r5, #52	; 0x34
 8006bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bc8:	6822      	ldr	r2, [r4, #0]
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <presence_service_setup.isra.0+0x5c>)
 8006bcc:	602a      	str	r2, [r5, #0]
 8006bce:	2001      	movs	r0, #1
 8006bd0:	603b      	str	r3, [r7, #0]
 8006bd2:	b007      	add	sp, #28
 8006bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20001628 	.word	0x20001628
 8006bdc:	08018204 	.word	0x08018204
 8006be0:	080181c8 	.word	0x080181c8
 8006be4:	acc54323 	.word	0xacc54323

08006be8 <acc_detector_presence_configuration_create>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	2259      	movs	r2, #89	; 0x59
 8006bec:	491f      	ldr	r1, [pc, #124]	; (8006c6c <acc_detector_presence_configuration_create+0x84>)
 8006bee:	2050      	movs	r0, #80	; 0x50
 8006bf0:	f002 f900 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d031      	beq.n	8006c5e <acc_detector_presence_configuration_create+0x76>
 8006bfa:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <acc_detector_presence_configuration_create+0x88>)
 8006bfc:	6003      	str	r3, [r0, #0]
 8006bfe:	f002 fe4d 	bl	800989c <acc_service_sparse_configuration_create>
 8006c02:	2103      	movs	r1, #3
 8006c04:	6060      	str	r0, [r4, #4]
 8006c06:	f003 f983 	bl	8009f10 <acc_service_profile_set>
 8006c0a:	2110      	movs	r1, #16
 8006c0c:	6860      	ldr	r0, [r4, #4]
 8006c0e:	4e19      	ldr	r6, [pc, #100]	; (8006c74 <acc_detector_presence_configuration_create+0x8c>)
 8006c10:	f002 fee6 	bl	80099e0 <acc_service_sparse_configuration_sweeps_per_frame_set>
 8006c14:	6860      	ldr	r0, [r4, #4]
 8006c16:	f003 f83b 	bl	8009c90 <acc_service_repetition_mode_on_demand_set>
 8006c1a:	4917      	ldr	r1, [pc, #92]	; (8006c78 <acc_detector_presence_configuration_create+0x90>)
 8006c1c:	4817      	ldr	r0, [pc, #92]	; (8006c7c <acc_detector_presence_configuration_create+0x94>)
 8006c1e:	4a18      	ldr	r2, [pc, #96]	; (8006c80 <acc_detector_presence_configuration_create+0x98>)
 8006c20:	61e1      	str	r1, [r4, #28]
 8006c22:	2300      	movs	r3, #0
 8006c24:	2110      	movs	r1, #16
 8006c26:	6220      	str	r0, [r4, #32]
 8006c28:	f04f 557f 	mov.w	r5, #1069547520	; 0x3fc00000
 8006c2c:	6262      	str	r2, [r4, #36]	; 0x24
 8006c2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006c30:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006c34:	6363      	str	r3, [r4, #52]	; 0x34
 8006c36:	6463      	str	r3, [r4, #68]	; 0x44
 8006c38:	6423      	str	r3, [r4, #64]	; 0x40
 8006c3a:	4812      	ldr	r0, [pc, #72]	; (8006c84 <acc_detector_presence_configuration_create+0x9c>)
 8006c3c:	8121      	strh	r1, [r4, #8]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006c44:	61a0      	str	r0, [r4, #24]
 8006c46:	60e6      	str	r6, [r4, #12]
 8006c48:	6125      	str	r5, [r4, #16]
 8006c4a:	6162      	str	r2, [r4, #20]
 8006c4c:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006c4e:	62a1      	str	r1, [r4, #40]	; 0x28
 8006c50:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8006c54:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8006c56:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	bd70      	pop	{r4, r5, r6, pc}
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <acc_detector_presence_configuration_create+0xa0>)
 8006c60:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <acc_detector_presence_configuration_create+0xa4>)
 8006c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c64:	490a      	ldr	r1, [pc, #40]	; (8006c90 <acc_detector_presence_configuration_create+0xa8>)
 8006c66:	4798      	blx	r3
 8006c68:	4620      	mov	r0, r4
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	08018150 	.word	0x08018150
 8006c70:	acc12ad9 	.word	0xacc12ad9
 8006c74:	41200000 	.word	0x41200000
 8006c78:	3e4ccccd 	.word	0x3e4ccccd
 8006c7c:	3e19999a 	.word	0x3e19999a
 8006c80:	3f19999a 	.word	0x3f19999a
 8006c84:	41a00000 	.word	0x41a00000
 8006c88:	20001628 	.word	0x20001628
 8006c8c:	08017e14 	.word	0x08017e14
 8006c90:	080181c8 	.word	0x080181c8

08006c94 <acc_detector_presence_configuration_destroy>:
 8006c94:	b138      	cbz	r0, 8006ca6 <acc_detector_presence_configuration_destroy+0x12>
 8006c96:	6803      	ldr	r3, [r0, #0]
 8006c98:	b933      	cbnz	r3, 8006ca8 <acc_detector_presence_configuration_destroy+0x14>
 8006c9a:	4b0b      	ldr	r3, [pc, #44]	; (8006cc8 <acc_detector_presence_configuration_destroy+0x34>)
 8006c9c:	4a0b      	ldr	r2, [pc, #44]	; (8006ccc <acc_detector_presence_configuration_destroy+0x38>)
 8006c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca0:	490b      	ldr	r1, [pc, #44]	; (8006cd0 <acc_detector_presence_configuration_destroy+0x3c>)
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	4718      	bx	r3
 8006ca6:	4770      	bx	lr
 8006ca8:	4a0a      	ldr	r2, [pc, #40]	; (8006cd4 <acc_detector_presence_configuration_destroy+0x40>)
 8006caa:	6819      	ldr	r1, [r3, #0]
 8006cac:	4291      	cmp	r1, r2
 8006cae:	d1f4      	bne.n	8006c9a <acc_detector_presence_configuration_destroy+0x6>
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	1d18      	adds	r0, r3, #4
 8006cb6:	f002 fe81 	bl	80099bc <acc_service_sparse_configuration_destroy>
 8006cba:	6820      	ldr	r0, [r4, #0]
 8006cbc:	f002 f8de 	bl	8008e7c <acc_rss_integration_mem_free>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	6023      	str	r3, [r4, #0]
 8006cc4:	bd10      	pop	{r4, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20001628 	.word	0x20001628
 8006ccc:	08018008 	.word	0x08018008
 8006cd0:	080181c8 	.word	0x080181c8
 8006cd4:	acc12ad9 	.word	0xacc12ad9

08006cd8 <acc_detector_presence_create>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	4605      	mov	r5, r0
 8006cdc:	b308      	cbz	r0, 8006d22 <acc_detector_presence_create+0x4a>
 8006cde:	22a0      	movs	r2, #160	; 0xa0
 8006ce0:	4918      	ldr	r1, [pc, #96]	; (8006d44 <acc_detector_presence_create+0x6c>)
 8006ce2:	2014      	movs	r0, #20
 8006ce4:	f002 f886 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 8006ce8:	4604      	mov	r4, r0
 8006cea:	b198      	cbz	r0, 8006d14 <acc_detector_presence_create+0x3c>
 8006cec:	1d07      	adds	r7, r0, #4
 8006cee:	4639      	mov	r1, r7
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	f7ff ff49 	bl	8006b88 <presence_service_setup.isra.0>
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	b1f0      	cbz	r0, 8006d38 <acc_detector_presence_create+0x60>
 8006cfa:	f105 0008 	add.w	r0, r5, #8
 8006cfe:	f000 fb45 	bl	800738c <acc_detector_presence_processing_create>
 8006d02:	4606      	mov	r6, r0
 8006d04:	60a0      	str	r0, [r4, #8]
 8006d06:	b1a0      	cbz	r0, 8006d32 <acc_detector_presence_create+0x5a>
 8006d08:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	; 0x48
 8006d0c:	e9c4 2303 	strd	r2, r3, [r4, #12]
 8006d10:	4620      	mov	r0, r4
 8006d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d14:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <acc_detector_presence_create+0x70>)
 8006d16:	4a0d      	ldr	r2, [pc, #52]	; (8006d4c <acc_detector_presence_create+0x74>)
 8006d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1a:	490d      	ldr	r1, [pc, #52]	; (8006d50 <acc_detector_presence_create+0x78>)
 8006d1c:	4798      	blx	r3
 8006d1e:	4620      	mov	r0, r4
 8006d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d22:	4b09      	ldr	r3, [pc, #36]	; (8006d48 <acc_detector_presence_create+0x70>)
 8006d24:	4a0b      	ldr	r2, [pc, #44]	; (8006d54 <acc_detector_presence_create+0x7c>)
 8006d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d28:	4909      	ldr	r1, [pc, #36]	; (8006d50 <acc_detector_presence_create+0x78>)
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	4798      	blx	r3
 8006d2e:	4620      	mov	r0, r4
 8006d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d32:	4638      	mov	r0, r7
 8006d34:	f002 fca0 	bl	8009678 <acc_service_destroy>
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f002 f89f 	bl	8008e7c <acc_rss_integration_mem_free>
 8006d3e:	4634      	mov	r4, r6
 8006d40:	e7e6      	b.n	8006d10 <acc_detector_presence_create+0x38>
 8006d42:	bf00      	nop
 8006d44:	08018150 	.word	0x08018150
 8006d48:	20001628 	.word	0x20001628
 8006d4c:	08017ea0 	.word	0x08017ea0
 8006d50:	080181c8 	.word	0x080181c8
 8006d54:	08018180 	.word	0x08018180

08006d58 <acc_detector_presence_destroy>:
 8006d58:	6803      	ldr	r3, [r0, #0]
 8006d5a:	b92b      	cbnz	r3, 8006d68 <acc_detector_presence_destroy+0x10>
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	; (8006d90 <acc_detector_presence_destroy+0x38>)
 8006d5e:	4a0d      	ldr	r2, [pc, #52]	; (8006d94 <acc_detector_presence_destroy+0x3c>)
 8006d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d62:	490d      	ldr	r1, [pc, #52]	; (8006d98 <acc_detector_presence_destroy+0x40>)
 8006d64:	2000      	movs	r0, #0
 8006d66:	4718      	bx	r3
 8006d68:	4a0c      	ldr	r2, [pc, #48]	; (8006d9c <acc_detector_presence_destroy+0x44>)
 8006d6a:	6819      	ldr	r1, [r3, #0]
 8006d6c:	4291      	cmp	r1, r2
 8006d6e:	d1f5      	bne.n	8006d5c <acc_detector_presence_destroy+0x4>
 8006d70:	b510      	push	{r4, lr}
 8006d72:	4604      	mov	r4, r0
 8006d74:	f103 0008 	add.w	r0, r3, #8
 8006d78:	f000 fb32 	bl	80073e0 <acc_detector_presence_processing_destroy>
 8006d7c:	6820      	ldr	r0, [r4, #0]
 8006d7e:	3004      	adds	r0, #4
 8006d80:	f002 fc7a 	bl	8009678 <acc_service_destroy>
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	f002 f879 	bl	8008e7c <acc_rss_integration_mem_free>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	bd10      	pop	{r4, pc}
 8006d90:	20001628 	.word	0x20001628
 8006d94:	08017f98 	.word	0x08017f98
 8006d98:	080181c8 	.word	0x080181c8
 8006d9c:	acc54323 	.word	0xacc54323

08006da0 <acc_detector_presence_reconfigure>:
 8006da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da2:	6804      	ldr	r4, [r0, #0]
 8006da4:	b944      	cbnz	r4, 8006db8 <acc_detector_presence_reconfigure+0x18>
 8006da6:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <acc_detector_presence_reconfigure+0x6c>)
 8006da8:	4a19      	ldr	r2, [pc, #100]	; (8006e10 <acc_detector_presence_reconfigure+0x70>)
 8006daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dac:	4919      	ldr	r1, [pc, #100]	; (8006e14 <acc_detector_presence_reconfigure+0x74>)
 8006dae:	2000      	movs	r0, #0
 8006db0:	4798      	blx	r3
 8006db2:	2501      	movs	r5, #1
 8006db4:	4628      	mov	r0, r5
 8006db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006db8:	460f      	mov	r7, r1
 8006dba:	4a17      	ldr	r2, [pc, #92]	; (8006e18 <acc_detector_presence_reconfigure+0x78>)
 8006dbc:	6821      	ldr	r1, [r4, #0]
 8006dbe:	4291      	cmp	r1, r2
 8006dc0:	d1f1      	bne.n	8006da6 <acc_detector_presence_reconfigure+0x6>
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	1d20      	adds	r0, r4, #4
 8006dc6:	f002 fc57 	bl	8009678 <acc_service_destroy>
 8006dca:	6830      	ldr	r0, [r6, #0]
 8006dcc:	463a      	mov	r2, r7
 8006dce:	1d01      	adds	r1, r0, #4
 8006dd0:	f7ff feda 	bl	8006b88 <presence_service_setup.isra.0>
 8006dd4:	3408      	adds	r4, #8
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	b180      	cbz	r0, 8006dfc <acc_detector_presence_reconfigure+0x5c>
 8006dda:	f107 0108 	add.w	r1, r7, #8
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 fb1e 	bl	8007420 <acc_detector_presence_processing_reconfigure>
 8006de4:	4605      	mov	r5, r0
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d1e4      	bne.n	8006db4 <acc_detector_presence_reconfigure+0x14>
 8006dea:	6830      	ldr	r0, [r6, #0]
 8006dec:	3004      	adds	r0, #4
 8006dee:	f002 fc43 	bl	8009678 <acc_service_destroy>
 8006df2:	6830      	ldr	r0, [r6, #0]
 8006df4:	f002 f842 	bl	8008e7c <acc_rss_integration_mem_free>
 8006df8:	6035      	str	r5, [r6, #0]
 8006dfa:	e7db      	b.n	8006db4 <acc_detector_presence_reconfigure+0x14>
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 faef 	bl	80073e0 <acc_detector_presence_processing_destroy>
 8006e02:	6830      	ldr	r0, [r6, #0]
 8006e04:	f002 f83a 	bl	8008e7c <acc_rss_integration_mem_free>
 8006e08:	6035      	str	r5, [r6, #0]
 8006e0a:	e7d3      	b.n	8006db4 <acc_detector_presence_reconfigure+0x14>
 8006e0c:	20001628 	.word	0x20001628
 8006e10:	08017f98 	.word	0x08017f98
 8006e14:	080181c8 	.word	0x080181c8
 8006e18:	acc54323 	.word	0xacc54323

08006e1c <acc_detector_presence_activate>:
 8006e1c:	b508      	push	{r3, lr}
 8006e1e:	b938      	cbnz	r0, 8006e30 <acc_detector_presence_activate+0x14>
 8006e20:	4b08      	ldr	r3, [pc, #32]	; (8006e44 <acc_detector_presence_activate+0x28>)
 8006e22:	4a09      	ldr	r2, [pc, #36]	; (8006e48 <acc_detector_presence_activate+0x2c>)
 8006e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e26:	4909      	ldr	r1, [pc, #36]	; (8006e4c <acc_detector_presence_activate+0x30>)
 8006e28:	2000      	movs	r0, #0
 8006e2a:	4798      	blx	r3
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	bd08      	pop	{r3, pc}
 8006e30:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <acc_detector_presence_activate+0x34>)
 8006e32:	6802      	ldr	r2, [r0, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d1f3      	bne.n	8006e20 <acc_detector_presence_activate+0x4>
 8006e38:	6840      	ldr	r0, [r0, #4]
 8006e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e3e:	f002 be5b 	b.w	8009af8 <acc_service_activate>
 8006e42:	bf00      	nop
 8006e44:	20001628 	.word	0x20001628
 8006e48:	08017f98 	.word	0x08017f98
 8006e4c:	080181c8 	.word	0x080181c8
 8006e50:	acc54323 	.word	0xacc54323

08006e54 <acc_detector_presence_deactivate>:
 8006e54:	b510      	push	{r4, lr}
 8006e56:	b940      	cbnz	r0, 8006e6a <acc_detector_presence_deactivate+0x16>
 8006e58:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <acc_detector_presence_deactivate+0x38>)
 8006e5a:	4a0d      	ldr	r2, [pc, #52]	; (8006e90 <acc_detector_presence_deactivate+0x3c>)
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5e:	490d      	ldr	r1, [pc, #52]	; (8006e94 <acc_detector_presence_deactivate+0x40>)
 8006e60:	2000      	movs	r0, #0
 8006e62:	4798      	blx	r3
 8006e64:	2400      	movs	r4, #0
 8006e66:	4620      	mov	r0, r4
 8006e68:	bd10      	pop	{r4, pc}
 8006e6a:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <acc_detector_presence_deactivate+0x44>)
 8006e6c:	6802      	ldr	r2, [r0, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d1f2      	bne.n	8006e58 <acc_detector_presence_deactivate+0x4>
 8006e72:	6840      	ldr	r0, [r0, #4]
 8006e74:	f002 fe90 	bl	8009b98 <acc_service_deactivate>
 8006e78:	4604      	mov	r4, r0
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d1f3      	bne.n	8006e66 <acc_detector_presence_deactivate+0x12>
 8006e7e:	4b03      	ldr	r3, [pc, #12]	; (8006e8c <acc_detector_presence_deactivate+0x38>)
 8006e80:	4a06      	ldr	r2, [pc, #24]	; (8006e9c <acc_detector_presence_deactivate+0x48>)
 8006e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e84:	4903      	ldr	r1, [pc, #12]	; (8006e94 <acc_detector_presence_deactivate+0x40>)
 8006e86:	4798      	blx	r3
 8006e88:	e7ed      	b.n	8006e66 <acc_detector_presence_deactivate+0x12>
 8006e8a:	bf00      	nop
 8006e8c:	20001628 	.word	0x20001628
 8006e90:	08017f98 	.word	0x08017f98
 8006e94:	080181c8 	.word	0x080181c8
 8006e98:	acc54323 	.word	0xacc54323
 8006e9c:	08018198 	.word	0x08018198

08006ea0 <acc_detector_presence_get_next>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	b948      	cbnz	r0, 8006eba <acc_detector_presence_get_next+0x1a>
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <acc_detector_presence_get_next+0x70>)
 8006ea8:	4a1a      	ldr	r2, [pc, #104]	; (8006f14 <acc_detector_presence_get_next+0x74>)
 8006eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eac:	491a      	ldr	r1, [pc, #104]	; (8006f18 <acc_detector_presence_get_next+0x78>)
 8006eae:	2000      	movs	r0, #0
 8006eb0:	4798      	blx	r3
 8006eb2:	2400      	movs	r4, #0
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	b008      	add	sp, #32
 8006eb8:	bd70      	pop	{r4, r5, r6, pc}
 8006eba:	4b18      	ldr	r3, [pc, #96]	; (8006f1c <acc_detector_presence_get_next+0x7c>)
 8006ebc:	6802      	ldr	r2, [r0, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	d1f0      	bne.n	8006ea6 <acc_detector_presence_get_next+0x6>
 8006ec4:	460e      	mov	r6, r1
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	2300      	movs	r3, #0
 8006eca:	9104      	str	r1, [sp, #16]
 8006ecc:	9105      	str	r1, [sp, #20]
 8006ece:	aa01      	add	r2, sp, #4
 8006ed0:	a902      	add	r1, sp, #8
 8006ed2:	f88d 300c 	strb.w	r3, [sp, #12]
 8006ed6:	9307      	str	r3, [sp, #28]
 8006ed8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8006edc:	f7ff fe02 	bl	8006ae4 <get_sparse_data>
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d0e6      	beq.n	8006eb4 <acc_detector_presence_get_next+0x14>
 8006ee6:	68a8      	ldr	r0, [r5, #8]
 8006ee8:	9902      	ldr	r1, [sp, #8]
 8006eea:	aa03      	add	r2, sp, #12
 8006eec:	f000 faf8 	bl	80074e0 <acc_detector_presence_processing_next>
 8006ef0:	2e00      	cmp	r6, #0
 8006ef2:	d0df      	beq.n	8006eb4 <acc_detector_presence_get_next+0x14>
 8006ef4:	9b04      	ldr	r3, [sp, #16]
 8006ef6:	9805      	ldr	r0, [sp, #20]
 8006ef8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8006efc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006f00:	6073      	str	r3, [r6, #4]
 8006f02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006f06:	60b0      	str	r0, [r6, #8]
 8006f08:	7031      	strb	r1, [r6, #0]
 8006f0a:	7332      	strb	r2, [r6, #12]
 8006f0c:	7373      	strb	r3, [r6, #13]
 8006f0e:	e7d1      	b.n	8006eb4 <acc_detector_presence_get_next+0x14>
 8006f10:	20001628 	.word	0x20001628
 8006f14:	08017f98 	.word	0x08017f98
 8006f18:	080181c8 	.word	0x080181c8
 8006f1c:	acc54323 	.word	0xacc54323

08006f20 <acc_detector_presence_configuration_start_set>:
 8006f20:	b928      	cbnz	r0, 8006f2e <acc_detector_presence_configuration_start_set+0xe>
 8006f22:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <acc_detector_presence_configuration_start_set+0x1c>)
 8006f24:	4a06      	ldr	r2, [pc, #24]	; (8006f40 <acc_detector_presence_configuration_start_set+0x20>)
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	4906      	ldr	r1, [pc, #24]	; (8006f44 <acc_detector_presence_configuration_start_set+0x24>)
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	4718      	bx	r3
 8006f2e:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <acc_detector_presence_configuration_start_set+0x28>)
 8006f30:	6802      	ldr	r2, [r0, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d1f5      	bne.n	8006f22 <acc_detector_presence_configuration_start_set+0x2>
 8006f36:	6840      	ldr	r0, [r0, #4]
 8006f38:	f002 be8a 	b.w	8009c50 <acc_service_requested_start_set>
 8006f3c:	20001628 	.word	0x20001628
 8006f40:	08018008 	.word	0x08018008
 8006f44:	080181c8 	.word	0x080181c8
 8006f48:	acc12ad9 	.word	0xacc12ad9

08006f4c <acc_detector_presence_configuration_length_set>:
 8006f4c:	b928      	cbnz	r0, 8006f5a <acc_detector_presence_configuration_length_set+0xe>
 8006f4e:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <acc_detector_presence_configuration_length_set+0x1c>)
 8006f50:	4a06      	ldr	r2, [pc, #24]	; (8006f6c <acc_detector_presence_configuration_length_set+0x20>)
 8006f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f54:	4906      	ldr	r1, [pc, #24]	; (8006f70 <acc_detector_presence_configuration_length_set+0x24>)
 8006f56:	2000      	movs	r0, #0
 8006f58:	4718      	bx	r3
 8006f5a:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <acc_detector_presence_configuration_length_set+0x28>)
 8006f5c:	6802      	ldr	r2, [r0, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d1f5      	bne.n	8006f4e <acc_detector_presence_configuration_length_set+0x2>
 8006f62:	6840      	ldr	r0, [r0, #4]
 8006f64:	f002 be84 	b.w	8009c70 <acc_service_requested_length_set>
 8006f68:	20001628 	.word	0x20001628
 8006f6c:	08018008 	.word	0x08018008
 8006f70:	080181c8 	.word	0x080181c8
 8006f74:	acc12ad9 	.word	0xacc12ad9

08006f78 <acc_detector_presence_configuration_sensor_set>:
 8006f78:	b928      	cbnz	r0, 8006f86 <acc_detector_presence_configuration_sensor_set+0xe>
 8006f7a:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <acc_detector_presence_configuration_sensor_set+0x1c>)
 8006f7c:	4a06      	ldr	r2, [pc, #24]	; (8006f98 <acc_detector_presence_configuration_sensor_set+0x20>)
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f80:	4906      	ldr	r1, [pc, #24]	; (8006f9c <acc_detector_presence_configuration_sensor_set+0x24>)
 8006f82:	2000      	movs	r0, #0
 8006f84:	4718      	bx	r3
 8006f86:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <acc_detector_presence_configuration_sensor_set+0x28>)
 8006f88:	6802      	ldr	r2, [r0, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d1f5      	bne.n	8006f7a <acc_detector_presence_configuration_sensor_set+0x2>
 8006f8e:	6840      	ldr	r0, [r0, #4]
 8006f90:	f002 be4c 	b.w	8009c2c <acc_service_sensor_set>
 8006f94:	20001628 	.word	0x20001628
 8006f98:	08018008 	.word	0x08018008
 8006f9c:	080181c8 	.word	0x080181c8
 8006fa0:	acc12ad9 	.word	0xacc12ad9

08006fa4 <acc_detector_presence_configuration_detection_threshold_set>:
 8006fa4:	b928      	cbnz	r0, 8006fb2 <acc_detector_presence_configuration_detection_threshold_set+0xe>
 8006fa6:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <acc_detector_presence_configuration_detection_threshold_set+0x1c>)
 8006fa8:	4a06      	ldr	r2, [pc, #24]	; (8006fc4 <acc_detector_presence_configuration_detection_threshold_set+0x20>)
 8006faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fac:	4906      	ldr	r1, [pc, #24]	; (8006fc8 <acc_detector_presence_configuration_detection_threshold_set+0x24>)
 8006fae:	2000      	movs	r0, #0
 8006fb0:	4718      	bx	r3
 8006fb2:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <acc_detector_presence_configuration_detection_threshold_set+0x28>)
 8006fb4:	6802      	ldr	r2, [r0, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d1f5      	bne.n	8006fa6 <acc_detector_presence_configuration_detection_threshold_set+0x2>
 8006fba:	ed80 0a04 	vstr	s0, [r0, #16]
 8006fbe:	4770      	bx	lr
 8006fc0:	20001628 	.word	0x20001628
 8006fc4:	08018008 	.word	0x08018008
 8006fc8:	080181c8 	.word	0x080181c8
 8006fcc:	acc12ad9 	.word	0xacc12ad9

08006fd0 <acc_detector_presence_configuration_update_rate_set>:
 8006fd0:	b928      	cbnz	r0, 8006fde <acc_detector_presence_configuration_update_rate_set+0xe>
 8006fd2:	4b06      	ldr	r3, [pc, #24]	; (8006fec <acc_detector_presence_configuration_update_rate_set+0x1c>)
 8006fd4:	4a06      	ldr	r2, [pc, #24]	; (8006ff0 <acc_detector_presence_configuration_update_rate_set+0x20>)
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	4906      	ldr	r1, [pc, #24]	; (8006ff4 <acc_detector_presence_configuration_update_rate_set+0x24>)
 8006fda:	2000      	movs	r0, #0
 8006fdc:	4718      	bx	r3
 8006fde:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <acc_detector_presence_configuration_update_rate_set+0x28>)
 8006fe0:	6802      	ldr	r2, [r0, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d1f5      	bne.n	8006fd2 <acc_detector_presence_configuration_update_rate_set+0x2>
 8006fe6:	ed80 0a03 	vstr	s0, [r0, #12]
 8006fea:	4770      	bx	lr
 8006fec:	20001628 	.word	0x20001628
 8006ff0:	08018008 	.word	0x08018008
 8006ff4:	080181c8 	.word	0x080181c8
 8006ff8:	acc12ad9 	.word	0xacc12ad9

08006ffc <acc_detector_presence_configuration_filter_parameters_get>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	4604      	mov	r4, r0
 8007000:	b999      	cbnz	r1, 800702a <acc_detector_presence_configuration_filter_parameters_get+0x2e>
 8007002:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <acc_detector_presence_configuration_filter_parameters_get+0x44>)
 8007004:	4a0f      	ldr	r2, [pc, #60]	; (8007044 <acc_detector_presence_configuration_filter_parameters_get+0x48>)
 8007006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007008:	490f      	ldr	r1, [pc, #60]	; (8007048 <acc_detector_presence_configuration_filter_parameters_get+0x4c>)
 800700a:	2000      	movs	r0, #0
 800700c:	4798      	blx	r3
 800700e:	2300      	movs	r3, #0
 8007010:	461a      	mov	r2, r3
 8007012:	4618      	mov	r0, r3
 8007014:	461d      	mov	r5, r3
 8007016:	461e      	mov	r6, r3
 8007018:	461f      	mov	r7, r3
 800701a:	60e0      	str	r0, [r4, #12]
 800701c:	6027      	str	r7, [r4, #0]
 800701e:	6066      	str	r6, [r4, #4]
 8007020:	60a5      	str	r5, [r4, #8]
 8007022:	6122      	str	r2, [r4, #16]
 8007024:	6163      	str	r3, [r4, #20]
 8007026:	4620      	mov	r0, r4
 8007028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800702a:	4b08      	ldr	r3, [pc, #32]	; (800704c <acc_detector_presence_configuration_filter_parameters_get+0x50>)
 800702c:	680a      	ldr	r2, [r1, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d1e7      	bne.n	8007002 <acc_detector_presence_configuration_filter_parameters_get+0x6>
 8007032:	694f      	ldr	r7, [r1, #20]
 8007034:	698e      	ldr	r6, [r1, #24]
 8007036:	69cd      	ldr	r5, [r1, #28]
 8007038:	6a08      	ldr	r0, [r1, #32]
 800703a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800703c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800703e:	e7ec      	b.n	800701a <acc_detector_presence_configuration_filter_parameters_get+0x1e>
 8007040:	20001628 	.word	0x20001628
 8007044:	08018008 	.word	0x08018008
 8007048:	080181c8 	.word	0x080181c8
 800704c:	acc12ad9 	.word	0xacc12ad9

08007050 <acc_detector_presence_configuration_filter_parameters_set>:
 8007050:	b928      	cbnz	r0, 800705e <acc_detector_presence_configuration_filter_parameters_set+0xe>
 8007052:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <acc_detector_presence_configuration_filter_parameters_set+0x34>)
 8007054:	4a0c      	ldr	r2, [pc, #48]	; (8007088 <acc_detector_presence_configuration_filter_parameters_set+0x38>)
 8007056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007058:	490c      	ldr	r1, [pc, #48]	; (800708c <acc_detector_presence_configuration_filter_parameters_set+0x3c>)
 800705a:	2000      	movs	r0, #0
 800705c:	4718      	bx	r3
 800705e:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <acc_detector_presence_configuration_filter_parameters_set+0x40>)
 8007060:	6802      	ldr	r2, [r0, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d1f5      	bne.n	8007052 <acc_detector_presence_configuration_filter_parameters_set+0x2>
 8007066:	b470      	push	{r4, r5, r6}
 8007068:	680b      	ldr	r3, [r1, #0]
 800706a:	684e      	ldr	r6, [r1, #4]
 800706c:	688d      	ldr	r5, [r1, #8]
 800706e:	68cc      	ldr	r4, [r1, #12]
 8007070:	690a      	ldr	r2, [r1, #16]
 8007072:	6143      	str	r3, [r0, #20]
 8007074:	694b      	ldr	r3, [r1, #20]
 8007076:	62c3      	str	r3, [r0, #44]	; 0x2c
 8007078:	6186      	str	r6, [r0, #24]
 800707a:	61c5      	str	r5, [r0, #28]
 800707c:	6204      	str	r4, [r0, #32]
 800707e:	6242      	str	r2, [r0, #36]	; 0x24
 8007080:	bc70      	pop	{r4, r5, r6}
 8007082:	4770      	bx	lr
 8007084:	20001628 	.word	0x20001628
 8007088:	08018008 	.word	0x08018008
 800708c:	080181c8 	.word	0x080181c8
 8007090:	acc12ad9 	.word	0xacc12ad9

08007094 <acc_detector_presence_configuration_power_save_mode_set>:
 8007094:	b928      	cbnz	r0, 80070a2 <acc_detector_presence_configuration_power_save_mode_set+0xe>
 8007096:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <acc_detector_presence_configuration_power_save_mode_set+0x1c>)
 8007098:	4a06      	ldr	r2, [pc, #24]	; (80070b4 <acc_detector_presence_configuration_power_save_mode_set+0x20>)
 800709a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709c:	4906      	ldr	r1, [pc, #24]	; (80070b8 <acc_detector_presence_configuration_power_save_mode_set+0x24>)
 800709e:	2000      	movs	r0, #0
 80070a0:	4718      	bx	r3
 80070a2:	4b06      	ldr	r3, [pc, #24]	; (80070bc <acc_detector_presence_configuration_power_save_mode_set+0x28>)
 80070a4:	6802      	ldr	r2, [r0, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d1f5      	bne.n	8007096 <acc_detector_presence_configuration_power_save_mode_set+0x2>
 80070aa:	6840      	ldr	r0, [r0, #4]
 80070ac:	f002 bdf8 	b.w	8009ca0 <acc_service_power_save_mode_set>
 80070b0:	20001628 	.word	0x20001628
 80070b4:	08018008 	.word	0x08018008
 80070b8:	080181c8 	.word	0x080181c8
 80070bc:	acc12ad9 	.word	0xacc12ad9

080070c0 <processing_buffers_teardown>:
 80070c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80070c4:	b510      	push	{r4, lr}
 80070c6:	4604      	mov	r4, r0
 80070c8:	b113      	cbz	r3, 80070d0 <processing_buffers_teardown+0x10>
 80070ca:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80070cc:	f001 fed6 	bl	8008e7c <acc_rss_integration_mem_free>
 80070d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80070d2:	f001 fed3 	bl	8008e7c <acc_rss_integration_mem_free>
 80070d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070d8:	f001 fed0 	bl	8008e7c <acc_rss_integration_mem_free>
 80070dc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80070de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e2:	f001 becb 	b.w	8008e7c <acc_rss_integration_mem_free>
 80070e6:	bf00      	nop

080070e8 <smoothing_factor_from_low_pass_cutoff>:
 80070e8:	eec0 0a20 	vdiv.f32	s1, s0, s1
 80070ec:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007130 <smoothing_factor_from_low_pass_cutoff+0x48>
 80070f0:	eef4 0ae7 	vcmpe.f32	s1, s15
 80070f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f8:	dd02      	ble.n	8007100 <smoothing_factor_from_low_pass_cutoff+0x18>
 80070fa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007134 <smoothing_factor_from_low_pass_cutoff+0x4c>
 80070fe:	4770      	bx	lr
 8007100:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8007138 <smoothing_factor_from_low_pass_cutoff+0x50>
 8007104:	b508      	push	{r3, lr}
 8007106:	ee20 0a80 	vmul.f32	s0, s1, s0
 800710a:	f000 fc19 	bl	8007940 <acc_alg_basic_math_restricted_sin_f32>
 800710e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007112:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007116:	ee36 6a27 	vadd.f32	s12, s12, s15
 800711a:	ee30 7a00 	vadd.f32	s14, s0, s0
 800711e:	eef1 6ac6 	vsqrt.f32	s13, s12
 8007122:	ee36 0ac0 	vsub.f32	s0, s13, s0
 8007126:	ee27 0a00 	vmul.f32	s0, s14, s0
 800712a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800712e:	bd08      	pop	{r3, pc}
 8007130:	3f0000a8 	.word	0x3f0000a8
 8007134:	00000000 	.word	0x00000000
 8007138:	40490fdb 	.word	0x40490fdb

0800713c <processing_buffers_setup>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007142:	2200      	movs	r2, #0
 8007144:	4604      	mov	r4, r0
 8007146:	6542      	str	r2, [r0, #84]	; 0x54
 8007148:	6840      	ldr	r0, [r0, #4]
 800714a:	b183      	cbz	r3, 800716e <processing_buffers_setup+0x32>
 800714c:	0080      	lsls	r0, r0, #2
 800714e:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8007152:	492d      	ldr	r1, [pc, #180]	; (8007208 <processing_buffers_setup+0xcc>)
 8007154:	f001 fe4e 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 8007158:	4605      	mov	r5, r0
 800715a:	6560      	str	r0, [r4, #84]	; 0x54
 800715c:	b930      	cbnz	r0, 800716c <processing_buffers_setup+0x30>
 800715e:	4b2b      	ldr	r3, [pc, #172]	; (800720c <processing_buffers_setup+0xd0>)
 8007160:	4a2b      	ldr	r2, [pc, #172]	; (8007210 <processing_buffers_setup+0xd4>)
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	492b      	ldr	r1, [pc, #172]	; (8007214 <processing_buffers_setup+0xd8>)
 8007166:	4798      	blx	r3
 8007168:	4628      	mov	r0, r5
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	6860      	ldr	r0, [r4, #4]
 800716e:	4926      	ldr	r1, [pc, #152]	; (8007208 <processing_buffers_setup+0xcc>)
 8007170:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007174:	f240 1223 	movw	r2, #291	; 0x123
 8007178:	0080      	lsls	r0, r0, #2
 800717a:	f001 fe3b 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 800717e:	6863      	ldr	r3, [r4, #4]
 8007180:	6520      	str	r0, [r4, #80]	; 0x50
 8007182:	f44f 7292 	mov.w	r2, #292	; 0x124
 8007186:	0098      	lsls	r0, r3, #2
 8007188:	491f      	ldr	r1, [pc, #124]	; (8007208 <processing_buffers_setup+0xcc>)
 800718a:	f001 fe33 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 800718e:	6863      	ldr	r3, [r4, #4]
 8007190:	65a0      	str	r0, [r4, #88]	; 0x58
 8007192:	f240 1225 	movw	r2, #293	; 0x125
 8007196:	0098      	lsls	r0, r3, #2
 8007198:	491b      	ldr	r1, [pc, #108]	; (8007208 <processing_buffers_setup+0xcc>)
 800719a:	f001 fe2b 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 800719e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80071a0:	65e0      	str	r0, [r4, #92]	; 0x5c
 80071a2:	b9fb      	cbnz	r3, 80071e4 <processing_buffers_setup+0xa8>
 80071a4:	4b19      	ldr	r3, [pc, #100]	; (800720c <processing_buffers_setup+0xd0>)
 80071a6:	4a1c      	ldr	r2, [pc, #112]	; (8007218 <processing_buffers_setup+0xdc>)
 80071a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071aa:	491a      	ldr	r1, [pc, #104]	; (8007214 <processing_buffers_setup+0xd8>)
 80071ac:	2000      	movs	r0, #0
 80071ae:	4798      	blx	r3
 80071b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80071b2:	b118      	cbz	r0, 80071bc <processing_buffers_setup+0x80>
 80071b4:	f001 fe62 	bl	8008e7c <acc_rss_integration_mem_free>
 80071b8:	2300      	movs	r3, #0
 80071ba:	6523      	str	r3, [r4, #80]	; 0x50
 80071bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071be:	b118      	cbz	r0, 80071c8 <processing_buffers_setup+0x8c>
 80071c0:	f001 fe5c 	bl	8008e7c <acc_rss_integration_mem_free>
 80071c4:	2300      	movs	r3, #0
 80071c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80071c8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80071ca:	b118      	cbz	r0, 80071d4 <processing_buffers_setup+0x98>
 80071cc:	f001 fe56 	bl	8008e7c <acc_rss_integration_mem_free>
 80071d0:	2300      	movs	r3, #0
 80071d2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80071d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d0c7      	beq.n	800716a <processing_buffers_setup+0x2e>
 80071da:	f001 fe4f 	bl	8008e7c <acc_rss_integration_mem_free>
 80071de:	2000      	movs	r0, #0
 80071e0:	6560      	str	r0, [r4, #84]	; 0x54
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80071e6:	2a00      	cmp	r2, #0
 80071e8:	d0dc      	beq.n	80071a4 <processing_buffers_setup+0x68>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d0da      	beq.n	80071a4 <processing_buffers_setup+0x68>
 80071ee:	2200      	movs	r2, #0
 80071f0:	2500      	movs	r5, #0
 80071f2:	4618      	mov	r0, r3
 80071f4:	88a1      	ldrh	r1, [r4, #4]
 80071f6:	6462      	str	r2, [r4, #68]	; 0x44
 80071f8:	64a2      	str	r2, [r4, #72]	; 0x48
 80071fa:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
 80071fe:	f000 fe35 	bl	8007e6c <acc_alg_sparse_frame_abs_deviation_accumulator_reset>
 8007202:	2001      	movs	r0, #1
 8007204:	bd38      	pop	{r3, r4, r5, pc}
 8007206:	bf00      	nop
 8007208:	080182e4 	.word	0x080182e4
 800720c:	20001628 	.word	0x20001628
 8007210:	08018320 	.word	0x08018320
 8007214:	08018344 	.word	0x08018344
 8007218:	08018364 	.word	0x08018364

0800721c <setup_processing_parameters>:
 800721c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007220:	880e      	ldrh	r6, [r1, #0]
 8007222:	f8b1 c034 	ldrh.w	ip, [r1, #52]	; 0x34
 8007226:	fbbc fcf6 	udiv	ip, ip, r6
 800722a:	ed2d 8b02 	vpush	{d8}
 800722e:	f101 072c 	add.w	r7, r1, #44	; 0x2c
 8007232:	7206      	strb	r6, [r0, #8]
 8007234:	4605      	mov	r5, r0
 8007236:	460c      	mov	r4, r1
 8007238:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800723a:	4e52      	ldr	r6, [pc, #328]	; (8007384 <setup_processing_parameters+0x168>)
 800723c:	f8d4 801c 	ldr.w	r8, [r4, #28]
 8007240:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8007244:	602e      	str	r6, [r5, #0]
 8007246:	f105 062c 	add.w	r6, r5, #44	; 0x2c
 800724a:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
 800724e:	f8c5 e00c 	str.w	lr, [r5, #12]
 8007252:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007254:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800725e:	ed94 8a01 	vldr	s16, [r4, #4]
 8007262:	6032      	str	r2, [r6, #0]
 8007264:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726c:	f8c5 c004 	str.w	ip, [r5, #4]
 8007270:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8007274:	d979      	bls.n	800736a <setup_processing_parameters+0x14e>
 8007276:	ee20 0a08 	vmul.f32	s0, s0, s16
 800727a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800727e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007282:	f00c fde9 	bl	8013e58 <expf>
 8007286:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800728a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728e:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
 8007292:	d965      	bls.n	8007360 <setup_processing_parameters+0x144>
 8007294:	ed94 0a04 	vldr	s0, [r4, #16]
 8007298:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800729c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a0:	d45e      	bmi.n	8007360 <setup_processing_parameters+0x144>
 80072a2:	edd4 7a05 	vldr	s15, [r4, #20]
 80072a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ae:	d457      	bmi.n	8007360 <setup_processing_parameters+0x144>
 80072b0:	edd4 7a03 	vldr	s15, [r4, #12]
 80072b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072bc:	d450      	bmi.n	8007360 <setup_processing_parameters+0x144>
 80072be:	edd4 7a06 	vldr	s15, [r4, #24]
 80072c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ca:	d449      	bmi.n	8007360 <setup_processing_parameters+0x144>
 80072cc:	edd4 7a08 	vldr	s15, [r4, #32]
 80072d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d8:	d442      	bmi.n	8007360 <setup_processing_parameters+0x144>
 80072da:	eef0 0a48 	vmov.f32	s1, s16
 80072de:	f7ff ff03 	bl	80070e8 <smoothing_factor_from_low_pass_cutoff>
 80072e2:	eef0 0a48 	vmov.f32	s1, s16
 80072e6:	ed85 0a04 	vstr	s0, [r5, #16]
 80072ea:	ed94 0a05 	vldr	s0, [r4, #20]
 80072ee:	f7ff fefb 	bl	80070e8 <smoothing_factor_from_low_pass_cutoff>
 80072f2:	edd4 7a03 	vldr	s15, [r4, #12]
 80072f6:	ed85 0a05 	vstr	s0, [r5, #20]
 80072fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007302:	d935      	bls.n	8007370 <setup_processing_parameters+0x154>
 8007304:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007308:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800730c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8007310:	f00c fda2 	bl	8013e58 <expf>
 8007314:	edd4 7a06 	vldr	s15, [r4, #24]
 8007318:	ed85 0a06 	vstr	s0, [r5, #24]
 800731c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007324:	d92a      	bls.n	800737c <setup_processing_parameters+0x160>
 8007326:	ee68 7a27 	vmul.f32	s15, s16, s15
 800732a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800732e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8007332:	f00c fd91 	bl	8013e58 <expf>
 8007336:	edd4 7a08 	vldr	s15, [r4, #32]
 800733a:	ed85 0a07 	vstr	s0, [r5, #28]
 800733e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007346:	d916      	bls.n	8007376 <setup_processing_parameters+0x15a>
 8007348:	ee28 8a27 	vmul.f32	s16, s16, s15
 800734c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007350:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8007354:	f00c fd80 	bl	8013e58 <expf>
 8007358:	2001      	movs	r0, #1
 800735a:	ed85 0a08 	vstr	s0, [r5, #32]
 800735e:	e000      	b.n	8007362 <setup_processing_parameters+0x146>
 8007360:	2000      	movs	r0, #0
 8007362:	ecbd 8b02 	vpop	{d8}
 8007366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800736a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8007388 <setup_processing_parameters+0x16c>
 800736e:	e78a      	b.n	8007286 <setup_processing_parameters+0x6a>
 8007370:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8007388 <setup_processing_parameters+0x16c>
 8007374:	e7ce      	b.n	8007314 <setup_processing_parameters+0xf8>
 8007376:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8007388 <setup_processing_parameters+0x16c>
 800737a:	e7ed      	b.n	8007358 <setup_processing_parameters+0x13c>
 800737c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8007388 <setup_processing_parameters+0x16c>
 8007380:	e7d9      	b.n	8007336 <setup_processing_parameters+0x11a>
 8007382:	bf00      	nop
 8007384:	acc12ad1 	.word	0xacc12ad1
 8007388:	00000000 	.word	0x00000000

0800738c <acc_detector_presence_processing_create>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	2258      	movs	r2, #88	; 0x58
 8007390:	4605      	mov	r5, r0
 8007392:	490f      	ldr	r1, [pc, #60]	; (80073d0 <acc_detector_presence_processing_create+0x44>)
 8007394:	2060      	movs	r0, #96	; 0x60
 8007396:	f001 fd2d 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 800739a:	4604      	mov	r4, r0
 800739c:	b158      	cbz	r0, 80073b6 <acc_detector_presence_processing_create+0x2a>
 800739e:	4629      	mov	r1, r5
 80073a0:	f7ff ff3c 	bl	800721c <setup_processing_parameters>
 80073a4:	4605      	mov	r5, r0
 80073a6:	4620      	mov	r0, r4
 80073a8:	b16d      	cbz	r5, 80073c6 <acc_detector_presence_processing_create+0x3a>
 80073aa:	f7ff fec7 	bl	800713c <processing_buffers_setup>
 80073ae:	4605      	mov	r5, r0
 80073b0:	b140      	cbz	r0, 80073c4 <acc_detector_presence_processing_create+0x38>
 80073b2:	4620      	mov	r0, r4
 80073b4:	bd38      	pop	{r3, r4, r5, pc}
 80073b6:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <acc_detector_presence_processing_create+0x48>)
 80073b8:	4a07      	ldr	r2, [pc, #28]	; (80073d8 <acc_detector_presence_processing_create+0x4c>)
 80073ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073bc:	4907      	ldr	r1, [pc, #28]	; (80073dc <acc_detector_presence_processing_create+0x50>)
 80073be:	4798      	blx	r3
 80073c0:	4620      	mov	r0, r4
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	4620      	mov	r0, r4
 80073c6:	f001 fd59 	bl	8008e7c <acc_rss_integration_mem_free>
 80073ca:	462c      	mov	r4, r5
 80073cc:	e7f1      	b.n	80073b2 <acc_detector_presence_processing_create+0x26>
 80073ce:	bf00      	nop
 80073d0:	080182e4 	.word	0x080182e4
 80073d4:	20001628 	.word	0x20001628
 80073d8:	08018224 	.word	0x08018224
 80073dc:	08018344 	.word	0x08018344

080073e0 <acc_detector_presence_processing_destroy>:
 80073e0:	6803      	ldr	r3, [r0, #0]
 80073e2:	b92b      	cbnz	r3, 80073f0 <acc_detector_presence_processing_destroy+0x10>
 80073e4:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <acc_detector_presence_processing_destroy+0x30>)
 80073e6:	4a0b      	ldr	r2, [pc, #44]	; (8007414 <acc_detector_presence_processing_destroy+0x34>)
 80073e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ea:	490b      	ldr	r1, [pc, #44]	; (8007418 <acc_detector_presence_processing_destroy+0x38>)
 80073ec:	2000      	movs	r0, #0
 80073ee:	4718      	bx	r3
 80073f0:	4a0a      	ldr	r2, [pc, #40]	; (800741c <acc_detector_presence_processing_destroy+0x3c>)
 80073f2:	6819      	ldr	r1, [r3, #0]
 80073f4:	4291      	cmp	r1, r2
 80073f6:	d1f5      	bne.n	80073e4 <acc_detector_presence_processing_destroy+0x4>
 80073f8:	b510      	push	{r4, lr}
 80073fa:	4604      	mov	r4, r0
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff fe5f 	bl	80070c0 <processing_buffers_teardown>
 8007402:	6820      	ldr	r0, [r4, #0]
 8007404:	f001 fd3a 	bl	8008e7c <acc_rss_integration_mem_free>
 8007408:	2300      	movs	r3, #0
 800740a:	6023      	str	r3, [r4, #0]
 800740c:	bd10      	pop	{r4, pc}
 800740e:	bf00      	nop
 8007410:	20001628 	.word	0x20001628
 8007414:	08018108 	.word	0x08018108
 8007418:	08018344 	.word	0x08018344
 800741c:	acc12ad1 	.word	0xacc12ad1

08007420 <acc_detector_presence_processing_reconfigure>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	6803      	ldr	r3, [r0, #0]
 8007424:	ed2d 8b02 	vpush	{d8}
 8007428:	4604      	mov	r4, r0
 800742a:	4618      	mov	r0, r3
 800742c:	685e      	ldr	r6, [r3, #4]
 800742e:	ed93 8a0b 	vldr	s16, [r3, #44]	; 0x2c
 8007432:	edd3 8a0f 	vldr	s17, [r3, #60]	; 0x3c
 8007436:	f7ff fef1 	bl	800721c <setup_processing_parameters>
 800743a:	4605      	mov	r5, r0
 800743c:	b380      	cbz	r0, 80074a0 <acc_detector_presence_processing_reconfigure+0x80>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	b2b6      	uxth	r6, r6
 8007444:	42b2      	cmp	r2, r6
 8007446:	d10c      	bne.n	8007462 <acc_detector_presence_processing_reconfigure+0x42>
 8007448:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800744c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80074d0 <acc_detector_presence_processing_reconfigure+0xb0>
 8007450:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8007454:	eef0 7ae7 	vabs.f32	s15, s15
 8007458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800745c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007460:	dd29      	ble.n	80074b6 <acc_detector_presence_processing_reconfigure+0x96>
 8007462:	f001 fd1d 	bl	8008ea0 <acc_rss_integration_log_level>
 8007466:	2801      	cmp	r0, #1
 8007468:	d905      	bls.n	8007476 <acc_detector_presence_processing_reconfigure+0x56>
 800746a:	4b1a      	ldr	r3, [pc, #104]	; (80074d4 <acc_detector_presence_processing_reconfigure+0xb4>)
 800746c:	4a1a      	ldr	r2, [pc, #104]	; (80074d8 <acc_detector_presence_processing_reconfigure+0xb8>)
 800746e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007470:	491a      	ldr	r1, [pc, #104]	; (80074dc <acc_detector_presence_processing_reconfigure+0xbc>)
 8007472:	2002      	movs	r0, #2
 8007474:	4798      	blx	r3
 8007476:	6820      	ldr	r0, [r4, #0]
 8007478:	f7ff fe22 	bl	80070c0 <processing_buffers_teardown>
 800747c:	6820      	ldr	r0, [r4, #0]
 800747e:	f7ff fe5d 	bl	800713c <processing_buffers_setup>
 8007482:	4606      	mov	r6, r0
 8007484:	b118      	cbz	r0, 800748e <acc_detector_presence_processing_reconfigure+0x6e>
 8007486:	ecbd 8b02 	vpop	{d8}
 800748a:	4628      	mov	r0, r5
 800748c:	bd70      	pop	{r4, r5, r6, pc}
 800748e:	6820      	ldr	r0, [r4, #0]
 8007490:	f001 fcf4 	bl	8008e7c <acc_rss_integration_mem_free>
 8007494:	ecbd 8b02 	vpop	{d8}
 8007498:	4635      	mov	r5, r6
 800749a:	4628      	mov	r0, r5
 800749c:	6026      	str	r6, [r4, #0]
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	6820      	ldr	r0, [r4, #0]
 80074a2:	f7ff fe0d 	bl	80070c0 <processing_buffers_teardown>
 80074a6:	6820      	ldr	r0, [r4, #0]
 80074a8:	f001 fce8 	bl	8008e7c <acc_rss_integration_mem_free>
 80074ac:	ecbd 8b02 	vpop	{d8}
 80074b0:	4628      	mov	r0, r5
 80074b2:	6025      	str	r5, [r4, #0]
 80074b4:	bd70      	pop	{r4, r5, r6, pc}
 80074b6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80074ba:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80074be:	eef0 8ae8 	vabs.f32	s17, s17
 80074c2:	eef4 8ac7 	vcmpe.f32	s17, s14
 80074c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ca:	dcca      	bgt.n	8007462 <acc_detector_presence_processing_reconfigure+0x42>
 80074cc:	e7db      	b.n	8007486 <acc_detector_presence_processing_reconfigure+0x66>
 80074ce:	bf00      	nop
 80074d0:	3a83126f 	.word	0x3a83126f
 80074d4:	20001628 	.word	0x20001628
 80074d8:	080182b8 	.word	0x080182b8
 80074dc:	08018344 	.word	0x08018344

080074e0 <acc_detector_presence_processing_next>:
 80074e0:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
 80074e4:	ed90 0a04 	vldr	s0, [r0, #16]
 80074e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ec:	3301      	adds	r3, #1
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074f6:	ed2d 8b02 	vpush	{d8}
 80074fa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80074fe:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 8007502:	b088      	sub	sp, #32
 8007504:	4604      	mov	r4, r0
 8007506:	460e      	mov	r6, r1
 8007508:	4617      	mov	r7, r2
 800750a:	ad03      	add	r5, sp, #12
 800750c:	ee38 8ac8 	vsub.f32	s16, s17, s16
 8007510:	eef0 0a48 	vmov.f32	s1, s16
 8007514:	f00c fc44 	bl	8013da0 <fminf>
 8007518:	eef0 0a48 	vmov.f32	s1, s16
 800751c:	ed8d 0a03 	vstr	s0, [sp, #12]
 8007520:	ed94 0a05 	vldr	s0, [r4, #20]
 8007524:	f00c fc3c 	bl	8013da0 <fminf>
 8007528:	eef0 0a48 	vmov.f32	s1, s16
 800752c:	ed8d 0a04 	vstr	s0, [sp, #16]
 8007530:	ed94 0a06 	vldr	s0, [r4, #24]
 8007534:	f00c fc34 	bl	8013da0 <fminf>
 8007538:	eef0 0a48 	vmov.f32	s1, s16
 800753c:	ed8d 0a05 	vstr	s0, [sp, #20]
 8007540:	ed94 0a07 	vldr	s0, [r4, #28]
 8007544:	f00c fc2c 	bl	8013da0 <fminf>
 8007548:	eef0 0a48 	vmov.f32	s1, s16
 800754c:	ed8d 0a06 	vstr	s0, [sp, #24]
 8007550:	ed94 0a08 	vldr	s0, [r4, #32]
 8007554:	f00c fc24 	bl	8013da0 <fminf>
 8007558:	eef0 0a48 	vmov.f32	s1, s16
 800755c:	ed8d 0a07 	vstr	s0, [sp, #28]
 8007560:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8007564:	f00c fc1c 	bl	8013da0 <fminf>
 8007568:	88a3      	ldrh	r3, [r4, #4]
 800756a:	7a22      	ldrb	r2, [r4, #8]
 800756c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800756e:	9500      	str	r5, [sp, #0]
 8007570:	4631      	mov	r1, r6
 8007572:	eeb0 8a40 	vmov.f32	s16, s0
 8007576:	f000 fc7f 	bl	8007e78 <acc_alg_sparse_frame_abs_deviation_accumulate>
 800757a:	b948      	cbnz	r0, 8007590 <acc_detector_presence_processing_next+0xb0>
 800757c:	4b47      	ldr	r3, [pc, #284]	; (800769c <acc_detector_presence_processing_next+0x1bc>)
 800757e:	4a48      	ldr	r2, [pc, #288]	; (80076a0 <acc_detector_presence_processing_next+0x1c0>)
 8007580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007582:	4948      	ldr	r1, [pc, #288]	; (80076a4 <acc_detector_presence_processing_next+0x1c4>)
 8007584:	4798      	blx	r3
 8007586:	b008      	add	sp, #32
 8007588:	ecbd 8b02 	vpop	{d8}
 800758c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007590:	e9d4 3216 	ldrd	r3, r2, [r4, #88]	; 0x58
 8007594:	88a1      	ldrh	r1, [r4, #4]
 8007596:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007598:	f000 fd50 	bl	800803c <acc_alg_sparse_frame_abs_deviation_to_noise_ratio>
 800759c:	b928      	cbnz	r0, 80075aa <acc_detector_presence_processing_next+0xca>
 800759e:	4b3f      	ldr	r3, [pc, #252]	; (800769c <acc_detector_presence_processing_next+0x1bc>)
 80075a0:	4a41      	ldr	r2, [pc, #260]	; (80076a8 <acc_detector_presence_processing_next+0x1c8>)
 80075a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a4:	493f      	ldr	r1, [pc, #252]	; (80076a4 <acc_detector_presence_processing_next+0x1c4>)
 80075a6:	4798      	blx	r3
 80075a8:	e7ed      	b.n	8007586 <acc_detector_presence_processing_next+0xa6>
 80075aa:	6865      	ldr	r5, [r4, #4]
 80075ac:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	d06e      	beq.n	8007692 <acc_detector_presence_processing_next+0x1b2>
 80075b4:	e9d4 8e16 	ldrd	r8, lr, [r4, #88]	; 0x58
 80075b8:	2300      	movs	r3, #0
 80075ba:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80076ac <acc_detector_presence_processing_next+0x1cc>
 80075be:	469c      	mov	ip, r3
 80075c0:	4619      	mov	r1, r3
 80075c2:	008a      	lsls	r2, r1, #2
 80075c4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80075c8:	eb0e 0102 	add.w	r1, lr, r2
 80075cc:	eb08 0002 	add.w	r0, r8, r2
 80075d0:	edd1 5a00 	vldr	s11, [r1]
 80075d4:	ed90 6a00 	vldr	s12, [r0]
 80075d8:	ee78 7ac7 	vsub.f32	s15, s17, s14
 80075dc:	ee27 7a25 	vmul.f32	s14, s14, s11
 80075e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80075e4:	1c59      	adds	r1, r3, #1
 80075e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075ea:	eef4 7ae6 	vcmpe.f32	s15, s13
 80075ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f2:	bfc8      	it	gt
 80075f4:	469c      	movgt	ip, r3
 80075f6:	b28b      	uxth	r3, r1
 80075f8:	bfc8      	it	gt
 80075fa:	eef0 6a67 	vmovgt.f32	s13, s15
 80075fe:	4619      	mov	r1, r3
 8007600:	b11e      	cbz	r6, 800760a <acc_detector_presence_processing_next+0x12a>
 8007602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007604:	4402      	add	r2, r0
 8007606:	edc2 7a00 	vstr	s15, [r2]
 800760a:	42ab      	cmp	r3, r5
 800760c:	d3d9      	bcc.n	80075c2 <acc_detector_presence_processing_next+0xe2>
 800760e:	ed94 7a03 	vldr	s14, [r4, #12]
 8007612:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761a:	d80d      	bhi.n	8007638 <acc_detector_presence_processing_next+0x158>
 800761c:	ee07 ca90 	vmov	s15, ip
 8007620:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
 8007624:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8007628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007630:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007634:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
 8007638:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800763c:	ed94 6a11 	vldr	s12, [r4, #68]	; 0x44
 8007640:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8007644:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007648:	ee68 7a06 	vmul.f32	s15, s16, s12
 800764c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007658:	bf94      	ite	ls
 800765a:	2301      	movls	r3, #1
 800765c:	2300      	movhi	r3, #0
 800765e:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
 8007662:	edc7 7a01 	vstr	s15, [r7, #4]
 8007666:	703b      	strb	r3, [r7, #0]
 8007668:	b116      	cbz	r6, 8007670 <acc_detector_presence_processing_next+0x190>
 800766a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800766c:	613b      	str	r3, [r7, #16]
 800766e:	81bd      	strh	r5, [r7, #12]
 8007670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007678:	bf9c      	itt	ls
 800767a:	6ca3      	ldrls	r3, [r4, #72]	; 0x48
 800767c:	60bb      	strls	r3, [r7, #8]
 800767e:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8007682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007686:	4293      	cmp	r3, r2
 8007688:	bf1c      	itt	ne
 800768a:	3301      	addne	r3, #1
 800768c:	f8a4 304c 	strhne.w	r3, [r4, #76]	; 0x4c
 8007690:	e779      	b.n	8007586 <acc_detector_presence_processing_next+0xa6>
 8007692:	46ac      	mov	ip, r5
 8007694:	eddf 6a05 	vldr	s13, [pc, #20]	; 80076ac <acc_detector_presence_processing_next+0x1cc>
 8007698:	e7b9      	b.n	800760e <acc_detector_presence_processing_next+0x12e>
 800769a:	bf00      	nop
 800769c:	20001628 	.word	0x20001628
 80076a0:	08018244 	.word	0x08018244
 80076a4:	08018344 	.word	0x08018344
 80076a8:	0801827c 	.word	0x0801827c
 80076ac:	00000000 	.word	0x00000000

080076b0 <quarter_pi_cos_sin_f32>:
 80076b0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007730 <quarter_pi_cos_sin_f32+0x80>
 80076b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80076b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076bc:	d434      	bmi.n	8007728 <quarter_pi_cos_sin_f32+0x78>
 80076be:	ee60 7a00 	vmul.f32	s15, s0, s0
 80076c2:	b1d0      	cbz	r0, 80076fa <quarter_pi_cos_sin_f32+0x4a>
 80076c4:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8007734 <quarter_pi_cos_sin_f32+0x84>
 80076c8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8007738 <quarter_pi_cos_sin_f32+0x88>
 80076cc:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800773c <quarter_pi_cos_sin_f32+0x8c>
 80076d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80076d4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80076d8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80076dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80076e4:	ee30 0a06 	vadd.f32	s0, s0, s12
 80076e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80076ec:	ee30 0a66 	vsub.f32	s0, s0, s13
 80076f0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80076f4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80076f8:	4770      	bx	lr
 80076fa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007740 <quarter_pi_cos_sin_f32+0x90>
 80076fe:	eddf 5a11 	vldr	s11, [pc, #68]	; 8007744 <quarter_pi_cos_sin_f32+0x94>
 8007702:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8007748 <quarter_pi_cos_sin_f32+0x98>
 8007706:	ee27 7a87 	vmul.f32	s14, s15, s14
 800770a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800770e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007712:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007716:	ee37 7a46 	vsub.f32	s14, s14, s12
 800771a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800771e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007722:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007726:	4770      	bx	lr
 8007728:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800774c <quarter_pi_cos_sin_f32+0x9c>
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	bf490fdb 	.word	0xbf490fdb
 8007734:	37cd1800 	.word	0x37cd1800
 8007738:	3ab606a0 	.word	0x3ab606a0
 800773c:	3d2aaaa6 	.word	0x3d2aaaa6
 8007740:	b94c909b 	.word	0xb94c909b
 8007744:	3c088366 	.word	0x3c088366
 8007748:	3e2aaaa2 	.word	0x3e2aaaa2
 800774c:	7fc00000 	.word	0x7fc00000

08007750 <restricted_cos_sin_f32>:
 8007750:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007778 <restricted_cos_sin_f32+0x28>
 8007754:	eddf 6a09 	vldr	s13, [pc, #36]	; 800777c <restricted_cos_sin_f32+0x2c>
 8007758:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800775c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007760:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007768:	bf5c      	itt	pl
 800776a:	f080 0001 	eorpl.w	r0, r0, #1
 800776e:	eeb0 0a67 	vmovpl.f32	s0, s15
 8007772:	f7ff bf9d 	b.w	80076b0 <quarter_pi_cos_sin_f32>
 8007776:	bf00      	nop
 8007778:	3fc90fdb 	.word	0x3fc90fdb
 800777c:	333bbd2e 	.word	0x333bbd2e

08007780 <acc_alg_basic_math_q3_12_complex_mul>:
 8007780:	b322      	cbz	r2, 80077cc <acc_alg_basic_math_q3_12_complex_mul+0x4c>
 8007782:	b4f0      	push	{r4, r5, r6, r7}
 8007784:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007788:	3102      	adds	r1, #2
 800778a:	1c86      	adds	r6, r0, #2
 800778c:	f936 7c02 	ldrsh.w	r7, [r6, #-2]
 8007790:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 8007794:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007798:	f9b1 5000 	ldrsh.w	r5, [r1]
 800779c:	fb13 f307 	smulbb	r3, r3, r7
 80077a0:	fb04 3315 	mls	r3, r4, r5, r3
 80077a4:	131b      	asrs	r3, r3, #12
 80077a6:	f826 3c02 	strh.w	r3, [r6, #-2]
 80077aa:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 80077ae:	fb05 f507 	mul.w	r5, r5, r7
 80077b2:	fb14 5403 	smlabb	r4, r4, r3, r5
 80077b6:	1324      	asrs	r4, r4, #12
 80077b8:	8044      	strh	r4, [r0, #2]
 80077ba:	3004      	adds	r0, #4
 80077bc:	4282      	cmp	r2, r0
 80077be:	f106 0604 	add.w	r6, r6, #4
 80077c2:	f101 0104 	add.w	r1, r1, #4
 80077c6:	d1e1      	bne.n	800778c <acc_alg_basic_math_q3_12_complex_mul+0xc>
 80077c8:	bcf0      	pop	{r4, r5, r6, r7}
 80077ca:	4770      	bx	lr
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop

080077d0 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 80077d0:	b203      	sxth	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	ea4f 4020 	mov.w	r0, r0, asr #16
 80077d8:	bfb8      	it	lt
 80077da:	425b      	neglt	r3, r3
 80077dc:	2800      	cmp	r0, #0
 80077de:	bfb8      	it	lt
 80077e0:	4240      	neglt	r0, r0
 80077e2:	b21b      	sxth	r3, r3
 80077e4:	b200      	sxth	r0, r0
 80077e6:	4283      	cmp	r3, r0
 80077e8:	b082      	sub	sp, #8
 80077ea:	db02      	blt.n	80077f2 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x22>
 80077ec:	4602      	mov	r2, r0
 80077ee:	4618      	mov	r0, r3
 80077f0:	4613      	mov	r3, r2
 80077f2:	f240 62a1 	movw	r2, #1697	; 0x6a1
 80077f6:	fb10 f202 	smulbb	r2, r0, r2
 80077fa:	2a00      	cmp	r2, #0
 80077fc:	bfb8      	it	lt
 80077fe:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 8007802:	ebb3 3f22 	cmp.w	r3, r2, asr #12
 8007806:	db0b      	blt.n	8007820 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x50>
 8007808:	f640 02fa 	movw	r2, #2298	; 0x8fa
 800780c:	fb13 f302 	smulbb	r3, r3, r2
 8007810:	f640 5271 	movw	r2, #3441	; 0xd71
 8007814:	fb10 3002 	smlabb	r0, r0, r2, r3
 8007818:	f340 300f 	sbfx	r0, r0, #12, #16
 800781c:	b002      	add	sp, #8
 800781e:	4770      	bx	lr
 8007820:	f240 3227 	movw	r2, #807	; 0x327
 8007824:	fb13 f302 	smulbb	r3, r3, r2
 8007828:	f640 72d7 	movw	r2, #4055	; 0xfd7
 800782c:	fb10 3002 	smlabb	r0, r0, r2, r3
 8007830:	f340 300f 	sbfx	r0, r0, #12, #16
 8007834:	b002      	add	sp, #8
 8007836:	4770      	bx	lr

08007838 <acc_alg_basic_math_q3_12_complex_conj_normalize>:
 8007838:	2900      	cmp	r1, #0
 800783a:	d055      	beq.n	80078e8 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xb0>
 800783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007844:	1c85      	adds	r5, r0, #2
 8007846:	f240 66a1 	movw	r6, #1697	; 0x6a1
 800784a:	f640 08fa 	movw	r8, #2298	; 0x8fa
 800784e:	f640 5e71 	movw	lr, #3441	; 0xd71
 8007852:	f240 3c27 	movw	ip, #807	; 0x327
 8007856:	f640 77d7 	movw	r7, #4055	; 0xfd7
 800785a:	e008      	b.n	800786e <acc_alg_basic_math_q3_12_complex_conj_normalize+0x36>
 800785c:	f825 3c02 	strh.w	r3, [r5, #-2]
 8007860:	3004      	adds	r0, #4
 8007862:	f820 3c02 	strh.w	r3, [r0, #-2]
 8007866:	4281      	cmp	r1, r0
 8007868:	f105 0504 	add.w	r5, r5, #4
 800786c:	d03a      	beq.n	80078e4 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xac>
 800786e:	f935 9c02 	ldrsh.w	r9, [r5, #-2]
 8007872:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007876:	ea89 72e9 	eor.w	r2, r9, r9, asr #31
 800787a:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
 800787e:	eba2 72e9 	sub.w	r2, r2, r9, asr #31
 8007882:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
 8007886:	b212      	sxth	r2, r2
 8007888:	b21b      	sxth	r3, r3
 800788a:	429a      	cmp	r2, r3
 800788c:	db02      	blt.n	8007894 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x5c>
 800788e:	469a      	mov	sl, r3
 8007890:	4613      	mov	r3, r2
 8007892:	4652      	mov	r2, sl
 8007894:	fb13 fa06 	smulbb	sl, r3, r6
 8007898:	f1ba 0f00 	cmp.w	sl, #0
 800789c:	bfb8      	it	lt
 800789e:	f60a 7aff 	addwlt	sl, sl, #4095	; 0xfff
 80078a2:	ebb2 3f2a 	cmp.w	r2, sl, asr #12
 80078a6:	bfb5      	itete	lt
 80078a8:	fb12 f20c 	smulbblt	r2, r2, ip
 80078ac:	fb12 f208 	smulbbge	r2, r2, r8
 80078b0:	fb13 2307 	smlabblt	r3, r3, r7, r2
 80078b4:	fb13 230e 	smlabbge	r3, r3, lr, r2
 80078b8:	f343 330f 	sbfx	r3, r3, #12, #16
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0cd      	beq.n	800785c <acc_alg_basic_math_q3_12_complex_conj_normalize+0x24>
 80078c0:	ebc4 5404 	rsb	r4, r4, r4, lsl #20
 80078c4:	0324      	lsls	r4, r4, #12
 80078c6:	ea4f 3909 	mov.w	r9, r9, lsl #12
 80078ca:	fb94 f4f3 	sdiv	r4, r4, r3
 80078ce:	3004      	adds	r0, #4
 80078d0:	fb99 f3f3 	sdiv	r3, r9, r3
 80078d4:	f825 3c02 	strh.w	r3, [r5, #-2]
 80078d8:	f820 4c02 	strh.w	r4, [r0, #-2]
 80078dc:	4281      	cmp	r1, r0
 80078de:	f105 0504 	add.w	r5, r5, #4
 80078e2:	d1c4      	bne.n	800786e <acc_alg_basic_math_q3_12_complex_conj_normalize+0x36>
 80078e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop

080078ec <acc_alg_basic_math_q3_12_sin>:
 80078ec:	0043      	lsls	r3, r0, #1
 80078ee:	bf4c      	ite	mi
 80078f0:	43c3      	mvnmi	r3, r0
 80078f2:	4603      	movpl	r3, r0
 80078f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80078f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80078fc:	0d9b      	lsrs	r3, r3, #22
 80078fe:	4904      	ldr	r1, [pc, #16]	; (8007910 <acc_alg_basic_math_q3_12_sin+0x24>)
 8007900:	4602      	mov	r2, r0
 8007902:	f931 0013 	ldrsh.w	r0, [r1, r3, lsl #1]
 8007906:	2a00      	cmp	r2, #0
 8007908:	bfbc      	itt	lt
 800790a:	4240      	neglt	r0, r0
 800790c:	b200      	sxthlt	r0, r0
 800790e:	4770      	bx	lr
 8007910:	0801837c 	.word	0x0801837c

08007914 <acc_alg_basic_math_q3_12_cos>:
 8007914:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8007918:	0053      	lsls	r3, r2, #1
 800791a:	bf4c      	ite	mi
 800791c:	43d3      	mvnmi	r3, r2
 800791e:	4613      	movpl	r3, r2
 8007920:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007924:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007928:	0d9b      	lsrs	r3, r3, #22
 800792a:	4904      	ldr	r1, [pc, #16]	; (800793c <acc_alg_basic_math_q3_12_cos+0x28>)
 800792c:	f931 0013 	ldrsh.w	r0, [r1, r3, lsl #1]
 8007930:	2a00      	cmp	r2, #0
 8007932:	bfbc      	itt	lt
 8007934:	4240      	neglt	r0, r0
 8007936:	b200      	sxthlt	r0, r0
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	0801837c 	.word	0x0801837c

08007940 <acc_alg_basic_math_restricted_sin_f32>:
 8007940:	2000      	movs	r0, #0
 8007942:	f7ff bf05 	b.w	8007750 <restricted_cos_sin_f32>
 8007946:	bf00      	nop

08007948 <acc_alg_basic_math_restricted_tan_f32>:
 8007948:	b508      	push	{r3, lr}
 800794a:	2000      	movs	r0, #0
 800794c:	eef0 4a40 	vmov.f32	s9, s0
 8007950:	f7ff fefe 	bl	8007750 <restricted_cos_sin_f32>
 8007954:	2001      	movs	r0, #1
 8007956:	eeb0 5a40 	vmov.f32	s10, s0
 800795a:	eeb0 0a64 	vmov.f32	s0, s9
 800795e:	f7ff fef7 	bl	8007750 <restricted_cos_sin_f32>
 8007962:	ee85 0a00 	vdiv.f32	s0, s10, s0
 8007966:	bd08      	pop	{r3, pc}

08007968 <acc_alg_basic_math_restricted_atan_f32>:
 8007968:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800796c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007974:	d434      	bmi.n	80079e0 <acc_alg_basic_math_restricted_atan_f32+0x78>
 8007976:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800797a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800797e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007982:	dd1b      	ble.n	80079bc <acc_alg_basic_math_restricted_atan_f32+0x54>
 8007984:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8007988:	4b17      	ldr	r3, [pc, #92]	; (80079e8 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800798a:	f1a3 0220 	sub.w	r2, r3, #32
 800798e:	eddf 7a17 	vldr	s15, [pc, #92]	; 80079ec <acc_alg_basic_math_restricted_atan_f32+0x84>
 8007992:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007996:	ed33 7a01 	vldmdb	r3!, {s14}
 800799a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800799e:	429a      	cmp	r2, r3
 80079a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079a4:	d1f7      	bne.n	8007996 <acc_alg_basic_math_restricted_atan_f32+0x2e>
 80079a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80079aa:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80079f0 <acc_alg_basic_math_restricted_atan_f32+0x88>
 80079ae:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80079f4 <acc_alg_basic_math_restricted_atan_f32+0x8c>
 80079b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80079b6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80079ba:	4770      	bx	lr
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 80079be:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80079ec <acc_alg_basic_math_restricted_atan_f32+0x84>
 80079c2:	ee60 6a00 	vmul.f32	s13, s0, s0
 80079c6:	f1a3 0220 	sub.w	r2, r3, #32
 80079ca:	ed33 7a01 	vldmdb	r3!, {s14}
 80079ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80079d2:	429a      	cmp	r2, r3
 80079d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079d8:	d1f7      	bne.n	80079ca <acc_alg_basic_math_restricted_atan_f32+0x62>
 80079da:	ee20 0a27 	vmul.f32	s0, s0, s15
 80079de:	4770      	bx	lr
 80079e0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80079f8 <acc_alg_basic_math_restricted_atan_f32+0x90>
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	080185a0 	.word	0x080185a0
 80079ec:	3b3f517a 	.word	0x3b3f517a
 80079f0:	3fc90fdb 	.word	0x3fc90fdb
 80079f4:	333bbd2e 	.word	0x333bbd2e
 80079f8:	7fc00000 	.word	0x7fc00000

080079fc <compare_index_closest_peak_first>:
 80079fc:	8802      	ldrh	r2, [r0, #0]
 80079fe:	880b      	ldrh	r3, [r1, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d804      	bhi.n	8007a0e <compare_index_closest_peak_first+0x12>
 8007a04:	bf14      	ite	ne
 8007a06:	f04f 30ff 	movne.w	r0, #4294967295
 8007a0a:	2000      	moveq	r0, #0
 8007a0c:	4770      	bx	lr
 8007a0e:	2001      	movs	r0, #1
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop

08007a14 <compare_index_strongest_peak_first>:
 8007a14:	8842      	ldrh	r2, [r0, #2]
 8007a16:	884b      	ldrh	r3, [r1, #2]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d304      	bcc.n	8007a26 <compare_index_strongest_peak_first+0x12>
 8007a1c:	bf14      	ite	ne
 8007a1e:	f04f 30ff 	movne.w	r0, #4294967295
 8007a22:	2000      	moveq	r0, #0
 8007a24:	4770      	bx	lr
 8007a26:	2001      	movs	r0, #1
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop

08007a2c <compare_index_strongest_reflector_first>:
 8007a2c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8007a30:	8803      	ldrh	r3, [r0, #0]
 8007a32:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8007a36:	880a      	ldrh	r2, [r1, #0]
 8007a38:	884c      	ldrh	r4, [r1, #2]
 8007a3a:	b298      	uxth	r0, r3
 8007a3c:	fba8 8903 	umull	r8, r9, r8, r3
 8007a40:	fba4 4502 	umull	r4, r5, r4, r2
 8007a44:	fba8 6700 	umull	r6, r7, r8, r0
 8007a48:	b292      	uxth	r2, r2
 8007a4a:	fb00 7709 	mla	r7, r0, r9, r7
 8007a4e:	fba4 0102 	umull	r0, r1, r4, r2
 8007a52:	fb02 1105 	mla	r1, r2, r5, r1
 8007a56:	428f      	cmp	r7, r1
 8007a58:	bf08      	it	eq
 8007a5a:	4286      	cmpeq	r6, r0
 8007a5c:	d306      	bcc.n	8007a6c <compare_index_strongest_reflector_first+0x40>
 8007a5e:	bf14      	ite	ne
 8007a60:	f04f 30ff 	movne.w	r0, #4294967295
 8007a64:	2000      	moveq	r0, #0
 8007a66:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8007a6a:	4770      	bx	lr
 8007a6c:	2001      	movs	r0, #1
 8007a6e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8007a72:	4770      	bx	lr

08007a74 <compare_index_strongest_flat_reflector_first>:
 8007a74:	8802      	ldrh	r2, [r0, #0]
 8007a76:	880b      	ldrh	r3, [r1, #0]
 8007a78:	b410      	push	{r4}
 8007a7a:	8844      	ldrh	r4, [r0, #2]
 8007a7c:	8848      	ldrh	r0, [r1, #2]
 8007a7e:	fb02 f204 	mul.w	r2, r2, r4
 8007a82:	fb03 f300 	mul.w	r3, r3, r0
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d306      	bcc.n	8007a98 <compare_index_strongest_flat_reflector_first+0x24>
 8007a8a:	bf14      	ite	ne
 8007a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8007a90:	2000      	moveq	r0, #0
 8007a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	2001      	movs	r0, #1
 8007a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <acc_alg_peak_detect_peaks>:
 8007aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	2a00      	cmp	r2, #0
 8007aa6:	d079      	beq.n	8007b9c <acc_alg_peak_detect_peaks+0xfc>
 8007aa8:	4690      	mov	r8, r2
 8007aaa:	321f      	adds	r2, #31
 8007aac:	460f      	mov	r7, r1
 8007aae:	0952      	lsrs	r2, r2, #5
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	0092      	lsls	r2, r2, #2
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	469b      	mov	fp, r3
 8007aba:	f108 39ff 	add.w	r9, r8, #4294967295
 8007abe:	f00b f937 	bl	8012d30 <memset>
 8007ac2:	fa1f fa89 	uxth.w	sl, r9
 8007ac6:	f10a 0a01 	add.w	sl, sl, #1
 8007aca:	2500      	movs	r5, #0
 8007acc:	b2ac      	uxth	r4, r5
 8007ace:	4623      	mov	r3, r4
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4658      	mov	r0, fp
 8007ad6:	f000 fbeb 	bl	80082b0 <acc_alg_threshold_get>
 8007ada:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 8007ade:	4283      	cmp	r3, r0
 8007ae0:	d90a      	bls.n	8007af8 <acc_alg_peak_detect_peaks+0x58>
 8007ae2:	096a      	lsrs	r2, r5, #5
 8007ae4:	f004 041f 	and.w	r4, r4, #31
 8007ae8:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 8007aec:	2101      	movs	r1, #1
 8007aee:	fa01 f404 	lsl.w	r4, r1, r4
 8007af2:	431c      	orrs	r4, r3
 8007af4:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
 8007af8:	3501      	adds	r5, #1
 8007afa:	45aa      	cmp	sl, r5
 8007afc:	d1e6      	bne.n	8007acc <acc_alg_peak_detect_peaks+0x2c>
 8007afe:	f1b9 0f00 	cmp.w	r9, #0
 8007b02:	d048      	beq.n	8007b96 <acc_alg_peak_detect_peaks+0xf6>
 8007b04:	f04f 0e00 	mov.w	lr, #0
 8007b08:	4670      	mov	r0, lr
 8007b0a:	46f4      	mov	ip, lr
 8007b0c:	4671      	mov	r1, lr
 8007b0e:	4674      	mov	r4, lr
 8007b10:	2501      	movs	r5, #1
 8007b12:	0962      	lsrs	r2, r4, #5
 8007b14:	f004 031f 	and.w	r3, r4, #31
 8007b18:	f857 8022 	ldr.w	r8, [r7, r2, lsl #2]
 8007b1c:	fa05 f303 	lsl.w	r3, r5, r3
 8007b20:	1c62      	adds	r2, r4, #1
 8007b22:	ea13 0308 	ands.w	r3, r3, r8
 8007b26:	b292      	uxth	r2, r2
 8007b28:	d025      	beq.n	8007b76 <acc_alg_peak_detect_peaks+0xd6>
 8007b2a:	3101      	adds	r1, #1
 8007b2c:	094b      	lsrs	r3, r1, #5
 8007b2e:	f001 011f 	and.w	r1, r1, #31
 8007b32:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8007b36:	fa05 f101 	lsl.w	r1, r5, r1
 8007b3a:	4019      	ands	r1, r3
 8007b3c:	d01b      	beq.n	8007b76 <acc_alg_peak_detect_peaks+0xd6>
 8007b3e:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 8007b42:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 8007b46:	885b      	ldrh	r3, [r3, #2]
 8007b48:	4299      	cmp	r1, r3
 8007b4a:	d31c      	bcc.n	8007b86 <acc_alg_peak_detect_peaks+0xe6>
 8007b4c:	d915      	bls.n	8007b7a <acc_alg_peak_detect_peaks+0xda>
 8007b4e:	f1bc 0f00 	cmp.w	ip, #0
 8007b52:	d012      	beq.n	8007b7a <acc_alg_peak_detect_peaks+0xda>
 8007b54:	eba2 030e 	sub.w	r3, r2, lr
 8007b58:	3301      	adds	r3, #1
 8007b5a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007b5e:	eb0e 0363 	add.w	r3, lr, r3, asr #1
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f826 3020 	strh.w	r3, [r6, r0, lsl #2]
 8007b68:	eb06 0180 	add.w	r1, r6, r0, lsl #2
 8007b6c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8007b70:	804b      	strh	r3, [r1, #2]
 8007b72:	3001      	adds	r0, #1
 8007b74:	b280      	uxth	r0, r0
 8007b76:	f04f 0c00 	mov.w	ip, #0
 8007b7a:	4591      	cmp	r9, r2
 8007b7c:	4614      	mov	r4, r2
 8007b7e:	4611      	mov	r1, r2
 8007b80:	dcc7      	bgt.n	8007b12 <acc_alg_peak_detect_peaks+0x72>
 8007b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b86:	4591      	cmp	r9, r2
 8007b88:	46a6      	mov	lr, r4
 8007b8a:	f04f 0c01 	mov.w	ip, #1
 8007b8e:	4614      	mov	r4, r2
 8007b90:	4611      	mov	r1, r2
 8007b92:	dcbe      	bgt.n	8007b12 <acc_alg_peak_detect_peaks+0x72>
 8007b94:	e7f5      	b.n	8007b82 <acc_alg_peak_detect_peaks+0xe2>
 8007b96:	4648      	mov	r0, r9
 8007b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b9c:	214e      	movs	r1, #78	; 0x4e
 8007b9e:	4801      	ldr	r0, [pc, #4]	; (8007ba4 <acc_alg_peak_detect_peaks+0x104>)
 8007ba0:	f000 fc0c 	bl	80083bc <acc_assert_fail>
 8007ba4:	080185a4 	.word	0x080185a4

08007ba8 <acc_alg_peak_merge_peaks>:
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	2a01      	cmp	r2, #1
 8007bae:	b089      	sub	sp, #36	; 0x24
 8007bb0:	468b      	mov	fp, r1
 8007bb2:	f240 80c2 	bls.w	8007d3a <acc_alg_peak_merge_peaks+0x192>
 8007bb6:	4684      	mov	ip, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	4692      	mov	sl, r2
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	f000 80bb 	beq.w	8007d38 <acc_alg_peak_merge_peaks+0x190>
 8007bc2:	2700      	movs	r7, #0
 8007bc4:	46bb      	mov	fp, r7
 8007bc6:	46be      	mov	lr, r7
 8007bc8:	463e      	mov	r6, r7
 8007bca:	eb0a 0507 	add.w	r5, sl, r7
 8007bce:	4285      	cmp	r5, r0
 8007bd0:	bfa8      	it	ge
 8007bd2:	4605      	movge	r5, r0
 8007bd4:	45b2      	cmp	sl, r6
 8007bd6:	f200 80b4 	bhi.w	8007d42 <acc_alg_peak_merge_peaks+0x19a>
 8007bda:	eba6 020a 	sub.w	r2, r6, sl
 8007bde:	b2ad      	uxth	r5, r5
 8007be0:	b292      	uxth	r2, r2
 8007be2:	42aa      	cmp	r2, r5
 8007be4:	d21c      	bcs.n	8007c20 <acc_alg_peak_merge_peaks+0x78>
 8007be6:	2100      	movs	r1, #0
 8007be8:	460c      	mov	r4, r1
 8007bea:	eb0c 0882 	add.w	r8, ip, r2, lsl #2
 8007bee:	1c53      	adds	r3, r2, #1
 8007bf0:	42b2      	cmp	r2, r6
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	d00c      	beq.n	8007c10 <acc_alg_peak_merge_peaks+0x68>
 8007bf6:	f83c 3027 	ldrh.w	r3, [ip, r7, lsl #2]
 8007bfa:	f838 9021 	ldrh.w	r9, [r8, r1, lsl #2]
 8007bfe:	eba3 0309 	sub.w	r3, r3, r9
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bfb8      	it	lt
 8007c06:	425b      	neglt	r3, r3
 8007c08:	4553      	cmp	r3, sl
 8007c0a:	bfbc      	itt	lt
 8007c0c:	3401      	addlt	r4, #1
 8007c0e:	b2a4      	uxthlt	r4, r4
 8007c10:	42aa      	cmp	r2, r5
 8007c12:	f101 0101 	add.w	r1, r1, #1
 8007c16:	d3ea      	bcc.n	8007bee <acc_alg_peak_merge_peaks+0x46>
 8007c18:	4574      	cmp	r4, lr
 8007c1a:	bf84      	itt	hi
 8007c1c:	46b3      	movhi	fp, r6
 8007c1e:	46a6      	movhi	lr, r4
 8007c20:	3701      	adds	r7, #1
 8007c22:	b2be      	uxth	r6, r7
 8007c24:	4286      	cmp	r6, r0
 8007c26:	d3d0      	bcc.n	8007bca <acc_alg_peak_merge_peaks+0x22>
 8007c28:	f1be 0f00 	cmp.w	lr, #0
 8007c2c:	f000 8084 	beq.w	8007d38 <acc_alg_peak_merge_peaks+0x190>
 8007c30:	eb0c 038b 	add.w	r3, ip, fp, lsl #2
 8007c34:	9304      	str	r3, [sp, #16]
 8007c36:	f10e 0e01 	add.w	lr, lr, #1
 8007c3a:	885b      	ldrh	r3, [r3, #2]
 8007c3c:	9302      	str	r3, [sp, #8]
 8007c3e:	fa1f f28e 	uxth.w	r2, lr
 8007c42:	f83c 302b 	ldrh.w	r3, [ip, fp, lsl #2]
 8007c46:	9207      	str	r2, [sp, #28]
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	0852      	lsrs	r2, r2, #1
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f8cd a00c 	str.w	sl, [sp, #12]
 8007c52:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8007c56:	461f      	mov	r7, r3
 8007c58:	4619      	mov	r1, r3
 8007c5a:	461c      	mov	r4, r3
 8007c5c:	4682      	mov	sl, r0
 8007c5e:	e00f      	b.n	8007c80 <acc_alg_peak_merge_peaks+0xd8>
 8007c60:	9a05      	ldr	r2, [sp, #20]
 8007c62:	eb0c 0083 	add.w	r0, ip, r3, lsl #2
 8007c66:	b9ea      	cbnz	r2, 8007ca4 <acc_alg_peak_merge_peaks+0xfc>
 8007c68:	8842      	ldrh	r2, [r0, #2]
 8007c6a:	9801      	ldr	r0, [sp, #4]
 8007c6c:	4428      	add	r0, r5
 8007c6e:	9001      	str	r0, [sp, #4]
 8007c70:	9802      	ldr	r0, [sp, #8]
 8007c72:	4410      	add	r0, r2
 8007c74:	9002      	str	r0, [sp, #8]
 8007c76:	2701      	movs	r7, #1
 8007c78:	3301      	adds	r3, #1
 8007c7a:	b29c      	uxth	r4, r3
 8007c7c:	45a2      	cmp	sl, r4
 8007c7e:	d941      	bls.n	8007d04 <acc_alg_peak_merge_peaks+0x15c>
 8007c80:	1c4a      	adds	r2, r1, #1
 8007c82:	455c      	cmp	r4, fp
 8007c84:	b292      	uxth	r2, r2
 8007c86:	f101 0402 	add.w	r4, r1, #2
 8007c8a:	9200      	str	r2, [sp, #0]
 8007c8c:	d0f4      	beq.n	8007c78 <acc_alg_peak_merge_peaks+0xd0>
 8007c8e:	9a04      	ldr	r2, [sp, #16]
 8007c90:	f83c 5023 	ldrh.w	r5, [ip, r3, lsl #2]
 8007c94:	8810      	ldrh	r0, [r2, #0]
 8007c96:	9a03      	ldr	r2, [sp, #12]
 8007c98:	1a28      	subs	r0, r5, r0
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	bfb8      	it	lt
 8007c9e:	4240      	neglt	r0, r0
 8007ca0:	4290      	cmp	r0, r2
 8007ca2:	dbdd      	blt.n	8007c60 <acc_alg_peak_merge_peaks+0xb8>
 8007ca4:	9e06      	ldr	r6, [sp, #24]
 8007ca6:	9a01      	ldr	r2, [sp, #4]
 8007ca8:	eb06 0902 	add.w	r9, r6, r2
 8007cac:	9a02      	ldr	r2, [sp, #8]
 8007cae:	eb06 0802 	add.w	r8, r6, r2
 8007cb2:	9e00      	ldr	r6, [sp, #0]
 8007cb4:	1cc8      	adds	r0, r1, #3
 8007cb6:	b280      	uxth	r0, r0
 8007cb8:	1d0a      	adds	r2, r1, #4
 8007cba:	eb0c 0e41 	add.w	lr, ip, r1, lsl #1
 8007cbe:	b2a4      	uxth	r4, r4
 8007cc0:	eb0c 0646 	add.w	r6, ip, r6, lsl #1
 8007cc4:	2f00      	cmp	r7, #0
 8007cc6:	d03f      	beq.n	8007d48 <acc_alg_peak_merge_peaks+0x1a0>
 8007cc8:	9d07      	ldr	r5, [sp, #28]
 8007cca:	fbb9 f9f5 	udiv	r9, r9, r5
 8007cce:	f82c 9011 	strh.w	r9, [ip, r1, lsl #1]
 8007cd2:	fbb8 f8f5 	udiv	r8, r8, r5
 8007cd6:	9900      	ldr	r1, [sp, #0]
 8007cd8:	9705      	str	r7, [sp, #20]
 8007cda:	f82c 8011 	strh.w	r8, [ip, r1, lsl #1]
 8007cde:	f83c 5023 	ldrh.w	r5, [ip, r3, lsl #2]
 8007ce2:	eb0c 0e44 	add.w	lr, ip, r4, lsl #1
 8007ce6:	eb0c 0640 	add.w	r6, ip, r0, lsl #1
 8007cea:	b291      	uxth	r1, r2
 8007cec:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	f8ae 5000 	strh.w	r5, [lr]
 8007cf6:	b29c      	uxth	r4, r3
 8007cf8:	8852      	ldrh	r2, [r2, #2]
 8007cfa:	8032      	strh	r2, [r6, #0]
 8007cfc:	45a2      	cmp	sl, r4
 8007cfe:	f04f 0700 	mov.w	r7, #0
 8007d02:	d8bd      	bhi.n	8007c80 <acc_alg_peak_merge_peaks+0xd8>
 8007d04:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8007d08:	b197      	cbz	r7, 8007d30 <acc_alg_peak_merge_peaks+0x188>
 8007d0a:	9b01      	ldr	r3, [sp, #4]
 8007d0c:	9c06      	ldr	r4, [sp, #24]
 8007d0e:	1c48      	adds	r0, r1, #1
 8007d10:	461a      	mov	r2, r3
 8007d12:	b280      	uxth	r0, r0
 8007d14:	9b02      	ldr	r3, [sp, #8]
 8007d16:	4422      	add	r2, r4
 8007d18:	4423      	add	r3, r4
 8007d1a:	9c07      	ldr	r4, [sp, #28]
 8007d1c:	fbb2 f2f4 	udiv	r2, r2, r4
 8007d20:	fbb3 f3f4 	udiv	r3, r3, r4
 8007d24:	f82c 2011 	strh.w	r2, [ip, r1, lsl #1]
 8007d28:	3102      	adds	r1, #2
 8007d2a:	f82c 3010 	strh.w	r3, [ip, r0, lsl #1]
 8007d2e:	b289      	uxth	r1, r1
 8007d30:	0848      	lsrs	r0, r1, #1
 8007d32:	2800      	cmp	r0, #0
 8007d34:	f47f af45 	bne.w	8007bc2 <acc_alg_peak_merge_peaks+0x1a>
 8007d38:	4683      	mov	fp, r0
 8007d3a:	4658      	mov	r0, fp
 8007d3c:	b009      	add	sp, #36	; 0x24
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	b2ad      	uxth	r5, r5
 8007d44:	2200      	movs	r2, #0
 8007d46:	e74e      	b.n	8007be6 <acc_alg_peak_merge_peaks+0x3e>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	e7cf      	b.n	8007cec <acc_alg_peak_merge_peaks+0x144>

08007d4c <acc_alg_peak_sort_peaks>:
 8007d4c:	2a03      	cmp	r2, #3
 8007d4e:	d813      	bhi.n	8007d78 <acc_alg_peak_sort_peaks+0x2c>
 8007d50:	e8df f002 	tbb	[pc, r2]
 8007d54:	02060a0e 	.word	0x02060a0e
 8007d58:	4b08      	ldr	r3, [pc, #32]	; (8007d7c <acc_alg_peak_sort_peaks+0x30>)
 8007d5a:	2204      	movs	r2, #4
 8007d5c:	f002 b966 	b.w	800a02c <acc_alg_basic_utils_bubble_sort>
 8007d60:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <acc_alg_peak_sort_peaks+0x34>)
 8007d62:	2204      	movs	r2, #4
 8007d64:	f002 b962 	b.w	800a02c <acc_alg_basic_utils_bubble_sort>
 8007d68:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <acc_alg_peak_sort_peaks+0x38>)
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	f002 b95e 	b.w	800a02c <acc_alg_basic_utils_bubble_sort>
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <acc_alg_peak_sort_peaks+0x3c>)
 8007d72:	2204      	movs	r2, #4
 8007d74:	f002 b95a 	b.w	800a02c <acc_alg_basic_utils_bubble_sort>
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	08007a75 	.word	0x08007a75
 8007d80:	08007a2d 	.word	0x08007a2d
 8007d84:	08007a15 	.word	0x08007a15
 8007d88:	080079fd 	.word	0x080079fd

08007d8c <acc_alg_peak_get_peaks>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	461d      	mov	r5, r3
 8007d90:	9b06      	ldr	r3, [sp, #24]
 8007d92:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8007d96:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	f7ff fe80 	bl	8007aa0 <acc_alg_peak_detect_peaks>
 8007da0:	4632      	mov	r2, r6
 8007da2:	4601      	mov	r1, r0
 8007da4:	4620      	mov	r0, r4
 8007da6:	f7ff feff 	bl	8007ba8 <acc_alg_peak_merge_peaks>
 8007daa:	1ebb      	subs	r3, r7, #2
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	4606      	mov	r6, r0
 8007db0:	d906      	bls.n	8007dc0 <acc_alg_peak_get_peaks+0x34>
 8007db2:	4620      	mov	r0, r4
 8007db4:	463a      	mov	r2, r7
 8007db6:	4631      	mov	r1, r6
 8007db8:	f7ff ffc8 	bl	8007d4c <acc_alg_peak_sort_peaks>
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d0f6      	beq.n	8007db2 <acc_alg_peak_get_peaks+0x26>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 8007dca:	442a      	add	r2, r5
 8007dcc:	f824 2023 	strh.w	r2, [r4, r3, lsl #2]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	4296      	cmp	r6, r2
 8007dd6:	d8f6      	bhi.n	8007dc6 <acc_alg_peak_get_peaks+0x3a>
 8007dd8:	463a      	mov	r2, r7
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f7ff ffb5 	bl	8007d4c <acc_alg_peak_sort_peaks>
 8007de2:	2300      	movs	r3, #0
 8007de4:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 8007de8:	1b52      	subs	r2, r2, r5
 8007dea:	f824 2023 	strh.w	r2, [r4, r3, lsl #2]
 8007dee:	3301      	adds	r3, #1
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	4296      	cmp	r6, r2
 8007df4:	d8f6      	bhi.n	8007de4 <acc_alg_peak_get_peaks+0x58>
 8007df6:	4630      	mov	r0, r6
 8007df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dfa:	bf00      	nop

08007dfc <apply_spatial_smoothing>:
 8007dfc:	b351      	cbz	r1, 8007e54 <apply_spatial_smoothing+0x58>
 8007dfe:	b410      	push	{r4}
 8007e00:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007e68 <apply_spatial_smoothing+0x6c>
 8007e04:	edd0 7a00 	vldr	s15, [r0]
 8007e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e0c:	1f03      	subs	r3, r0, #4
 8007e0e:	eef0 6a47 	vmov.f32	s13, s14
 8007e12:	2200      	movs	r2, #0
 8007e14:	1c54      	adds	r4, r2, #1
 8007e16:	42a1      	cmp	r1, r4
 8007e18:	dd19      	ble.n	8007e4e <apply_spatial_smoothing+0x52>
 8007e1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e22:	eef0 7a47 	vmov.f32	s15, s14
 8007e26:	b12a      	cbz	r2, 8007e34 <apply_spatial_smoothing+0x38>
 8007e28:	edd3 7a00 	vldr	s15, [r3]
 8007e2c:	edc3 6a00 	vstr	s13, [r3]
 8007e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e34:	4622      	mov	r2, r4
 8007e36:	b2a4      	uxth	r4, r4
 8007e38:	42a1      	cmp	r1, r4
 8007e3a:	f103 0304 	add.w	r3, r3, #4
 8007e3e:	d810      	bhi.n	8007e62 <apply_spatial_smoothing+0x66>
 8007e40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e44:	ed01 7a01 	vstr	s14, [r1, #-4]
 8007e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	eeb0 7a67 	vmov.f32	s14, s15
 8007e52:	e7e6      	b.n	8007e22 <apply_spatial_smoothing+0x26>
 8007e54:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8007e68 <apply_spatial_smoothing+0x6c>
 8007e58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e5c:	ed01 7a01 	vstr	s14, [r1, #-4]
 8007e60:	4770      	bx	lr
 8007e62:	eef0 6a47 	vmov.f32	s13, s14
 8007e66:	e7d5      	b.n	8007e14 <apply_spatial_smoothing+0x18>
 8007e68:	00000000 	.word	0x00000000

08007e6c <acc_alg_sparse_frame_abs_deviation_accumulator_reset>:
 8007e6c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007e70:	008a      	lsls	r2, r1, #2
 8007e72:	2100      	movs	r1, #0
 8007e74:	f00a bf5c 	b.w	8012d30 <memset>

08007e78 <acc_alg_sparse_frame_abs_deviation_accumulate>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	ed2d 8b02 	vpush	{d8}
 8007e80:	b085      	sub	sp, #20
 8007e82:	2a05      	cmp	r2, #5
 8007e84:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8007e86:	f240 80cb 	bls.w	8008020 <acc_alg_sparse_frame_abs_deviation_accumulate+0x1a8>
 8007e8a:	2c00      	cmp	r4, #0
 8007e8c:	f000 80ce 	beq.w	800802c <acc_alg_sparse_frame_abs_deviation_accumulate+0x1b4>
 8007e90:	1e55      	subs	r5, r2, #1
 8007e92:	fb02 f505 	mul.w	r5, r2, r5
 8007e96:	ee07 5a90 	vmov	s15, r5
 8007e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e9e:	1ed5      	subs	r5, r2, #3
 8007ea0:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8007ea4:	ee07 2a90 	vmov	s15, r2
 8007ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eac:	eddf 6a62 	vldr	s13, [pc, #392]	; 8008038 <acc_alg_sparse_frame_abs_deviation_accumulate+0x1c0>
 8007eb0:	edd4 2a03 	vldr	s5, [r4, #12]
 8007eb4:	ed94 2a04 	vldr	s4, [r4, #16]
 8007eb8:	ed94 3a02 	vldr	s6, [r4, #8]
 8007ebc:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8007ec0:	ee07 5a90 	vmov	s15, r5
 8007ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ec8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8007ecc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ed0:	ee74 5a62 	vsub.f32	s11, s8, s5
 8007ed4:	ee74 6a42 	vsub.f32	s13, s8, s4
 8007ed8:	ee74 3a43 	vsub.f32	s7, s8, s6
 8007edc:	eec5 0a86 	vdiv.f32	s1, s11, s12
 8007ee0:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8007ee4:	ee63 3a87 	vmul.f32	s7, s7, s14
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 8093 	beq.w	8008014 <acc_alg_sparse_frame_abs_deviation_accumulate+0x19c>
 8007eee:	ed94 1a00 	vldr	s2, [r4]
 8007ef2:	edd4 1a01 	vldr	s3, [r4, #4]
 8007ef6:	9100      	str	r1, [sp, #0]
 8007ef8:	460c      	mov	r4, r1
 8007efa:	1e59      	subs	r1, r3, #1
 8007efc:	3402      	adds	r4, #2
 8007efe:	b289      	uxth	r1, r1
 8007f00:	ee34 8a41 	vsub.f32	s16, s8, s2
 8007f04:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8007f08:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 8007f0c:	ee34 4a61 	vsub.f32	s8, s8, s3
 8007f10:	0853      	lsrs	r3, r2, #1
 8007f12:	9103      	str	r1, [sp, #12]
 8007f14:	9302      	str	r3, [sp, #8]
 8007f16:	2300      	movs	r3, #0
 8007f18:	9e00      	ldr	r6, [sp, #0]
 8007f1a:	9001      	str	r0, [sp, #4]
 8007f1c:	4699      	mov	r9, r3
 8007f1e:	4698      	mov	r8, r3
 8007f20:	469e      	mov	lr, r3
 8007f22:	469a      	mov	sl, r3
 8007f24:	4619      	mov	r1, r3
 8007f26:	8830      	ldrh	r0, [r6, #0]
 8007f28:	eba0 070e 	sub.w	r7, r0, lr
 8007f2c:	eba7 0508 	sub.w	r5, r7, r8
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	f103 0301 	add.w	r3, r3, #1
 8007f36:	eba5 0409 	sub.w	r4, r5, r9
 8007f3a:	4401      	add	r1, r0
 8007f3c:	fa1f fc83 	uxth.w	ip, r3
 8007f40:	445e      	add	r6, fp
 8007f42:	4686      	mov	lr, r0
 8007f44:	46b8      	mov	r8, r7
 8007f46:	46a9      	mov	r9, r5
 8007f48:	d903      	bls.n	8007f52 <acc_alg_sparse_frame_abs_deviation_accumulate+0xda>
 8007f4a:	2c00      	cmp	r4, #0
 8007f4c:	bfb8      	it	lt
 8007f4e:	4264      	neglt	r4, r4
 8007f50:	44a2      	add	sl, r4
 8007f52:	4562      	cmp	r2, ip
 8007f54:	d8e7      	bhi.n	8007f26 <acc_alg_sparse_frame_abs_deviation_accumulate+0xae>
 8007f56:	2400      	movs	r4, #0
 8007f58:	9b02      	ldr	r3, [sp, #8]
 8007f5a:	9801      	ldr	r0, [sp, #4]
 8007f5c:	9d00      	ldr	r5, [sp, #0]
 8007f5e:	4626      	mov	r6, r4
 8007f60:	4419      	add	r1, r3
 8007f62:	fb91 f1f2 	sdiv	r1, r1, r2
 8007f66:	882b      	ldrh	r3, [r5, #0]
 8007f68:	3401      	adds	r4, #1
 8007f6a:	1a5b      	subs	r3, r3, r1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	b2a7      	uxth	r7, r4
 8007f70:	bfb8      	it	lt
 8007f72:	425b      	neglt	r3, r3
 8007f74:	42ba      	cmp	r2, r7
 8007f76:	441e      	add	r6, r3
 8007f78:	445d      	add	r5, fp
 8007f7a:	d8f4      	bhi.n	8007f66 <acc_alg_sparse_frame_abs_deviation_accumulate+0xee>
 8007f7c:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8007f80:	ee07 1a90 	vmov	s15, r1
 8007f84:	edd0 8a00 	vldr	s17, [r0]
 8007f88:	edd0 5a01 	vldr	s11, [r0, #4]
 8007f8c:	ed90 5a02 	vldr	s10, [r0, #8]
 8007f90:	ed90 7a03 	vldr	s14, [r0, #12]
 8007f94:	ed90 6a04 	vldr	s12, [r0, #16]
 8007f98:	9b00      	ldr	r3, [sp, #0]
 8007f9a:	9903      	ldr	r1, [sp, #12]
 8007f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fa0:	ee61 8a28 	vmul.f32	s17, s2, s17
 8007fa4:	ee67 6a88 	vmul.f32	s13, s15, s16
 8007fa8:	ee61 5aa5 	vmul.f32	s11, s3, s11
 8007fac:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007fb0:	ee78 8aa6 	vadd.f32	s17, s17, s13
 8007fb4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8007fb8:	ee06 aa90 	vmov	s13, sl
 8007fbc:	ee07 6a90 	vmov	s15, r6
 8007fc0:	ee78 4ae5 	vsub.f32	s9, s17, s11
 8007fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007fcc:	eef0 4ae4 	vabs.f32	s9, s9
 8007fd0:	ee22 7a87 	vmul.f32	s14, s5, s14
 8007fd4:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8007fd8:	ee23 5a05 	vmul.f32	s10, s6, s10
 8007fdc:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8007fe0:	ee22 6a06 	vmul.f32	s12, s4, s12
 8007fe4:	ee66 6a80 	vmul.f32	s13, s13, s0
 8007fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fec:	3302      	adds	r3, #2
 8007fee:	ee34 5a85 	vadd.f32	s10, s9, s10
 8007ff2:	ee36 7a26 	vadd.f32	s14, s12, s13
 8007ff6:	4299      	cmp	r1, r3
 8007ff8:	edc0 8a00 	vstr	s17, [r0]
 8007ffc:	edc0 5a01 	vstr	s11, [r0, #4]
 8008000:	ed80 5a02 	vstr	s10, [r0, #8]
 8008004:	edc0 7a03 	vstr	s15, [r0, #12]
 8008008:	ed80 7a04 	vstr	s14, [r0, #16]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	f100 0014 	add.w	r0, r0, #20
 8008012:	d180      	bne.n	8007f16 <acc_alg_sparse_frame_abs_deviation_accumulate+0x9e>
 8008014:	2001      	movs	r0, #1
 8008016:	b005      	add	sp, #20
 8008018:	ecbd 8b02 	vpop	{d8}
 800801c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008020:	2000      	movs	r0, #0
 8008022:	b005      	add	sp, #20
 8008024:	ecbd 8b02 	vpop	{d8}
 8008028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802c:	4620      	mov	r0, r4
 800802e:	b005      	add	sp, #20
 8008030:	ecbd 8b02 	vpop	{d8}
 8008034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008038:	408f1bbd 	.word	0x408f1bbd

0800803c <acc_alg_sparse_frame_abs_deviation_to_noise_ratio>:
 800803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008040:	4688      	mov	r8, r1
 8008042:	461f      	mov	r7, r3
 8008044:	2a00      	cmp	r2, #0
 8008046:	d043      	beq.n	80080d0 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x94>
 8008048:	b3c9      	cbz	r1, 80080be <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x82>
 800804a:	ed9f 5a24 	vldr	s10, [pc, #144]	; 80080dc <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0xa0>
 800804e:	4601      	mov	r1, r0
 8008050:	463e      	mov	r6, r7
 8008052:	4615      	mov	r5, r2
 8008054:	2400      	movs	r4, #0
 8008056:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800805a:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800805e:	edd1 7a04 	vldr	s15, [r1, #16]
 8008062:	eef4 7ac6 	vcmpe.f32	s15, s12
 8008066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806a:	bfc8      	it	gt
 800806c:	ee67 7aa5 	vmulgt.f32	s15, s15, s11
 8008070:	f104 0401 	add.w	r4, r4, #1
 8008074:	bfc8      	it	gt
 8008076:	eec6 6a27 	vdivgt.f32	s13, s12, s15
 800807a:	b2a3      	uxth	r3, r4
 800807c:	bfd8      	it	le
 800807e:	eef0 6a45 	vmovle.f32	s13, s10
 8008082:	b12a      	cbz	r2, 8008090 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x54>
 8008084:	ed91 7a03 	vldr	s14, [r1, #12]
 8008088:	ee27 7a26 	vmul.f32	s14, s14, s13
 800808c:	ed85 7a00 	vstr	s14, [r5]
 8008090:	3504      	adds	r5, #4
 8008092:	b12f      	cbz	r7, 80080a0 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x64>
 8008094:	edd1 7a02 	vldr	s15, [r1, #8]
 8008098:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800809c:	edc6 7a00 	vstr	s15, [r6]
 80080a0:	4598      	cmp	r8, r3
 80080a2:	f101 0114 	add.w	r1, r1, #20
 80080a6:	f106 0604 	add.w	r6, r6, #4
 80080aa:	d8d8      	bhi.n	800805e <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x22>
 80080ac:	b93a      	cbnz	r2, 80080be <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x82>
 80080ae:	b167      	cbz	r7, 80080ca <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x8e>
 80080b0:	4638      	mov	r0, r7
 80080b2:	4641      	mov	r1, r8
 80080b4:	f7ff fea2 	bl	8007dfc <apply_spatial_smoothing>
 80080b8:	2001      	movs	r0, #1
 80080ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080be:	4610      	mov	r0, r2
 80080c0:	4641      	mov	r1, r8
 80080c2:	f7ff fe9b 	bl	8007dfc <apply_spatial_smoothing>
 80080c6:	2f00      	cmp	r7, #0
 80080c8:	d1f2      	bne.n	80080b0 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x74>
 80080ca:	2001      	movs	r0, #1
 80080cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d0:	b113      	cbz	r3, 80080d8 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x9c>
 80080d2:	2900      	cmp	r1, #0
 80080d4:	d1b9      	bne.n	800804a <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0xe>
 80080d6:	e7eb      	b.n	80080b0 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x74>
 80080d8:	4618      	mov	r0, r3
 80080da:	e7ee      	b.n	80080ba <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x7e>
 80080dc:	00000000 	.word	0x00000000

080080e0 <acc_alg_threshold_fixed_allocate>:
 80080e0:	b510      	push	{r4, lr}
 80080e2:	2215      	movs	r2, #21
 80080e4:	4604      	mov	r4, r0
 80080e6:	4904      	ldr	r1, [pc, #16]	; (80080f8 <acc_alg_threshold_fixed_allocate+0x18>)
 80080e8:	2004      	movs	r0, #4
 80080ea:	f000 fe83 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 80080ee:	b110      	cbz	r0, 80080f6 <acc_alg_threshold_fixed_allocate+0x16>
 80080f0:	2300      	movs	r3, #0
 80080f2:	8044      	strh	r4, [r0, #2]
 80080f4:	7003      	strb	r3, [r0, #0]
 80080f6:	bd10      	pop	{r4, pc}
 80080f8:	080185c8 	.word	0x080185c8

080080fc <acc_alg_threshold_fixed_free>:
 80080fc:	b138      	cbz	r0, 800810e <acc_alg_threshold_fixed_free+0x12>
 80080fe:	b510      	push	{r4, lr}
 8008100:	4604      	mov	r4, r0
 8008102:	6800      	ldr	r0, [r0, #0]
 8008104:	f000 feba 	bl	8008e7c <acc_rss_integration_mem_free>
 8008108:	2300      	movs	r3, #0
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	bd10      	pop	{r4, pc}
 800810e:	4770      	bx	lr

08008110 <acc_alg_threshold_stationary_clutter_allocate>:
 8008110:	b510      	push	{r4, lr}
 8008112:	222e      	movs	r2, #46	; 0x2e
 8008114:	ed2d 8b02 	vpush	{d8}
 8008118:	4604      	mov	r4, r0
 800811a:	4909      	ldr	r1, [pc, #36]	; (8008140 <acc_alg_threshold_stationary_clutter_allocate+0x30>)
 800811c:	2014      	movs	r0, #20
 800811e:	eeb0 8a40 	vmov.f32	s16, s0
 8008122:	f000 fe67 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 8008126:	b138      	cbz	r0, 8008138 <acc_alg_threshold_stationary_clutter_allocate+0x28>
 8008128:	2300      	movs	r3, #0
 800812a:	2201      	movs	r2, #1
 800812c:	ed80 8a03 	vstr	s16, [r0, #12]
 8008130:	8104      	strh	r4, [r0, #8]
 8008132:	7002      	strb	r2, [r0, #0]
 8008134:	6043      	str	r3, [r0, #4]
 8008136:	6103      	str	r3, [r0, #16]
 8008138:	ecbd 8b02 	vpop	{d8}
 800813c:	bd10      	pop	{r4, pc}
 800813e:	bf00      	nop
 8008140:	080185c8 	.word	0x080185c8

08008144 <acc_alg_threshold_stationary_clutter_allocate_statistics>:
 8008144:	b510      	push	{r4, lr}
 8008146:	4604      	mov	r4, r0
 8008148:	8900      	ldrh	r0, [r0, #8]
 800814a:	f001 ffe3 	bl	800a114 <acc_alg_basic_online_variance_f32_allocate>
 800814e:	6120      	str	r0, [r4, #16]
 8008150:	3000      	adds	r0, #0
 8008152:	bf18      	it	ne
 8008154:	2001      	movne	r0, #1
 8008156:	bd10      	pop	{r4, pc}

08008158 <acc_alg_threshold_stationary_clutter_deallocate_statistics>:
 8008158:	b110      	cbz	r0, 8008160 <acc_alg_threshold_stationary_clutter_deallocate_statistics+0x8>
 800815a:	3010      	adds	r0, #16
 800815c:	f001 bfac 	b.w	800a0b8 <acc_alg_basic_online_variance_f32_free>
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop

08008164 <acc_alg_threshold_stationary_clutter_free>:
 8008164:	b160      	cbz	r0, 8008180 <acc_alg_threshold_stationary_clutter_free+0x1c>
 8008166:	b510      	push	{r4, lr}
 8008168:	4604      	mov	r4, r0
 800816a:	6800      	ldr	r0, [r0, #0]
 800816c:	b118      	cbz	r0, 8008176 <acc_alg_threshold_stationary_clutter_free+0x12>
 800816e:	3010      	adds	r0, #16
 8008170:	f001 ffa2 	bl	800a0b8 <acc_alg_basic_online_variance_f32_free>
 8008174:	6820      	ldr	r0, [r4, #0]
 8008176:	f000 fe81 	bl	8008e7c <acc_rss_integration_mem_free>
 800817a:	2300      	movs	r3, #0
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd10      	pop	{r4, pc}
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop

08008184 <acc_alg_threshold_cfar_threshold_allocate>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4606      	mov	r6, r0
 8008188:	ed2d 8b02 	vpush	{d8}
 800818c:	460d      	mov	r5, r1
 800818e:	4614      	mov	r4, r2
 8008190:	4908      	ldr	r1, [pc, #32]	; (80081b4 <acc_alg_threshold_cfar_threshold_allocate+0x30>)
 8008192:	2262      	movs	r2, #98	; 0x62
 8008194:	2010      	movs	r0, #16
 8008196:	eeb0 8a40 	vmov.f32	s16, s0
 800819a:	f000 fe2b 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 800819e:	b130      	cbz	r0, 80081ae <acc_alg_threshold_cfar_threshold_allocate+0x2a>
 80081a0:	2302      	movs	r3, #2
 80081a2:	8106      	strh	r6, [r0, #8]
 80081a4:	8145      	strh	r5, [r0, #10]
 80081a6:	ed80 8a01 	vstr	s16, [r0, #4]
 80081aa:	7304      	strb	r4, [r0, #12]
 80081ac:	7003      	strb	r3, [r0, #0]
 80081ae:	ecbd 8b02 	vpop	{d8}
 80081b2:	bd70      	pop	{r4, r5, r6, pc}
 80081b4:	080185c8 	.word	0x080185c8

080081b8 <acc_alg_threshold_cfar_free>:
 80081b8:	b138      	cbz	r0, 80081ca <acc_alg_threshold_cfar_free+0x12>
 80081ba:	b510      	push	{r4, lr}
 80081bc:	4604      	mov	r4, r0
 80081be:	6800      	ldr	r0, [r0, #0]
 80081c0:	f000 fe5c 	bl	8008e7c <acc_rss_integration_mem_free>
 80081c4:	2300      	movs	r3, #0
 80081c6:	6023      	str	r3, [r4, #0]
 80081c8:	bd10      	pop	{r4, pc}
 80081ca:	4770      	bx	lr

080081cc <acc_alg_threshold_reset_threshold_recording>:
 80081cc:	b508      	push	{r3, lr}
 80081ce:	b140      	cbz	r0, 80081e2 <acc_alg_threshold_reset_threshold_recording+0x16>
 80081d0:	7803      	ldrb	r3, [r0, #0]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d000      	beq.n	80081d8 <acc_alg_threshold_reset_threshold_recording+0xc>
 80081d6:	bd08      	pop	{r3, pc}
 80081d8:	6900      	ldr	r0, [r0, #16]
 80081da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80081de:	f001 bf7f 	b.w	800a0e0 <acc_alg_basic_online_variance_f32_reset>
 80081e2:	217d      	movs	r1, #125	; 0x7d
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <acc_alg_threshold_reset_threshold_recording+0x20>)
 80081e6:	f000 f8e9 	bl	80083bc <acc_assert_fail>
 80081ea:	bf00      	nop
 80081ec:	080185c8 	.word	0x080185c8

080081f0 <acc_alg_threshold_update_threshold_recording>:
 80081f0:	b510      	push	{r4, lr}
 80081f2:	b170      	cbz	r0, 8008212 <acc_alg_threshold_update_threshold_recording+0x22>
 80081f4:	7804      	ldrb	r4, [r0, #0]
 80081f6:	2c01      	cmp	r4, #1
 80081f8:	d001      	beq.n	80081fe <acc_alg_threshold_update_threshold_recording+0xe>
 80081fa:	2001      	movs	r0, #1
 80081fc:	bd10      	pop	{r4, pc}
 80081fe:	6900      	ldr	r0, [r0, #16]
 8008200:	8883      	ldrh	r3, [r0, #4]
 8008202:	4293      	cmp	r3, r2
 8008204:	d001      	beq.n	800820a <acc_alg_threshold_update_threshold_recording+0x1a>
 8008206:	2000      	movs	r0, #0
 8008208:	bd10      	pop	{r4, pc}
 800820a:	f001 ffb1 	bl	800a170 <acc_alg_basic_online_variance_f32_update_with_uint16>
 800820e:	4620      	mov	r0, r4
 8008210:	bd10      	pop	{r4, pc}
 8008212:	218b      	movs	r1, #139	; 0x8b
 8008214:	4801      	ldr	r0, [pc, #4]	; (800821c <acc_alg_threshold_update_threshold_recording+0x2c>)
 8008216:	f000 f8d1 	bl	80083bc <acc_assert_fail>
 800821a:	bf00      	nop
 800821c:	080185c8 	.word	0x080185c8

08008220 <acc_alg_threshold_calculate_threshold_recording>:
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008222:	b348      	cbz	r0, 8008278 <acc_alg_threshold_calculate_threshold_recording+0x58>
 8008224:	7803      	ldrb	r3, [r0, #0]
 8008226:	2b01      	cmp	r3, #1
 8008228:	4604      	mov	r4, r0
 800822a:	d001      	beq.n	8008230 <acc_alg_threshold_calculate_threshold_recording+0x10>
 800822c:	2001      	movs	r0, #1
 800822e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008230:	6900      	ldr	r0, [r0, #16]
 8008232:	8887      	ldrh	r7, [r0, #4]
 8008234:	4297      	cmp	r7, r2
 8008236:	d001      	beq.n	800823c <acc_alg_threshold_calculate_threshold_recording+0x1c>
 8008238:	2000      	movs	r0, #0
 800823a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823c:	2f00      	cmp	r7, #0
 800823e:	d0f5      	beq.n	800822c <acc_alg_threshold_calculate_threshold_recording+0xc>
 8008240:	2500      	movs	r5, #0
 8008242:	1e8e      	subs	r6, r1, #2
 8008244:	4629      	mov	r1, r5
 8008246:	f001 ffc7 	bl	800a1d8 <acc_alg_basic_online_variance_f32_calculate_standard_deviation>
 800824a:	6920      	ldr	r0, [r4, #16]
 800824c:	edd4 7a03 	vldr	s15, [r4, #12]
 8008250:	6883      	ldr	r3, [r0, #8]
 8008252:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008256:	ee20 0a27 	vmul.f32	s0, s0, s15
 800825a:	edd3 7a00 	vldr	s15, [r3]
 800825e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008262:	3501      	adds	r5, #1
 8008264:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8008268:	b2a9      	uxth	r1, r5
 800826a:	ee10 3a10 	vmov	r3, s0
 800826e:	428f      	cmp	r7, r1
 8008270:	f826 3f02 	strh.w	r3, [r6, #2]!
 8008274:	d8e7      	bhi.n	8008246 <acc_alg_threshold_calculate_threshold_recording+0x26>
 8008276:	e7d9      	b.n	800822c <acc_alg_threshold_calculate_threshold_recording+0xc>
 8008278:	219f      	movs	r1, #159	; 0x9f
 800827a:	4801      	ldr	r0, [pc, #4]	; (8008280 <acc_alg_threshold_calculate_threshold_recording+0x60>)
 800827c:	f000 f89e 	bl	80083bc <acc_assert_fail>
 8008280:	080185c8 	.word	0x080185c8

08008284 <acc_alg_threshold_set_threshold_recording>:
 8008284:	b510      	push	{r4, lr}
 8008286:	b160      	cbz	r0, 80082a2 <acc_alg_threshold_set_threshold_recording+0x1e>
 8008288:	7803      	ldrb	r3, [r0, #0]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d001      	beq.n	8008292 <acc_alg_threshold_set_threshold_recording+0xe>
 800828e:	2001      	movs	r0, #1
 8008290:	bd10      	pop	{r4, pc}
 8008292:	8904      	ldrh	r4, [r0, #8]
 8008294:	4294      	cmp	r4, r2
 8008296:	d001      	beq.n	800829c <acc_alg_threshold_set_threshold_recording+0x18>
 8008298:	2000      	movs	r0, #0
 800829a:	bd10      	pop	{r4, pc}
 800829c:	6041      	str	r1, [r0, #4]
 800829e:	4618      	mov	r0, r3
 80082a0:	bd10      	pop	{r4, pc}
 80082a2:	21b8      	movs	r1, #184	; 0xb8
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <acc_alg_threshold_set_threshold_recording+0x28>)
 80082a6:	f000 f889 	bl	80083bc <acc_assert_fail>
 80082aa:	bf00      	nop
 80082ac:	080185c8 	.word	0x080185c8

080082b0 <acc_alg_threshold_get>:
 80082b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d074      	beq.n	80083a2 <acc_alg_threshold_get+0xf2>
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d224      	bcs.n	8008306 <acc_alg_threshold_get+0x56>
 80082bc:	7804      	ldrb	r4, [r0, #0]
 80082be:	2c01      	cmp	r4, #1
 80082c0:	d024      	beq.n	800830c <acc_alg_threshold_get+0x5c>
 80082c2:	d32e      	bcc.n	8008322 <acc_alg_threshold_get+0x72>
 80082c4:	2c02      	cmp	r4, #2
 80082c6:	d11e      	bne.n	8008306 <acc_alg_threshold_get+0x56>
 80082c8:	8905      	ldrh	r5, [r0, #8]
 80082ca:	8946      	ldrh	r6, [r0, #10]
 80082cc:	7b07      	ldrb	r7, [r0, #12]
 80082ce:	3501      	adds	r5, #1
 80082d0:	086d      	lsrs	r5, r5, #1
 80082d2:	1974      	adds	r4, r6, r5
 80082d4:	b2a4      	uxth	r4, r4
 80082d6:	b9ff      	cbnz	r7, 8008318 <acc_alg_threshold_get+0x68>
 80082d8:	42a3      	cmp	r3, r4
 80082da:	d31f      	bcc.n	800831c <acc_alg_threshold_get+0x6c>
 80082dc:	1b92      	subs	r2, r2, r6
 80082de:	1b52      	subs	r2, r2, r5
 80082e0:	b292      	uxth	r2, r2
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d21a      	bcs.n	800831c <acc_alg_threshold_get+0x6c>
 80082e6:	1b5a      	subs	r2, r3, r5
 80082e8:	1b92      	subs	r2, r2, r6
 80082ea:	b292      	uxth	r2, r2
 80082ec:	eb02 0806 	add.w	r8, r2, r6
 80082f0:	4542      	cmp	r2, r8
 80082f2:	db20      	blt.n	8008336 <acc_alg_threshold_get+0x86>
 80082f4:	3301      	adds	r3, #1
 80082f6:	441d      	add	r5, r3
 80082f8:	b2ad      	uxth	r5, r5
 80082fa:	442e      	add	r6, r5
 80082fc:	42ae      	cmp	r6, r5
 80082fe:	dd54      	ble.n	80083aa <acc_alg_threshold_get+0xfa>
 8008300:	2400      	movs	r4, #0
 8008302:	46a4      	mov	ip, r4
 8008304:	e029      	b.n	800835a <acc_alg_threshold_get+0xaa>
 8008306:	2000      	movs	r0, #0
 8008308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800830c:	6840      	ldr	r0, [r0, #4]
 800830e:	2800      	cmp	r0, #0
 8008310:	d0fa      	beq.n	8008308 <acc_alg_threshold_get+0x58>
 8008312:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8008316:	e7f7      	b.n	8008308 <acc_alg_threshold_get+0x58>
 8008318:	42a3      	cmp	r3, r4
 800831a:	d205      	bcs.n	8008328 <acc_alg_threshold_get+0x78>
 800831c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008320:	e7f2      	b.n	8008308 <acc_alg_threshold_get+0x58>
 8008322:	8840      	ldrh	r0, [r0, #2]
 8008324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008328:	1b5a      	subs	r2, r3, r5
 800832a:	1b92      	subs	r2, r2, r6
 800832c:	b292      	uxth	r2, r2
 800832e:	eb06 0802 	add.w	r8, r6, r2
 8008332:	4590      	cmp	r8, r2
 8008334:	dd39      	ble.n	80083aa <acc_alg_threshold_get+0xfa>
 8008336:	2400      	movs	r4, #0
 8008338:	46a4      	mov	ip, r4
 800833a:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
 800833e:	3201      	adds	r2, #1
 8008340:	b292      	uxth	r2, r2
 8008342:	3401      	adds	r4, #1
 8008344:	4590      	cmp	r8, r2
 8008346:	b2a4      	uxth	r4, r4
 8008348:	44f4      	add	ip, lr
 800834a:	dcf6      	bgt.n	800833a <acc_alg_threshold_get+0x8a>
 800834c:	b977      	cbnz	r7, 800836c <acc_alg_threshold_get+0xbc>
 800834e:	3301      	adds	r3, #1
 8008350:	441d      	add	r5, r3
 8008352:	b2ad      	uxth	r5, r5
 8008354:	442e      	add	r6, r5
 8008356:	42b5      	cmp	r5, r6
 8008358:	da08      	bge.n	800836c <acc_alg_threshold_get+0xbc>
 800835a:	f831 3015 	ldrh.w	r3, [r1, r5, lsl #1]
 800835e:	3501      	adds	r5, #1
 8008360:	b2ad      	uxth	r5, r5
 8008362:	3401      	adds	r4, #1
 8008364:	42b5      	cmp	r5, r6
 8008366:	b2a4      	uxth	r4, r4
 8008368:	449c      	add	ip, r3
 800836a:	dbf6      	blt.n	800835a <acc_alg_threshold_get+0xaa>
 800836c:	b1ec      	cbz	r4, 80083aa <acc_alg_threshold_get+0xfa>
 800836e:	fbbc f4f4 	udiv	r4, ip, r4
 8008372:	b2a4      	uxth	r4, r4
 8008374:	edd0 6a01 	vldr	s13, [r0, #4]
 8008378:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80083b4 <acc_alg_threshold_get+0x104>
 800837c:	ee07 4a10 	vmov	s14, r4
 8008380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008384:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800838c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008390:	ddc4      	ble.n	800831c <acc_alg_threshold_get+0x6c>
 8008392:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800839a:	ee17 3a90 	vmov	r3, s15
 800839e:	b298      	uxth	r0, r3
 80083a0:	e7b2      	b.n	8008308 <acc_alg_threshold_get+0x58>
 80083a2:	21cc      	movs	r1, #204	; 0xcc
 80083a4:	4804      	ldr	r0, [pc, #16]	; (80083b8 <acc_alg_threshold_get+0x108>)
 80083a6:	f000 f809 	bl	80083bc <acc_assert_fail>
 80083aa:	f240 1111 	movw	r1, #273	; 0x111
 80083ae:	4802      	ldr	r0, [pc, #8]	; (80083b8 <acc_alg_threshold_get+0x108>)
 80083b0:	f000 f804 	bl	80083bc <acc_assert_fail>
 80083b4:	477fff00 	.word	0x477fff00
 80083b8:	080185c8 	.word	0x080185c8

080083bc <acc_assert_fail>:
 80083bc:	b500      	push	{lr}
 80083be:	b083      	sub	sp, #12
 80083c0:	4a06      	ldr	r2, [pc, #24]	; (80083dc <acc_assert_fail+0x20>)
 80083c2:	9100      	str	r1, [sp, #0]
 80083c4:	4603      	mov	r3, r0
 80083c6:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80083c8:	4905      	ldr	r1, [pc, #20]	; (80083e0 <acc_assert_fail+0x24>)
 80083ca:	4a06      	ldr	r2, [pc, #24]	; (80083e4 <acc_assert_fail+0x28>)
 80083cc:	2000      	movs	r0, #0
 80083ce:	47a0      	blx	r4
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <acc_assert_fail+0x2c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	b103      	cbz	r3, 80083d8 <acc_assert_fail+0x1c>
 80083d6:	4798      	blx	r3
 80083d8:	e7fe      	b.n	80083d8 <acc_assert_fail+0x1c>
 80083da:	bf00      	nop
 80083dc:	20001628 	.word	0x20001628
 80083e0:	0801860c 	.word	0x0801860c
 80083e4:	080185f4 	.word	0x080185f4
 80083e8:	2000159c 	.word	0x2000159c

080083ec <configuration_is_valid>:
 80083ec:	b108      	cbz	r0, 80083f2 <configuration_is_valid+0x6>
 80083ee:	2001      	movs	r0, #1
 80083f0:	4770      	bx	lr
 80083f2:	b510      	push	{r4, lr}
 80083f4:	4604      	mov	r4, r0
 80083f6:	f000 fd53 	bl	8008ea0 <acc_rss_integration_log_level>
 80083fa:	b130      	cbz	r0, 800840a <configuration_is_valid+0x1e>
 80083fc:	4b03      	ldr	r3, [pc, #12]	; (800840c <configuration_is_valid+0x20>)
 80083fe:	4a04      	ldr	r2, [pc, #16]	; (8008410 <configuration_is_valid+0x24>)
 8008400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008402:	4904      	ldr	r1, [pc, #16]	; (8008414 <configuration_is_valid+0x28>)
 8008404:	2001      	movs	r0, #1
 8008406:	4798      	blx	r3
 8008408:	4620      	mov	r0, r4
 800840a:	bd10      	pop	{r4, pc}
 800840c:	20001628 	.word	0x20001628
 8008410:	08018824 	.word	0x08018824
 8008414:	08018840 	.word	0x08018840

08008418 <acc_base_configuration_sensor_get>:
 8008418:	b510      	push	{r4, lr}
 800841a:	4604      	mov	r4, r0
 800841c:	f7ff ffe6 	bl	80083ec <configuration_is_valid>
 8008420:	b100      	cbz	r0, 8008424 <acc_base_configuration_sensor_get+0xc>
 8008422:	68e0      	ldr	r0, [r4, #12]
 8008424:	bd10      	pop	{r4, pc}
 8008426:	bf00      	nop

08008428 <acc_base_configuration_sensor_set>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	460d      	mov	r5, r1
 800842c:	4604      	mov	r4, r0
 800842e:	f7ff ffdd 	bl	80083ec <configuration_is_valid>
 8008432:	b100      	cbz	r0, 8008436 <acc_base_configuration_sensor_set+0xe>
 8008434:	60e5      	str	r5, [r4, #12]
 8008436:	bd38      	pop	{r3, r4, r5, pc}

08008438 <acc_base_configuration_requested_start_get>:
 8008438:	b510      	push	{r4, lr}
 800843a:	4604      	mov	r4, r0
 800843c:	f7ff ffd6 	bl	80083ec <configuration_is_valid>
 8008440:	b110      	cbz	r0, 8008448 <acc_base_configuration_requested_start_get+0x10>
 8008442:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8008446:	bd10      	pop	{r4, pc}
 8008448:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008450 <acc_base_configuration_requested_start_get+0x18>
 800844c:	bd10      	pop	{r4, pc}
 800844e:	bf00      	nop
 8008450:	00000000 	.word	0x00000000

08008454 <acc_base_configuration_requested_start_set>:
 8008454:	b510      	push	{r4, lr}
 8008456:	ed2d 8b02 	vpush	{d8}
 800845a:	4604      	mov	r4, r0
 800845c:	eeb0 8a40 	vmov.f32	s16, s0
 8008460:	f7ff ffc4 	bl	80083ec <configuration_is_valid>
 8008464:	b108      	cbz	r0, 800846a <acc_base_configuration_requested_start_set+0x16>
 8008466:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 800846a:	ecbd 8b02 	vpop	{d8}
 800846e:	bd10      	pop	{r4, pc}

08008470 <acc_base_configuration_requested_length_get>:
 8008470:	b510      	push	{r4, lr}
 8008472:	4604      	mov	r4, r0
 8008474:	f7ff ffba 	bl	80083ec <configuration_is_valid>
 8008478:	b110      	cbz	r0, 8008480 <acc_base_configuration_requested_length_get+0x10>
 800847a:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 800847e:	bd10      	pop	{r4, pc}
 8008480:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008488 <acc_base_configuration_requested_length_get+0x18>
 8008484:	bd10      	pop	{r4, pc}
 8008486:	bf00      	nop
 8008488:	00000000 	.word	0x00000000

0800848c <acc_base_configuration_requested_length_set>:
 800848c:	b510      	push	{r4, lr}
 800848e:	ed2d 8b02 	vpush	{d8}
 8008492:	4604      	mov	r4, r0
 8008494:	eeb0 8a40 	vmov.f32	s16, s0
 8008498:	f7ff ffa8 	bl	80083ec <configuration_is_valid>
 800849c:	b108      	cbz	r0, 80084a2 <acc_base_configuration_requested_length_set+0x16>
 800849e:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 80084a2:	ecbd 8b02 	vpop	{d8}
 80084a6:	bd10      	pop	{r4, pc}

080084a8 <acc_base_configuration_repetition_mode_on_demand_set>:
 80084a8:	b510      	push	{r4, lr}
 80084aa:	4604      	mov	r4, r0
 80084ac:	f7ff ff9e 	bl	80083ec <configuration_is_valid>
 80084b0:	b108      	cbz	r0, 80084b6 <acc_base_configuration_repetition_mode_on_demand_set+0xe>
 80084b2:	2301      	movs	r3, #1
 80084b4:	7123      	strb	r3, [r4, #4]
 80084b6:	bd10      	pop	{r4, pc}

080084b8 <acc_base_configuration_power_save_mode_get>:
 80084b8:	b510      	push	{r4, lr}
 80084ba:	4604      	mov	r4, r0
 80084bc:	f7ff ff96 	bl	80083ec <configuration_is_valid>
 80084c0:	b100      	cbz	r0, 80084c4 <acc_base_configuration_power_save_mode_get+0xc>
 80084c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80084c4:	bd10      	pop	{r4, pc}
 80084c6:	bf00      	nop

080084c8 <acc_base_configuration_power_save_mode_set>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	460d      	mov	r5, r1
 80084cc:	4604      	mov	r4, r0
 80084ce:	f7ff ff8d 	bl	80083ec <configuration_is_valid>
 80084d2:	b100      	cbz	r0, 80084d6 <acc_base_configuration_power_save_mode_set+0xe>
 80084d4:	63a5      	str	r5, [r4, #56]	; 0x38
 80084d6:	bd38      	pop	{r3, r4, r5, pc}

080084d8 <acc_base_configuration_receiver_gain_get>:
 80084d8:	b510      	push	{r4, lr}
 80084da:	4604      	mov	r4, r0
 80084dc:	f7ff ff86 	bl	80083ec <configuration_is_valid>
 80084e0:	b168      	cbz	r0, 80084fe <acc_base_configuration_receiver_gain_get+0x26>
 80084e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ec:	eef3 6a06 	vmov.f32	s13, #54	; 0x41b00000  22.0
 80084f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80084f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80084f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008502:	bd10      	pop	{r4, pc}

08008504 <acc_base_configuration_receiver_gain_set>:
 8008504:	b510      	push	{r4, lr}
 8008506:	ed2d 8b02 	vpush	{d8}
 800850a:	4604      	mov	r4, r0
 800850c:	eeb0 8a40 	vmov.f32	s16, s0
 8008510:	f7ff ff6c 	bl	80083ec <configuration_is_valid>
 8008514:	b170      	cbz	r0, 8008534 <acc_base_configuration_receiver_gain_set+0x30>
 8008516:	eef3 7a06 	vmov.f32	s15, #54	; 0x41b00000  22.0
 800851a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800851e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008522:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8008526:	ee77 7a87 	vadd.f32	s15, s15, s14
 800852a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800852e:	ee17 3a90 	vmov	r3, s15
 8008532:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008534:	ecbd 8b02 	vpop	{d8}
 8008538:	bd10      	pop	{r4, pc}
 800853a:	bf00      	nop

0800853c <acc_base_configuration_tx_disable_get>:
 800853c:	b510      	push	{r4, lr}
 800853e:	4604      	mov	r4, r0
 8008540:	f7ff ff54 	bl	80083ec <configuration_is_valid>
 8008544:	b108      	cbz	r0, 800854a <acc_base_configuration_tx_disable_get+0xe>
 8008546:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 800854a:	bd10      	pop	{r4, pc}

0800854c <acc_base_configuration_tx_disable_set>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	460d      	mov	r5, r1
 8008550:	4604      	mov	r4, r0
 8008552:	f7ff ff4b 	bl	80083ec <configuration_is_valid>
 8008556:	b108      	cbz	r0, 800855c <acc_base_configuration_tx_disable_set+0x10>
 8008558:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 800855c:	bd38      	pop	{r3, r4, r5, pc}
 800855e:	bf00      	nop

08008560 <acc_base_configuration_decrease_tx_emission_get>:
 8008560:	b510      	push	{r4, lr}
 8008562:	4604      	mov	r4, r0
 8008564:	f7ff ff42 	bl	80083ec <configuration_is_valid>
 8008568:	b108      	cbz	r0, 800856e <acc_base_configuration_decrease_tx_emission_get+0xe>
 800856a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800856e:	bd10      	pop	{r4, pc}

08008570 <acc_base_configuration_decrease_tx_emission_set>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	460d      	mov	r5, r1
 8008574:	4604      	mov	r4, r0
 8008576:	f7ff ff39 	bl	80083ec <configuration_is_valid>
 800857a:	b108      	cbz	r0, 8008580 <acc_base_configuration_decrease_tx_emission_set+0x10>
 800857c:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 8008580:	bd38      	pop	{r3, r4, r5, pc}
 8008582:	bf00      	nop

08008584 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8008584:	b510      	push	{r4, lr}
 8008586:	4604      	mov	r4, r0
 8008588:	f7ff ff30 	bl	80083ec <configuration_is_valid>
 800858c:	b108      	cbz	r0, 8008592 <acc_base_configuration_hw_accelerated_average_samples_get+0xe>
 800858e:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8008592:	bd10      	pop	{r4, pc}

08008594 <acc_base_configuration_hw_accelerated_average_samples_set>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	460d      	mov	r5, r1
 8008598:	4604      	mov	r4, r0
 800859a:	f7ff ff27 	bl	80083ec <configuration_is_valid>
 800859e:	b100      	cbz	r0, 80085a2 <acc_base_configuration_hw_accelerated_average_samples_set+0xe>
 80085a0:	87a5      	strh	r5, [r4, #60]	; 0x3c
 80085a2:	bd38      	pop	{r3, r4, r5, pc}

080085a4 <acc_base_configuration_radar_engine_creation_set>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	460d      	mov	r5, r1
 80085a8:	4604      	mov	r4, r0
 80085aa:	f7ff ff1f 	bl	80083ec <configuration_is_valid>
 80085ae:	b100      	cbz	r0, 80085b2 <acc_base_configuration_radar_engine_creation_set+0xe>
 80085b0:	6025      	str	r5, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}

080085b4 <acc_base_configuration_phase_compensation_alpha_get>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	4604      	mov	r4, r0
 80085b8:	f7ff ff18 	bl	80083ec <configuration_is_valid>
 80085bc:	b110      	cbz	r0, 80085c4 <acc_base_configuration_phase_compensation_alpha_get+0x10>
 80085be:	ed94 0a04 	vldr	s0, [r4, #16]
 80085c2:	bd10      	pop	{r4, pc}
 80085c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80085cc <acc_base_configuration_phase_compensation_alpha_get+0x18>
 80085c8:	bd10      	pop	{r4, pc}
 80085ca:	bf00      	nop
 80085cc:	00000000 	.word	0x00000000

080085d0 <acc_base_configuration_phase_compensation_alpha_set>:
 80085d0:	b510      	push	{r4, lr}
 80085d2:	ed2d 8b02 	vpush	{d8}
 80085d6:	4604      	mov	r4, r0
 80085d8:	eeb0 8a40 	vmov.f32	s16, s0
 80085dc:	f7ff ff06 	bl	80083ec <configuration_is_valid>
 80085e0:	b108      	cbz	r0, 80085e6 <acc_base_configuration_phase_compensation_alpha_set+0x16>
 80085e2:	ed84 8a04 	vstr	s16, [r4, #16]
 80085e6:	ecbd 8b02 	vpop	{d8}
 80085ea:	bd10      	pop	{r4, pc}

080085ec <acc_base_configuration_time_domain_low_pass_filter_alpha_get>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	460d      	mov	r5, r1
 80085f0:	4604      	mov	r4, r0
 80085f2:	f7ff fefb 	bl	80083ec <configuration_is_valid>
 80085f6:	b118      	cbz	r0, 8008600 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0x14>
 80085f8:	b10d      	cbz	r5, 80085fe <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0x12>
 80085fa:	6963      	ldr	r3, [r4, #20]
 80085fc:	602b      	str	r3, [r5, #0]
 80085fe:	7e20      	ldrb	r0, [r4, #24]
 8008600:	bd38      	pop	{r3, r4, r5, pc}
 8008602:	bf00      	nop

08008604 <acc_base_configuration_time_domain_low_pass_filter_alpha_set>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	ed2d 8b02 	vpush	{d8}
 800860a:	460d      	mov	r5, r1
 800860c:	eeb0 8a40 	vmov.f32	s16, s0
 8008610:	4604      	mov	r4, r0
 8008612:	f7ff feeb 	bl	80083ec <configuration_is_valid>
 8008616:	b110      	cbz	r0, 800861e <acc_base_configuration_time_domain_low_pass_filter_alpha_set+0x1a>
 8008618:	ed84 8a05 	vstr	s16, [r4, #20]
 800861c:	7625      	strb	r5, [r4, #24]
 800861e:	ecbd 8b02 	vpop	{d8}
 8008622:	bd38      	pop	{r3, r4, r5, pc}

08008624 <acc_base_configuration_filter_demodulated_data_get>:
 8008624:	b510      	push	{r4, lr}
 8008626:	4604      	mov	r4, r0
 8008628:	f7ff fee0 	bl	80083ec <configuration_is_valid>
 800862c:	b100      	cbz	r0, 8008630 <acc_base_configuration_filter_demodulated_data_get+0xc>
 800862e:	7f20      	ldrb	r0, [r4, #28]
 8008630:	bd10      	pop	{r4, pc}
 8008632:	bf00      	nop

08008634 <acc_base_configuration_filter_demodulated_data_set>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	460d      	mov	r5, r1
 8008638:	4604      	mov	r4, r0
 800863a:	f7ff fed7 	bl	80083ec <configuration_is_valid>
 800863e:	b100      	cbz	r0, 8008642 <acc_base_configuration_filter_demodulated_data_set+0xe>
 8008640:	7725      	strb	r5, [r4, #28]
 8008642:	bd38      	pop	{r3, r4, r5, pc}

08008644 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>:
 8008644:	b510      	push	{r4, lr}
 8008646:	4604      	mov	r4, r0
 8008648:	f7ff fed0 	bl	80083ec <configuration_is_valid>
 800864c:	b110      	cbz	r0, 8008654 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x10>
 800864e:	ed94 0a08 	vldr	s0, [r4, #32]
 8008652:	bd10      	pop	{r4, pc}
 8008654:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800865c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x18>
 8008658:	bd10      	pop	{r4, pc}
 800865a:	bf00      	nop
 800865c:	00000000 	.word	0x00000000

08008660 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>:
 8008660:	b510      	push	{r4, lr}
 8008662:	ed2d 8b02 	vpush	{d8}
 8008666:	4604      	mov	r4, r0
 8008668:	eeb0 8a40 	vmov.f32	s16, s0
 800866c:	f7ff febe 	bl	80083ec <configuration_is_valid>
 8008670:	b108      	cbz	r0, 8008676 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set+0x16>
 8008672:	ed84 8a08 	vstr	s16, [r4, #32]
 8008676:	ecbd 8b02 	vpop	{d8}
 800867a:	bd10      	pop	{r4, pc}

0800867c <acc_base_configuration_point_start_get>:
 800867c:	b510      	push	{r4, lr}
 800867e:	4604      	mov	r4, r0
 8008680:	f7ff feb4 	bl	80083ec <configuration_is_valid>
 8008684:	b108      	cbz	r0, 800868a <acc_base_configuration_point_start_get+0xe>
 8008686:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 800868a:	bd10      	pop	{r4, pc}

0800868c <acc_base_configuration_point_length_get>:
 800868c:	b510      	push	{r4, lr}
 800868e:	4604      	mov	r4, r0
 8008690:	f7ff feac 	bl	80083ec <configuration_is_valid>
 8008694:	b108      	cbz	r0, 800869a <acc_base_configuration_point_length_get+0xe>
 8008696:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 800869a:	bd10      	pop	{r4, pc}

0800869c <acc_base_configuration_point_range_set>:
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	460e      	mov	r6, r1
 80086a0:	4615      	mov	r5, r2
 80086a2:	4604      	mov	r4, r0
 80086a4:	f7ff fea2 	bl	80083ec <configuration_is_valid>
 80086a8:	b108      	cbz	r0, 80086ae <acc_base_configuration_point_range_set+0x12>
 80086aa:	86a6      	strh	r6, [r4, #52]	; 0x34
 80086ac:	86e5      	strh	r5, [r4, #54]	; 0x36
 80086ae:	bd70      	pop	{r4, r5, r6, pc}

080086b0 <acc_base_configuration_repetition_mode_get>:
 80086b0:	b510      	push	{r4, lr}
 80086b2:	4604      	mov	r4, r0
 80086b4:	f7ff fe9a 	bl	80083ec <configuration_is_valid>
 80086b8:	b100      	cbz	r0, 80086bc <acc_base_configuration_repetition_mode_get+0xc>
 80086ba:	7920      	ldrb	r0, [r4, #4]
 80086bc:	bd10      	pop	{r4, pc}
 80086be:	bf00      	nop

080086c0 <acc_base_configuration_update_rate_get>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	4604      	mov	r4, r0
 80086c4:	f7ff fe92 	bl	80083ec <configuration_is_valid>
 80086c8:	b148      	cbz	r0, 80086de <acc_base_configuration_update_rate_get+0x1e>
 80086ca:	7923      	ldrb	r3, [r4, #4]
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d806      	bhi.n	80086de <acc_base_configuration_update_rate_get+0x1e>
 80086d0:	e8df f003 	tbb	[pc, r3]
 80086d4:	02020808 	.word	0x02020808
 80086d8:	ed94 0a02 	vldr	s0, [r4, #8]
 80086dc:	bd10      	pop	{r4, pc}
 80086de:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80086ec <acc_base_configuration_update_rate_get+0x2c>
 80086e2:	bd10      	pop	{r4, pc}
 80086e4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80086f0 <acc_base_configuration_update_rate_get+0x30>
 80086e8:	bd10      	pop	{r4, pc}
 80086ea:	bf00      	nop
 80086ec:	7fc00000 	.word	0x7fc00000
 80086f0:	7f800000 	.word	0x7f800000

080086f4 <acc_base_configuration_gain_get>:
 80086f4:	b510      	push	{r4, lr}
 80086f6:	4604      	mov	r4, r0
 80086f8:	f7ff fe78 	bl	80083ec <configuration_is_valid>
 80086fc:	b100      	cbz	r0, 8008700 <acc_base_configuration_gain_get+0xc>
 80086fe:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8008700:	bd10      	pop	{r4, pc}
 8008702:	bf00      	nop

08008704 <acc_base_configuration_gain_set>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	460d      	mov	r5, r1
 8008708:	4604      	mov	r4, r0
 800870a:	f7ff fe6f 	bl	80083ec <configuration_is_valid>
 800870e:	b100      	cbz	r0, 8008712 <acc_base_configuration_gain_set+0xe>
 8008710:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8008712:	bd38      	pop	{r3, r4, r5, pc}

08008714 <acc_base_configuration_integrator_get>:
 8008714:	b510      	push	{r4, lr}
 8008716:	4604      	mov	r4, r0
 8008718:	f7ff fe68 	bl	80083ec <configuration_is_valid>
 800871c:	b108      	cbz	r0, 8008722 <acc_base_configuration_integrator_get+0xe>
 800871e:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 8008722:	bd10      	pop	{r4, pc}

08008724 <acc_base_configuration_integrator_set>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	460d      	mov	r5, r1
 8008728:	4604      	mov	r4, r0
 800872a:	f7ff fe5f 	bl	80083ec <configuration_is_valid>
 800872e:	b108      	cbz	r0, 8008734 <acc_base_configuration_integrator_set+0x10>
 8008730:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 8008734:	bd38      	pop	{r3, r4, r5, pc}
 8008736:	bf00      	nop

08008738 <acc_base_configuration_wg_duration_get>:
 8008738:	b510      	push	{r4, lr}
 800873a:	4604      	mov	r4, r0
 800873c:	f7ff fe56 	bl	80083ec <configuration_is_valid>
 8008740:	b108      	cbz	r0, 8008746 <acc_base_configuration_wg_duration_get+0xe>
 8008742:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8008746:	bd10      	pop	{r4, pc}

08008748 <acc_base_configuration_wg_duration_set>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	460d      	mov	r5, r1
 800874c:	4604      	mov	r4, r0
 800874e:	f7ff fe4d 	bl	80083ec <configuration_is_valid>
 8008752:	b108      	cbz	r0, 8008758 <acc_base_configuration_wg_duration_set+0x10>
 8008754:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 8008758:	bd38      	pop	{r3, r4, r5, pc}
 800875a:	bf00      	nop

0800875c <acc_base_configuration_integrator_ramp_up_get>:
 800875c:	b510      	push	{r4, lr}
 800875e:	4604      	mov	r4, r0
 8008760:	f7ff fe44 	bl	80083ec <configuration_is_valid>
 8008764:	b108      	cbz	r0, 800876a <acc_base_configuration_integrator_ramp_up_get+0xe>
 8008766:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 800876a:	bd10      	pop	{r4, pc}

0800876c <acc_base_configuration_integrator_ramp_up_set>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	460d      	mov	r5, r1
 8008770:	4604      	mov	r4, r0
 8008772:	f7ff fe3b 	bl	80083ec <configuration_is_valid>
 8008776:	b108      	cbz	r0, 800877c <acc_base_configuration_integrator_ramp_up_set+0x10>
 8008778:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 800877c:	bd38      	pop	{r3, r4, r5, pc}
 800877e:	bf00      	nop

08008780 <acc_base_configuration_sampling_mode_get>:
 8008780:	b510      	push	{r4, lr}
 8008782:	4604      	mov	r4, r0
 8008784:	f7ff fe32 	bl	80083ec <configuration_is_valid>
 8008788:	b108      	cbz	r0, 800878e <acc_base_configuration_sampling_mode_get+0xe>
 800878a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
 800878e:	bd10      	pop	{r4, pc}

08008790 <acc_base_configuration_sampling_mode_set>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	460d      	mov	r5, r1
 8008794:	4604      	mov	r4, r0
 8008796:	f7ff fe29 	bl	80083ec <configuration_is_valid>
 800879a:	b108      	cbz	r0, 80087a0 <acc_base_configuration_sampling_mode_set+0x10>
 800879c:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
 80087a0:	bd38      	pop	{r3, r4, r5, pc}
 80087a2:	bf00      	nop

080087a4 <acc_base_configuration_sweep_type_debug_set>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	460d      	mov	r5, r1
 80087a8:	4604      	mov	r4, r0
 80087aa:	f7ff fe1f 	bl	80083ec <configuration_is_valid>
 80087ae:	b108      	cbz	r0, 80087b4 <acc_base_configuration_sweep_type_debug_set+0x10>
 80087b0:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 80087b4:	bd38      	pop	{r3, r4, r5, pc}
 80087b6:	bf00      	nop

080087b8 <acc_base_configuration_sweep_type_debug_get>:
 80087b8:	b510      	push	{r4, lr}
 80087ba:	4604      	mov	r4, r0
 80087bc:	f7ff fe16 	bl	80083ec <configuration_is_valid>
 80087c0:	b108      	cbz	r0, 80087c6 <acc_base_configuration_sweep_type_debug_get+0xe>
 80087c2:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 80087c6:	bd10      	pop	{r4, pc}

080087c8 <acc_base_configuration_use_point_range_set>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	460d      	mov	r5, r1
 80087cc:	4604      	mov	r4, r0
 80087ce:	f7ff fe0d 	bl	80083ec <configuration_is_valid>
 80087d2:	b108      	cbz	r0, 80087d8 <acc_base_configuration_use_point_range_set+0x10>
 80087d4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80087d8:	bd38      	pop	{r3, r4, r5, pc}
 80087da:	bf00      	nop

080087dc <acc_base_configuration_use_point_range_get>:
 80087dc:	b510      	push	{r4, lr}
 80087de:	4604      	mov	r4, r0
 80087e0:	f7ff fe04 	bl	80083ec <configuration_is_valid>
 80087e4:	b108      	cbz	r0, 80087ea <acc_base_configuration_use_point_range_get+0xe>
 80087e6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80087ea:	bd10      	pop	{r4, pc}

080087ec <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	460d      	mov	r5, r1
 80087f0:	4604      	mov	r4, r0
 80087f2:	f7ff fdfb 	bl	80083ec <configuration_is_valid>
 80087f6:	b108      	cbz	r0, 80087fc <acc_base_configuration_use_fast_dll_refresh_routine_set+0x10>
 80087f8:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80087fc:	bd38      	pop	{r3, r4, r5, pc}
 80087fe:	bf00      	nop

08008800 <acc_base_configuration_staggered_vga_stabilization_time_set>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	460d      	mov	r5, r1
 8008804:	4604      	mov	r4, r0
 8008806:	f7ff fdf1 	bl	80083ec <configuration_is_valid>
 800880a:	b108      	cbz	r0, 8008810 <acc_base_configuration_staggered_vga_stabilization_time_set+0x10>
 800880c:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8008810:	bd38      	pop	{r3, r4, r5, pc}
 8008812:	bf00      	nop

08008814 <acc_base_configuration_burst_period_sys_clk_cycles_set>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	460d      	mov	r5, r1
 8008818:	4604      	mov	r4, r0
 800881a:	f7ff fde7 	bl	80083ec <configuration_is_valid>
 800881e:	b110      	cbz	r0, 8008826 <acc_base_configuration_burst_period_sys_clk_cycles_set+0x12>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	f8c4 302e 	str.w	r3, [r4, #46]	; 0x2e
 8008826:	bd38      	pop	{r3, r4, r5, pc}

08008828 <acc_base_configuration_bba_reset_clocksync_perturbation_set>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	460d      	mov	r5, r1
 800882c:	4604      	mov	r4, r0
 800882e:	f7ff fddd 	bl	80083ec <configuration_is_valid>
 8008832:	b108      	cbz	r0, 8008838 <acc_base_configuration_bba_reset_clocksync_perturbation_set+0x10>
 8008834:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
 8008838:	bd38      	pop	{r3, r4, r5, pc}
 800883a:	bf00      	nop

0800883c <acc_base_configuration_bba_reset_clocksync_perturbation_get>:
 800883c:	b510      	push	{r4, lr}
 800883e:	4604      	mov	r4, r0
 8008840:	f7ff fdd4 	bl	80083ec <configuration_is_valid>
 8008844:	b108      	cbz	r0, 800884a <acc_base_configuration_bba_reset_clocksync_perturbation_get+0xe>
 8008846:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
 800884a:	bd10      	pop	{r4, pc}

0800884c <acc_base_configuration_bba_linear_resync_perturbation_set>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	460d      	mov	r5, r1
 8008850:	4604      	mov	r4, r0
 8008852:	f7ff fdcb 	bl	80083ec <configuration_is_valid>
 8008856:	b108      	cbz	r0, 800885c <acc_base_configuration_bba_linear_resync_perturbation_set+0x10>
 8008858:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
 800885c:	bd38      	pop	{r3, r4, r5, pc}
 800885e:	bf00      	nop

08008860 <acc_base_configuration_bba_linear_resync_perturbation_get>:
 8008860:	b510      	push	{r4, lr}
 8008862:	4604      	mov	r4, r0
 8008864:	f7ff fdc2 	bl	80083ec <configuration_is_valid>
 8008868:	b108      	cbz	r0, 800886e <acc_base_configuration_bba_linear_resync_perturbation_get+0xe>
 800886a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 800886e:	bd10      	pop	{r4, pc}

08008870 <acc_base_configuration_bba_fast_refresh_disable_set>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	460d      	mov	r5, r1
 8008874:	4604      	mov	r4, r0
 8008876:	f7ff fdb9 	bl	80083ec <configuration_is_valid>
 800887a:	b108      	cbz	r0, 8008880 <acc_base_configuration_bba_fast_refresh_disable_set+0x10>
 800887c:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
 8008880:	bd38      	pop	{r3, r4, r5, pc}
 8008882:	bf00      	nop

08008884 <acc_base_configuration_bba_fast_refresh_disable_get>:
 8008884:	b510      	push	{r4, lr}
 8008886:	4604      	mov	r4, r0
 8008888:	f7ff fdb0 	bl	80083ec <configuration_is_valid>
 800888c:	b108      	cbz	r0, 8008892 <acc_base_configuration_bba_fast_refresh_disable_get+0xe>
 800888e:	f894 006d 	ldrb.w	r0, [r4, #109]	; 0x6d
 8008892:	bd10      	pop	{r4, pc}

08008894 <acc_base_configuration_ignore_range_limits_set>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	460d      	mov	r5, r1
 8008898:	4604      	mov	r4, r0
 800889a:	f7ff fda7 	bl	80083ec <configuration_is_valid>
 800889e:	b108      	cbz	r0, 80088a4 <acc_base_configuration_ignore_range_limits_set+0x10>
 80088a0:	f884 506e 	strb.w	r5, [r4, #110]	; 0x6e
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	bf00      	nop

080088a8 <acc_base_configuration_ignore_range_limits_get>:
 80088a8:	b510      	push	{r4, lr}
 80088aa:	4604      	mov	r4, r0
 80088ac:	f7ff fd9e 	bl	80083ec <configuration_is_valid>
 80088b0:	b108      	cbz	r0, 80088b6 <acc_base_configuration_ignore_range_limits_get+0xe>
 80088b2:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
 80088b6:	bd10      	pop	{r4, pc}

080088b8 <acc_base_configuration_proximity_sweep_set>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	460f      	mov	r7, r1
 80088bc:	4616      	mov	r6, r2
 80088be:	461d      	mov	r5, r3
 80088c0:	4604      	mov	r4, r0
 80088c2:	f7ff fd93 	bl	80083ec <configuration_is_valid>
 80088c6:	b128      	cbz	r0, 80088d4 <acc_base_configuration_proximity_sweep_set+0x1c>
 80088c8:	f884 705a 	strb.w	r7, [r4, #90]	; 0x5a
 80088cc:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
 80088d0:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80088d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d6:	bf00      	nop

080088d8 <acc_base_configuration_sparse_sweeps_per_frame_set>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	460d      	mov	r5, r1
 80088dc:	4604      	mov	r4, r0
 80088de:	f7ff fd85 	bl	80083ec <configuration_is_valid>
 80088e2:	b108      	cbz	r0, 80088e8 <acc_base_configuration_sparse_sweeps_per_frame_set+0x10>
 80088e4:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 80088e8:	bd38      	pop	{r3, r4, r5, pc}
 80088ea:	bf00      	nop

080088ec <acc_base_configuration_sparse_sweeps_per_frame_get>:
 80088ec:	b510      	push	{r4, lr}
 80088ee:	4604      	mov	r4, r0
 80088f0:	f7ff fd7c 	bl	80083ec <configuration_is_valid>
 80088f4:	b108      	cbz	r0, 80088fa <acc_base_configuration_sparse_sweeps_per_frame_get+0xe>
 80088f6:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 80088fa:	bd10      	pop	{r4, pc}

080088fc <acc_base_configuration_sparse_sweep_rate_set>:
 80088fc:	b510      	push	{r4, lr}
 80088fe:	ed2d 8b02 	vpush	{d8}
 8008902:	4604      	mov	r4, r0
 8008904:	eeb0 8a40 	vmov.f32	s16, s0
 8008908:	f7ff fd70 	bl	80083ec <configuration_is_valid>
 800890c:	b108      	cbz	r0, 8008912 <acc_base_configuration_sparse_sweep_rate_set+0x16>
 800890e:	ed84 8a19 	vstr	s16, [r4, #100]	; 0x64
 8008912:	ecbd 8b02 	vpop	{d8}
 8008916:	bd10      	pop	{r4, pc}

08008918 <acc_base_configuration_sparse_sweep_rate_get>:
 8008918:	b510      	push	{r4, lr}
 800891a:	4604      	mov	r4, r0
 800891c:	f7ff fd66 	bl	80083ec <configuration_is_valid>
 8008920:	b110      	cbz	r0, 8008928 <acc_base_configuration_sparse_sweep_rate_get+0x10>
 8008922:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
 8008926:	bd10      	pop	{r4, pc}
 8008928:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008930 <acc_base_configuration_sparse_sweep_rate_get+0x18>
 800892c:	bd10      	pop	{r4, pc}
 800892e:	bf00      	nop
 8008930:	00000000 	.word	0x00000000

08008934 <acc_base_configuration_downsampling_factor_get>:
 8008934:	b510      	push	{r4, lr}
 8008936:	4604      	mov	r4, r0
 8008938:	f7ff fd58 	bl	80083ec <configuration_is_valid>
 800893c:	b108      	cbz	r0, 8008942 <acc_base_configuration_downsampling_factor_get+0xe>
 800893e:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
 8008942:	bd10      	pop	{r4, pc}

08008944 <acc_base_configuration_downsampling_factor_set>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	460d      	mov	r5, r1
 8008948:	4604      	mov	r4, r0
 800894a:	f7ff fd4f 	bl	80083ec <configuration_is_valid>
 800894e:	b108      	cbz	r0, 8008954 <acc_base_configuration_downsampling_factor_set+0x10>
 8008950:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
 8008954:	bd38      	pop	{r3, r4, r5, pc}
 8008956:	bf00      	nop

08008958 <acc_base_configuration_noise_level_normalization_get>:
 8008958:	b510      	push	{r4, lr}
 800895a:	4604      	mov	r4, r0
 800895c:	f7ff fd46 	bl	80083ec <configuration_is_valid>
 8008960:	b108      	cbz	r0, 8008966 <acc_base_configuration_noise_level_normalization_get+0xe>
 8008962:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 8008966:	bd10      	pop	{r4, pc}

08008968 <acc_base_configuration_noise_level_normalization_set>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	460d      	mov	r5, r1
 800896c:	4604      	mov	r4, r0
 800896e:	f7ff fd3d 	bl	80083ec <configuration_is_valid>
 8008972:	b108      	cbz	r0, 8008978 <acc_base_configuration_noise_level_normalization_set+0x10>
 8008974:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 8008978:	bd38      	pop	{r3, r4, r5, pc}
 800897a:	bf00      	nop

0800897c <acc_base_configuration_noise_deviation_override_get>:
 800897c:	b510      	push	{r4, lr}
 800897e:	4604      	mov	r4, r0
 8008980:	f7ff fd34 	bl	80083ec <configuration_is_valid>
 8008984:	b108      	cbz	r0, 800898a <acc_base_configuration_noise_deviation_override_get+0xe>
 8008986:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 800898a:	bd10      	pop	{r4, pc}

0800898c <acc_base_configuration_asynchronous_measurement_get>:
 800898c:	b510      	push	{r4, lr}
 800898e:	4604      	mov	r4, r0
 8008990:	f7ff fd2c 	bl	80083ec <configuration_is_valid>
 8008994:	b108      	cbz	r0, 800899a <acc_base_configuration_asynchronous_measurement_get+0xe>
 8008996:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 800899a:	bd10      	pop	{r4, pc}

0800899c <acc_base_configuration_asynchronous_measurement_set>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	460d      	mov	r5, r1
 80089a0:	4604      	mov	r4, r0
 80089a2:	f7ff fd23 	bl	80083ec <configuration_is_valid>
 80089a6:	b108      	cbz	r0, 80089ac <acc_base_configuration_asynchronous_measurement_set+0x10>
 80089a8:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 80089ac:	bd38      	pop	{r3, r4, r5, pc}
 80089ae:	bf00      	nop

080089b0 <acc_base_configuration_min_pipeline_memory_size_get>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	4604      	mov	r4, r0
 80089b4:	f7ff fd1a 	bl	80083ec <configuration_is_valid>
 80089b8:	b108      	cbz	r0, 80089be <acc_base_configuration_min_pipeline_memory_size_get+0xe>
 80089ba:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80089be:	bd10      	pop	{r4, pc}

080089c0 <acc_base_configuration_min_pipeline_memory_size_set>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	460d      	mov	r5, r1
 80089c4:	4604      	mov	r4, r0
 80089c6:	f7ff fd11 	bl	80083ec <configuration_is_valid>
 80089ca:	b108      	cbz	r0, 80089d0 <acc_base_configuration_min_pipeline_memory_size_set+0x10>
 80089cc:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80089d0:	bd38      	pop	{r3, r4, r5, pc}
 80089d2:	bf00      	nop

080089d4 <acc_base_configuration_maximize_signal_attenuation_get>:
 80089d4:	b510      	push	{r4, lr}
 80089d6:	4604      	mov	r4, r0
 80089d8:	f7ff fd08 	bl	80083ec <configuration_is_valid>
 80089dc:	b108      	cbz	r0, 80089e2 <acc_base_configuration_maximize_signal_attenuation_get+0xe>
 80089de:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 80089e2:	bd10      	pop	{r4, pc}

080089e4 <acc_base_configuration_maximize_signal_attenuation_set>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	460d      	mov	r5, r1
 80089e8:	4604      	mov	r4, r0
 80089ea:	f7ff fcff 	bl	80083ec <configuration_is_valid>
 80089ee:	b108      	cbz	r0, 80089f4 <acc_base_configuration_maximize_signal_attenuation_set+0x10>
 80089f0:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 80089f4:	bd38      	pop	{r3, r4, r5, pc}
 80089f6:	bf00      	nop

080089f8 <acc_base_configuration_cca_get>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	460e      	mov	r6, r1
 80089fc:	4615      	mov	r5, r2
 80089fe:	4604      	mov	r4, r0
 8008a00:	f7ff fcf4 	bl	80083ec <configuration_is_valid>
 8008a04:	b148      	cbz	r0, 8008a1a <acc_base_configuration_cca_get+0x22>
 8008a06:	b116      	cbz	r6, 8008a0e <acc_base_configuration_cca_get+0x16>
 8008a08:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8008a0c:	7033      	strb	r3, [r6, #0]
 8008a0e:	b115      	cbz	r5, 8008a16 <acc_base_configuration_cca_get+0x1e>
 8008a10:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8008a14:	802b      	strh	r3, [r5, #0]
 8008a16:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}

08008a1c <acc_base_configuration_cca_set>:
 8008a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1e:	460f      	mov	r7, r1
 8008a20:	4616      	mov	r6, r2
 8008a22:	461d      	mov	r5, r3
 8008a24:	4604      	mov	r4, r0
 8008a26:	f7ff fce1 	bl	80083ec <configuration_is_valid>
 8008a2a:	b128      	cbz	r0, 8008a38 <acc_base_configuration_cca_set+0x1c>
 8008a2c:	f884 704f 	strb.w	r7, [r4, #79]	; 0x4f
 8008a30:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8008a34:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8008a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a3a:	bf00      	nop

08008a3c <acc_base_configuration_mur_set>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	460d      	mov	r5, r1
 8008a40:	4604      	mov	r4, r0
 8008a42:	f7ff fcd3 	bl	80083ec <configuration_is_valid>
 8008a46:	b108      	cbz	r0, 8008a4c <acc_base_configuration_mur_set+0x10>
 8008a48:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 8008a4c:	bd38      	pop	{r3, r4, r5, pc}
 8008a4e:	bf00      	nop

08008a50 <acc_base_configuration_mur_get>:
 8008a50:	b510      	push	{r4, lr}
 8008a52:	4604      	mov	r4, r0
 8008a54:	f7ff fcca 	bl	80083ec <configuration_is_valid>
 8008a58:	b110      	cbz	r0, 8008a60 <acc_base_configuration_mur_get+0x10>
 8008a5a:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8008a5e:	bd10      	pop	{r4, pc}
 8008a60:	2006      	movs	r0, #6
 8008a62:	bd10      	pop	{r4, pc}

08008a64 <acc_base_configuration_print>:
 8008a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a68:	b08f      	sub	sp, #60	; 0x3c
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	f000 fa18 	bl	8008ea0 <acc_rss_integration_log_level>
 8008a70:	2801      	cmp	r0, #1
 8008a72:	d965      	bls.n	8008b40 <acc_base_configuration_print+0xdc>
 8008a74:	4b58      	ldr	r3, [pc, #352]	; (8008bd8 <acc_base_configuration_print+0x174>)
 8008a76:	4620      	mov	r0, r4
 8008a78:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 8008a7c:	f7ff fcb6 	bl	80083ec <configuration_is_valid>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d160      	bne.n	8008b46 <acc_base_configuration_print+0xe2>
 8008a84:	4680      	mov	r8, r0
 8008a86:	4620      	mov	r0, r4
 8008a88:	f7ff fcb0 	bl	80083ec <configuration_is_valid>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d061      	beq.n	8008b54 <acc_base_configuration_print+0xf0>
 8008a90:	4620      	mov	r0, r4
 8008a92:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
 8008a96:	f7ff fca9 	bl	80083ec <configuration_is_valid>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d060      	beq.n	8008b60 <acc_base_configuration_print+0xfc>
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	8fe6      	ldrh	r6, [r4, #62]	; 0x3e
 8008aa2:	f7ff fca3 	bl	80083ec <configuration_is_valid>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d060      	beq.n	8008b6c <acc_base_configuration_print+0x108>
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f8b4 7040 	ldrh.w	r7, [r4, #64]	; 0x40
 8008ab0:	f7ff fc9c 	bl	80083ec <configuration_is_valid>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d05f      	beq.n	8008b78 <acc_base_configuration_print+0x114>
 8008ab8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8008abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f7ff fc94 	bl	80083ec <configuration_is_valid>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d05d      	beq.n	8008b84 <acc_base_configuration_print+0x120>
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f8b4 9044 	ldrh.w	r9, [r4, #68]	; 0x44
 8008ace:	f7ff fc8d 	bl	80083ec <configuration_is_valid>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d05c      	beq.n	8008b90 <acc_base_configuration_print+0x12c>
 8008ad6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d977      	bls.n	8008bcc <acc_base_configuration_print+0x168>
 8008adc:	4b3f      	ldr	r3, [pc, #252]	; (8008bdc <acc_base_configuration_print+0x178>)
 8008ade:	930d      	str	r3, [sp, #52]	; 0x34
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f7ff fc83 	bl	80083ec <configuration_is_valid>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d159      	bne.n	8008b9e <acc_base_configuration_print+0x13a>
 8008aea:	4b3d      	ldr	r3, [pc, #244]	; (8008be0 <acc_base_configuration_print+0x17c>)
 8008aec:	930a      	str	r3, [sp, #40]	; 0x28
 8008aee:	4620      	mov	r0, r4
 8008af0:	f7ff fc7c 	bl	80083ec <configuration_is_valid>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d061      	beq.n	8008bbc <acc_base_configuration_print+0x158>
 8008af8:	4620      	mov	r0, r4
 8008afa:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 8008afe:	f7ff fc75 	bl	80083ec <configuration_is_valid>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d060      	beq.n	8008bc8 <acc_base_configuration_print+0x164>
 8008b06:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008b0a:	930c      	str	r3, [sp, #48]	; 0x30
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f7ff fc6d 	bl	80083ec <configuration_is_valid>
 8008b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b14:	b108      	cbz	r0, 8008b1a <acc_base_configuration_print+0xb6>
 8008b16:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8008b1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008b1e:	e9cd 3008 	strd	r3, r0, [sp, #32]
 8008b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b24:	9306      	str	r3, [sp, #24]
 8008b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b28:	4a2e      	ldr	r2, [pc, #184]	; (8008be4 <acc_base_configuration_print+0x180>)
 8008b2a:	492f      	ldr	r1, [pc, #188]	; (8008be8 <acc_base_configuration_print+0x184>)
 8008b2c:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8008b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b32:	e9cd 5600 	strd	r5, r6, [sp]
 8008b36:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8008b3a:	2002      	movs	r0, #2
 8008b3c:	4643      	mov	r3, r8
 8008b3e:	47d8      	blx	fp
 8008b40:	b00f      	add	sp, #60	; 0x3c
 8008b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b46:	4620      	mov	r0, r4
 8008b48:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8008b4c:	f7ff fc4e 	bl	80083ec <configuration_is_valid>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d19d      	bne.n	8008a90 <acc_base_configuration_print+0x2c>
 8008b54:	4605      	mov	r5, r0
 8008b56:	4620      	mov	r0, r4
 8008b58:	f7ff fc48 	bl	80083ec <configuration_is_valid>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d19e      	bne.n	8008a9e <acc_base_configuration_print+0x3a>
 8008b60:	4606      	mov	r6, r0
 8008b62:	4620      	mov	r0, r4
 8008b64:	f7ff fc42 	bl	80083ec <configuration_is_valid>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d19e      	bne.n	8008aaa <acc_base_configuration_print+0x46>
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f7ff fc3c 	bl	80083ec <configuration_is_valid>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d19f      	bne.n	8008ab8 <acc_base_configuration_print+0x54>
 8008b78:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f7ff fc36 	bl	80083ec <configuration_is_valid>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d1a1      	bne.n	8008ac8 <acc_base_configuration_print+0x64>
 8008b84:	4681      	mov	r9, r0
 8008b86:	4620      	mov	r0, r4
 8008b88:	f7ff fc30 	bl	80083ec <configuration_is_valid>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d1a2      	bne.n	8008ad6 <acc_base_configuration_print+0x72>
 8008b90:	4b16      	ldr	r3, [pc, #88]	; (8008bec <acc_base_configuration_print+0x188>)
 8008b92:	930d      	str	r3, [sp, #52]	; 0x34
 8008b94:	4620      	mov	r0, r4
 8008b96:	f7ff fc29 	bl	80083ec <configuration_is_valid>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d0a5      	beq.n	8008aea <acc_base_configuration_print+0x86>
 8008b9e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0a1      	beq.n	8008aea <acc_base_configuration_print+0x86>
 8008ba6:	4912      	ldr	r1, [pc, #72]	; (8008bf0 <acc_base_configuration_print+0x18c>)
 8008ba8:	4a0c      	ldr	r2, [pc, #48]	; (8008bdc <acc_base_configuration_print+0x178>)
 8008baa:	4620      	mov	r0, r4
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	bf18      	it	ne
 8008bb0:	4611      	movne	r1, r2
 8008bb2:	910a      	str	r1, [sp, #40]	; 0x28
 8008bb4:	f7ff fc1a 	bl	80083ec <configuration_is_valid>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d19d      	bne.n	8008af8 <acc_base_configuration_print+0x94>
 8008bbc:	4682      	mov	sl, r0
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f7ff fc14 	bl	80083ec <configuration_is_valid>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d19e      	bne.n	8008b06 <acc_base_configuration_print+0xa2>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	e79e      	b.n	8008b0a <acc_base_configuration_print+0xa6>
 8008bcc:	4a09      	ldr	r2, [pc, #36]	; (8008bf4 <acc_base_configuration_print+0x190>)
 8008bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bd2:	930d      	str	r3, [sp, #52]	; 0x34
 8008bd4:	e7de      	b.n	8008b94 <acc_base_configuration_print+0x130>
 8008bd6:	bf00      	nop
 8008bd8:	20001628 	.word	0x20001628
 8008bdc:	0801d5bc 	.word	0x0801d5bc
 8008be0:	080187e4 	.word	0x080187e4
 8008be4:	080187ec 	.word	0x080187ec
 8008be8:	08018840 	.word	0x08018840
 8008bec:	080187e0 	.word	0x080187e0
 8008bf0:	080187e8 	.word	0x080187e8
 8008bf4:	08018618 	.word	0x08018618

08008bf8 <acc_base_configuration_check>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	f7ff fbf6 	bl	80083ec <configuration_is_valid>
 8008c00:	4604      	mov	r4, r0
 8008c02:	b148      	cbz	r0, 8008c18 <acc_base_configuration_check+0x20>
 8008c04:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d908      	bls.n	8008c1c <acc_base_configuration_check+0x24>
 8008c0a:	4b24      	ldr	r3, [pc, #144]	; (8008c9c <acc_base_configuration_check+0xa4>)
 8008c0c:	4a24      	ldr	r2, [pc, #144]	; (8008ca0 <acc_base_configuration_check+0xa8>)
 8008c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c10:	4924      	ldr	r1, [pc, #144]	; (8008ca4 <acc_base_configuration_check+0xac>)
 8008c12:	2000      	movs	r0, #0
 8008c14:	4798      	blx	r3
 8008c16:	2400      	movs	r4, #0
 8008c18:	4620      	mov	r0, r4
 8008c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c1c:	d005      	beq.n	8008c2a <acc_base_configuration_check+0x32>
 8008c1e:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 8008c20:	2b16      	cmp	r3, #22
 8008c22:	d90c      	bls.n	8008c3e <acc_base_configuration_check+0x46>
 8008c24:	4b1d      	ldr	r3, [pc, #116]	; (8008c9c <acc_base_configuration_check+0xa4>)
 8008c26:	4a20      	ldr	r2, [pc, #128]	; (8008ca8 <acc_base_configuration_check+0xb0>)
 8008c28:	e7f1      	b.n	8008c0e <acc_base_configuration_check+0x16>
 8008c2a:	f000 f8bb 	bl	8008da4 <acc_rss_integration_is_hibernate_capable>
 8008c2e:	b968      	cbnz	r0, 8008c4c <acc_base_configuration_check+0x54>
 8008c30:	491a      	ldr	r1, [pc, #104]	; (8008c9c <acc_base_configuration_check+0xa4>)
 8008c32:	4a1e      	ldr	r2, [pc, #120]	; (8008cac <acc_base_configuration_check+0xb4>)
 8008c34:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8008c36:	491b      	ldr	r1, [pc, #108]	; (8008ca4 <acc_base_configuration_check+0xac>)
 8008c38:	4604      	mov	r4, r0
 8008c3a:	47a8      	blx	r5
 8008c3c:	e7ec      	b.n	8008c18 <acc_base_configuration_check+0x20>
 8008c3e:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8008c40:	3b01      	subs	r3, #1
 8008c42:	2b3e      	cmp	r3, #62	; 0x3e
 8008c44:	d908      	bls.n	8008c58 <acc_base_configuration_check+0x60>
 8008c46:	4b15      	ldr	r3, [pc, #84]	; (8008c9c <acc_base_configuration_check+0xa4>)
 8008c48:	4a19      	ldr	r2, [pc, #100]	; (8008cb0 <acc_base_configuration_check+0xb8>)
 8008c4a:	e7e0      	b.n	8008c0e <acc_base_configuration_check+0x16>
 8008c4c:	792b      	ldrb	r3, [r5, #4]
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d1e5      	bne.n	8008c1e <acc_base_configuration_check+0x26>
 8008c52:	4b12      	ldr	r3, [pc, #72]	; (8008c9c <acc_base_configuration_check+0xa4>)
 8008c54:	4a17      	ldr	r2, [pc, #92]	; (8008cb4 <acc_base_configuration_check+0xbc>)
 8008c56:	e7da      	b.n	8008c0e <acc_base_configuration_check+0x16>
 8008c58:	6bae      	ldr	r6, [r5, #56]	; 0x38
 8008c5a:	792b      	ldrb	r3, [r5, #4]
 8008c5c:	b926      	cbnz	r6, 8008c68 <acc_base_configuration_check+0x70>
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d110      	bne.n	8008c84 <acc_base_configuration_check+0x8c>
 8008c62:	4b0e      	ldr	r3, [pc, #56]	; (8008c9c <acc_base_configuration_check+0xa4>)
 8008c64:	4a14      	ldr	r2, [pc, #80]	; (8008cb8 <acc_base_configuration_check+0xc0>)
 8008c66:	e7d2      	b.n	8008c0e <acc_base_configuration_check+0x16>
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d00f      	beq.n	8008c8c <acc_base_configuration_check+0x94>
 8008c6c:	f036 0304 	bics.w	r3, r6, #4
 8008c70:	d008      	beq.n	8008c84 <acc_base_configuration_check+0x8c>
 8008c72:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 8008c76:	2b06      	cmp	r3, #6
 8008c78:	d0ce      	beq.n	8008c18 <acc_base_configuration_check+0x20>
 8008c7a:	2b09      	cmp	r3, #9
 8008c7c:	d0cc      	beq.n	8008c18 <acc_base_configuration_check+0x20>
 8008c7e:	4b07      	ldr	r3, [pc, #28]	; (8008c9c <acc_base_configuration_check+0xa4>)
 8008c80:	4a0e      	ldr	r2, [pc, #56]	; (8008cbc <acc_base_configuration_check+0xc4>)
 8008c82:	e7c4      	b.n	8008c0e <acc_base_configuration_check+0x16>
 8008c84:	2301      	movs	r3, #1
 8008c86:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 8008c8a:	e7f2      	b.n	8008c72 <acc_base_configuration_check+0x7a>
 8008c8c:	f895 704e 	ldrb.w	r7, [r5, #78]	; 0x4e
 8008c90:	2f00      	cmp	r7, #0
 8008c92:	d1eb      	bne.n	8008c6c <acc_base_configuration_check+0x74>
 8008c94:	4b01      	ldr	r3, [pc, #4]	; (8008c9c <acc_base_configuration_check+0xa4>)
 8008c96:	4a0a      	ldr	r2, [pc, #40]	; (8008cc0 <acc_base_configuration_check+0xc8>)
 8008c98:	e7b9      	b.n	8008c0e <acc_base_configuration_check+0x16>
 8008c9a:	bf00      	nop
 8008c9c:	20001628 	.word	0x20001628
 8008ca0:	0801862c 	.word	0x0801862c
 8008ca4:	08018840 	.word	0x08018840
 8008ca8:	080186c8 	.word	0x080186c8
 8008cac:	08018644 	.word	0x08018644
 8008cb0:	080186fc 	.word	0x080186fc
 8008cb4:	08018684 	.word	0x08018684
 8008cb8:	08018750 	.word	0x08018750
 8008cbc:	080187cc 	.word	0x080187cc
 8008cc0:	0801878c 	.word	0x0801878c

08008cc4 <acc_rss_integration_register>:
 8008cc4:	6942      	ldr	r2, [r0, #20]
 8008cc6:	b538      	push	{r3, r4, r5, lr}
 8008cc8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008cca:	b33a      	cbz	r2, 8008d1c <acc_rss_integration_register+0x58>
 8008ccc:	6982      	ldr	r2, [r0, #24]
 8008cce:	b32a      	cbz	r2, 8008d1c <acc_rss_integration_register+0x58>
 8008cd0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008cd2:	b31a      	cbz	r2, 8008d1c <acc_rss_integration_register+0x58>
 8008cd4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008cd6:	b30a      	cbz	r2, 8008d1c <acc_rss_integration_register+0x58>
 8008cd8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008cda:	b1fa      	cbz	r2, 8008d1c <acc_rss_integration_register+0x58>
 8008cdc:	6882      	ldr	r2, [r0, #8]
 8008cde:	b1ea      	cbz	r2, 8008d1c <acc_rss_integration_register+0x58>
 8008ce0:	68c2      	ldr	r2, [r0, #12]
 8008ce2:	b1da      	cbz	r2, 8008d1c <acc_rss_integration_register+0x58>
 8008ce4:	6902      	ldr	r2, [r0, #16]
 8008ce6:	b1ca      	cbz	r2, 8008d1c <acc_rss_integration_register+0x58>
 8008ce8:	b1f3      	cbz	r3, 8008d28 <acc_rss_integration_register+0x64>
 8008cea:	6802      	ldr	r2, [r0, #0]
 8008cec:	2a2a      	cmp	r2, #42	; 0x2a
 8008cee:	d816      	bhi.n	8008d1e <acc_rss_integration_register+0x5a>
 8008cf0:	6842      	ldr	r2, [r0, #4]
 8008cf2:	2a0f      	cmp	r2, #15
 8008cf4:	d913      	bls.n	8008d1e <acc_rss_integration_register+0x5a>
 8008cf6:	69c2      	ldr	r2, [r0, #28]
 8008cf8:	b10a      	cbz	r2, 8008cfe <acc_rss_integration_register+0x3a>
 8008cfa:	6a02      	ldr	r2, [r0, #32]
 8008cfc:	b17a      	cbz	r2, 8008d1e <acc_rss_integration_register+0x5a>
 8008cfe:	4604      	mov	r4, r0
 8008d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d02:	4d0a      	ldr	r5, [pc, #40]	; (8008d2c <acc_rss_integration_register+0x68>)
 8008d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d12:	2301      	movs	r3, #1
 8008d14:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	b123      	cbz	r3, 8008d28 <acc_rss_integration_register+0x64>
 8008d1e:	4a04      	ldr	r2, [pc, #16]	; (8008d30 <acc_rss_integration_register+0x6c>)
 8008d20:	4904      	ldr	r1, [pc, #16]	; (8008d34 <acc_rss_integration_register+0x70>)
 8008d22:	2000      	movs	r0, #0
 8008d24:	4798      	blx	r3
 8008d26:	2300      	movs	r3, #0
 8008d28:	4618      	mov	r0, r3
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	20001628 	.word	0x20001628
 8008d30:	080188b0 	.word	0x080188b0
 8008d34:	0801a150 	.word	0x0801a150

08008d38 <acc_rss_integration_unregister>:
 8008d38:	2238      	movs	r2, #56	; 0x38
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	4801      	ldr	r0, [pc, #4]	; (8008d44 <acc_rss_integration_unregister+0xc>)
 8008d3e:	f009 bff7 	b.w	8012d30 <memset>
 8008d42:	bf00      	nop
 8008d44:	20001628 	.word	0x20001628

08008d48 <acc_rss_integration_get_sensor_count>:
 8008d48:	4b01      	ldr	r3, [pc, #4]	; (8008d50 <acc_rss_integration_get_sensor_count+0x8>)
 8008d4a:	6818      	ldr	r0, [r3, #0]
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	20001628 	.word	0x20001628

08008d54 <acc_rss_integration_get_sensor_reference_frequency>:
 8008d54:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 8008d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d58:	4718      	bx	r3
 8008d5a:	bf00      	nop
 8008d5c:	20001628 	.word	0x20001628

08008d60 <acc_rss_integration_get_max_spi_transfer_size>:
 8008d60:	4b01      	ldr	r3, [pc, #4]	; (8008d68 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 8008d62:	6858      	ldr	r0, [r3, #4]
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	20001628 	.word	0x20001628

08008d6c <acc_rss_integration_sensor_device_power_on>:
 8008d6c:	4b01      	ldr	r3, [pc, #4]	; (8008d74 <acc_rss_integration_sensor_device_power_on+0x8>)
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	4718      	bx	r3
 8008d72:	bf00      	nop
 8008d74:	20001628 	.word	0x20001628

08008d78 <acc_rss_integration_sensor_device_power_off>:
 8008d78:	4b01      	ldr	r3, [pc, #4]	; (8008d80 <acc_rss_integration_sensor_device_power_off+0x8>)
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	4718      	bx	r3
 8008d7e:	bf00      	nop
 8008d80:	20001628 	.word	0x20001628

08008d84 <acc_rss_integration_sensor_device_hibernate_enter>:
 8008d84:	4b02      	ldr	r3, [pc, #8]	; (8008d90 <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	b103      	cbz	r3, 8008d8c <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 8008d8a:	4718      	bx	r3
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	20001628 	.word	0x20001628

08008d94 <acc_rss_integration_sensor_device_hibernate_exit>:
 8008d94:	4b02      	ldr	r3, [pc, #8]	; (8008da0 <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	b103      	cbz	r3, 8008d9c <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 8008d9a:	4718      	bx	r3
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	20001628 	.word	0x20001628

08008da4 <acc_rss_integration_is_hibernate_capable>:
 8008da4:	4b02      	ldr	r3, [pc, #8]	; (8008db0 <acc_rss_integration_is_hibernate_capable+0xc>)
 8008da6:	69d8      	ldr	r0, [r3, #28]
 8008da8:	3000      	adds	r0, #0
 8008daa:	bf18      	it	ne
 8008dac:	2001      	movne	r0, #1
 8008dae:	4770      	bx	lr
 8008db0:	20001628 	.word	0x20001628

08008db4 <acc_rss_integration_wait_for_sensor_interrupt>:
 8008db4:	4b01      	ldr	r3, [pc, #4]	; (8008dbc <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	4718      	bx	r3
 8008dba:	bf00      	nop
 8008dbc:	20001628 	.word	0x20001628

08008dc0 <acc_rss_integration_sensor_device_transfer>:
 8008dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	4620      	mov	r0, r4
 8008dca:	461e      	mov	r6, r3
 8008dcc:	4615      	mov	r5, r2
 8008dce:	f001 f8fd 	bl	8009fcc <acc_utils_swap16_array>
 8008dd2:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <acc_rss_integration_sensor_device_transfer+0x30>)
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	006a      	lsls	r2, r5, #1
 8008dd8:	4621      	mov	r1, r4
 8008dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ddc:	4798      	blx	r3
 8008dde:	b906      	cbnz	r6, 8008de2 <acc_rss_integration_sensor_device_transfer+0x22>
 8008de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de2:	4629      	mov	r1, r5
 8008de4:	4620      	mov	r0, r4
 8008de6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008dea:	f001 b8ef 	b.w	8009fcc <acc_utils_swap16_array>
 8008dee:	bf00      	nop
 8008df0:	20001628 	.word	0x20001628

08008df4 <acc_rss_integration_mem_alloc_debug>:
 8008df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df8:	4c0d      	ldr	r4, [pc, #52]	; (8008e30 <acc_rss_integration_mem_alloc_debug+0x3c>)
 8008dfa:	68a3      	ldr	r3, [r4, #8]
 8008dfc:	460f      	mov	r7, r1
 8008dfe:	4690      	mov	r8, r2
 8008e00:	4606      	mov	r6, r0
 8008e02:	4798      	blx	r3
 8008e04:	4605      	mov	r5, r0
 8008e06:	b930      	cbnz	r0, 8008e16 <acc_rss_integration_mem_alloc_debug+0x22>
 8008e08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e0a:	4a0a      	ldr	r2, [pc, #40]	; (8008e34 <acc_rss_integration_mem_alloc_debug+0x40>)
 8008e0c:	490a      	ldr	r1, [pc, #40]	; (8008e38 <acc_rss_integration_mem_alloc_debug+0x44>)
 8008e0e:	4798      	blx	r3
 8008e10:	4628      	mov	r0, r5
 8008e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e16:	4b09      	ldr	r3, [pc, #36]	; (8008e3c <acc_rss_integration_mem_alloc_debug+0x48>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0f8      	beq.n	8008e10 <acc_rss_integration_mem_alloc_debug+0x1c>
 8008e1e:	681c      	ldr	r4, [r3, #0]
 8008e20:	463a      	mov	r2, r7
 8008e22:	4643      	mov	r3, r8
 8008e24:	4631      	mov	r1, r6
 8008e26:	47a0      	blx	r4
 8008e28:	4628      	mov	r0, r5
 8008e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e2e:	bf00      	nop
 8008e30:	20001628 	.word	0x20001628
 8008e34:	08018878 	.word	0x08018878
 8008e38:	0801a150 	.word	0x0801a150
 8008e3c:	200015a0 	.word	0x200015a0

08008e40 <acc_rss_integration_mem_calloc_debug>:
 8008e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e42:	b190      	cbz	r0, 8008e6a <acc_rss_integration_mem_calloc_debug+0x2a>
 8008e44:	460c      	mov	r4, r1
 8008e46:	fba4 6700 	umull	r6, r7, r4, r0
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	b977      	cbnz	r7, 8008e6e <acc_rss_integration_mem_calloc_debug+0x2e>
 8008e50:	fb04 f500 	mul.w	r5, r4, r0
 8008e54:	4628      	mov	r0, r5
 8008e56:	f7ff ffcd 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	b118      	cbz	r0, 8008e66 <acc_rss_integration_mem_calloc_debug+0x26>
 8008e5e:	462a      	mov	r2, r5
 8008e60:	4639      	mov	r1, r7
 8008e62:	f009 ff65 	bl	8012d30 <memset>
 8008e66:	4620      	mov	r0, r4
 8008e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	e7fb      	b.n	8008e66 <acc_rss_integration_mem_calloc_debug+0x26>
 8008e6e:	f240 110d 	movw	r1, #269	; 0x10d
 8008e72:	4801      	ldr	r0, [pc, #4]	; (8008e78 <acc_rss_integration_mem_calloc_debug+0x38>)
 8008e74:	f7ff faa2 	bl	80083bc <acc_assert_fail>
 8008e78:	08018888 	.word	0x08018888

08008e7c <acc_rss_integration_mem_free>:
 8008e7c:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <acc_rss_integration_mem_free+0x1c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	b510      	push	{r4, lr}
 8008e82:	4604      	mov	r4, r0
 8008e84:	b10b      	cbz	r3, 8008e8a <acc_rss_integration_mem_free+0xe>
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	4798      	blx	r3
 8008e8a:	4b04      	ldr	r3, [pc, #16]	; (8008e9c <acc_rss_integration_mem_free+0x20>)
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e94:	4718      	bx	r3
 8008e96:	bf00      	nop
 8008e98:	200015a0 	.word	0x200015a0
 8008e9c:	20001628 	.word	0x20001628

08008ea0 <acc_rss_integration_log_level>:
 8008ea0:	4b01      	ldr	r3, [pc, #4]	; (8008ea8 <acc_rss_integration_log_level+0x8>)
 8008ea2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 8008ea6:	4770      	bx	lr
 8008ea8:	20001628 	.word	0x20001628

08008eac <acc_rss_calibration_prepare_linear_dummy_sweep>:
 8008eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	2500      	movs	r5, #0
 8008eb4:	460e      	mov	r6, r1
 8008eb6:	a901      	add	r1, sp, #4
 8008eb8:	4617      	mov	r7, r2
 8008eba:	f88d 5004 	strb.w	r5, [sp, #4]
 8008ebe:	f8ad 5006 	strh.w	r5, [sp, #6]
 8008ec2:	f7ff fca7 	bl	8008814 <acc_base_configuration_burst_period_sys_clk_cycles_set>
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	2106      	movs	r1, #6
 8008eca:	f7ff fdb7 	bl	8008a3c <acc_base_configuration_mur_set>
 8008ece:	4620      	mov	r0, r4
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	f7ff fb5f 	bl	8008594 <acc_base_configuration_hw_accelerated_average_samples_set>
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	2114      	movs	r1, #20
 8008eda:	f7ff fc13 	bl	8008704 <acc_base_configuration_gain_set>
 8008ede:	4620      	mov	r0, r4
 8008ee0:	210f      	movs	r1, #15
 8008ee2:	f7ff fc1f 	bl	8008724 <acc_base_configuration_integrator_set>
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	2107      	movs	r1, #7
 8008eea:	f7ff fc2d 	bl	8008748 <acc_base_configuration_wg_duration_set>
 8008eee:	4620      	mov	r0, r4
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	f7ff fc3b 	bl	800876c <acc_base_configuration_integrator_ramp_up_set>
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f7ff fad6 	bl	80084a8 <acc_base_configuration_repetition_mode_on_demand_set>
 8008efc:	4620      	mov	r0, r4
 8008efe:	2102      	movs	r1, #2
 8008f00:	f7ff fae2 	bl	80084c8 <acc_base_configuration_power_save_mode_set>
 8008f04:	4620      	mov	r0, r4
 8008f06:	2101      	movs	r1, #1
 8008f08:	f7ff fb20 	bl	800854c <acc_base_configuration_tx_disable_set>
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f7ff fb2e 	bl	8008570 <acc_base_configuration_decrease_tx_emission_set>
 8008f14:	4620      	mov	r0, r4
 8008f16:	2101      	movs	r1, #1
 8008f18:	f7ff fc56 	bl	80087c8 <acc_base_configuration_use_point_range_set>
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	4629      	mov	r1, r5
 8008f20:	4620      	mov	r0, r4
 8008f22:	f7ff fbbb 	bl	800869c <acc_base_configuration_point_range_set>
 8008f26:	4620      	mov	r0, r4
 8008f28:	2104      	movs	r1, #4
 8008f2a:	f7ff fd0b 	bl	8008944 <acc_base_configuration_downsampling_factor_set>
 8008f2e:	4629      	mov	r1, r5
 8008f30:	4620      	mov	r0, r4
 8008f32:	f7ff fc2d 	bl	8008790 <acc_base_configuration_sampling_mode_set>
 8008f36:	4629      	mov	r1, r5
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f7ff fc33 	bl	80087a4 <acc_base_configuration_sweep_type_debug_set>
 8008f3e:	4629      	mov	r1, r5
 8008f40:	4620      	mov	r0, r4
 8008f42:	f7ff fc71 	bl	8008828 <acc_base_configuration_bba_reset_clocksync_perturbation_set>
 8008f46:	4629      	mov	r1, r5
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f7ff fc7f 	bl	800884c <acc_base_configuration_bba_linear_resync_perturbation_set>
 8008f4e:	4629      	mov	r1, r5
 8008f50:	4620      	mov	r0, r4
 8008f52:	f7ff fc8d 	bl	8008870 <acc_base_configuration_bba_fast_refresh_disable_set>
 8008f56:	4629      	mov	r1, r5
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f7ff fc9b 	bl	8008894 <acc_base_configuration_ignore_range_limits_set>
 8008f5e:	4620      	mov	r0, r4
 8008f60:	2101      	movs	r1, #1
 8008f62:	f7ff fd1b 	bl	800899c <acc_base_configuration_asynchronous_measurement_set>
 8008f66:	463a      	mov	r2, r7
 8008f68:	4631      	mov	r1, r6
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	2340      	movs	r3, #64	; 0x40
 8008f6e:	f7ff fd55 	bl	8008a1c <acc_base_configuration_cca_set>
 8008f72:	4620      	mov	r0, r4
 8008f74:	4902      	ldr	r1, [pc, #8]	; (8008f80 <acc_rss_calibration_prepare_linear_dummy_sweep+0xd4>)
 8008f76:	f7ff fb15 	bl	80085a4 <acc_base_configuration_radar_engine_creation_set>
 8008f7a:	b003      	add	sp, #12
 8008f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	0800b291 	.word	0x0800b291

08008f84 <calibration_context_set>:
 8008f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f88:	b09c      	sub	sp, #112	; 0x70
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	4615      	mov	r5, r2
 8008f8e:	461e      	mov	r6, r3
 8008f90:	4680      	mov	r8, r0
 8008f92:	f89d 7088 	ldrb.w	r7, [sp, #136]	; 0x88
 8008f96:	f000 fbc1 	bl	800971c <acc_service_manager_is_service_created>
 8008f9a:	b118      	cbz	r0, 8008fa4 <calibration_context_set+0x20>
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	b01c      	add	sp, #112	; 0x70
 8008fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa4:	4641      	mov	r1, r8
 8008fa6:	4668      	mov	r0, sp
 8008fa8:	f7ff fa3e 	bl	8008428 <acc_base_configuration_sensor_set>
 8008fac:	463a      	mov	r2, r7
 8008fae:	4631      	mov	r1, r6
 8008fb0:	4668      	mov	r0, sp
 8008fb2:	f7ff ff7b 	bl	8008eac <acc_rss_calibration_prepare_linear_dummy_sweep>
 8008fb6:	462a      	mov	r2, r5
 8008fb8:	4621      	mov	r1, r4
 8008fba:	4668      	mov	r0, sp
 8008fbc:	f004 f970 	bl	800d2a0 <acc_sensor_manager_calibration_context_set>
 8008fc0:	b01c      	add	sp, #112	; 0x70
 8008fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc6:	bf00      	nop

08008fc8 <acc_rss_calibration_context_get>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	b09c      	sub	sp, #112	; 0x70
 8008fcc:	460d      	mov	r5, r1
 8008fce:	4606      	mov	r6, r0
 8008fd0:	f000 fba4 	bl	800971c <acc_service_manager_is_service_created>
 8008fd4:	b110      	cbz	r0, 8008fdc <acc_rss_calibration_context_get+0x14>
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	b01c      	add	sp, #112	; 0x70
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	4604      	mov	r4, r0
 8008fde:	4631      	mov	r1, r6
 8008fe0:	4668      	mov	r0, sp
 8008fe2:	f7ff fa21 	bl	8008428 <acc_base_configuration_sensor_set>
 8008fe6:	4622      	mov	r2, r4
 8008fe8:	4621      	mov	r1, r4
 8008fea:	4668      	mov	r0, sp
 8008fec:	f7ff ff5e 	bl	8008eac <acc_rss_calibration_prepare_linear_dummy_sweep>
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4668      	mov	r0, sp
 8008ff4:	f004 f8e2 	bl	800d1bc <acc_sensor_manager_calibration_context_get>
 8008ff8:	b01c      	add	sp, #112	; 0x70
 8008ffa:	bd70      	pop	{r4, r5, r6, pc}

08008ffc <acc_rss_calibration_context_forced_set>:
 8008ffc:	b500      	push	{lr}
 8008ffe:	b083      	sub	sp, #12
 8009000:	2300      	movs	r3, #0
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	2201      	movs	r2, #1
 8009006:	f7ff ffbd 	bl	8008f84 <calibration_context_set>
 800900a:	b003      	add	sp, #12
 800900c:	f85d fb04 	ldr.w	pc, [sp], #4

08009010 <acc_rss_activate>:
 8009010:	b510      	push	{r4, lr}
 8009012:	4c16      	ldr	r4, [pc, #88]	; (800906c <acc_rss_activate+0x5c>)
 8009014:	7823      	ldrb	r3, [r4, #0]
 8009016:	bb0b      	cbnz	r3, 800905c <acc_rss_activate+0x4c>
 8009018:	b1a8      	cbz	r0, 8009046 <acc_rss_activate+0x36>
 800901a:	f7ff fe53 	bl	8008cc4 <acc_rss_integration_register>
 800901e:	b188      	cbz	r0, 8009044 <acc_rss_activate+0x34>
 8009020:	f000 faa6 	bl	8009570 <acc_service_manager_activate>
 8009024:	b188      	cbz	r0, 800904a <acc_rss_activate+0x3a>
 8009026:	f003 fecb 	bl	800cdc0 <acc_sensor_manager_activate>
 800902a:	b170      	cbz	r0, 800904a <acc_rss_activate+0x3a>
 800902c:	2301      	movs	r3, #1
 800902e:	7023      	strb	r3, [r4, #0]
 8009030:	f7ff ff36 	bl	8008ea0 <acc_rss_integration_log_level>
 8009034:	2801      	cmp	r0, #1
 8009036:	d905      	bls.n	8009044 <acc_rss_activate+0x34>
 8009038:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <acc_rss_activate+0x60>)
 800903a:	4a0e      	ldr	r2, [pc, #56]	; (8009074 <acc_rss_activate+0x64>)
 800903c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903e:	490e      	ldr	r1, [pc, #56]	; (8009078 <acc_rss_activate+0x68>)
 8009040:	2002      	movs	r0, #2
 8009042:	4798      	blx	r3
 8009044:	7823      	ldrb	r3, [r4, #0]
 8009046:	4618      	mov	r0, r3
 8009048:	bd10      	pop	{r4, pc}
 800904a:	4b09      	ldr	r3, [pc, #36]	; (8009070 <acc_rss_activate+0x60>)
 800904c:	4a0b      	ldr	r2, [pc, #44]	; (800907c <acc_rss_activate+0x6c>)
 800904e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009050:	4909      	ldr	r1, [pc, #36]	; (8009078 <acc_rss_activate+0x68>)
 8009052:	2000      	movs	r0, #0
 8009054:	4798      	blx	r3
 8009056:	7823      	ldrb	r3, [r4, #0]
 8009058:	4618      	mov	r0, r3
 800905a:	bd10      	pop	{r4, pc}
 800905c:	f7ff ff20 	bl	8008ea0 <acc_rss_integration_log_level>
 8009060:	2801      	cmp	r0, #1
 8009062:	d9ef      	bls.n	8009044 <acc_rss_activate+0x34>
 8009064:	4b02      	ldr	r3, [pc, #8]	; (8009070 <acc_rss_activate+0x60>)
 8009066:	4a06      	ldr	r2, [pc, #24]	; (8009080 <acc_rss_activate+0x70>)
 8009068:	e7e8      	b.n	800903c <acc_rss_activate+0x2c>
 800906a:	bf00      	nop
 800906c:	200015a4 	.word	0x200015a4
 8009070:	20001628 	.word	0x20001628
 8009074:	080188c4 	.word	0x080188c4
 8009078:	080188e4 	.word	0x080188e4
 800907c:	080188e8 	.word	0x080188e8
 8009080:	08018900 	.word	0x08018900

08009084 <acc_rss_deactivate>:
 8009084:	b510      	push	{r4, lr}
 8009086:	4c0b      	ldr	r4, [pc, #44]	; (80090b4 <acc_rss_deactivate+0x30>)
 8009088:	7823      	ldrb	r3, [r4, #0]
 800908a:	b903      	cbnz	r3, 800908e <acc_rss_deactivate+0xa>
 800908c:	bd10      	pop	{r4, pc}
 800908e:	f000 fb1f 	bl	80096d0 <acc_service_manager_deactivate>
 8009092:	f003 fed3 	bl	800ce3c <acc_sensor_manager_deactivate>
 8009096:	f7ff ff03 	bl	8008ea0 <acc_rss_integration_log_level>
 800909a:	2801      	cmp	r0, #1
 800909c:	d905      	bls.n	80090aa <acc_rss_deactivate+0x26>
 800909e:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <acc_rss_deactivate+0x34>)
 80090a0:	4a06      	ldr	r2, [pc, #24]	; (80090bc <acc_rss_deactivate+0x38>)
 80090a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a4:	4906      	ldr	r1, [pc, #24]	; (80090c0 <acc_rss_deactivate+0x3c>)
 80090a6:	2002      	movs	r0, #2
 80090a8:	4798      	blx	r3
 80090aa:	f7ff fe45 	bl	8008d38 <acc_rss_integration_unregister>
 80090ae:	2300      	movs	r3, #0
 80090b0:	7023      	strb	r3, [r4, #0]
 80090b2:	bd10      	pop	{r4, pc}
 80090b4:	200015a4 	.word	0x200015a4
 80090b8:	20001628 	.word	0x20001628
 80090bc:	08018928 	.word	0x08018928
 80090c0:	080188e4 	.word	0x080188e4

080090c4 <envelope_send_data>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	460b      	mov	r3, r1
 80090c8:	b084      	sub	sp, #16
 80090ca:	ad02      	add	r5, sp, #8
 80090cc:	795c      	ldrb	r4, [r3, #5]
 80090ce:	f88d 400d 	strb.w	r4, [sp, #13]
 80090d2:	4616      	mov	r6, r2
 80090d4:	694a      	ldr	r2, [r1, #20]
 80090d6:	7909      	ldrb	r1, [r1, #4]
 80090d8:	9500      	str	r5, [sp, #0]
 80090da:	799d      	ldrb	r5, [r3, #6]
 80090dc:	f88d 100e 	strb.w	r1, [sp, #14]
 80090e0:	4601      	mov	r1, r0
 80090e2:	4630      	mov	r0, r6
 80090e4:	79de      	ldrb	r6, [r3, #7]
 80090e6:	f88d 4008 	strb.w	r4, [sp, #8]
 80090ea:	ab03      	add	r3, sp, #12
 80090ec:	f88d 600f 	strb.w	r6, [sp, #15]
 80090f0:	f88d 500c 	strb.w	r5, [sp, #12]
 80090f4:	f000 fe88 	bl	8009e08 <acc_service_send_data>
 80090f8:	b004      	add	sp, #16
 80090fa:	bd70      	pop	{r4, r5, r6, pc}

080090fc <envelope_create_service>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	b0a6      	sub	sp, #152	; 0x98
 8009100:	2290      	movs	r2, #144	; 0x90
 8009102:	4604      	mov	r4, r0
 8009104:	a802      	add	r0, sp, #8
 8009106:	460d      	mov	r5, r1
 8009108:	f009 fdea 	bl	8012ce0 <memcpy>
 800910c:	a809      	add	r0, sp, #36	; 0x24
 800910e:	f7ff fc11 	bl	8008934 <acc_base_configuration_downsampling_factor_get>
 8009112:	ee07 0a10 	vmov	s14, r0
 8009116:	eddd 7a25 	vldr	s15, [sp, #148]	; 0x94
 800911a:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800911e:	a809      	add	r0, sp, #36	; 0x24
 8009120:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009124:	f7ff fa9c 	bl	8008660 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>
 8009128:	a802      	add	r0, sp, #8
 800912a:	f000 fec9 	bl	8009ec0 <acc_service_configuration_check>
 800912e:	b140      	cbz	r0, 8009142 <envelope_create_service+0x46>
 8009130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009132:	2b04      	cmp	r3, #4
 8009134:	d108      	bne.n	8009148 <envelope_create_service+0x4c>
 8009136:	4b22      	ldr	r3, [pc, #136]	; (80091c0 <envelope_create_service+0xc4>)
 8009138:	4a22      	ldr	r2, [pc, #136]	; (80091c4 <envelope_create_service+0xc8>)
 800913a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913c:	4922      	ldr	r1, [pc, #136]	; (80091c8 <envelope_create_service+0xcc>)
 800913e:	2000      	movs	r0, #0
 8009140:	4798      	blx	r3
 8009142:	2000      	movs	r0, #0
 8009144:	b026      	add	sp, #152	; 0x98
 8009146:	bd70      	pop	{r4, r5, r6, pc}
 8009148:	a809      	add	r0, sp, #36	; 0x24
 800914a:	f7ff fd55 	bl	8008bf8 <acc_base_configuration_check>
 800914e:	2800      	cmp	r0, #0
 8009150:	d0f7      	beq.n	8009142 <envelope_create_service+0x46>
 8009152:	a809      	add	r0, sp, #36	; 0x24
 8009154:	f7ff fbee 	bl	8008934 <acc_base_configuration_downsampling_factor_get>
 8009158:	1e43      	subs	r3, r0, #1
 800915a:	b29b      	uxth	r3, r3
 800915c:	2b01      	cmp	r3, #1
 800915e:	d904      	bls.n	800916a <envelope_create_service+0x6e>
 8009160:	2804      	cmp	r0, #4
 8009162:	d002      	beq.n	800916a <envelope_create_service+0x6e>
 8009164:	4b16      	ldr	r3, [pc, #88]	; (80091c0 <envelope_create_service+0xc4>)
 8009166:	4a19      	ldr	r2, [pc, #100]	; (80091cc <envelope_create_service+0xd0>)
 8009168:	e7e7      	b.n	800913a <envelope_create_service+0x3e>
 800916a:	2200      	movs	r2, #0
 800916c:	4611      	mov	r1, r2
 800916e:	a809      	add	r0, sp, #36	; 0x24
 8009170:	f7ff fc42 	bl	80089f8 <acc_base_configuration_cca_get>
 8009174:	2100      	movs	r1, #0
 8009176:	4606      	mov	r6, r0
 8009178:	a809      	add	r0, sp, #36	; 0x24
 800917a:	f7ff fa37 	bl	80085ec <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 800917e:	b106      	cbz	r6, 8009182 <envelope_create_service+0x86>
 8009180:	b998      	cbnz	r0, 80091aa <envelope_create_service+0xae>
 8009182:	a926      	add	r1, sp, #152	; 0x98
 8009184:	4b12      	ldr	r3, [pc, #72]	; (80091d0 <envelope_create_service+0xd4>)
 8009186:	f841 3d94 	str.w	r3, [r1, #-148]!
 800918a:	792b      	ldrb	r3, [r5, #4]
 800918c:	7223      	strb	r3, [r4, #8]
 800918e:	aa09      	add	r2, sp, #36	; 0x24
 8009190:	4623      	mov	r3, r4
 8009192:	f104 0018 	add.w	r0, r4, #24
 8009196:	f001 f95f 	bl	800a458 <acc_pipeline_envelope_assemble>
 800919a:	4b0e      	ldr	r3, [pc, #56]	; (80091d4 <envelope_create_service+0xd8>)
 800919c:	6120      	str	r0, [r4, #16]
 800919e:	3000      	adds	r0, #0
 80091a0:	bf18      	it	ne
 80091a2:	2001      	movne	r0, #1
 80091a4:	60e3      	str	r3, [r4, #12]
 80091a6:	b026      	add	sp, #152	; 0x98
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
 80091aa:	f7ff fe79 	bl	8008ea0 <acc_rss_integration_log_level>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d0e7      	beq.n	8009182 <envelope_create_service+0x86>
 80091b2:	4b03      	ldr	r3, [pc, #12]	; (80091c0 <envelope_create_service+0xc4>)
 80091b4:	4a08      	ldr	r2, [pc, #32]	; (80091d8 <envelope_create_service+0xdc>)
 80091b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b8:	4903      	ldr	r1, [pc, #12]	; (80091c8 <envelope_create_service+0xcc>)
 80091ba:	2001      	movs	r0, #1
 80091bc:	4798      	blx	r3
 80091be:	e7e0      	b.n	8009182 <envelope_create_service+0x86>
 80091c0:	20001628 	.word	0x20001628
 80091c4:	080189b4 	.word	0x080189b4
 80091c8:	080189f0 	.word	0x080189f0
 80091cc:	08018a04 	.word	0x08018a04
 80091d0:	080090c5 	.word	0x080090c5
 80091d4:	08009cf9 	.word	0x08009cf9
 80091d8:	08018a24 	.word	0x08018a24

080091dc <get_and_validate_envelope_configuration>:
 80091dc:	b510      	push	{r4, lr}
 80091de:	4604      	mov	r4, r0
 80091e0:	f000 fe50 	bl	8009e84 <acc_service_configuration_valid>
 80091e4:	b108      	cbz	r0, 80091ea <get_and_validate_envelope_configuration+0xe>
 80091e6:	7923      	ldrb	r3, [r4, #4]
 80091e8:	b153      	cbz	r3, 8009200 <get_and_validate_envelope_configuration+0x24>
 80091ea:	f7ff fe59 	bl	8008ea0 <acc_rss_integration_log_level>
 80091ee:	b130      	cbz	r0, 80091fe <get_and_validate_envelope_configuration+0x22>
 80091f0:	4b04      	ldr	r3, [pc, #16]	; (8009204 <get_and_validate_envelope_configuration+0x28>)
 80091f2:	4a05      	ldr	r2, [pc, #20]	; (8009208 <get_and_validate_envelope_configuration+0x2c>)
 80091f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f6:	4905      	ldr	r1, [pc, #20]	; (800920c <get_and_validate_envelope_configuration+0x30>)
 80091f8:	2001      	movs	r0, #1
 80091fa:	4798      	blx	r3
 80091fc:	2000      	movs	r0, #0
 80091fe:	bd10      	pop	{r4, pc}
 8009200:	4620      	mov	r0, r4
 8009202:	bd10      	pop	{r4, pc}
 8009204:	20001628 	.word	0x20001628
 8009208:	08018008 	.word	0x08018008
 800920c:	080189f0 	.word	0x080189f0

08009210 <set_configuration_for_profile>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	460c      	mov	r4, r1
 8009214:	f7ff ffe2 	bl	80091dc <get_and_validate_envelope_configuration>
 8009218:	b1c8      	cbz	r0, 800924e <set_configuration_for_profile+0x3e>
 800921a:	1e61      	subs	r1, r4, #1
 800921c:	4605      	mov	r5, r0
 800921e:	f100 041c 	add.w	r4, r0, #28
 8009222:	2904      	cmp	r1, #4
 8009224:	d813      	bhi.n	800924e <set_configuration_for_profile+0x3e>
 8009226:	e8df f001 	tbb	[pc, r1]
 800922a:	2313      	.short	0x2313
 800922c:	3533      	.short	0x3533
 800922e:	03          	.byte	0x03
 800922f:	00          	.byte	0x00
 8009230:	2110      	movs	r1, #16
 8009232:	4620      	mov	r0, r4
 8009234:	f7ff fa88 	bl	8008748 <acc_base_configuration_wg_duration_set>
 8009238:	2106      	movs	r1, #6
 800923a:	4620      	mov	r0, r4
 800923c:	f7ff fa72 	bl	8008724 <acc_base_configuration_integrator_set>
 8009240:	4620      	mov	r0, r4
 8009242:	2101      	movs	r1, #1
 8009244:	f7ff fa92 	bl	800876c <acc_base_configuration_integrator_ramp_up_set>
 8009248:	4b13      	ldr	r3, [pc, #76]	; (8009298 <set_configuration_for_profile+0x88>)
 800924a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	2100      	movs	r1, #0
 8009252:	4620      	mov	r0, r4
 8009254:	f7ff fa78 	bl	8008748 <acc_base_configuration_wg_duration_set>
 8009258:	2100      	movs	r1, #0
 800925a:	4620      	mov	r0, r4
 800925c:	f7ff fa62 	bl	8008724 <acc_base_configuration_integrator_set>
 8009260:	4620      	mov	r0, r4
 8009262:	2103      	movs	r1, #3
 8009264:	f7ff fa82 	bl	800876c <acc_base_configuration_integrator_ramp_up_set>
 8009268:	4b0c      	ldr	r3, [pc, #48]	; (800929c <set_configuration_for_profile+0x8c>)
 800926a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	2107      	movs	r1, #7
 8009272:	4620      	mov	r0, r4
 8009274:	f7ff fa68 	bl	8008748 <acc_base_configuration_wg_duration_set>
 8009278:	2106      	movs	r1, #6
 800927a:	4620      	mov	r0, r4
 800927c:	f7ff fa52 	bl	8008724 <acc_base_configuration_integrator_set>
 8009280:	4620      	mov	r0, r4
 8009282:	2109      	movs	r1, #9
 8009284:	f7ff fa72 	bl	800876c <acc_base_configuration_integrator_ramp_up_set>
 8009288:	4b03      	ldr	r3, [pc, #12]	; (8009298 <set_configuration_for_profile+0x88>)
 800928a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	2109      	movs	r1, #9
 8009292:	e7ee      	b.n	8009272 <set_configuration_for_profile+0x62>
 8009294:	210c      	movs	r1, #12
 8009296:	e7cc      	b.n	8009232 <set_configuration_for_profile+0x22>
 8009298:	3b843809 	.word	0x3b843809
 800929c:	3c8461fa 	.word	0x3c8461fa

080092a0 <acc_service_envelope_configuration_create>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	236d      	movs	r3, #109	; 0x6d
 80092a4:	b084      	sub	sp, #16
 80092a6:	4a40      	ldr	r2, [pc, #256]	; (80093a8 <acc_service_envelope_configuration_create+0x108>)
 80092a8:	2190      	movs	r1, #144	; 0x90
 80092aa:	2001      	movs	r0, #1
 80092ac:	f7ff fdc8 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 80092b0:	4605      	mov	r5, r0
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d075      	beq.n	80093a2 <acc_service_envelope_configuration_create+0x102>
 80092b6:	493d      	ldr	r1, [pc, #244]	; (80093ac <acc_service_envelope_configuration_create+0x10c>)
 80092b8:	f100 041c 	add.w	r4, r0, #28
 80092bc:	2602      	movs	r6, #2
 80092be:	2358      	movs	r3, #88	; 0x58
 80092c0:	4622      	mov	r2, r4
 80092c2:	e9cd 3100 	strd	r3, r1, [sp]
 80092c6:	9602      	str	r6, [sp, #8]
 80092c8:	4b39      	ldr	r3, [pc, #228]	; (80093b0 <acc_service_envelope_configuration_create+0x110>)
 80092ca:	2100      	movs	r1, #0
 80092cc:	f000 fe48 	bl	8009f60 <acc_service_initialize_service_configuration>
 80092d0:	4620      	mov	r0, r4
 80092d2:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80093b4 <acc_service_envelope_configuration_create+0x114>
 80092d6:	f7ff f8bd 	bl	8008454 <acc_base_configuration_requested_start_set>
 80092da:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80093b8 <acc_service_envelope_configuration_create+0x118>
 80092de:	4620      	mov	r0, r4
 80092e0:	f7ff f8d4 	bl	800848c <acc_base_configuration_requested_length_set>
 80092e4:	4620      	mov	r0, r4
 80092e6:	2106      	movs	r1, #6
 80092e8:	f7ff fba8 	bl	8008a3c <acc_base_configuration_mur_set>
 80092ec:	4620      	mov	r0, r4
 80092ee:	210a      	movs	r1, #10
 80092f0:	f7ff f950 	bl	8008594 <acc_base_configuration_hw_accelerated_average_samples_set>
 80092f4:	2101      	movs	r1, #1
 80092f6:	4620      	mov	r0, r4
 80092f8:	f7ff f896 	bl	8008428 <acc_base_configuration_sensor_set>
 80092fc:	4620      	mov	r0, r4
 80092fe:	f7ff f8d3 	bl	80084a8 <acc_base_configuration_repetition_mode_on_demand_set>
 8009302:	4631      	mov	r1, r6
 8009304:	4620      	mov	r0, r4
 8009306:	f7ff f8df 	bl	80084c8 <acc_base_configuration_power_save_mode_set>
 800930a:	4620      	mov	r0, r4
 800930c:	2100      	movs	r1, #0
 800930e:	f7ff fa5b 	bl	80087c8 <acc_base_configuration_use_point_range_set>
 8009312:	4620      	mov	r0, r4
 8009314:	2100      	movs	r1, #0
 8009316:	f7ff fa45 	bl	80087a4 <acc_base_configuration_sweep_type_debug_set>
 800931a:	4620      	mov	r0, r4
 800931c:	2100      	movs	r1, #0
 800931e:	f7ff f915 	bl	800854c <acc_base_configuration_tx_disable_set>
 8009322:	4620      	mov	r0, r4
 8009324:	2100      	movs	r1, #0
 8009326:	f7ff f923 	bl	8008570 <acc_base_configuration_decrease_tx_emission_set>
 800932a:	2200      	movs	r2, #0
 800932c:	4611      	mov	r1, r2
 800932e:	2340      	movs	r3, #64	; 0x40
 8009330:	4620      	mov	r0, r4
 8009332:	f7ff fb73 	bl	8008a1c <acc_base_configuration_cca_set>
 8009336:	4620      	mov	r0, r4
 8009338:	21ff      	movs	r1, #255	; 0xff
 800933a:	f7ff fa61 	bl	8008800 <acc_base_configuration_staggered_vga_stabilization_time_set>
 800933e:	4620      	mov	r0, r4
 8009340:	2100      	movs	r1, #0
 8009342:	f7ff fa53 	bl	80087ec <acc_base_configuration_use_fast_dll_refresh_routine_set>
 8009346:	2300      	movs	r3, #0
 8009348:	4619      	mov	r1, r3
 800934a:	461a      	mov	r2, r3
 800934c:	4620      	mov	r0, r4
 800934e:	f7ff fab3 	bl	80088b8 <acc_base_configuration_proximity_sweep_set>
 8009352:	4620      	mov	r0, r4
 8009354:	2101      	movs	r1, #1
 8009356:	f7ff faf5 	bl	8008944 <acc_base_configuration_downsampling_factor_set>
 800935a:	4620      	mov	r0, r4
 800935c:	210b      	movs	r1, #11
 800935e:	f7ff f9d1 	bl	8008704 <acc_base_configuration_gain_set>
 8009362:	2101      	movs	r1, #1
 8009364:	4620      	mov	r0, r4
 8009366:	f7ff faff 	bl	8008968 <acc_base_configuration_noise_level_normalization_set>
 800936a:	4620      	mov	r0, r4
 800936c:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80093bc <acc_service_envelope_configuration_create+0x11c>
 8009370:	f7ff f92e 	bl	80085d0 <acc_base_configuration_phase_compensation_alpha_set>
 8009374:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80093c0 <acc_service_envelope_configuration_create+0x120>
 8009378:	4620      	mov	r0, r4
 800937a:	2101      	movs	r1, #1
 800937c:	f7ff f942 	bl	8008604 <acc_base_configuration_time_domain_low_pass_filter_alpha_set>
 8009380:	4620      	mov	r0, r4
 8009382:	2101      	movs	r1, #1
 8009384:	f7ff f956 	bl	8008634 <acc_base_configuration_filter_demodulated_data_set>
 8009388:	4620      	mov	r0, r4
 800938a:	2101      	movs	r1, #1
 800938c:	f7ff fb06 	bl	800899c <acc_base_configuration_asynchronous_measurement_set>
 8009390:	4620      	mov	r0, r4
 8009392:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 8009396:	f7ff fb13 	bl	80089c0 <acc_base_configuration_min_pipeline_memory_size_set>
 800939a:	4620      	mov	r0, r4
 800939c:	4909      	ldr	r1, [pc, #36]	; (80093c4 <acc_service_envelope_configuration_create+0x124>)
 800939e:	f7ff f901 	bl	80085a4 <acc_base_configuration_radar_engine_creation_set>
 80093a2:	4628      	mov	r0, r5
 80093a4:	b004      	add	sp, #16
 80093a6:	bd70      	pop	{r4, r5, r6, pc}
 80093a8:	0801894c 	.word	0x0801894c
 80093ac:	08009211 	.word	0x08009211
 80093b0:	080090fd 	.word	0x080090fd
 80093b4:	3e4ccccd 	.word	0x3e4ccccd
 80093b8:	3ecccccd 	.word	0x3ecccccd
 80093bc:	3dcccccd 	.word	0x3dcccccd
 80093c0:	3e99999a 	.word	0x3e99999a
 80093c4:	0800b291 	.word	0x0800b291

080093c8 <acc_service_envelope_configuration_destroy>:
 80093c8:	b170      	cbz	r0, 80093e8 <acc_service_envelope_configuration_destroy+0x20>
 80093ca:	b510      	push	{r4, lr}
 80093cc:	4604      	mov	r4, r0
 80093ce:	6800      	ldr	r0, [r0, #0]
 80093d0:	f000 fd58 	bl	8009e84 <acc_service_configuration_valid>
 80093d4:	b900      	cbnz	r0, 80093d8 <acc_service_envelope_configuration_destroy+0x10>
 80093d6:	bd10      	pop	{r4, pc}
 80093d8:	6820      	ldr	r0, [r4, #0]
 80093da:	f7ff feff 	bl	80091dc <get_and_validate_envelope_configuration>
 80093de:	f7ff fd4d 	bl	8008e7c <acc_rss_integration_mem_free>
 80093e2:	2300      	movs	r3, #0
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	bd10      	pop	{r4, pc}
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop

080093ec <acc_service_envelope_downsampling_factor_set>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	460d      	mov	r5, r1
 80093f0:	4604      	mov	r4, r0
 80093f2:	f7ff fef3 	bl	80091dc <get_and_validate_envelope_configuration>
 80093f6:	b128      	cbz	r0, 8009404 <acc_service_envelope_downsampling_factor_set+0x18>
 80093f8:	4629      	mov	r1, r5
 80093fa:	6920      	ldr	r0, [r4, #16]
 80093fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009400:	f7ff baa0 	b.w	8008944 <acc_base_configuration_downsampling_factor_set>
 8009404:	bd38      	pop	{r3, r4, r5, pc}
 8009406:	bf00      	nop

08009408 <acc_service_envelope_running_average_factor_set>:
 8009408:	b510      	push	{r4, lr}
 800940a:	ed2d 8b02 	vpush	{d8}
 800940e:	4604      	mov	r4, r0
 8009410:	eeb0 8a40 	vmov.f32	s16, s0
 8009414:	f7ff fee2 	bl	80091dc <get_and_validate_envelope_configuration>
 8009418:	b1c0      	cbz	r0, 800944c <acc_service_envelope_running_average_factor_set+0x44>
 800941a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800941e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009422:	d406      	bmi.n	8009432 <acc_service_envelope_running_average_factor_set+0x2a>
 8009424:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8009428:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800942c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009430:	dd0f      	ble.n	8009452 <acc_service_envelope_running_average_factor_set+0x4a>
 8009432:	f7ff fd35 	bl	8008ea0 <acc_rss_integration_log_level>
 8009436:	b148      	cbz	r0, 800944c <acc_service_envelope_running_average_factor_set+0x44>
 8009438:	ecbd 8b02 	vpop	{d8}
 800943c:	4b0e      	ldr	r3, [pc, #56]	; (8009478 <acc_service_envelope_running_average_factor_set+0x70>)
 800943e:	4a0f      	ldr	r2, [pc, #60]	; (800947c <acc_service_envelope_running_average_factor_set+0x74>)
 8009440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009442:	490f      	ldr	r1, [pc, #60]	; (8009480 <acc_service_envelope_running_average_factor_set+0x78>)
 8009444:	2001      	movs	r0, #1
 8009446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800944a:	4718      	bx	r3
 800944c:	ecbd 8b02 	vpop	{d8}
 8009450:	bd10      	pop	{r4, pc}
 8009452:	4620      	mov	r0, r4
 8009454:	f000 fb1c 	bl	8009a90 <acc_service_get_base_configuration>
 8009458:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800945c:	ee38 0ac8 	vsub.f32	s0, s17, s16
 8009460:	ecbd 8b02 	vpop	{d8}
 8009464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009468:	bf14      	ite	ne
 800946a:	2101      	movne	r1, #1
 800946c:	2100      	moveq	r1, #0
 800946e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009472:	f7ff b8c7 	b.w	8008604 <acc_base_configuration_time_domain_low_pass_filter_alpha_set>
 8009476:	bf00      	nop
 8009478:	20001628 	.word	0x20001628
 800947c:	08018970 	.word	0x08018970
 8009480:	080189f0 	.word	0x080189f0

08009484 <acc_service_envelope_get_metadata>:
 8009484:	b1e0      	cbz	r0, 80094c0 <acc_service_envelope_get_metadata+0x3c>
 8009486:	7a03      	ldrb	r3, [r0, #8]
 8009488:	b9d3      	cbnz	r3, 80094c0 <acc_service_envelope_get_metadata+0x3c>
 800948a:	b1c9      	cbz	r1, 80094c0 <acc_service_envelope_get_metadata+0x3c>
 800948c:	6903      	ldr	r3, [r0, #16]
 800948e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80094c4 <acc_service_envelope_get_metadata+0x40>
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009498:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800949a:	8dd8      	ldrh	r0, [r3, #46]	; 0x2e
 800949c:	b430      	push	{r4, r5}
 800949e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80094a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094aa:	699d      	ldr	r5, [r3, #24]
 80094ac:	69dc      	ldr	r4, [r3, #28]
 80094ae:	604c      	str	r4, [r1, #4]
 80094b0:	1e53      	subs	r3, r2, #1
 80094b2:	600d      	str	r5, [r1, #0]
 80094b4:	edc1 7a03 	vstr	s15, [r1, #12]
 80094b8:	814b      	strh	r3, [r1, #10]
 80094ba:	8108      	strh	r0, [r1, #8]
 80094bc:	bc30      	pop	{r4, r5}
 80094be:	4770      	bx	lr
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	4d8ef3c2 	.word	0x4d8ef3c2

080094c8 <acc_service_envelope_get_next_by_reference>:
 80094c8:	b1b9      	cbz	r1, 80094fa <acc_service_envelope_get_next_by_reference+0x32>
 80094ca:	b530      	push	{r4, r5, lr}
 80094cc:	b089      	sub	sp, #36	; 0x24
 80094ce:	2404      	movs	r4, #4
 80094d0:	2300      	movs	r3, #0
 80094d2:	680d      	ldr	r5, [r1, #0]
 80094d4:	9103      	str	r1, [sp, #12]
 80094d6:	eb0d 0104 	add.w	r1, sp, r4
 80094da:	9502      	str	r5, [sp, #8]
 80094dc:	9205      	str	r2, [sp, #20]
 80094de:	f88d 3004 	strb.w	r3, [sp, #4]
 80094e2:	9304      	str	r3, [sp, #16]
 80094e4:	f88d 301c 	strb.w	r3, [sp, #28]
 80094e8:	f88d 301d 	strb.w	r3, [sp, #29]
 80094ec:	f88d 301e 	strb.w	r3, [sp, #30]
 80094f0:	9406      	str	r4, [sp, #24]
 80094f2:	f000 fc0d 	bl	8009d10 <acc_service_get_next>
 80094f6:	b009      	add	sp, #36	; 0x24
 80094f8:	bd30      	pop	{r4, r5, pc}
 80094fa:	4608      	mov	r0, r1
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop

08009500 <destroy_handle>:
 8009500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009504:	4e15      	ldr	r6, [pc, #84]	; (800955c <destroy_handle+0x5c>)
 8009506:	4605      	mov	r5, r0
 8009508:	6874      	ldr	r4, [r6, #4]
 800950a:	f7ff fcc9 	bl	8008ea0 <acc_rss_integration_log_level>
 800950e:	2803      	cmp	r0, #3
 8009510:	d906      	bls.n	8009520 <destroy_handle+0x20>
 8009512:	4a13      	ldr	r2, [pc, #76]	; (8009560 <destroy_handle+0x60>)
 8009514:	686b      	ldr	r3, [r5, #4]
 8009516:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8009518:	4912      	ldr	r1, [pc, #72]	; (8009564 <destroy_handle+0x64>)
 800951a:	4a13      	ldr	r2, [pc, #76]	; (8009568 <destroy_handle+0x68>)
 800951c:	2004      	movs	r0, #4
 800951e:	47b8      	blx	r7
 8009520:	b144      	cbz	r4, 8009534 <destroy_handle+0x34>
 8009522:	42ac      	cmp	r4, r5
 8009524:	d103      	bne.n	800952e <destroy_handle+0x2e>
 8009526:	e016      	b.n	8009556 <destroy_handle+0x56>
 8009528:	429d      	cmp	r5, r3
 800952a:	d00d      	beq.n	8009548 <destroy_handle+0x48>
 800952c:	461c      	mov	r4, r3
 800952e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1f9      	bne.n	8009528 <destroy_handle+0x28>
 8009534:	4a0a      	ldr	r2, [pc, #40]	; (8009560 <destroy_handle+0x60>)
 8009536:	686b      	ldr	r3, [r5, #4]
 8009538:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800953a:	490a      	ldr	r1, [pc, #40]	; (8009564 <destroy_handle+0x64>)
 800953c:	4a0b      	ldr	r2, [pc, #44]	; (800956c <destroy_handle+0x6c>)
 800953e:	46a4      	mov	ip, r4
 8009540:	2000      	movs	r0, #0
 8009542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009546:	4760      	bx	ip
 8009548:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800954a:	6563      	str	r3, [r4, #84]	; 0x54
 800954c:	4628      	mov	r0, r5
 800954e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009552:	f7ff bc93 	b.w	8008e7c <acc_rss_integration_mem_free>
 8009556:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8009558:	6073      	str	r3, [r6, #4]
 800955a:	e7f7      	b.n	800954c <destroy_handle+0x4c>
 800955c:	200015a8 	.word	0x200015a8
 8009560:	20001628 	.word	0x20001628
 8009564:	08018b78 	.word	0x08018b78
 8009568:	08018b54 	.word	0x08018b54
 800956c:	08018b88 	.word	0x08018b88

08009570 <acc_service_manager_activate>:
 8009570:	b510      	push	{r4, lr}
 8009572:	4c05      	ldr	r4, [pc, #20]	; (8009588 <acc_service_manager_activate+0x18>)
 8009574:	7820      	ldrb	r0, [r4, #0]
 8009576:	b100      	cbz	r0, 800957a <acc_service_manager_activate+0xa>
 8009578:	bd10      	pop	{r4, pc}
 800957a:	2301      	movs	r3, #1
 800957c:	4618      	mov	r0, r3
 800957e:	7023      	strb	r3, [r4, #0]
 8009580:	f000 fc62 	bl	8009e48 <acc_service_set_module_active>
 8009584:	7820      	ldrb	r0, [r4, #0]
 8009586:	bd10      	pop	{r4, pc}
 8009588:	200015a8 	.word	0x200015a8

0800958c <acc_service_create>:
 800958c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009590:	4d30      	ldr	r5, [pc, #192]	; (8009654 <acc_service_create+0xc8>)
 8009592:	782c      	ldrb	r4, [r5, #0]
 8009594:	b944      	cbnz	r4, 80095a8 <acc_service_create+0x1c>
 8009596:	4b30      	ldr	r3, [pc, #192]	; (8009658 <acc_service_create+0xcc>)
 8009598:	4a30      	ldr	r2, [pc, #192]	; (800965c <acc_service_create+0xd0>)
 800959a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959c:	4930      	ldr	r1, [pc, #192]	; (8009660 <acc_service_create+0xd4>)
 800959e:	4620      	mov	r0, r4
 80095a0:	4798      	blx	r3
 80095a2:	4620      	mov	r0, r4
 80095a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a8:	4606      	mov	r6, r0
 80095aa:	f000 fc6b 	bl	8009e84 <acc_service_configuration_valid>
 80095ae:	b198      	cbz	r0, 80095d8 <acc_service_create+0x4c>
 80095b0:	6933      	ldr	r3, [r6, #16]
 80095b2:	68df      	ldr	r7, [r3, #12]
 80095b4:	2f2a      	cmp	r7, #42	; 0x2a
 80095b6:	d838      	bhi.n	800962a <acc_service_create+0x9e>
 80095b8:	786b      	ldrb	r3, [r5, #1]
 80095ba:	b98b      	cbnz	r3, 80095e0 <acc_service_create+0x54>
 80095bc:	686b      	ldr	r3, [r5, #4]
 80095be:	b913      	cbnz	r3, 80095c6 <acc_service_create+0x3a>
 80095c0:	e00e      	b.n	80095e0 <acc_service_create+0x54>
 80095c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c4:	b163      	cbz	r3, 80095e0 <acc_service_create+0x54>
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	4297      	cmp	r7, r2
 80095ca:	d1fa      	bne.n	80095c2 <acc_service_create+0x36>
 80095cc:	4b22      	ldr	r3, [pc, #136]	; (8009658 <acc_service_create+0xcc>)
 80095ce:	4a25      	ldr	r2, [pc, #148]	; (8009664 <acc_service_create+0xd8>)
 80095d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d2:	4923      	ldr	r1, [pc, #140]	; (8009660 <acc_service_create+0xd4>)
 80095d4:	2000      	movs	r0, #0
 80095d6:	4798      	blx	r3
 80095d8:	2400      	movs	r4, #0
 80095da:	4620      	mov	r0, r4
 80095dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e0:	8b34      	ldrh	r4, [r6, #24]
 80095e2:	f7ff fc5d 	bl	8008ea0 <acc_rss_integration_log_level>
 80095e6:	2803      	cmp	r0, #3
 80095e8:	d907      	bls.n	80095fa <acc_service_create+0x6e>
 80095ea:	4b1b      	ldr	r3, [pc, #108]	; (8009658 <acc_service_create+0xcc>)
 80095ec:	4a1e      	ldr	r2, [pc, #120]	; (8009668 <acc_service_create+0xdc>)
 80095ee:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80095f2:	491b      	ldr	r1, [pc, #108]	; (8009660 <acc_service_create+0xd4>)
 80095f4:	463b      	mov	r3, r7
 80095f6:	2004      	movs	r0, #4
 80095f8:	47c0      	blx	r8
 80095fa:	4621      	mov	r1, r4
 80095fc:	23bd      	movs	r3, #189	; 0xbd
 80095fe:	4a1b      	ldr	r2, [pc, #108]	; (800966c <acc_service_create+0xe0>)
 8009600:	2001      	movs	r0, #1
 8009602:	f7ff fc1d 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 8009606:	4604      	mov	r4, r0
 8009608:	2800      	cmp	r0, #0
 800960a:	d0e5      	beq.n	80095d8 <acc_service_create+0x4c>
 800960c:	686b      	ldr	r3, [r5, #4]
 800960e:	4a18      	ldr	r2, [pc, #96]	; (8009670 <acc_service_create+0xe4>)
 8009610:	6047      	str	r7, [r0, #4]
 8009612:	6002      	str	r2, [r0, #0]
 8009614:	6543      	str	r3, [r0, #84]	; 0x54
 8009616:	6068      	str	r0, [r5, #4]
 8009618:	6973      	ldr	r3, [r6, #20]
 800961a:	4631      	mov	r1, r6
 800961c:	4798      	blx	r3
 800961e:	b178      	cbz	r0, 8009640 <acc_service_create+0xb4>
 8009620:	2301      	movs	r3, #1
 8009622:	7263      	strb	r3, [r4, #9]
 8009624:	4620      	mov	r0, r4
 8009626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800962a:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <acc_service_create+0xcc>)
 800962c:	4a11      	ldr	r2, [pc, #68]	; (8009674 <acc_service_create+0xe8>)
 800962e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009630:	490b      	ldr	r1, [pc, #44]	; (8009660 <acc_service_create+0xd4>)
 8009632:	232a      	movs	r3, #42	; 0x2a
 8009634:	2000      	movs	r0, #0
 8009636:	47a0      	blx	r4
 8009638:	2400      	movs	r4, #0
 800963a:	4620      	mov	r0, r4
 800963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009640:	68e3      	ldr	r3, [r4, #12]
 8009642:	b10b      	cbz	r3, 8009648 <acc_service_create+0xbc>
 8009644:	4620      	mov	r0, r4
 8009646:	4798      	blx	r3
 8009648:	4620      	mov	r0, r4
 800964a:	f7ff ff59 	bl	8009500 <destroy_handle>
 800964e:	2400      	movs	r4, #0
 8009650:	e7a7      	b.n	80095a2 <acc_service_create+0x16>
 8009652:	bf00      	nop
 8009654:	200015a8 	.word	0x200015a8
 8009658:	20001628 	.word	0x20001628
 800965c:	08018acc 	.word	0x08018acc
 8009660:	08018b78 	.word	0x08018b78
 8009664:	08018ae0 	.word	0x08018ae0
 8009668:	08018a88 	.word	0x08018a88
 800966c:	08018aa8 	.word	0x08018aa8
 8009670:	acc09ee8 	.word	0xacc09ee8
 8009674:	08018a6c 	.word	0x08018a6c

08009678 <acc_service_destroy>:
 8009678:	4b11      	ldr	r3, [pc, #68]	; (80096c0 <acc_service_destroy+0x48>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	b510      	push	{r4, lr}
 800967e:	b133      	cbz	r3, 800968e <acc_service_destroy+0x16>
 8009680:	4604      	mov	r4, r0
 8009682:	b118      	cbz	r0, 800968c <acc_service_destroy+0x14>
 8009684:	6800      	ldr	r0, [r0, #0]
 8009686:	f000 fbe5 	bl	8009e54 <acc_service_handle_valid>
 800968a:	b960      	cbnz	r0, 80096a6 <acc_service_destroy+0x2e>
 800968c:	bd10      	pop	{r4, pc}
 800968e:	f7ff fc07 	bl	8008ea0 <acc_rss_integration_log_level>
 8009692:	2800      	cmp	r0, #0
 8009694:	d0fa      	beq.n	800968c <acc_service_destroy+0x14>
 8009696:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <acc_service_destroy+0x4c>)
 8009698:	4a0b      	ldr	r2, [pc, #44]	; (80096c8 <acc_service_destroy+0x50>)
 800969a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969c:	490b      	ldr	r1, [pc, #44]	; (80096cc <acc_service_destroy+0x54>)
 800969e:	2001      	movs	r0, #1
 80096a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a4:	4718      	bx	r3
 80096a6:	6820      	ldr	r0, [r4, #0]
 80096a8:	f000 fa76 	bl	8009b98 <acc_service_deactivate>
 80096ac:	6820      	ldr	r0, [r4, #0]
 80096ae:	68c3      	ldr	r3, [r0, #12]
 80096b0:	b10b      	cbz	r3, 80096b6 <acc_service_destroy+0x3e>
 80096b2:	4798      	blx	r3
 80096b4:	6820      	ldr	r0, [r4, #0]
 80096b6:	f7ff ff23 	bl	8009500 <destroy_handle>
 80096ba:	2300      	movs	r3, #0
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	bd10      	pop	{r4, pc}
 80096c0:	200015a8 	.word	0x200015a8
 80096c4:	20001628 	.word	0x20001628
 80096c8:	08018acc 	.word	0x08018acc
 80096cc:	08018b78 	.word	0x08018b78

080096d0 <acc_service_manager_deactivate>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	4c0e      	ldr	r4, [pc, #56]	; (800970c <acc_service_manager_deactivate+0x3c>)
 80096d4:	7823      	ldrb	r3, [r4, #0]
 80096d6:	b1c3      	cbz	r3, 800970a <acc_service_manager_deactivate+0x3a>
 80096d8:	6863      	ldr	r3, [r4, #4]
 80096da:	b17b      	cbz	r3, 80096fc <acc_service_manager_deactivate+0x2c>
 80096dc:	1d25      	adds	r5, r4, #4
 80096de:	4628      	mov	r0, r5
 80096e0:	f7ff ffca 	bl	8009678 <acc_service_destroy>
 80096e4:	6863      	ldr	r3, [r4, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1f9      	bne.n	80096de <acc_service_manager_deactivate+0xe>
 80096ea:	f7ff fbd9 	bl	8008ea0 <acc_rss_integration_log_level>
 80096ee:	b128      	cbz	r0, 80096fc <acc_service_manager_deactivate+0x2c>
 80096f0:	4b07      	ldr	r3, [pc, #28]	; (8009710 <acc_service_manager_deactivate+0x40>)
 80096f2:	4a08      	ldr	r2, [pc, #32]	; (8009714 <acc_service_manager_deactivate+0x44>)
 80096f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f6:	4908      	ldr	r1, [pc, #32]	; (8009718 <acc_service_manager_deactivate+0x48>)
 80096f8:	2001      	movs	r0, #1
 80096fa:	4798      	blx	r3
 80096fc:	2300      	movs	r3, #0
 80096fe:	4618      	mov	r0, r3
 8009700:	7023      	strb	r3, [r4, #0]
 8009702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009706:	f000 bb9f 	b.w	8009e48 <acc_service_set_module_active>
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	200015a8 	.word	0x200015a8
 8009710:	20001628 	.word	0x20001628
 8009714:	08018b08 	.word	0x08018b08
 8009718:	08018b78 	.word	0x08018b78

0800971c <acc_service_manager_is_service_created>:
 800971c:	4b06      	ldr	r3, [pc, #24]	; (8009738 <acc_service_manager_is_service_created+0x1c>)
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	b913      	cbnz	r3, 8009728 <acc_service_manager_is_service_created+0xc>
 8009722:	e006      	b.n	8009732 <acc_service_manager_is_service_created+0x16>
 8009724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009726:	b123      	cbz	r3, 8009732 <acc_service_manager_is_service_created+0x16>
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	4290      	cmp	r0, r2
 800972c:	d1fa      	bne.n	8009724 <acc_service_manager_is_service_created+0x8>
 800972e:	2001      	movs	r0, #1
 8009730:	4770      	bx	lr
 8009732:	4618      	mov	r0, r3
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	200015a8 	.word	0x200015a8

0800973c <sparse_send_data>:
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	790b      	ldrb	r3, [r1, #4]
 8009742:	f88d 300d 	strb.w	r3, [sp, #13]
 8009746:	4616      	mov	r6, r2
 8009748:	ab02      	add	r3, sp, #8
 800974a:	794c      	ldrb	r4, [r1, #5]
 800974c:	798d      	ldrb	r5, [r1, #6]
 800974e:	694a      	ldr	r2, [r1, #20]
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	4601      	mov	r1, r0
 8009754:	ab03      	add	r3, sp, #12
 8009756:	4630      	mov	r0, r6
 8009758:	f88d 400c 	strb.w	r4, [sp, #12]
 800975c:	f88d 4008 	strb.w	r4, [sp, #8]
 8009760:	f88d 500e 	strb.w	r5, [sp, #14]
 8009764:	f000 fb50 	bl	8009e08 <acc_service_send_data>
 8009768:	b004      	add	sp, #16
 800976a:	bd70      	pop	{r4, r5, r6, pc}

0800976c <sparse_create_service>:
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	b0a4      	sub	sp, #144	; 0x90
 8009770:	4605      	mov	r5, r0
 8009772:	228c      	movs	r2, #140	; 0x8c
 8009774:	a801      	add	r0, sp, #4
 8009776:	460e      	mov	r6, r1
 8009778:	f009 fab2 	bl	8012ce0 <memcpy>
 800977c:	a801      	add	r0, sp, #4
 800977e:	f000 fb9f 	bl	8009ec0 <acc_service_configuration_check>
 8009782:	b910      	cbnz	r0, 800978a <sparse_create_service+0x1e>
 8009784:	2000      	movs	r0, #0
 8009786:	b024      	add	sp, #144	; 0x90
 8009788:	bd70      	pop	{r4, r5, r6, pc}
 800978a:	a808      	add	r0, sp, #32
 800978c:	f7ff fa34 	bl	8008bf8 <acc_base_configuration_check>
 8009790:	2800      	cmp	r0, #0
 8009792:	d0f7      	beq.n	8009784 <sparse_create_service+0x18>
 8009794:	f8bd 4088 	ldrh.w	r4, [sp, #136]	; 0x88
 8009798:	b934      	cbnz	r4, 80097a8 <sparse_create_service+0x3c>
 800979a:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <sparse_create_service+0x7c>)
 800979c:	4a13      	ldr	r2, [pc, #76]	; (80097ec <sparse_create_service+0x80>)
 800979e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a0:	4913      	ldr	r1, [pc, #76]	; (80097f0 <sparse_create_service+0x84>)
 80097a2:	2000      	movs	r0, #0
 80097a4:	4798      	blx	r3
 80097a6:	e7ed      	b.n	8009784 <sparse_create_service+0x18>
 80097a8:	f89d 308a 	ldrb.w	r3, [sp, #138]	; 0x8a
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d013      	beq.n	80097d8 <sparse_create_service+0x6c>
 80097b0:	a924      	add	r1, sp, #144	; 0x90
 80097b2:	4b10      	ldr	r3, [pc, #64]	; (80097f4 <sparse_create_service+0x88>)
 80097b4:	f841 3d90 	str.w	r3, [r1, #-144]!
 80097b8:	7933      	ldrb	r3, [r6, #4]
 80097ba:	722b      	strb	r3, [r5, #8]
 80097bc:	aa08      	add	r2, sp, #32
 80097be:	462b      	mov	r3, r5
 80097c0:	f105 0018 	add.w	r0, r5, #24
 80097c4:	f000 fd52 	bl	800a26c <acc_pipeline_direct_assemble>
 80097c8:	4b0b      	ldr	r3, [pc, #44]	; (80097f8 <sparse_create_service+0x8c>)
 80097ca:	6128      	str	r0, [r5, #16]
 80097cc:	3000      	adds	r0, #0
 80097ce:	bf18      	it	ne
 80097d0:	2001      	movne	r0, #1
 80097d2:	60eb      	str	r3, [r5, #12]
 80097d4:	b024      	add	sp, #144	; 0x90
 80097d6:	bd70      	pop	{r4, r5, r6, pc}
 80097d8:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 80097dc:	2b40      	cmp	r3, #64	; 0x40
 80097de:	d9e7      	bls.n	80097b0 <sparse_create_service+0x44>
 80097e0:	4b01      	ldr	r3, [pc, #4]	; (80097e8 <sparse_create_service+0x7c>)
 80097e2:	4a06      	ldr	r2, [pc, #24]	; (80097fc <sparse_create_service+0x90>)
 80097e4:	e7db      	b.n	800979e <sparse_create_service+0x32>
 80097e6:	bf00      	nop
 80097e8:	20001628 	.word	0x20001628
 80097ec:	08018be0 	.word	0x08018be0
 80097f0:	08018c10 	.word	0x08018c10
 80097f4:	0800973d 	.word	0x0800973d
 80097f8:	08009cf9 	.word	0x08009cf9
 80097fc:	08018c20 	.word	0x08018c20

08009800 <get_sparse_configuration>:
 8009800:	b120      	cbz	r0, 800980c <get_sparse_configuration+0xc>
 8009802:	7903      	ldrb	r3, [r0, #4]
 8009804:	2b03      	cmp	r3, #3
 8009806:	d00e      	beq.n	8009826 <get_sparse_configuration+0x26>
 8009808:	2000      	movs	r0, #0
 800980a:	4770      	bx	lr
 800980c:	b510      	push	{r4, lr}
 800980e:	4604      	mov	r4, r0
 8009810:	f7ff fb46 	bl	8008ea0 <acc_rss_integration_log_level>
 8009814:	b140      	cbz	r0, 8009828 <get_sparse_configuration+0x28>
 8009816:	4b05      	ldr	r3, [pc, #20]	; (800982c <get_sparse_configuration+0x2c>)
 8009818:	4a05      	ldr	r2, [pc, #20]	; (8009830 <get_sparse_configuration+0x30>)
 800981a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981c:	4905      	ldr	r1, [pc, #20]	; (8009834 <get_sparse_configuration+0x34>)
 800981e:	2001      	movs	r0, #1
 8009820:	4798      	blx	r3
 8009822:	4620      	mov	r0, r4
 8009824:	bd10      	pop	{r4, pc}
 8009826:	4770      	bx	lr
 8009828:	2000      	movs	r0, #0
 800982a:	bd10      	pop	{r4, pc}
 800982c:	20001628 	.word	0x20001628
 8009830:	08018008 	.word	0x08018008
 8009834:	08018c10 	.word	0x08018c10

08009838 <set_configuration_for_profile>:
 8009838:	b510      	push	{r4, lr}
 800983a:	460c      	mov	r4, r1
 800983c:	f7ff ffe0 	bl	8009800 <get_sparse_configuration>
 8009840:	b148      	cbz	r0, 8009856 <set_configuration_for_profile+0x1e>
 8009842:	1e61      	subs	r1, r4, #1
 8009844:	f100 041c 	add.w	r4, r0, #28
 8009848:	2904      	cmp	r1, #4
 800984a:	d804      	bhi.n	8009856 <set_configuration_for_profile+0x1e>
 800984c:	e8df f001 	tbb	[pc, r1]
 8009850:	241a180e 	.word	0x241a180e
 8009854:	04          	.byte	0x04
 8009855:	00          	.byte	0x00
 8009856:	bd10      	pop	{r4, pc}
 8009858:	2110      	movs	r1, #16
 800985a:	4620      	mov	r0, r4
 800985c:	f7fe ff74 	bl	8008748 <acc_base_configuration_wg_duration_set>
 8009860:	4620      	mov	r0, r4
 8009862:	2106      	movs	r1, #6
 8009864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009868:	f7fe bf5c 	b.w	8008724 <acc_base_configuration_integrator_set>
 800986c:	2100      	movs	r1, #0
 800986e:	4620      	mov	r0, r4
 8009870:	f7fe ff6a 	bl	8008748 <acc_base_configuration_wg_duration_set>
 8009874:	4620      	mov	r0, r4
 8009876:	2100      	movs	r1, #0
 8009878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800987c:	f7fe bf52 	b.w	8008724 <acc_base_configuration_integrator_set>
 8009880:	2107      	movs	r1, #7
 8009882:	e7f4      	b.n	800986e <set_configuration_for_profile+0x36>
 8009884:	4620      	mov	r0, r4
 8009886:	2109      	movs	r1, #9
 8009888:	f7fe ff5e 	bl	8008748 <acc_base_configuration_wg_duration_set>
 800988c:	4620      	mov	r0, r4
 800988e:	2103      	movs	r1, #3
 8009890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009894:	f7fe bf46 	b.w	8008724 <acc_base_configuration_integrator_set>
 8009898:	210c      	movs	r1, #12
 800989a:	e7de      	b.n	800985a <set_configuration_for_profile+0x22>

0800989c <acc_service_sparse_configuration_create>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	2360      	movs	r3, #96	; 0x60
 80098a0:	b084      	sub	sp, #16
 80098a2:	4a3f      	ldr	r2, [pc, #252]	; (80099a0 <acc_service_sparse_configuration_create+0x104>)
 80098a4:	218c      	movs	r1, #140	; 0x8c
 80098a6:	2001      	movs	r0, #1
 80098a8:	f7ff faca 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 80098ac:	4605      	mov	r5, r0
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d073      	beq.n	800999a <acc_service_sparse_configuration_create+0xfe>
 80098b2:	493c      	ldr	r1, [pc, #240]	; (80099a4 <acc_service_sparse_configuration_create+0x108>)
 80098b4:	f100 041c 	add.w	r4, r0, #28
 80098b8:	2602      	movs	r6, #2
 80098ba:	2358      	movs	r3, #88	; 0x58
 80098bc:	4622      	mov	r2, r4
 80098be:	e9cd 3100 	strd	r3, r1, [sp]
 80098c2:	9602      	str	r6, [sp, #8]
 80098c4:	4b38      	ldr	r3, [pc, #224]	; (80099a8 <acc_service_sparse_configuration_create+0x10c>)
 80098c6:	2103      	movs	r1, #3
 80098c8:	f000 fb4a 	bl	8009f60 <acc_service_initialize_service_configuration>
 80098cc:	4620      	mov	r0, r4
 80098ce:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80099ac <acc_service_sparse_configuration_create+0x110>
 80098d2:	f7fe fdbf 	bl	8008454 <acc_base_configuration_requested_start_set>
 80098d6:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80099b0 <acc_service_sparse_configuration_create+0x114>
 80098da:	4620      	mov	r0, r4
 80098dc:	f7fe fdd6 	bl	800848c <acc_base_configuration_requested_length_set>
 80098e0:	4620      	mov	r0, r4
 80098e2:	2106      	movs	r1, #6
 80098e4:	f7ff f8aa 	bl	8008a3c <acc_base_configuration_mur_set>
 80098e8:	2101      	movs	r1, #1
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7fe fd9c 	bl	8008428 <acc_base_configuration_sensor_set>
 80098f0:	4620      	mov	r0, r4
 80098f2:	f7fe fdd9 	bl	80084a8 <acc_base_configuration_repetition_mode_on_demand_set>
 80098f6:	4631      	mov	r1, r6
 80098f8:	4620      	mov	r0, r4
 80098fa:	f7fe fde5 	bl	80084c8 <acc_base_configuration_power_save_mode_set>
 80098fe:	4620      	mov	r0, r4
 8009900:	2100      	movs	r1, #0
 8009902:	f7fe ff61 	bl	80087c8 <acc_base_configuration_use_point_range_set>
 8009906:	2110      	movs	r1, #16
 8009908:	4620      	mov	r0, r4
 800990a:	f7fe ffe5 	bl	80088d8 <acc_base_configuration_sparse_sweeps_per_frame_set>
 800990e:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80099b4 <acc_service_sparse_configuration_create+0x118>
 8009912:	4620      	mov	r0, r4
 8009914:	f7fe fff2 	bl	80088fc <acc_base_configuration_sparse_sweep_rate_set>
 8009918:	4620      	mov	r0, r4
 800991a:	2100      	movs	r1, #0
 800991c:	f7fe ff42 	bl	80087a4 <acc_base_configuration_sweep_type_debug_set>
 8009920:	4620      	mov	r0, r4
 8009922:	2100      	movs	r1, #0
 8009924:	f7fe fe12 	bl	800854c <acc_base_configuration_tx_disable_set>
 8009928:	4620      	mov	r0, r4
 800992a:	2100      	movs	r1, #0
 800992c:	f7fe fe20 	bl	8008570 <acc_base_configuration_decrease_tx_emission_set>
 8009930:	2200      	movs	r2, #0
 8009932:	4611      	mov	r1, r2
 8009934:	2340      	movs	r3, #64	; 0x40
 8009936:	4620      	mov	r0, r4
 8009938:	f7ff f870 	bl	8008a1c <acc_base_configuration_cca_set>
 800993c:	4620      	mov	r0, r4
 800993e:	21ff      	movs	r1, #255	; 0xff
 8009940:	f7fe ff5e 	bl	8008800 <acc_base_configuration_staggered_vga_stabilization_time_set>
 8009944:	4620      	mov	r0, r4
 8009946:	2100      	movs	r1, #0
 8009948:	f7fe ff50 	bl	80087ec <acc_base_configuration_use_fast_dll_refresh_routine_set>
 800994c:	2300      	movs	r3, #0
 800994e:	4619      	mov	r1, r3
 8009950:	461a      	mov	r2, r3
 8009952:	4620      	mov	r0, r4
 8009954:	f7fe ffb0 	bl	80088b8 <acc_base_configuration_proximity_sweep_set>
 8009958:	4620      	mov	r0, r4
 800995a:	2101      	movs	r1, #1
 800995c:	f7fe fff2 	bl	8008944 <acc_base_configuration_downsampling_factor_set>
 8009960:	4620      	mov	r0, r4
 8009962:	2101      	movs	r1, #1
 8009964:	f7fe ff14 	bl	8008790 <acc_base_configuration_sampling_mode_set>
 8009968:	4620      	mov	r0, r4
 800996a:	210b      	movs	r1, #11
 800996c:	f7fe feca 	bl	8008704 <acc_base_configuration_gain_set>
 8009970:	4620      	mov	r0, r4
 8009972:	210a      	movs	r1, #10
 8009974:	f7fe fe0e 	bl	8008594 <acc_base_configuration_hw_accelerated_average_samples_set>
 8009978:	4620      	mov	r0, r4
 800997a:	2100      	movs	r1, #0
 800997c:	f7fe fff4 	bl	8008968 <acc_base_configuration_noise_level_normalization_set>
 8009980:	4620      	mov	r0, r4
 8009982:	2101      	movs	r1, #1
 8009984:	f7ff f80a 	bl	800899c <acc_base_configuration_asynchronous_measurement_set>
 8009988:	4620      	mov	r0, r4
 800998a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800998e:	f7ff f817 	bl	80089c0 <acc_base_configuration_min_pipeline_memory_size_set>
 8009992:	4620      	mov	r0, r4
 8009994:	4908      	ldr	r1, [pc, #32]	; (80099b8 <acc_service_sparse_configuration_create+0x11c>)
 8009996:	f7fe fe05 	bl	80085a4 <acc_base_configuration_radar_engine_creation_set>
 800999a:	4628      	mov	r0, r5
 800999c:	b004      	add	sp, #16
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	08018bbc 	.word	0x08018bbc
 80099a4:	08009839 	.word	0x08009839
 80099a8:	0800976d 	.word	0x0800976d
 80099ac:	3e4ccccd 	.word	0x3e4ccccd
 80099b0:	3e99999a 	.word	0x3e99999a
 80099b4:	00000000 	.word	0x00000000
 80099b8:	0800c101 	.word	0x0800c101

080099bc <acc_service_sparse_configuration_destroy>:
 80099bc:	b170      	cbz	r0, 80099dc <acc_service_sparse_configuration_destroy+0x20>
 80099be:	b510      	push	{r4, lr}
 80099c0:	4604      	mov	r4, r0
 80099c2:	6800      	ldr	r0, [r0, #0]
 80099c4:	f000 fa5e 	bl	8009e84 <acc_service_configuration_valid>
 80099c8:	b900      	cbnz	r0, 80099cc <acc_service_sparse_configuration_destroy+0x10>
 80099ca:	bd10      	pop	{r4, pc}
 80099cc:	6820      	ldr	r0, [r4, #0]
 80099ce:	f7ff ff17 	bl	8009800 <get_sparse_configuration>
 80099d2:	f7ff fa53 	bl	8008e7c <acc_rss_integration_mem_free>
 80099d6:	2300      	movs	r3, #0
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	bd10      	pop	{r4, pc}
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop

080099e0 <acc_service_sparse_configuration_sweeps_per_frame_set>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	460d      	mov	r5, r1
 80099e4:	4604      	mov	r4, r0
 80099e6:	f000 fa4d 	bl	8009e84 <acc_service_configuration_valid>
 80099ea:	b900      	cbnz	r0, 80099ee <acc_service_sparse_configuration_sweeps_per_frame_set+0xe>
 80099ec:	bd38      	pop	{r3, r4, r5, pc}
 80099ee:	4629      	mov	r1, r5
 80099f0:	6920      	ldr	r0, [r4, #16]
 80099f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099f6:	f7fe bf6f 	b.w	80088d8 <acc_base_configuration_sparse_sweeps_per_frame_set>
 80099fa:	bf00      	nop

080099fc <acc_service_sparse_get_metadata>:
 80099fc:	b110      	cbz	r0, 8009a04 <acc_service_sparse_get_metadata+0x8>
 80099fe:	7a03      	ldrb	r3, [r0, #8]
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d000      	beq.n	8009a06 <acc_service_sparse_get_metadata+0xa>
 8009a04:	4770      	bx	lr
 8009a06:	2900      	cmp	r1, #0
 8009a08:	d0fc      	beq.n	8009a04 <acc_service_sparse_get_metadata+0x8>
 8009a0a:	6903      	ldr	r3, [r0, #16]
 8009a0c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009a40 <acc_service_sparse_get_metadata+0x44>
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009a16:	69d8      	ldr	r0, [r3, #28]
 8009a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a26:	b410      	push	{r4}
 8009a28:	699c      	ldr	r4, [r3, #24]
 8009a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a2c:	810b      	strh	r3, [r1, #8]
 8009a2e:	600c      	str	r4, [r1, #0]
 8009a30:	6048      	str	r0, [r1, #4]
 8009a32:	edc1 7a04 	vstr	s15, [r1, #16]
 8009a36:	60ca      	str	r2, [r1, #12]
 8009a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	4d8ef3c2 	.word	0x4d8ef3c2

08009a44 <acc_service_sparse_get_next_by_reference>:
 8009a44:	b1b1      	cbz	r1, 8009a74 <acc_service_sparse_get_next_by_reference+0x30>
 8009a46:	b530      	push	{r4, r5, lr}
 8009a48:	b089      	sub	sp, #36	; 0x24
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	680d      	ldr	r5, [r1, #0]
 8009a4e:	9103      	str	r1, [sp, #12]
 8009a50:	2403      	movs	r4, #3
 8009a52:	a901      	add	r1, sp, #4
 8009a54:	9502      	str	r5, [sp, #8]
 8009a56:	9205      	str	r2, [sp, #20]
 8009a58:	f88d 4004 	strb.w	r4, [sp, #4]
 8009a5c:	9406      	str	r4, [sp, #24]
 8009a5e:	9304      	str	r3, [sp, #16]
 8009a60:	f88d 301c 	strb.w	r3, [sp, #28]
 8009a64:	f88d 301d 	strb.w	r3, [sp, #29]
 8009a68:	f88d 301e 	strb.w	r3, [sp, #30]
 8009a6c:	f000 f950 	bl	8009d10 <acc_service_get_next>
 8009a70:	b009      	add	sp, #36	; 0x24
 8009a72:	bd30      	pop	{r4, r5, pc}
 8009a74:	4608      	mov	r0, r1
 8009a76:	4770      	bx	lr

08009a78 <acc_service_maximize_signal_attenuation_set.part.5>:
 8009a78:	4b02      	ldr	r3, [pc, #8]	; (8009a84 <acc_service_maximize_signal_attenuation_set.part.5+0xc>)
 8009a7a:	4a03      	ldr	r2, [pc, #12]	; (8009a88 <acc_service_maximize_signal_attenuation_set.part.5+0x10>)
 8009a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7e:	4903      	ldr	r1, [pc, #12]	; (8009a8c <acc_service_maximize_signal_attenuation_set.part.5+0x14>)
 8009a80:	2001      	movs	r0, #1
 8009a82:	4718      	bx	r3
 8009a84:	20001628 	.word	0x20001628
 8009a88:	08018008 	.word	0x08018008
 8009a8c:	08018d08 	.word	0x08018d08

08009a90 <acc_service_get_base_configuration>:
 8009a90:	b108      	cbz	r0, 8009a96 <acc_service_get_base_configuration+0x6>
 8009a92:	6900      	ldr	r0, [r0, #16]
 8009a94:	4770      	bx	lr
 8009a96:	b510      	push	{r4, lr}
 8009a98:	4604      	mov	r4, r0
 8009a9a:	f7ff fa01 	bl	8008ea0 <acc_rss_integration_log_level>
 8009a9e:	b130      	cbz	r0, 8009aae <acc_service_get_base_configuration+0x1e>
 8009aa0:	4b03      	ldr	r3, [pc, #12]	; (8009ab0 <acc_service_get_base_configuration+0x20>)
 8009aa2:	4a04      	ldr	r2, [pc, #16]	; (8009ab4 <acc_service_get_base_configuration+0x24>)
 8009aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa6:	4904      	ldr	r1, [pc, #16]	; (8009ab8 <acc_service_get_base_configuration+0x28>)
 8009aa8:	2001      	movs	r0, #1
 8009aaa:	4798      	blx	r3
 8009aac:	4620      	mov	r0, r4
 8009aae:	bd10      	pop	{r4, pc}
 8009ab0:	20001628 	.word	0x20001628
 8009ab4:	08018008 	.word	0x08018008
 8009ab8:	08018d08 	.word	0x08018d08

08009abc <set_maximize_signal_attenuation>:
 8009abc:	b570      	push	{r4, r5, r6, lr}
 8009abe:	460d      	mov	r5, r1
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	f7ff ffe5 	bl	8009a90 <acc_service_get_base_configuration>
 8009ac6:	b158      	cbz	r0, 8009ae0 <set_maximize_signal_attenuation+0x24>
 8009ac8:	4629      	mov	r1, r5
 8009aca:	4606      	mov	r6, r0
 8009acc:	f7fe ff8a 	bl	80089e4 <acc_base_configuration_maximize_signal_attenuation_set>
 8009ad0:	b93d      	cbnz	r5, 8009ae2 <set_maximize_signal_attenuation+0x26>
 8009ad2:	68a3      	ldr	r3, [r4, #8]
 8009ad4:	b123      	cbz	r3, 8009ae0 <set_maximize_signal_attenuation+0x24>
 8009ad6:	7961      	ldrb	r1, [r4, #5]
 8009ad8:	4620      	mov	r0, r4
 8009ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ade:	4718      	bx	r3
 8009ae0:	bd70      	pop	{r4, r5, r6, pc}
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	210f      	movs	r1, #15
 8009ae6:	f7fe fe1d 	bl	8008724 <acc_base_configuration_integrator_set>
 8009aea:	4630      	mov	r0, r6
 8009aec:	2101      	movs	r1, #1
 8009aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009af2:	f7fe be3b 	b.w	800876c <acc_base_configuration_integrator_ramp_up_set>
 8009af6:	bf00      	nop

08009af8 <acc_service_activate>:
 8009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afa:	b960      	cbnz	r0, 8009b16 <acc_service_activate+0x1e>
 8009afc:	4c1f      	ldr	r4, [pc, #124]	; (8009b7c <acc_service_activate+0x84>)
 8009afe:	4a20      	ldr	r2, [pc, #128]	; (8009b80 <acc_service_activate+0x88>)
 8009b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b02:	4920      	ldr	r1, [pc, #128]	; (8009b84 <acc_service_activate+0x8c>)
 8009b04:	2000      	movs	r0, #0
 8009b06:	4798      	blx	r3
 8009b08:	2000      	movs	r0, #0
 8009b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b0c:	4a1e      	ldr	r2, [pc, #120]	; (8009b88 <acc_service_activate+0x90>)
 8009b0e:	491d      	ldr	r1, [pc, #116]	; (8009b84 <acc_service_activate+0x8c>)
 8009b10:	4798      	blx	r3
 8009b12:	2000      	movs	r0, #0
 8009b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b16:	4b1d      	ldr	r3, [pc, #116]	; (8009b8c <acc_service_activate+0x94>)
 8009b18:	6802      	ldr	r2, [r0, #0]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	d1ed      	bne.n	8009afc <acc_service_activate+0x4>
 8009b20:	4b1b      	ldr	r3, [pc, #108]	; (8009b90 <acc_service_activate+0x98>)
 8009b22:	7818      	ldrb	r0, [r3, #0]
 8009b24:	b198      	cbz	r0, 8009b4e <acc_service_activate+0x56>
 8009b26:	7a63      	ldrb	r3, [r4, #9]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0f3      	beq.n	8009b14 <acc_service_activate+0x1c>
 8009b2c:	6863      	ldr	r3, [r4, #4]
 8009b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b30:	d80d      	bhi.n	8009b4e <acc_service_activate+0x56>
 8009b32:	4d18      	ldr	r5, [pc, #96]	; (8009b94 <acc_service_activate+0x9c>)
 8009b34:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 8009b38:	b94a      	cbnz	r2, 8009b4e <acc_service_activate+0x56>
 8009b3a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8009b3e:	2701      	movs	r7, #1
 8009b40:	7856      	ldrb	r6, [r2, #1]
 8009b42:	f805 7013 	strb.w	r7, [r5, r3, lsl #1]
 8009b46:	b126      	cbz	r6, 8009b52 <acc_service_activate+0x5a>
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 8009b4e:	4c0b      	ldr	r4, [pc, #44]	; (8009b7c <acc_service_activate+0x84>)
 8009b50:	e7da      	b.n	8009b08 <acc_service_activate+0x10>
 8009b52:	f104 0018 	add.w	r0, r4, #24
 8009b56:	f003 fad9 	bl	800d10c <acc_sensor_manager_start_measurement>
 8009b5a:	6863      	ldr	r3, [r4, #4]
 8009b5c:	b140      	cbz	r0, 8009b70 <acc_service_activate+0x78>
 8009b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b60:	d809      	bhi.n	8009b76 <acc_service_activate+0x7e>
 8009b62:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8009b66:	7266      	strb	r6, [r4, #9]
 8009b68:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
 8009b6c:	7057      	strb	r7, [r2, #1]
 8009b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b70:	2b2a      	cmp	r3, #42	; 0x2a
 8009b72:	d8ec      	bhi.n	8009b4e <acc_service_activate+0x56>
 8009b74:	e7e8      	b.n	8009b48 <acc_service_activate+0x50>
 8009b76:	7266      	strb	r6, [r4, #9]
 8009b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20001628 	.word	0x20001628
 8009b80:	08017f98 	.word	0x08017f98
 8009b84:	08018d08 	.word	0x08018d08
 8009b88:	08018c4c 	.word	0x08018c4c
 8009b8c:	acc09ee8 	.word	0xacc09ee8
 8009b90:	200015b0 	.word	0x200015b0
 8009b94:	200015b4 	.word	0x200015b4

08009b98 <acc_service_deactivate>:
 8009b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9c:	b970      	cbnz	r0, 8009bbc <acc_service_deactivate+0x24>
 8009b9e:	4c1c      	ldr	r4, [pc, #112]	; (8009c10 <acc_service_deactivate+0x78>)
 8009ba0:	4a1c      	ldr	r2, [pc, #112]	; (8009c14 <acc_service_deactivate+0x7c>)
 8009ba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ba4:	491c      	ldr	r1, [pc, #112]	; (8009c18 <acc_service_deactivate+0x80>)
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	4798      	blx	r3
 8009baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bac:	4a1b      	ldr	r2, [pc, #108]	; (8009c1c <acc_service_deactivate+0x84>)
 8009bae:	491a      	ldr	r1, [pc, #104]	; (8009c18 <acc_service_deactivate+0x80>)
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	4798      	blx	r3
 8009bb4:	2500      	movs	r5, #0
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bbc:	4b18      	ldr	r3, [pc, #96]	; (8009c20 <acc_service_deactivate+0x88>)
 8009bbe:	6802      	ldr	r2, [r0, #0]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	d1eb      	bne.n	8009b9e <acc_service_deactivate+0x6>
 8009bc6:	4b17      	ldr	r3, [pc, #92]	; (8009c24 <acc_service_deactivate+0x8c>)
 8009bc8:	781d      	ldrb	r5, [r3, #0]
 8009bca:	b1dd      	cbz	r5, 8009c04 <acc_service_deactivate+0x6c>
 8009bcc:	7a43      	ldrb	r3, [r0, #9]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1f1      	bne.n	8009bb6 <acc_service_deactivate+0x1e>
 8009bd2:	6843      	ldr	r3, [r0, #4]
 8009bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8009bd6:	d815      	bhi.n	8009c04 <acc_service_deactivate+0x6c>
 8009bd8:	4e13      	ldr	r6, [pc, #76]	; (8009c28 <acc_service_deactivate+0x90>)
 8009bda:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 8009bde:	b98f      	cbnz	r7, 8009c04 <acc_service_deactivate+0x6c>
 8009be0:	f04f 0801 	mov.w	r8, #1
 8009be4:	3018      	adds	r0, #24
 8009be6:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 8009bea:	f003 fac7 	bl	800d17c <acc_sensor_manager_stop_measurement>
 8009bee:	6863      	ldr	r3, [r4, #4]
 8009bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8009bf2:	d809      	bhi.n	8009c08 <acc_service_deactivate+0x70>
 8009bf4:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 8009bf8:	f884 8009 	strb.w	r8, [r4, #9]
 8009bfc:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 8009c00:	7057      	strb	r7, [r2, #1]
 8009c02:	e7d8      	b.n	8009bb6 <acc_service_deactivate+0x1e>
 8009c04:	4c02      	ldr	r4, [pc, #8]	; (8009c10 <acc_service_deactivate+0x78>)
 8009c06:	e7d0      	b.n	8009baa <acc_service_deactivate+0x12>
 8009c08:	f884 8009 	strb.w	r8, [r4, #9]
 8009c0c:	e7d3      	b.n	8009bb6 <acc_service_deactivate+0x1e>
 8009c0e:	bf00      	nop
 8009c10:	20001628 	.word	0x20001628
 8009c14:	08017f98 	.word	0x08017f98
 8009c18:	08018d08 	.word	0x08018d08
 8009c1c:	08018c80 	.word	0x08018c80
 8009c20:	acc09ee8 	.word	0xacc09ee8
 8009c24:	200015b0 	.word	0x200015b0
 8009c28:	200015b4 	.word	0x200015b4

08009c2c <acc_service_sensor_set>:
 8009c2c:	b510      	push	{r4, lr}
 8009c2e:	460c      	mov	r4, r1
 8009c30:	f7ff ff2e 	bl	8009a90 <acc_service_get_base_configuration>
 8009c34:	4621      	mov	r1, r4
 8009c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c3a:	f7fe bbf5 	b.w	8008428 <acc_base_configuration_sensor_set>
 8009c3e:	bf00      	nop

08009c40 <acc_service_requested_start_get>:
 8009c40:	b508      	push	{r3, lr}
 8009c42:	f7ff ff25 	bl	8009a90 <acc_service_get_base_configuration>
 8009c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009c4a:	f7fe bbf5 	b.w	8008438 <acc_base_configuration_requested_start_get>
 8009c4e:	bf00      	nop

08009c50 <acc_service_requested_start_set>:
 8009c50:	b508      	push	{r3, lr}
 8009c52:	ed2d 8b02 	vpush	{d8}
 8009c56:	eeb0 8a40 	vmov.f32	s16, s0
 8009c5a:	f7ff ff19 	bl	8009a90 <acc_service_get_base_configuration>
 8009c5e:	eeb0 0a48 	vmov.f32	s0, s16
 8009c62:	ecbd 8b02 	vpop	{d8}
 8009c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009c6a:	f7fe bbf3 	b.w	8008454 <acc_base_configuration_requested_start_set>
 8009c6e:	bf00      	nop

08009c70 <acc_service_requested_length_set>:
 8009c70:	b508      	push	{r3, lr}
 8009c72:	ed2d 8b02 	vpush	{d8}
 8009c76:	eeb0 8a40 	vmov.f32	s16, s0
 8009c7a:	f7ff ff09 	bl	8009a90 <acc_service_get_base_configuration>
 8009c7e:	eeb0 0a48 	vmov.f32	s0, s16
 8009c82:	ecbd 8b02 	vpop	{d8}
 8009c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009c8a:	f7fe bbff 	b.w	800848c <acc_base_configuration_requested_length_set>
 8009c8e:	bf00      	nop

08009c90 <acc_service_repetition_mode_on_demand_set>:
 8009c90:	b508      	push	{r3, lr}
 8009c92:	f7ff fefd 	bl	8009a90 <acc_service_get_base_configuration>
 8009c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009c9a:	f7fe bc05 	b.w	80084a8 <acc_base_configuration_repetition_mode_on_demand_set>
 8009c9e:	bf00      	nop

08009ca0 <acc_service_power_save_mode_set>:
 8009ca0:	b510      	push	{r4, lr}
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	f7ff fef4 	bl	8009a90 <acc_service_get_base_configuration>
 8009ca8:	4621      	mov	r1, r4
 8009caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cae:	f7fe bc0b 	b.w	80084c8 <acc_base_configuration_power_save_mode_set>
 8009cb2:	bf00      	nop

08009cb4 <acc_service_receiver_gain_get>:
 8009cb4:	b508      	push	{r3, lr}
 8009cb6:	f7ff feeb 	bl	8009a90 <acc_service_get_base_configuration>
 8009cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009cbe:	f7fe bc0b 	b.w	80084d8 <acc_base_configuration_receiver_gain_get>
 8009cc2:	bf00      	nop

08009cc4 <acc_service_receiver_gain_set>:
 8009cc4:	b508      	push	{r3, lr}
 8009cc6:	ed2d 8b02 	vpush	{d8}
 8009cca:	eeb0 8a40 	vmov.f32	s16, s0
 8009cce:	f7ff fedf 	bl	8009a90 <acc_service_get_base_configuration>
 8009cd2:	eeb0 0a48 	vmov.f32	s0, s16
 8009cd6:	ecbd 8b02 	vpop	{d8}
 8009cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009cde:	f7fe bc11 	b.w	8008504 <acc_base_configuration_receiver_gain_set>
 8009ce2:	bf00      	nop

08009ce4 <acc_service_hw_accelerated_average_samples_set>:
 8009ce4:	b510      	push	{r4, lr}
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	f7ff fed2 	bl	8009a90 <acc_service_get_base_configuration>
 8009cec:	4621      	mov	r1, r4
 8009cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf2:	f7fe bc4f 	b.w	8008594 <acc_base_configuration_hw_accelerated_average_samples_set>
 8009cf6:	bf00      	nop

08009cf8 <acc_service_pipeline_destroy>:
 8009cf8:	6903      	ldr	r3, [r0, #16]
 8009cfa:	b13b      	cbz	r3, 8009d0c <acc_service_pipeline_destroy+0x14>
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	68da      	ldr	r2, [r3, #12]
 8009d00:	4604      	mov	r4, r0
 8009d02:	4618      	mov	r0, r3
 8009d04:	4790      	blx	r2
 8009d06:	2300      	movs	r3, #0
 8009d08:	6123      	str	r3, [r4, #16]
 8009d0a:	bd10      	pop	{r4, pc}
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop

08009d10 <acc_service_get_next>:
 8009d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d14:	460e      	mov	r6, r1
 8009d16:	b082      	sub	sp, #8
 8009d18:	4605      	mov	r5, r0
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d135      	bne.n	8009d8a <acc_service_get_next+0x7a>
 8009d1e:	4b32      	ldr	r3, [pc, #200]	; (8009de8 <acc_service_get_next+0xd8>)
 8009d20:	4a32      	ldr	r2, [pc, #200]	; (8009dec <acc_service_get_next+0xdc>)
 8009d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d24:	4932      	ldr	r1, [pc, #200]	; (8009df0 <acc_service_get_next+0xe0>)
 8009d26:	2000      	movs	r0, #0
 8009d28:	4798      	blx	r3
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	7eb4      	ldrb	r4, [r6, #26]
 8009d2e:	b164      	cbz	r4, 8009d4a <acc_service_get_next+0x3a>
 8009d30:	6872      	ldr	r2, [r6, #4]
 8009d32:	b9b2      	cbnz	r2, 8009d62 <acc_service_get_next+0x52>
 8009d34:	4b2c      	ldr	r3, [pc, #176]	; (8009de8 <acc_service_get_next+0xd8>)
 8009d36:	4a2f      	ldr	r2, [pc, #188]	; (8009df4 <acc_service_get_next+0xe4>)
 8009d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3a:	492d      	ldr	r1, [pc, #180]	; (8009df0 <acc_service_get_next+0xe0>)
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	4798      	blx	r3
 8009d40:	2400      	movs	r4, #0
 8009d42:	4620      	mov	r0, r4
 8009d44:	b002      	add	sp, #8
 8009d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d4a:	68b2      	ldr	r2, [r6, #8]
 8009d4c:	b962      	cbnz	r2, 8009d68 <acc_service_get_next+0x58>
 8009d4e:	4b26      	ldr	r3, [pc, #152]	; (8009de8 <acc_service_get_next+0xd8>)
 8009d50:	4a29      	ldr	r2, [pc, #164]	; (8009df8 <acc_service_get_next+0xe8>)
 8009d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d54:	4926      	ldr	r1, [pc, #152]	; (8009df0 <acc_service_get_next+0xe0>)
 8009d56:	4620      	mov	r0, r4
 8009d58:	4798      	blx	r3
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	b002      	add	sp, #8
 8009d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d62:	68f2      	ldr	r2, [r6, #12]
 8009d64:	2a00      	cmp	r2, #0
 8009d66:	d0e5      	beq.n	8009d34 <acc_service_get_next+0x24>
 8009d68:	b153      	cbz	r3, 8009d80 <acc_service_get_next+0x70>
 8009d6a:	7a2b      	ldrb	r3, [r5, #8]
 8009d6c:	7832      	ldrb	r2, [r6, #0]
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d011      	beq.n	8009d96 <acc_service_get_next+0x86>
 8009d72:	491d      	ldr	r1, [pc, #116]	; (8009de8 <acc_service_get_next+0xd8>)
 8009d74:	9200      	str	r2, [sp, #0]
 8009d76:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009d78:	4a20      	ldr	r2, [pc, #128]	; (8009dfc <acc_service_get_next+0xec>)
 8009d7a:	491d      	ldr	r1, [pc, #116]	; (8009df0 <acc_service_get_next+0xe0>)
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	47a0      	blx	r4
 8009d80:	2400      	movs	r4, #0
 8009d82:	4620      	mov	r0, r4
 8009d84:	b002      	add	sp, #8
 8009d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d8a:	4b1d      	ldr	r3, [pc, #116]	; (8009e00 <acc_service_get_next+0xf0>)
 8009d8c:	6802      	ldr	r2, [r0, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d1c5      	bne.n	8009d1e <acc_service_get_next+0xe>
 8009d92:	2301      	movs	r3, #1
 8009d94:	e7ca      	b.n	8009d2c <acc_service_get_next+0x1c>
 8009d96:	f896 8018 	ldrb.w	r8, [r6, #24]
 8009d9a:	f1b8 0f00 	cmp.w	r8, #0
 8009d9e:	d11c      	bne.n	8009dda <acc_service_get_next+0xca>
 8009da0:	7a6f      	ldrb	r7, [r5, #9]
 8009da2:	b187      	cbz	r7, 8009dc6 <acc_service_get_next+0xb6>
 8009da4:	4b10      	ldr	r3, [pc, #64]	; (8009de8 <acc_service_get_next+0xd8>)
 8009da6:	4a17      	ldr	r2, [pc, #92]	; (8009e04 <acc_service_get_next+0xf4>)
 8009da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009daa:	4911      	ldr	r1, [pc, #68]	; (8009df0 <acc_service_get_next+0xe0>)
 8009dac:	2000      	movs	r0, #0
 8009dae:	4798      	blx	r3
 8009db0:	2400      	movs	r4, #0
 8009db2:	f1b8 0f00 	cmp.w	r8, #0
 8009db6:	d0c4      	beq.n	8009d42 <acc_service_get_next+0x32>
 8009db8:	4628      	mov	r0, r5
 8009dba:	f7ff feed 	bl	8009b98 <acc_service_deactivate>
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	b002      	add	sp, #8
 8009dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc6:	692b      	ldr	r3, [r5, #16]
 8009dc8:	616e      	str	r6, [r5, #20]
 8009dca:	e9d3 0200 	ldrd	r0, r2, [r3]
 8009dce:	4790      	blx	r2
 8009dd0:	7e74      	ldrb	r4, [r6, #25]
 8009dd2:	616f      	str	r7, [r5, #20]
 8009dd4:	f084 0401 	eor.w	r4, r4, #1
 8009dd8:	e7eb      	b.n	8009db2 <acc_service_get_next+0xa2>
 8009dda:	4628      	mov	r0, r5
 8009ddc:	f7ff fe8c 	bl	8009af8 <acc_service_activate>
 8009de0:	4680      	mov	r8, r0
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d1dc      	bne.n	8009da0 <acc_service_get_next+0x90>
 8009de6:	e7cb      	b.n	8009d80 <acc_service_get_next+0x70>
 8009de8:	20001628 	.word	0x20001628
 8009dec:	08017f98 	.word	0x08017f98
 8009df0:	08018d08 	.word	0x08018d08
 8009df4:	08018c9c 	.word	0x08018c9c
 8009df8:	08018cbc 	.word	0x08018cbc
 8009dfc:	08018cd4 	.word	0x08018cd4
 8009e00:	acc09ee8 	.word	0xacc09ee8
 8009e04:	08018cf0 	.word	0x08018cf0

08009e08 <acc_service_send_data>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	9e06      	ldr	r6, [sp, #24]
 8009e0c:	6944      	ldr	r4, [r0, #20]
 8009e0e:	7835      	ldrb	r5, [r6, #0]
 8009e10:	461f      	mov	r7, r3
 8009e12:	b94d      	cbnz	r5, 8009e28 <acc_service_send_data+0x20>
 8009e14:	7ea5      	ldrb	r5, [r4, #26]
 8009e16:	b185      	cbz	r5, 8009e3a <acc_service_send_data+0x32>
 8009e18:	68e3      	ldr	r3, [r4, #12]
 8009e1a:	6860      	ldr	r0, [r4, #4]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	bf28      	it	cs
 8009e20:	461a      	movcs	r2, r3
 8009e22:	f008 ff5d 	bl	8012ce0 <memcpy>
 8009e26:	7835      	ldrb	r5, [r6, #0]
 8009e28:	6920      	ldr	r0, [r4, #16]
 8009e2a:	7665      	strb	r5, [r4, #25]
 8009e2c:	b158      	cbz	r0, 8009e46 <acc_service_send_data+0x3e>
 8009e2e:	6962      	ldr	r2, [r4, #20]
 8009e30:	4639      	mov	r1, r7
 8009e32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e36:	f008 bf53 	b.w	8012ce0 <memcpy>
 8009e3a:	68a2      	ldr	r2, [r4, #8]
 8009e3c:	6011      	str	r1, [r2, #0]
 8009e3e:	6920      	ldr	r0, [r4, #16]
 8009e40:	7665      	strb	r5, [r4, #25]
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d1f3      	bne.n	8009e2e <acc_service_send_data+0x26>
 8009e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e48 <acc_service_set_module_active>:
 8009e48:	4b01      	ldr	r3, [pc, #4]	; (8009e50 <acc_service_set_module_active+0x8>)
 8009e4a:	7018      	strb	r0, [r3, #0]
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	200015b0 	.word	0x200015b0

08009e54 <acc_service_handle_valid>:
 8009e54:	b508      	push	{r3, lr}
 8009e56:	b938      	cbnz	r0, 8009e68 <acc_service_handle_valid+0x14>
 8009e58:	4b06      	ldr	r3, [pc, #24]	; (8009e74 <acc_service_handle_valid+0x20>)
 8009e5a:	4a07      	ldr	r2, [pc, #28]	; (8009e78 <acc_service_handle_valid+0x24>)
 8009e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5e:	4907      	ldr	r1, [pc, #28]	; (8009e7c <acc_service_handle_valid+0x28>)
 8009e60:	2000      	movs	r0, #0
 8009e62:	4798      	blx	r3
 8009e64:	2000      	movs	r0, #0
 8009e66:	bd08      	pop	{r3, pc}
 8009e68:	6802      	ldr	r2, [r0, #0]
 8009e6a:	4b05      	ldr	r3, [pc, #20]	; (8009e80 <acc_service_handle_valid+0x2c>)
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d1f3      	bne.n	8009e58 <acc_service_handle_valid+0x4>
 8009e70:	2001      	movs	r0, #1
 8009e72:	bd08      	pop	{r3, pc}
 8009e74:	20001628 	.word	0x20001628
 8009e78:	08017f98 	.word	0x08017f98
 8009e7c:	08018d08 	.word	0x08018d08
 8009e80:	acc09ee8 	.word	0xacc09ee8

08009e84 <acc_service_configuration_valid>:
 8009e84:	b508      	push	{r3, lr}
 8009e86:	b938      	cbnz	r0, 8009e98 <acc_service_configuration_valid+0x14>
 8009e88:	4b09      	ldr	r3, [pc, #36]	; (8009eb0 <acc_service_configuration_valid+0x2c>)
 8009e8a:	4a0a      	ldr	r2, [pc, #40]	; (8009eb4 <acc_service_configuration_valid+0x30>)
 8009e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8e:	490a      	ldr	r1, [pc, #40]	; (8009eb8 <acc_service_configuration_valid+0x34>)
 8009e90:	2000      	movs	r0, #0
 8009e92:	4798      	blx	r3
 8009e94:	2000      	movs	r0, #0
 8009e96:	bd08      	pop	{r3, pc}
 8009e98:	4b08      	ldr	r3, [pc, #32]	; (8009ebc <acc_service_configuration_valid+0x38>)
 8009e9a:	6802      	ldr	r2, [r0, #0]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d1f3      	bne.n	8009e88 <acc_service_configuration_valid+0x4>
 8009ea0:	8b03      	ldrh	r3, [r0, #24]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0f0      	beq.n	8009e88 <acc_service_configuration_valid+0x4>
 8009ea6:	6943      	ldr	r3, [r0, #20]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0ed      	beq.n	8009e88 <acc_service_configuration_valid+0x4>
 8009eac:	2001      	movs	r0, #1
 8009eae:	bd08      	pop	{r3, pc}
 8009eb0:	20001628 	.word	0x20001628
 8009eb4:	08018008 	.word	0x08018008
 8009eb8:	08018d08 	.word	0x08018d08
 8009ebc:	acc09dd7 	.word	0xacc09dd7

08009ec0 <acc_service_configuration_check>:
 8009ec0:	b508      	push	{r3, lr}
 8009ec2:	b938      	cbnz	r0, 8009ed4 <acc_service_configuration_check+0x14>
 8009ec4:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <acc_service_configuration_check+0x3c>)
 8009ec6:	4a0e      	ldr	r2, [pc, #56]	; (8009f00 <acc_service_configuration_check+0x40>)
 8009ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eca:	490e      	ldr	r1, [pc, #56]	; (8009f04 <acc_service_configuration_check+0x44>)
 8009ecc:	2000      	movs	r0, #0
 8009ece:	4798      	blx	r3
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	bd08      	pop	{r3, pc}
 8009ed4:	4b0c      	ldr	r3, [pc, #48]	; (8009f08 <acc_service_configuration_check+0x48>)
 8009ed6:	6802      	ldr	r2, [r0, #0]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d1f3      	bne.n	8009ec4 <acc_service_configuration_check+0x4>
 8009edc:	8b03      	ldrh	r3, [r0, #24]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0f0      	beq.n	8009ec4 <acc_service_configuration_check+0x4>
 8009ee2:	6943      	ldr	r3, [r0, #20]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d0ed      	beq.n	8009ec4 <acc_service_configuration_check+0x4>
 8009ee8:	7943      	ldrb	r3, [r0, #5]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	bf98      	it	ls
 8009ef0:	2001      	movls	r0, #1
 8009ef2:	d9ee      	bls.n	8009ed2 <acc_service_configuration_check+0x12>
 8009ef4:	4b01      	ldr	r3, [pc, #4]	; (8009efc <acc_service_configuration_check+0x3c>)
 8009ef6:	4a05      	ldr	r2, [pc, #20]	; (8009f0c <acc_service_configuration_check+0x4c>)
 8009ef8:	e7e6      	b.n	8009ec8 <acc_service_configuration_check+0x8>
 8009efa:	bf00      	nop
 8009efc:	20001628 	.word	0x20001628
 8009f00:	08018008 	.word	0x08018008
 8009f04:	08018d08 	.word	0x08018d08
 8009f08:	acc09dd7 	.word	0xacc09dd7
 8009f0c:	08018c68 	.word	0x08018c68

08009f10 <acc_service_profile_set>:
 8009f10:	b510      	push	{r4, lr}
 8009f12:	b168      	cbz	r0, 8009f30 <acc_service_profile_set+0x20>
 8009f14:	6883      	ldr	r3, [r0, #8]
 8009f16:	4604      	mov	r4, r0
 8009f18:	b153      	cbz	r3, 8009f30 <acc_service_profile_set+0x20>
 8009f1a:	7161      	strb	r1, [r4, #5]
 8009f1c:	4798      	blx	r3
 8009f1e:	7b23      	ldrb	r3, [r4, #12]
 8009f20:	b903      	cbnz	r3, 8009f24 <acc_service_profile_set+0x14>
 8009f22:	bd10      	pop	{r4, pc}
 8009f24:	4620      	mov	r0, r4
 8009f26:	2101      	movs	r1, #1
 8009f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f2c:	f7ff bdc6 	b.w	8009abc <set_maximize_signal_attenuation>
 8009f30:	f7fe ffb6 	bl	8008ea0 <acc_rss_integration_log_level>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d0f4      	beq.n	8009f22 <acc_service_profile_set+0x12>
 8009f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f3c:	f7ff bd9c 	b.w	8009a78 <acc_service_maximize_signal_attenuation_set.part.5>

08009f40 <acc_service_maximize_signal_attenuation_set>:
 8009f40:	b508      	push	{r3, lr}
 8009f42:	b128      	cbz	r0, 8009f50 <acc_service_maximize_signal_attenuation_set+0x10>
 8009f44:	4603      	mov	r3, r0
 8009f46:	7319      	strb	r1, [r3, #12]
 8009f48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009f4c:	f7ff bdb6 	b.w	8009abc <set_maximize_signal_attenuation>
 8009f50:	f7fe ffa6 	bl	8008ea0 <acc_rss_integration_log_level>
 8009f54:	b118      	cbz	r0, 8009f5e <acc_service_maximize_signal_attenuation_set+0x1e>
 8009f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009f5a:	f7ff bd8d 	b.w	8009a78 <acc_service_maximize_signal_attenuation_set.part.5>
 8009f5e:	bd08      	pop	{r3, pc}

08009f60 <acc_service_initialize_service_configuration>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8009f66:	7101      	strb	r1, [r0, #4]
 8009f68:	6102      	str	r2, [r0, #16]
 8009f6a:	6143      	str	r3, [r0, #20]
 8009f6c:	9a05      	ldr	r2, [sp, #20]
 8009f6e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8009f72:	4907      	ldr	r1, [pc, #28]	; (8009f90 <acc_service_initialize_service_configuration+0x30>)
 8009f74:	6001      	str	r1, [r0, #0]
 8009f76:	4604      	mov	r4, r0
 8009f78:	8303      	strh	r3, [r0, #24]
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	6082      	str	r2, [r0, #8]
 8009f7e:	f7ff ffc7 	bl	8009f10 <acc_service_profile_set>
 8009f82:	4620      	mov	r0, r4
 8009f84:	2100      	movs	r1, #0
 8009f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f8a:	f7ff bfd9 	b.w	8009f40 <acc_service_maximize_signal_attenuation_set>
 8009f8e:	bf00      	nop
 8009f90:	acc09dd7 	.word	0xacc09dd7

08009f94 <acc_service_mur_set>:
 8009f94:	b510      	push	{r4, lr}
 8009f96:	460c      	mov	r4, r1
 8009f98:	f7ff fd7a 	bl	8009a90 <acc_service_get_base_configuration>
 8009f9c:	b120      	cbz	r0, 8009fa8 <acc_service_mur_set+0x14>
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fa4:	f7fe bd4a 	b.w	8008a3c <acc_base_configuration_mur_set>
 8009fa8:	f7fe ff7a 	bl	8008ea0 <acc_rss_integration_log_level>
 8009fac:	b138      	cbz	r0, 8009fbe <acc_service_mur_set+0x2a>
 8009fae:	4b04      	ldr	r3, [pc, #16]	; (8009fc0 <acc_service_mur_set+0x2c>)
 8009fb0:	4a04      	ldr	r2, [pc, #16]	; (8009fc4 <acc_service_mur_set+0x30>)
 8009fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb4:	4904      	ldr	r1, [pc, #16]	; (8009fc8 <acc_service_mur_set+0x34>)
 8009fb6:	2001      	movs	r0, #1
 8009fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fbc:	4718      	bx	r3
 8009fbe:	bd10      	pop	{r4, pc}
 8009fc0:	20001628 	.word	0x20001628
 8009fc4:	08018008 	.word	0x08018008
 8009fc8:	08018d08 	.word	0x08018d08

08009fcc <acc_utils_swap16_array>:
 8009fcc:	1e4a      	subs	r2, r1, #1
 8009fce:	b131      	cbz	r1, 8009fde <acc_utils_swap16_array+0x12>
 8009fd0:	8803      	ldrh	r3, [r0, #0]
 8009fd2:	3a01      	subs	r2, #1
 8009fd4:	ba5b      	rev16	r3, r3
 8009fd6:	f820 3b02 	strh.w	r3, [r0], #2
 8009fda:	1c53      	adds	r3, r2, #1
 8009fdc:	d1f8      	bne.n	8009fd0 <acc_utils_swap16_array+0x4>
 8009fde:	4770      	bx	lr

08009fe0 <acc_utils_uint32_to_transfer_buffer>:
 8009fe0:	b152      	cbz	r2, 8009ff8 <acc_utils_uint32_to_transfer_buffer+0x18>
 8009fe2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009fe6:	3804      	subs	r0, #4
 8009fe8:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8009fec:	804b      	strh	r3, [r1, #2]
 8009fee:	0c1b      	lsrs	r3, r3, #16
 8009ff0:	800b      	strh	r3, [r1, #0]
 8009ff2:	3104      	adds	r1, #4
 8009ff4:	4291      	cmp	r1, r2
 8009ff6:	d1f7      	bne.n	8009fe8 <acc_utils_uint32_to_transfer_buffer+0x8>
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop

08009ffc <acc_utils_transfer_buffer_to_uint32>:
 8009ffc:	b18a      	cbz	r2, 800a022 <acc_utils_transfer_buffer_to_uint32+0x26>
 8009ffe:	b410      	push	{r4}
 800a000:	3002      	adds	r0, #2
 800a002:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a006:	3904      	subs	r1, #4
 800a008:	f830 4c02 	ldrh.w	r4, [r0, #-2]
 800a00c:	f830 3b04 	ldrh.w	r3, [r0], #4
 800a010:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a014:	4282      	cmp	r2, r0
 800a016:	f841 3f04 	str.w	r3, [r1, #4]!
 800a01a:	d1f5      	bne.n	800a008 <acc_utils_transfer_buffer_to_uint32+0xc>
 800a01c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	4770      	bx	lr

0800a024 <acc_version_get>:
 800a024:	4800      	ldr	r0, [pc, #0]	; (800a028 <acc_version_get+0x4>)
 800a026:	4770      	bx	lr
 800a028:	08014804 	.word	0x08014804

0800a02c <acc_alg_basic_utils_bubble_sort>:
 800a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	b089      	sub	sp, #36	; 0x24
 800a032:	4691      	mov	r9, r2
 800a034:	9301      	str	r3, [sp, #4]
 800a036:	eb00 0309 	add.w	r3, r0, r9
 800a03a:	9003      	str	r0, [sp, #12]
 800a03c:	fb01 0a09 	mla	sl, r1, r9, r0
 800a040:	9302      	str	r3, [sp, #8]
 800a042:	9f02      	ldr	r7, [sp, #8]
 800a044:	45ba      	cmp	sl, r7
 800a046:	d933      	bls.n	800a0b0 <acc_alg_basic_utils_bubble_sort+0x84>
 800a048:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a04c:	2401      	movs	r4, #1
 800a04e:	e003      	b.n	800a058 <acc_alg_basic_utils_bubble_sort+0x2c>
 800a050:	444f      	add	r7, r9
 800a052:	45ba      	cmp	sl, r7
 800a054:	44c8      	add	r8, r9
 800a056:	d929      	bls.n	800a0ac <acc_alg_basic_utils_bubble_sort+0x80>
 800a058:	4639      	mov	r1, r7
 800a05a:	4640      	mov	r0, r8
 800a05c:	9b01      	ldr	r3, [sp, #4]
 800a05e:	4798      	blx	r3
 800a060:	2800      	cmp	r0, #0
 800a062:	ddf5      	ble.n	800a050 <acc_alg_basic_utils_bubble_sort+0x24>
 800a064:	f1b9 0f00 	cmp.w	r9, #0
 800a068:	d01a      	beq.n	800a0a0 <acc_alg_basic_utils_bubble_sort+0x74>
 800a06a:	463e      	mov	r6, r7
 800a06c:	4645      	mov	r5, r8
 800a06e:	46cb      	mov	fp, r9
 800a070:	465c      	mov	r4, fp
 800a072:	2c10      	cmp	r4, #16
 800a074:	bf28      	it	cs
 800a076:	2410      	movcs	r4, #16
 800a078:	4629      	mov	r1, r5
 800a07a:	4622      	mov	r2, r4
 800a07c:	a804      	add	r0, sp, #16
 800a07e:	f008 fe2f 	bl	8012ce0 <memcpy>
 800a082:	4631      	mov	r1, r6
 800a084:	4622      	mov	r2, r4
 800a086:	4628      	mov	r0, r5
 800a088:	f008 fe2a 	bl	8012ce0 <memcpy>
 800a08c:	4630      	mov	r0, r6
 800a08e:	4622      	mov	r2, r4
 800a090:	a904      	add	r1, sp, #16
 800a092:	f008 fe25 	bl	8012ce0 <memcpy>
 800a096:	ebbb 0b04 	subs.w	fp, fp, r4
 800a09a:	4425      	add	r5, r4
 800a09c:	4426      	add	r6, r4
 800a09e:	d1e7      	bne.n	800a070 <acc_alg_basic_utils_bubble_sort+0x44>
 800a0a0:	444f      	add	r7, r9
 800a0a2:	45ba      	cmp	sl, r7
 800a0a4:	f04f 0400 	mov.w	r4, #0
 800a0a8:	44c8      	add	r8, r9
 800a0aa:	d8d5      	bhi.n	800a058 <acc_alg_basic_utils_bubble_sort+0x2c>
 800a0ac:	2c00      	cmp	r4, #0
 800a0ae:	d0c8      	beq.n	800a042 <acc_alg_basic_utils_bubble_sort+0x16>
 800a0b0:	b009      	add	sp, #36	; 0x24
 800a0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b6:	bf00      	nop

0800a0b8 <acc_alg_basic_online_variance_f32_free>:
 800a0b8:	b180      	cbz	r0, 800a0dc <acc_alg_basic_online_variance_f32_free+0x24>
 800a0ba:	6803      	ldr	r3, [r0, #0]
 800a0bc:	b173      	cbz	r3, 800a0dc <acc_alg_basic_online_variance_f32_free+0x24>
 800a0be:	b510      	push	{r4, lr}
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	6898      	ldr	r0, [r3, #8]
 800a0c4:	f7fe feda 	bl	8008e7c <acc_rss_integration_mem_free>
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	68d8      	ldr	r0, [r3, #12]
 800a0cc:	f7fe fed6 	bl	8008e7c <acc_rss_integration_mem_free>
 800a0d0:	6820      	ldr	r0, [r4, #0]
 800a0d2:	f7fe fed3 	bl	8008e7c <acc_rss_integration_mem_free>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd10      	pop	{r4, pc}
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop

0800a0e0 <acc_alg_basic_online_variance_f32_reset>:
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	b180      	cbz	r0, 800a106 <acc_alg_basic_online_variance_f32_reset+0x26>
 800a0e4:	8884      	ldrh	r4, [r0, #4]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	6003      	str	r3, [r0, #0]
 800a0ea:	b154      	cbz	r4, 800a102 <acc_alg_basic_online_variance_f32_reset+0x22>
 800a0ec:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0f6:	f843 2b04 	str.w	r2, [r3], #4
 800a0fa:	4283      	cmp	r3, r0
 800a0fc:	f841 2b04 	str.w	r2, [r1], #4
 800a100:	d1f9      	bne.n	800a0f6 <acc_alg_basic_online_variance_f32_reset+0x16>
 800a102:	2001      	movs	r0, #1
 800a104:	bd10      	pop	{r4, pc}
 800a106:	213f      	movs	r1, #63	; 0x3f
 800a108:	4801      	ldr	r0, [pc, #4]	; (800a110 <acc_alg_basic_online_variance_f32_reset+0x30>)
 800a10a:	f7fe f957 	bl	80083bc <acc_assert_fail>
 800a10e:	bf00      	nop
 800a110:	08018d10 	.word	0x08018d10

0800a114 <acc_alg_basic_online_variance_f32_allocate>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	2218      	movs	r2, #24
 800a118:	b082      	sub	sp, #8
 800a11a:	4605      	mov	r5, r0
 800a11c:	4913      	ldr	r1, [pc, #76]	; (800a16c <acc_alg_basic_online_variance_f32_allocate+0x58>)
 800a11e:	2010      	movs	r0, #16
 800a120:	f7fe fe68 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 800a124:	9001      	str	r0, [sp, #4]
 800a126:	b1d0      	cbz	r0, 800a15e <acc_alg_basic_online_variance_f32_allocate+0x4a>
 800a128:	00ae      	lsls	r6, r5, #2
 800a12a:	4604      	mov	r4, r0
 800a12c:	221e      	movs	r2, #30
 800a12e:	490f      	ldr	r1, [pc, #60]	; (800a16c <acc_alg_basic_online_variance_f32_allocate+0x58>)
 800a130:	4630      	mov	r0, r6
 800a132:	f7fe fe5f 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 800a136:	221f      	movs	r2, #31
 800a138:	60a0      	str	r0, [r4, #8]
 800a13a:	490c      	ldr	r1, [pc, #48]	; (800a16c <acc_alg_basic_online_variance_f32_allocate+0x58>)
 800a13c:	9c01      	ldr	r4, [sp, #4]
 800a13e:	4630      	mov	r0, r6
 800a140:	f7fe fe58 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 800a144:	9b01      	ldr	r3, [sp, #4]
 800a146:	60e0      	str	r0, [r4, #12]
 800a148:	689a      	ldr	r2, [r3, #8]
 800a14a:	b142      	cbz	r2, 800a15e <acc_alg_basic_online_variance_f32_allocate+0x4a>
 800a14c:	68da      	ldr	r2, [r3, #12]
 800a14e:	b132      	cbz	r2, 800a15e <acc_alg_basic_online_variance_f32_allocate+0x4a>
 800a150:	809d      	strh	r5, [r3, #4]
 800a152:	4618      	mov	r0, r3
 800a154:	f7ff ffc4 	bl	800a0e0 <acc_alg_basic_online_variance_f32_reset>
 800a158:	9801      	ldr	r0, [sp, #4]
 800a15a:	b002      	add	sp, #8
 800a15c:	bd70      	pop	{r4, r5, r6, pc}
 800a15e:	a801      	add	r0, sp, #4
 800a160:	f7ff ffaa 	bl	800a0b8 <acc_alg_basic_online_variance_f32_free>
 800a164:	2000      	movs	r0, #0
 800a166:	b002      	add	sp, #8
 800a168:	bd70      	pop	{r4, r5, r6, pc}
 800a16a:	bf00      	nop
 800a16c:	08018d10 	.word	0x08018d10

0800a170 <acc_alg_basic_online_variance_f32_update_with_uint16>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	b358      	cbz	r0, 800a1cc <acc_alg_basic_online_variance_f32_update_with_uint16+0x5c>
 800a174:	6804      	ldr	r4, [r0, #0]
 800a176:	8885      	ldrh	r5, [r0, #4]
 800a178:	3401      	adds	r4, #1
 800a17a:	6004      	str	r4, [r0, #0]
 800a17c:	b325      	cbz	r5, 800a1c8 <acc_alg_basic_online_variance_f32_update_with_uint16+0x58>
 800a17e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a182:	ee07 4a90 	vmov	s15, r4
 800a186:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800a18a:	3902      	subs	r1, #2
 800a18c:	eb03 0085 	add.w	r0, r3, r5, lsl #2
 800a190:	f831 4f02 	ldrh.w	r4, [r1, #2]!
 800a194:	ed93 6a00 	vldr	s12, [r3]
 800a198:	ee07 4a90 	vmov	s15, r4
 800a19c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a0:	ee77 6ac6 	vsub.f32	s13, s15, s12
 800a1a4:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800a1a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a1ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a1b0:	eca3 7a01 	vstmia	r3!, {s14}
 800a1b4:	ed92 7a00 	vldr	s14, [r2]
 800a1b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a1bc:	4298      	cmp	r0, r3
 800a1be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1c2:	ece2 7a01 	vstmia	r2!, {s15}
 800a1c6:	d1e3      	bne.n	800a190 <acc_alg_basic_online_variance_f32_update_with_uint16+0x20>
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
 800a1cc:	2164      	movs	r1, #100	; 0x64
 800a1ce:	4801      	ldr	r0, [pc, #4]	; (800a1d4 <acc_alg_basic_online_variance_f32_update_with_uint16+0x64>)
 800a1d0:	f7fe f8f4 	bl	80083bc <acc_assert_fail>
 800a1d4:	08018d10 	.word	0x08018d10

0800a1d8 <acc_alg_basic_online_variance_f32_calculate_standard_deviation>:
 800a1d8:	b508      	push	{r3, lr}
 800a1da:	b188      	cbz	r0, 800a200 <acc_alg_basic_online_variance_f32_calculate_standard_deviation+0x28>
 800a1dc:	6803      	ldr	r3, [r0, #0]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d912      	bls.n	800a208 <acc_alg_basic_online_variance_f32_calculate_standard_deviation+0x30>
 800a1e2:	68c2      	ldr	r2, [r0, #12]
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	ee07 3a90 	vmov	s15, r3
 800a1ea:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a1ee:	ed91 7a00 	vldr	s14, [r1]
 800a1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a1fa:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a1fe:	bd08      	pop	{r3, pc}
 800a200:	2184      	movs	r1, #132	; 0x84
 800a202:	4803      	ldr	r0, [pc, #12]	; (800a210 <acc_alg_basic_online_variance_f32_calculate_standard_deviation+0x38>)
 800a204:	f7fe f8da 	bl	80083bc <acc_assert_fail>
 800a208:	2185      	movs	r1, #133	; 0x85
 800a20a:	4801      	ldr	r0, [pc, #4]	; (800a210 <acc_alg_basic_online_variance_f32_calculate_standard_deviation+0x38>)
 800a20c:	f7fe f8d6 	bl	80083bc <acc_assert_fail>
 800a210:	08018d10 	.word	0x08018d10

0800a214 <inject_data>:
 800a214:	3038      	adds	r0, #56	; 0x38
 800a216:	f004 bce9 	b.w	800ebec <acc_element_source_adc_inject_data>
 800a21a:	bf00      	nop

0800a21c <produce>:
 800a21c:	b510      	push	{r4, lr}
 800a21e:	4604      	mov	r4, r0
 800a220:	3038      	adds	r0, #56	; 0x38
 800a222:	f004 fca1 	bl	800eb68 <acc_element_source_adc_produce>
 800a226:	b960      	cbnz	r0, 800a242 <produce+0x26>
 800a228:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800a22c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 800a230:	6158      	str	r0, [r3, #20]
 800a232:	2101      	movs	r1, #1
 800a234:	7198      	strb	r0, [r3, #6]
 800a236:	7159      	strb	r1, [r3, #5]
 800a238:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 800a23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a240:	4710      	bx	r2
 800a242:	bd10      	pop	{r4, pc}

0800a244 <disassemble>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	6804      	ldr	r4, [r0, #0]
 800a248:	4605      	mov	r5, r0
 800a24a:	b154      	cbz	r4, 800a262 <disassemble+0x1e>
 800a24c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800a250:	f004 fc7c 	bl	800eb4c <acc_element_source_adc_release>
 800a254:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 800a258:	f7fe fe10 	bl	8008e7c <acc_rss_integration_mem_free>
 800a25c:	4620      	mov	r0, r4
 800a25e:	f7fe fe0d 	bl	8008e7c <acc_rss_integration_mem_free>
 800a262:	4628      	mov	r0, r5
 800a264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a268:	f7fe be08 	b.w	8008e7c <acc_rss_integration_mem_free>

0800a26c <acc_pipeline_direct_assemble>:
 800a26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a270:	4605      	mov	r5, r0
 800a272:	b085      	sub	sp, #20
 800a274:	468a      	mov	sl, r1
 800a276:	4690      	mov	r8, r2
 800a278:	2110      	movs	r1, #16
 800a27a:	4a5a      	ldr	r2, [pc, #360]	; (800a3e4 <acc_pipeline_direct_assemble+0x178>)
 800a27c:	469b      	mov	fp, r3
 800a27e:	2001      	movs	r0, #1
 800a280:	23ec      	movs	r3, #236	; 0xec
 800a282:	f7fe fddd 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 800a286:	23ed      	movs	r3, #237	; 0xed
 800a288:	4606      	mov	r6, r0
 800a28a:	4a56      	ldr	r2, [pc, #344]	; (800a3e4 <acc_pipeline_direct_assemble+0x178>)
 800a28c:	f44f 7190 	mov.w	r1, #288	; 0x120
 800a290:	2001      	movs	r0, #1
 800a292:	f7fe fdd5 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 800a296:	4604      	mov	r4, r0
 800a298:	2e00      	cmp	r6, #0
 800a29a:	f000 809b 	beq.w	800a3d4 <acc_pipeline_direct_assemble+0x168>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	f000 8098 	beq.w	800a3d4 <acc_pipeline_direct_assemble+0x168>
 800a2a4:	f100 02fc 	add.w	r2, r0, #252	; 0xfc
 800a2a8:	f100 0918 	add.w	r9, r0, #24
 800a2ac:	f100 0738 	add.w	r7, r0, #56	; 0x38
 800a2b0:	6030      	str	r0, [r6, #0]
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	9200      	str	r2, [sp, #0]
 800a2b6:	4638      	mov	r0, r7
 800a2b8:	464b      	mov	r3, r9
 800a2ba:	4642      	mov	r2, r8
 800a2bc:	f004 fc26 	bl	800eb0c <acc_element_source_adc_init_radar_engine>
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d043      	beq.n	800a34e <acc_pipeline_direct_assemble+0xe2>
 800a2c6:	f8b4 210a 	ldrh.w	r2, [r4, #266]	; 0x10a
 800a2ca:	f8b4 5106 	ldrh.w	r5, [r4, #262]	; 0x106
 800a2ce:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
 800a2d2:	4415      	add	r5, r2
 800a2d4:	006a      	lsls	r2, r5, #1
 800a2d6:	005d      	lsls	r5, r3, #1
 800a2d8:	4295      	cmp	r5, r2
 800a2da:	4640      	mov	r0, r8
 800a2dc:	bf38      	it	cc
 800a2de:	4615      	movcc	r5, r2
 800a2e0:	f7fe fb66 	bl	80089b0 <acc_base_configuration_min_pipeline_memory_size_get>
 800a2e4:	4285      	cmp	r5, r0
 800a2e6:	bf38      	it	cc
 800a2e8:	4605      	movcc	r5, r0
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f44f 7298 	mov.w	r2, #304	; 0x130
 800a2f0:	493c      	ldr	r1, [pc, #240]	; (800a3e4 <acc_pipeline_direct_assemble+0x178>)
 800a2f2:	f7fe fd7f 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d05f      	beq.n	800a3c0 <acc_pipeline_direct_assemble+0x154>
 800a300:	f104 0014 	add.w	r0, r4, #20
 800a304:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a306:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800a30a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 800a30e:	1de3      	adds	r3, r4, #7
 800a310:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
 800a314:	f104 0c06 	add.w	ip, r4, #6
 800a318:	65e0      	str	r0, [r4, #92]	; 0x5c
 800a31a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 800a31e:	f104 050c 	add.w	r5, r4, #12
 800a322:	f104 0008 	add.w	r0, r4, #8
 800a326:	6663      	str	r3, [r4, #100]	; 0x64
 800a328:	1d23      	adds	r3, r4, #4
 800a32a:	e9c4 501a 	strd	r5, r0, [r4, #104]	; 0x68
 800a32e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800a332:	65a4      	str	r4, [r4, #88]	; 0x58
 800a334:	f8c4 40f0 	str.w	r4, [r4, #240]	; 0xf0
 800a338:	464a      	mov	r2, r9
 800a33a:	4641      	mov	r1, r8
 800a33c:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
 800a340:	f504 738c 	add.w	r3, r4, #280	; 0x118
 800a344:	4638      	mov	r0, r7
 800a346:	f004 fbef 	bl	800eb28 <acc_element_source_adc_init>
 800a34a:	4605      	mov	r5, r0
 800a34c:	b938      	cbnz	r0, 800a35e <acc_pipeline_direct_assemble+0xf2>
 800a34e:	4630      	mov	r0, r6
 800a350:	f7ff ff78 	bl	800a244 <disassemble>
 800a354:	462e      	mov	r6, r5
 800a356:	4630      	mov	r0, r6
 800a358:	b005      	add	sp, #20
 800a35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35e:	f104 0878 	add.w	r8, r4, #120	; 0x78
 800a362:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800a366:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 800a36a:	2102      	movs	r1, #2
 800a36c:	4640      	mov	r0, r8
 800a36e:	f004 faa7 	bl	800e8c0 <acc_element_saturation_check_init>
 800a372:	4628      	mov	r0, r5
 800a374:	f8da 1000 	ldr.w	r1, [sl]
 800a378:	f004 fbb6 	bl	800eae8 <acc_element_sink_callback_init>
 800a37c:	4641      	mov	r1, r8
 800a37e:	4638      	mov	r0, r7
 800a380:	f003 fd5e 	bl	800de40 <acc_element_connect>
 800a384:	4629      	mov	r1, r5
 800a386:	4640      	mov	r0, r8
 800a388:	f003 fd5a 	bl	800de40 <acc_element_connect>
 800a38c:	4638      	mov	r0, r7
 800a38e:	f004 fbe7 	bl	800eb60 <acc_element_source_adc_validate>
 800a392:	4605      	mov	r5, r0
 800a394:	b928      	cbnz	r0, 800a3a2 <acc_pipeline_direct_assemble+0x136>
 800a396:	4b14      	ldr	r3, [pc, #80]	; (800a3e8 <acc_pipeline_direct_assemble+0x17c>)
 800a398:	4a14      	ldr	r2, [pc, #80]	; (800a3ec <acc_pipeline_direct_assemble+0x180>)
 800a39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39c:	4914      	ldr	r1, [pc, #80]	; (800a3f0 <acc_pipeline_direct_assemble+0x184>)
 800a39e:	4798      	blx	r3
 800a3a0:	e7d5      	b.n	800a34e <acc_pipeline_direct_assemble+0xe2>
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	f004 fbd8 	bl	800eb58 <acc_element_source_adc_reset>
 800a3a8:	4912      	ldr	r1, [pc, #72]	; (800a3f4 <acc_pipeline_direct_assemble+0x188>)
 800a3aa:	4a13      	ldr	r2, [pc, #76]	; (800a3f8 <acc_pipeline_direct_assemble+0x18c>)
 800a3ac:	4b13      	ldr	r3, [pc, #76]	; (800a3fc <acc_pipeline_direct_assemble+0x190>)
 800a3ae:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800a3b8:	60f3      	str	r3, [r6, #12]
 800a3ba:	b005      	add	sp, #20
 800a3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c0:	9003      	str	r0, [sp, #12]
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f7ff ff3e 	bl	800a244 <disassemble>
 800a3c8:	9b03      	ldr	r3, [sp, #12]
 800a3ca:	461e      	mov	r6, r3
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	b005      	add	sp, #20
 800a3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f7fe fd51 	bl	8008e7c <acc_rss_integration_mem_free>
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f7fe fd4e 	bl	8008e7c <acc_rss_integration_mem_free>
 800a3e0:	2600      	movs	r6, #0
 800a3e2:	e7b8      	b.n	800a356 <acc_pipeline_direct_assemble+0xea>
 800a3e4:	08018d5c 	.word	0x08018d5c
 800a3e8:	20001628 	.word	0x20001628
 800a3ec:	08018d88 	.word	0x08018d88
 800a3f0:	08018da8 	.word	0x08018da8
 800a3f4:	0800a21d 	.word	0x0800a21d
 800a3f8:	0800a215 	.word	0x0800a215
 800a3fc:	0800a245 	.word	0x0800a245

0800a400 <inject_data>:
 800a400:	3038      	adds	r0, #56	; 0x38
 800a402:	f004 bbf3 	b.w	800ebec <acc_element_source_adc_inject_data>
 800a406:	bf00      	nop

0800a408 <produce>:
 800a408:	b510      	push	{r4, lr}
 800a40a:	4604      	mov	r4, r0
 800a40c:	3038      	adds	r0, #56	; 0x38
 800a40e:	f004 fbab 	bl	800eb68 <acc_element_source_adc_produce>
 800a412:	b960      	cbnz	r0, 800a42e <produce+0x26>
 800a414:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
 800a418:	f8d4 234c 	ldr.w	r2, [r4, #844]	; 0x34c
 800a41c:	6158      	str	r0, [r3, #20]
 800a41e:	2101      	movs	r1, #1
 800a420:	7198      	strb	r0, [r3, #6]
 800a422:	7159      	strb	r1, [r3, #5]
 800a424:	f504 7052 	add.w	r0, r4, #840	; 0x348
 800a428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a42c:	4710      	bx	r2
 800a42e:	bd10      	pop	{r4, pc}

0800a430 <disassemble>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	6804      	ldr	r4, [r0, #0]
 800a434:	4605      	mov	r5, r0
 800a436:	b154      	cbz	r4, 800a44e <disassemble+0x1e>
 800a438:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800a43c:	f004 fb86 	bl	800eb4c <acc_element_source_adc_release>
 800a440:	f8d4 03a8 	ldr.w	r0, [r4, #936]	; 0x3a8
 800a444:	f7fe fd1a 	bl	8008e7c <acc_rss_integration_mem_free>
 800a448:	4620      	mov	r0, r4
 800a44a:	f7fe fd17 	bl	8008e7c <acc_rss_integration_mem_free>
 800a44e:	4628      	mov	r0, r5
 800a450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a454:	f7fe bd12 	b.w	8008e7c <acc_rss_integration_mem_free>

0800a458 <acc_pipeline_envelope_assemble>:
 800a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	b08d      	sub	sp, #52	; 0x34
 800a45e:	4605      	mov	r5, r0
 800a460:	9104      	str	r1, [sp, #16]
 800a462:	9307      	str	r3, [sp, #28]
 800a464:	2110      	movs	r1, #16
 800a466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a46a:	4617      	mov	r7, r2
 800a46c:	2001      	movs	r0, #1
 800a46e:	4ad8      	ldr	r2, [pc, #864]	; (800a7d0 <acc_pipeline_envelope_assemble+0x378>)
 800a470:	f7fe fce6 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 800a474:	f240 1301 	movw	r3, #257	; 0x101
 800a478:	4680      	mov	r8, r0
 800a47a:	4ad5      	ldr	r2, [pc, #852]	; (800a7d0 <acc_pipeline_envelope_assemble+0x378>)
 800a47c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 800a480:	2001      	movs	r0, #1
 800a482:	f7fe fcdd 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 800a486:	4604      	mov	r4, r0
 800a488:	f1b8 0f00 	cmp.w	r8, #0
 800a48c:	f000 81e7 	beq.w	800a85e <acc_pipeline_envelope_assemble+0x406>
 800a490:	2800      	cmp	r0, #0
 800a492:	f000 81e4 	beq.w	800a85e <acc_pipeline_envelope_assemble+0x406>
 800a496:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800a49a:	f500 7263 	add.w	r2, r0, #908	; 0x38c
 800a49e:	f100 0918 	add.w	r9, r0, #24
 800a4a2:	f8c8 0000 	str.w	r0, [r8]
 800a4a6:	9302      	str	r3, [sp, #8]
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	9200      	str	r2, [sp, #0]
 800a4ae:	464b      	mov	r3, r9
 800a4b0:	463a      	mov	r2, r7
 800a4b2:	f004 fb2b 	bl	800eb0c <acc_element_source_adc_init_radar_engine>
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	f000 817b 	beq.w	800a7b4 <acc_pipeline_envelope_assemble+0x35c>
 800a4be:	2100      	movs	r1, #0
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	f7fe f893 	bl	80085ec <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 800a4c6:	4682      	mov	sl, r0
 800a4c8:	2008      	movs	r0, #8
 800a4ca:	f8b4 538c 	ldrh.w	r5, [r4, #908]	; 0x38c
 800a4ce:	f003 fcab 	bl	800de28 <acc_element_sizeof>
 800a4d2:	f8b4 6396 	ldrh.w	r6, [r4, #918]	; 0x396
 800a4d6:	f8b4 239a 	ldrh.w	r2, [r4, #922]	; 0x39a
 800a4da:	f8b4 3398 	ldrh.w	r3, [r4, #920]	; 0x398
 800a4de:	4416      	add	r6, r2
 800a4e0:	0076      	lsls	r6, r6, #1
 800a4e2:	005b      	lsls	r3, r3, #1
 800a4e4:	429e      	cmp	r6, r3
 800a4e6:	bf38      	it	cc
 800a4e8:	461e      	movcc	r6, r3
 800a4ea:	fb00 f505 	mul.w	r5, r0, r5
 800a4ee:	42ae      	cmp	r6, r5
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	bf38      	it	cc
 800a4f4:	462e      	movcc	r6, r5
 800a4f6:	f7fe fa5b 	bl	80089b0 <acc_base_configuration_min_pipeline_memory_size_get>
 800a4fa:	4286      	cmp	r6, r0
 800a4fc:	bf38      	it	cc
 800a4fe:	4606      	movcc	r6, r0
 800a500:	f8c4 63ac 	str.w	r6, [r4, #940]	; 0x3ac
 800a504:	f1ba 0f00 	cmp.w	sl, #0
 800a508:	f040 8188 	bne.w	800a81c <acc_pipeline_envelope_assemble+0x3c4>
 800a50c:	f240 1285 	movw	r2, #389	; 0x185
 800a510:	49af      	ldr	r1, [pc, #700]	; (800a7d0 <acc_pipeline_envelope_assemble+0x378>)
 800a512:	4630      	mov	r0, r6
 800a514:	f7fe fc6e 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 800a518:	4605      	mov	r5, r0
 800a51a:	f8c4 03a8 	str.w	r0, [r4, #936]	; 0x3a8
 800a51e:	b940      	cbnz	r0, 800a532 <acc_pipeline_envelope_assemble+0xda>
 800a520:	4640      	mov	r0, r8
 800a522:	f7ff ff85 	bl	800a430 <disassemble>
 800a526:	f04f 0800 	mov.w	r8, #0
 800a52a:	4640      	mov	r0, r8
 800a52c:	b00d      	add	sp, #52	; 0x34
 800a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a532:	2008      	movs	r0, #8
 800a534:	f8b4 b38e 	ldrh.w	fp, [r4, #910]	; 0x38e
 800a538:	f003 fc76 	bl	800de28 <acc_element_sizeof>
 800a53c:	fb00 5b0b 	mla	fp, r0, fp, r5
 800a540:	465a      	mov	r2, fp
 800a542:	f104 0c06 	add.w	ip, r4, #6
 800a546:	1de0      	adds	r0, r4, #7
 800a548:	f104 0314 	add.w	r3, r4, #20
 800a54c:	f104 010c 	add.w	r1, r4, #12
 800a550:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
 800a554:	6660      	str	r0, [r4, #100]	; 0x64
 800a556:	f104 0c08 	add.w	ip, r4, #8
 800a55a:	1d20      	adds	r0, r4, #4
 800a55c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a55e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800a562:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800a566:	66a1      	str	r1, [r4, #104]	; 0x68
 800a568:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800a56c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a56e:	65a4      	str	r4, [r4, #88]	; 0x58
 800a570:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800a574:	e9c4 5532 	strd	r5, r5, [r4, #200]	; 0xc8
 800a578:	f8c4 c06c 	str.w	ip, [r4, #108]	; 0x6c
 800a57c:	4638      	mov	r0, r7
 800a57e:	9206      	str	r2, [sp, #24]
 800a580:	9305      	str	r3, [sp, #20]
 800a582:	9103      	str	r1, [sp, #12]
 800a584:	f7fe f9e8 	bl	8008958 <acc_base_configuration_noise_level_normalization_get>
 800a588:	9903      	ldr	r1, [sp, #12]
 800a58a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800a58e:	b128      	cbz	r0, 800a59c <acc_pipeline_envelope_assemble+0x144>
 800a590:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
 800a594:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
 800a598:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800a59c:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 800a5a0:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 800a5a4:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
 800a5a8:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
 800a5ac:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
 800a5b0:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
 800a5b4:	f8c4 11a4 	str.w	r1, [r4, #420]	; 0x1a4
 800a5b8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
 800a5bc:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
 800a5c0:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
 800a5c4:	f8c4 5210 	str.w	r5, [r4, #528]	; 0x210
 800a5c8:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
 800a5cc:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 800a5d0:	f8c4 224c 	str.w	r2, [r4, #588]	; 0x24c
 800a5d4:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
 800a5d8:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
 800a5dc:	f1ba 0f00 	cmp.w	sl, #0
 800a5e0:	d008      	beq.n	800a5f4 <acc_pipeline_envelope_assemble+0x19c>
 800a5e2:	442e      	add	r6, r5
 800a5e4:	f8c4 62ac 	str.w	r6, [r4, #684]	; 0x2ac
 800a5e8:	f8c4 22a0 	str.w	r2, [r4, #672]	; 0x2a0
 800a5ec:	f8c4 b2a4 	str.w	fp, [r4, #676]	; 0x2a4
 800a5f0:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
 800a5f4:	f8c4 52e4 	str.w	r5, [r4, #740]	; 0x2e4
 800a5f8:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
 800a5fc:	f8c4 531c 	str.w	r5, [r4, #796]	; 0x31c
 800a600:	f8c4 5320 	str.w	r5, [r4, #800]	; 0x320
 800a604:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
 800a608:	f8c4 5358 	str.w	r5, [r4, #856]	; 0x358
 800a60c:	f8c4 b2e0 	str.w	fp, [r4, #736]	; 0x2e0
 800a610:	f8c4 4380 	str.w	r4, [r4, #896]	; 0x380
 800a614:	f504 736a 	add.w	r3, r4, #936	; 0x3a8
 800a618:	464a      	mov	r2, r9
 800a61a:	4639      	mov	r1, r7
 800a61c:	9802      	ldr	r0, [sp, #8]
 800a61e:	f004 fa83 	bl	800eb28 <acc_element_source_adc_init>
 800a622:	4605      	mov	r5, r0
 800a624:	2800      	cmp	r0, #0
 800a626:	f000 80c5 	beq.w	800a7b4 <acc_pipeline_envelope_assemble+0x35c>
 800a62a:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 800a62e:	f104 0a78 	add.w	sl, r4, #120	; 0x78
 800a632:	461d      	mov	r5, r3
 800a634:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800a7d4 <acc_pipeline_envelope_assemble+0x37c>
 800a638:	9305      	str	r3, [sp, #20]
 800a63a:	2105      	movs	r1, #5
 800a63c:	4650      	mov	r0, sl
 800a63e:	f004 f93f 	bl	800e8c0 <acc_element_saturation_check_init>
 800a642:	4628      	mov	r0, r5
 800a644:	2200      	movs	r2, #0
 800a646:	2105      	movs	r1, #5
 800a648:	f003 fcae 	bl	800dfa8 <acc_element_centering_init>
 800a64c:	4638      	mov	r0, r7
 800a64e:	f7fe f983 	bl	8008958 <acc_base_configuration_noise_level_normalization_get>
 800a652:	b168      	cbz	r0, 800a670 <acc_pipeline_envelope_assemble+0x218>
 800a654:	4638      	mov	r0, r7
 800a656:	f7fe f9bd 	bl	80089d4 <acc_base_configuration_maximize_signal_attenuation_get>
 800a65a:	2800      	cmp	r0, #0
 800a65c:	bf14      	ite	ne
 800a65e:	231e      	movne	r3, #30
 800a660:	f44f 7396 	moveq.w	r3, #300	; 0x12c
 800a664:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800a666:	2105      	movs	r1, #5
 800a668:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800a66c:	f003 fffe 	bl	800e66c <acc_element_noise_level_normalization_init>
 800a670:	f504 739c 	add.w	r3, r4, #312	; 0x138
 800a674:	9306      	str	r3, [sp, #24]
 800a676:	4618      	mov	r0, r3
 800a678:	f504 73ba 	add.w	r3, r4, #372	; 0x174
 800a67c:	461d      	mov	r5, r3
 800a67e:	2208      	movs	r2, #8
 800a680:	2105      	movs	r1, #5
 800a682:	9308      	str	r3, [sp, #32]
 800a684:	f003 fd98 	bl	800e1b8 <acc_element_converter_init>
 800a688:	eddf 0a52 	vldr	s1, [pc, #328]	; 800a7d4 <acc_pipeline_envelope_assemble+0x37c>
 800a68c:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 800a690:	2108      	movs	r1, #8
 800a692:	4628      	mov	r0, r5
 800a694:	f003 ff5c 	bl	800e550 <acc_element_iq_mixer_init>
 800a698:	f8b4 5394 	ldrh.w	r5, [r4, #916]	; 0x394
 800a69c:	f8b4 6392 	ldrh.w	r6, [r4, #914]	; 0x392
 800a6a0:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	9303      	str	r3, [sp, #12]
 800a6a8:	f7fd ff84 	bl	80085b4 <acc_base_configuration_phase_compensation_alpha_get>
 800a6ac:	4633      	mov	r3, r6
 800a6ae:	462a      	mov	r2, r5
 800a6b0:	2108      	movs	r1, #8
 800a6b2:	f504 7500 	add.w	r5, r4, #512	; 0x200
 800a6b6:	9803      	ldr	r0, [sp, #12]
 800a6b8:	9509      	str	r5, [sp, #36]	; 0x24
 800a6ba:	f004 f881 	bl	800e7c0 <acc_element_phase_compensation_init>
 800a6be:	f8b4 2390 	ldrh.w	r2, [r4, #912]	; 0x390
 800a6c2:	2108      	movs	r1, #8
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	f003 fdf5 	bl	800e2b4 <acc_element_crop_init>
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	f7fd ffaa 	bl	8008624 <acc_base_configuration_filter_demodulated_data_get>
 800a6d0:	f504 7b0f 	add.w	fp, r4, #572	; 0x23c
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	f7fd ffb4 	bl	8008644 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>
 800a6dc:	2108      	movs	r1, #8
 800a6de:	464b      	mov	r3, r9
 800a6e0:	462a      	mov	r2, r5
 800a6e2:	4658      	mov	r0, fp
 800a6e4:	f003 fe48 	bl	800e378 <acc_element_depth_domain_low_pass_filter_init>
 800a6e8:	a90b      	add	r1, sp, #44	; 0x2c
 800a6ea:	4638      	mov	r0, r7
 800a6ec:	f7fd ff7e 	bl	80085ec <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 800a6f0:	b130      	cbz	r0, 800a700 <acc_pipeline_envelope_assemble+0x2a8>
 800a6f2:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
 800a6f6:	2108      	movs	r1, #8
 800a6f8:	f504 7024 	add.w	r0, r4, #656	; 0x290
 800a6fc:	f004 f990 	bl	800ea20 <acc_element_time_domain_low_pass_filter_init>
 800a700:	f504 7634 	add.w	r6, r4, #720	; 0x2d0
 800a704:	2108      	movs	r1, #8
 800a706:	4630      	mov	r0, r6
 800a708:	f504 7543 	add.w	r5, r4, #780	; 0x30c
 800a70c:	f003 fbe6 	bl	800dedc <acc_element_abs_init>
 800a710:	2202      	movs	r2, #2
 800a712:	2104      	movs	r1, #4
 800a714:	4628      	mov	r0, r5
 800a716:	f003 fd4f 	bl	800e1b8 <acc_element_converter_init>
 800a71a:	9b04      	ldr	r3, [sp, #16]
 800a71c:	f504 7952 	add.w	r9, r4, #840	; 0x348
 800a720:	6819      	ldr	r1, [r3, #0]
 800a722:	4648      	mov	r0, r9
 800a724:	f004 f9e0 	bl	800eae8 <acc_element_sink_callback_init>
 800a728:	4651      	mov	r1, sl
 800a72a:	9802      	ldr	r0, [sp, #8]
 800a72c:	f003 fb88 	bl	800de40 <acc_element_connect>
 800a730:	4650      	mov	r0, sl
 800a732:	9905      	ldr	r1, [sp, #20]
 800a734:	f003 fb84 	bl	800de40 <acc_element_connect>
 800a738:	4638      	mov	r0, r7
 800a73a:	f7fe f90d 	bl	8008958 <acc_base_configuration_noise_level_normalization_get>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d040      	beq.n	800a7c4 <acc_pipeline_envelope_assemble+0x36c>
 800a742:	f104 0af8 	add.w	sl, r4, #248	; 0xf8
 800a746:	9805      	ldr	r0, [sp, #20]
 800a748:	4651      	mov	r1, sl
 800a74a:	f003 fb79 	bl	800de40 <acc_element_connect>
 800a74e:	9906      	ldr	r1, [sp, #24]
 800a750:	4650      	mov	r0, sl
 800a752:	f003 fb75 	bl	800de40 <acc_element_connect>
 800a756:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a75a:	9806      	ldr	r0, [sp, #24]
 800a75c:	4651      	mov	r1, sl
 800a75e:	f003 fb6f 	bl	800de40 <acc_element_connect>
 800a762:	4650      	mov	r0, sl
 800a764:	9903      	ldr	r1, [sp, #12]
 800a766:	f003 fb6b 	bl	800de40 <acc_element_connect>
 800a76a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a76e:	9803      	ldr	r0, [sp, #12]
 800a770:	4651      	mov	r1, sl
 800a772:	f003 fb65 	bl	800de40 <acc_element_connect>
 800a776:	4659      	mov	r1, fp
 800a778:	4650      	mov	r0, sl
 800a77a:	f003 fb61 	bl	800de40 <acc_element_connect>
 800a77e:	4638      	mov	r0, r7
 800a780:	2100      	movs	r1, #0
 800a782:	f7fd ff33 	bl	80085ec <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 800a786:	bb68      	cbnz	r0, 800a7e4 <acc_pipeline_envelope_assemble+0x38c>
 800a788:	4658      	mov	r0, fp
 800a78a:	4631      	mov	r1, r6
 800a78c:	f003 fb58 	bl	800de40 <acc_element_connect>
 800a790:	4629      	mov	r1, r5
 800a792:	4630      	mov	r0, r6
 800a794:	f003 fb54 	bl	800de40 <acc_element_connect>
 800a798:	4628      	mov	r0, r5
 800a79a:	4649      	mov	r1, r9
 800a79c:	f003 fb50 	bl	800de40 <acc_element_connect>
 800a7a0:	9802      	ldr	r0, [sp, #8]
 800a7a2:	f004 f9dd 	bl	800eb60 <acc_element_source_adc_validate>
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	bb38      	cbnz	r0, 800a7fa <acc_pipeline_envelope_assemble+0x3a2>
 800a7aa:	4b0b      	ldr	r3, [pc, #44]	; (800a7d8 <acc_pipeline_envelope_assemble+0x380>)
 800a7ac:	4a0b      	ldr	r2, [pc, #44]	; (800a7dc <acc_pipeline_envelope_assemble+0x384>)
 800a7ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b0:	490b      	ldr	r1, [pc, #44]	; (800a7e0 <acc_pipeline_envelope_assemble+0x388>)
 800a7b2:	4798      	blx	r3
 800a7b4:	4640      	mov	r0, r8
 800a7b6:	f7ff fe3b 	bl	800a430 <disassemble>
 800a7ba:	46a8      	mov	r8, r5
 800a7bc:	4640      	mov	r0, r8
 800a7be:	b00d      	add	sp, #52	; 0x34
 800a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c4:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800a7c8:	f003 fb3a 	bl	800de40 <acc_element_connect>
 800a7cc:	e7c3      	b.n	800a756 <acc_pipeline_envelope_assemble+0x2fe>
 800a7ce:	bf00      	nop
 800a7d0:	08018db8 	.word	0x08018db8
 800a7d4:	00000000 	.word	0x00000000
 800a7d8:	20001628 	.word	0x20001628
 800a7dc:	08018d88 	.word	0x08018d88
 800a7e0:	08018de4 	.word	0x08018de4
 800a7e4:	f504 7724 	add.w	r7, r4, #656	; 0x290
 800a7e8:	4658      	mov	r0, fp
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f003 fb28 	bl	800de40 <acc_element_connect>
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	f003 fb24 	bl	800de40 <acc_element_connect>
 800a7f8:	e7ca      	b.n	800a790 <acc_pipeline_envelope_assemble+0x338>
 800a7fa:	9802      	ldr	r0, [sp, #8]
 800a7fc:	f004 f9ac 	bl	800eb58 <acc_element_source_adc_reset>
 800a800:	9807      	ldr	r0, [sp, #28]
 800a802:	491b      	ldr	r1, [pc, #108]	; (800a870 <acc_pipeline_envelope_assemble+0x418>)
 800a804:	4a1b      	ldr	r2, [pc, #108]	; (800a874 <acc_pipeline_envelope_assemble+0x41c>)
 800a806:	4b1c      	ldr	r3, [pc, #112]	; (800a878 <acc_pipeline_envelope_assemble+0x420>)
 800a808:	f8c4 0384 	str.w	r0, [r4, #900]	; 0x384
 800a80c:	4640      	mov	r0, r8
 800a80e:	e9c8 1201 	strd	r1, r2, [r8, #4]
 800a812:	f8c8 300c 	str.w	r3, [r8, #12]
 800a816:	b00d      	add	sp, #52	; 0x34
 800a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81c:	2008      	movs	r0, #8
 800a81e:	f8b4 538c 	ldrh.w	r5, [r4, #908]	; 0x38c
 800a822:	f003 fb01 	bl	800de28 <acc_element_sizeof>
 800a826:	f106 030a 	add.w	r3, r6, #10
 800a82a:	fb00 3005 	mla	r0, r0, r5, r3
 800a82e:	f240 1285 	movw	r2, #389	; 0x185
 800a832:	4912      	ldr	r1, [pc, #72]	; (800a87c <acc_pipeline_envelope_assemble+0x424>)
 800a834:	f7fe fade 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 800a838:	4605      	mov	r5, r0
 800a83a:	f8c4 03a8 	str.w	r0, [r4, #936]	; 0x3a8
 800a83e:	2800      	cmp	r0, #0
 800a840:	f43f ae6e 	beq.w	800a520 <acc_pipeline_envelope_assemble+0xc8>
 800a844:	f8b4 238e 	ldrh.w	r2, [r4, #910]	; 0x38e
 800a848:	9203      	str	r2, [sp, #12]
 800a84a:	2008      	movs	r0, #8
 800a84c:	f003 faec 	bl	800de28 <acc_element_sizeof>
 800a850:	9a03      	ldr	r2, [sp, #12]
 800a852:	f106 0b04 	add.w	fp, r6, #4
 800a856:	fb00 5202 	mla	r2, r0, r2, r5
 800a85a:	44ab      	add	fp, r5
 800a85c:	e671      	b.n	800a542 <acc_pipeline_envelope_assemble+0xea>
 800a85e:	4640      	mov	r0, r8
 800a860:	f7fe fb0c 	bl	8008e7c <acc_rss_integration_mem_free>
 800a864:	4620      	mov	r0, r4
 800a866:	f7fe fb09 	bl	8008e7c <acc_rss_integration_mem_free>
 800a86a:	f04f 0800 	mov.w	r8, #0
 800a86e:	e7a5      	b.n	800a7bc <acc_pipeline_envelope_assemble+0x364>
 800a870:	0800a409 	.word	0x0800a409
 800a874:	0800a401 	.word	0x0800a401
 800a878:	0800a431 	.word	0x0800a431
 800a87c:	08018db8 	.word	0x08018db8

0800a880 <acc_probes_execute_uint16>:
 800a880:	b530      	push	{r4, r5, lr}
 800a882:	b085      	sub	sp, #20
 800a884:	4c09      	ldr	r4, [pc, #36]	; (800a8ac <acc_probes_execute_uint16+0x2c>)
 800a886:	f88d 0004 	strb.w	r0, [sp, #4]
 800a88a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a88e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800a892:	2501      	movs	r5, #1
 800a894:	6844      	ldr	r4, [r0, #4]
 800a896:	9102      	str	r1, [sp, #8]
 800a898:	9503      	str	r5, [sp, #12]
 800a89a:	4611      	mov	r1, r2
 800a89c:	fa03 f205 	lsl.w	r2, r3, r5
 800a8a0:	b114      	cbz	r4, 800a8a8 <acc_probes_execute_uint16+0x28>
 800a8a2:	6883      	ldr	r3, [r0, #8]
 800a8a4:	a801      	add	r0, sp, #4
 800a8a6:	47a0      	blx	r4
 800a8a8:	b005      	add	sp, #20
 800a8aa:	bd30      	pop	{r4, r5, pc}
 800a8ac:	20000014 	.word	0x20000014

0800a8b0 <acc_probes_execute_struct>:
 800a8b0:	b530      	push	{r4, r5, lr}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	4c09      	ldr	r4, [pc, #36]	; (800a8dc <acc_probes_execute_struct+0x2c>)
 800a8b6:	f88d 0004 	strb.w	r0, [sp, #4]
 800a8ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a8be:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800a8c2:	2507      	movs	r5, #7
 800a8c4:	6844      	ldr	r4, [r0, #4]
 800a8c6:	e9cd 1502 	strd	r1, r5, [sp, #8]
 800a8ca:	b124      	cbz	r4, 800a8d6 <acc_probes_execute_struct+0x26>
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	6883      	ldr	r3, [r0, #8]
 800a8d2:	a801      	add	r0, sp, #4
 800a8d4:	47a0      	blx	r4
 800a8d6:	b005      	add	sp, #20
 800a8d8:	bd30      	pop	{r4, r5, pc}
 800a8da:	bf00      	nop
 800a8dc:	20000014 	.word	0x20000014

0800a8e0 <acc_probes_execute_primitive_probe>:
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	4b08      	ldr	r3, [pc, #32]	; (800a908 <acc_probes_execute_primitive_probe+0x28>)
 800a8e6:	f88d 0004 	strb.w	r0, [sp, #4]
 800a8ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a8ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	6844      	ldr	r4, [r0, #4]
 800a8f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a8fa:	b11c      	cbz	r4, 800a904 <acc_probes_execute_primitive_probe+0x24>
 800a8fc:	6883      	ldr	r3, [r0, #8]
 800a8fe:	4611      	mov	r1, r2
 800a900:	a801      	add	r0, sp, #4
 800a902:	47a0      	blx	r4
 800a904:	b004      	add	sp, #16
 800a906:	bd10      	pop	{r4, pc}
 800a908:	20000014 	.word	0x20000014

0800a90c <destroy>:
 800a90c:	6943      	ldr	r3, [r0, #20]
 800a90e:	b13b      	cbz	r3, 800a920 <destroy+0x14>
 800a910:	b510      	push	{r4, lr}
 800a912:	4604      	mov	r4, r0
 800a914:	4618      	mov	r0, r3
 800a916:	f7fe fab1 	bl	8008e7c <acc_rss_integration_mem_free>
 800a91a:	2300      	movs	r3, #0
 800a91c:	6163      	str	r3, [r4, #20]
 800a91e:	bd10      	pop	{r4, pc}
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop

0800a924 <process_data>:
 800a924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a928:	6944      	ldr	r4, [r0, #20]
 800a92a:	f8b4 70ce 	ldrh.w	r7, [r4, #206]	; 0xce
 800a92e:	b917      	cbnz	r7, 800a936 <process_data+0x12>
 800a930:	2001      	movs	r0, #1
 800a932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a936:	f8b4 c0c8 	ldrh.w	ip, [r4, #200]	; 0xc8
 800a93a:	f8b4 e0c4 	ldrh.w	lr, [r4, #196]	; 0xc4
 800a93e:	f8b4 80cc 	ldrh.w	r8, [r4, #204]	; 0xcc
 800a942:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800a946:	4616      	mov	r6, r2
 800a948:	680a      	ldr	r2, [r1, #0]
 800a94a:	6801      	ldr	r1, [r0, #0]
 800a94c:	461d      	mov	r5, r3
 800a94e:	237c      	movs	r3, #124	; 0x7c
 800a950:	fbb3 f3f8 	udiv	r3, r3, r8
 800a954:	fb03 e30c 	mla	r3, r3, ip, lr
 800a958:	eb02 0803 	add.w	r8, r2, r3
 800a95c:	4642      	mov	r2, r8
 800a95e:	463b      	mov	r3, r7
 800a960:	2001      	movs	r0, #1
 800a962:	f7ff ff8d 	bl	800a880 <acc_probes_execute_uint16>
 800a966:	4640      	mov	r0, r8
 800a968:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 800a96c:	f003 f9f0 	bl	800dd50 <acc_alg_cca_calculate>
 800a970:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a9ac <process_data+0x88>
 800a974:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a976:	ed85 0a01 	vstr	s0, [r5, #4]
 800a97a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a982:	bfcc      	ite	gt
 800a984:	2201      	movgt	r2, #1
 800a986:	2200      	movle	r2, #0
 800a988:	702a      	strb	r2, [r5, #0]
 800a98a:	b14b      	cbz	r3, 800a9a0 <process_data+0x7c>
 800a98c:	2200      	movs	r2, #0
 800a98e:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 800a992:	6833      	ldr	r3, [r6, #0]
 800a994:	722a      	strb	r2, [r5, #8]
 800a996:	1a5b      	subs	r3, r3, r1
 800a998:	6033      	str	r3, [r6, #0]
 800a99a:	2001      	movs	r0, #1
 800a99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a0:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 800a9a4:	f082 0201 	eor.w	r2, r2, #1
 800a9a8:	e7f1      	b.n	800a98e <process_data+0x6a>
 800a9aa:	bf00      	nop
 800a9ac:	42640000 	.word	0x42640000

0800a9b0 <transfer_data>:
 800a9b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9b4:	6944      	ldr	r4, [r0, #20]
 800a9b6:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
 800a9ba:	b089      	sub	sp, #36	; 0x24
 800a9bc:	4681      	mov	r9, r0
 800a9be:	460f      	mov	r7, r1
 800a9c0:	4690      	mov	r8, r2
 800a9c2:	b90b      	cbnz	r3, 800a9c8 <transfer_data+0x18>
 800a9c4:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 800a9c8:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 800a9cc:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
 800a9d0:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
 800a9d4:	a902      	add	r1, sp, #8
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	267c      	movs	r6, #124	; 0x7c
 800a9da:	fbb6 f3f3 	udiv	r3, r6, r3
 800a9de:	fb03 2505 	mla	r5, r3, r5, r2
 800a9e2:	f006 f8e3 	bl	8010bac <acc_cpd_linear_sweep_get_info>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	9a02      	ldr	r2, [sp, #8]
 800a9ea:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
 800a9ee:	f8d9 0000 	ldr.w	r0, [r9]
 800a9f2:	442a      	add	r2, r5
 800a9f4:	4419      	add	r1, r3
 800a9f6:	f003 f80f 	bl	800da18 <acc_sensor_protocol_r2_transfer_data>
 800a9fa:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800a9fe:	ab01      	add	r3, sp, #4
 800aa00:	4621      	mov	r1, r4
 800aa02:	4681      	mov	r9, r0
 800aa04:	f006 f8ea 	bl	8010bdc <acc_cpd_linear_sweep_check>
 800aa08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aa0c:	3300      	adds	r3, #0
 800aa0e:	bf18      	it	ne
 800aa10:	2301      	movne	r3, #1
 800aa12:	a902      	add	r1, sp, #8
 800aa14:	f888 3000 	strb.w	r3, [r8]
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f006 f8c7 	bl	8010bac <acc_cpd_linear_sweep_get_info>
 800aa1e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
 800aa22:	6838      	ldr	r0, [r7, #0]
 800aa24:	9902      	ldr	r1, [sp, #8]
 800aa26:	006a      	lsls	r2, r5, #1
 800aa28:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 800aa2c:	4418      	add	r0, r3
 800aa2e:	f008 f965 	bl	8012cfc <memmove>
 800aa32:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 800aa36:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 800aa3a:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 800aa3e:	fbb6 f6f1 	udiv	r6, r6, r1
 800aa42:	005b      	lsls	r3, r3, #1
 800aa44:	fb06 2303 	mla	r3, r6, r3, r2
 800aa48:	4628      	mov	r0, r5
 800aa4a:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 800aa4e:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
 800aa52:	b009      	add	sp, #36	; 0x24
 800aa54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800aa58 <measure_noise>:
 800aa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	b0b7      	sub	sp, #220	; 0xdc
 800aa5e:	4604      	mov	r4, r0
 800aa60:	4688      	mov	r8, r1
 800aa62:	4615      	mov	r5, r2
 800aa64:	f7fe fa1c 	bl	8008ea0 <acc_rss_integration_log_level>
 800aa68:	2803      	cmp	r0, #3
 800aa6a:	d905      	bls.n	800aa78 <measure_noise+0x20>
 800aa6c:	4b42      	ldr	r3, [pc, #264]	; (800ab78 <measure_noise+0x120>)
 800aa6e:	4a43      	ldr	r2, [pc, #268]	; (800ab7c <measure_noise+0x124>)
 800aa70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa72:	4943      	ldr	r1, [pc, #268]	; (800ab80 <measure_noise+0x128>)
 800aa74:	2004      	movs	r0, #4
 800aa76:	4798      	blx	r3
 800aa78:	f8d4 a014 	ldr.w	sl, [r4, #20]
 800aa7c:	f8d4 9000 	ldr.w	r9, [r4]
 800aa80:	4651      	mov	r1, sl
 800aa82:	22bc      	movs	r2, #188	; 0xbc
 800aa84:	a807      	add	r0, sp, #28
 800aa86:	f008 f92b 	bl	8012ce0 <memcpy>
 800aa8a:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 800aa8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800aa90:	f8d8 1000 	ldr.w	r1, [r8]
 800aa94:	f8ba b0cc 	ldrh.w	fp, [sl, #204]	; 0xcc
 800aa98:	00bf      	lsls	r7, r7, #2
 800aa9a:	1e7e      	subs	r6, r7, #1
 800aa9c:	962c      	str	r6, [sp, #176]	; 0xb0
 800aa9e:	2602      	movs	r6, #2
 800aaa0:	2400      	movs	r4, #0
 800aaa2:	ab07      	add	r3, sp, #28
 800aaa4:	962d      	str	r6, [sp, #180]	; 0xb4
 800aaa6:	4648      	mov	r0, r9
 800aaa8:	2601      	movs	r6, #1
 800aaaa:	961d      	str	r6, [sp, #116]	; 0x74
 800aaac:	9422      	str	r4, [sp, #136]	; 0x88
 800aaae:	941c      	str	r4, [sp, #112]	; 0x70
 800aab0:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8
 800aab4:	9434      	str	r4, [sp, #208]	; 0xd0
 800aab6:	f005 fbaf 	bl	8010218 <acc_cpd_linear_sweep_load_program>
 800aaba:	4648      	mov	r0, r9
 800aabc:	f006 f838 	bl	8010b30 <acc_cpd_linear_sweep_run_program>
 800aac0:	4648      	mov	r0, r9
 800aac2:	466b      	mov	r3, sp
 800aac4:	2264      	movs	r2, #100	; 0x64
 800aac6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800aaca:	f002 fe63 	bl	800d794 <acc_sensor_protocol_r2_wait_for_event>
 800aace:	4606      	mov	r6, r0
 800aad0:	b918      	cbnz	r0, 800aada <measure_noise+0x82>
 800aad2:	4630      	mov	r0, r6
 800aad4:	b037      	add	sp, #220	; 0xdc
 800aad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aada:	a901      	add	r1, sp, #4
 800aadc:	4650      	mov	r0, sl
 800aade:	237c      	movs	r3, #124	; 0x7c
 800aae0:	f8d8 8000 	ldr.w	r8, [r8]
 800aae4:	fbb3 fbfb 	udiv	fp, r3, fp
 800aae8:	b2bf      	uxth	r7, r7
 800aaea:	f006 f85f 	bl	8010bac <acc_cpd_linear_sweep_get_info>
 800aaee:	9a01      	ldr	r2, [sp, #4]
 800aaf0:	fb0b f707 	mul.w	r7, fp, r7
 800aaf4:	4641      	mov	r1, r8
 800aaf6:	443a      	add	r2, r7
 800aaf8:	4648      	mov	r0, r9
 800aafa:	f002 ff8d 	bl	800da18 <acc_sensor_protocol_r2_transfer_data>
 800aafe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ab02:	4680      	mov	r8, r0
 800ab04:	4648      	mov	r0, r9
 800ab06:	f002 fed9 	bl	800d8bc <acc_sensor_protocol_r2_stop>
 800ab0a:	4650      	mov	r0, sl
 800ab0c:	a901      	add	r1, sp, #4
 800ab0e:	f006 f84d 	bl	8010bac <acc_cpd_linear_sweep_get_info>
 800ab12:	9801      	ldr	r0, [sp, #4]
 800ab14:	2f0e      	cmp	r7, #14
 800ab16:	f1a7 0c0e 	sub.w	ip, r7, #14
 800ab1a:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 800ab1e:	d91b      	bls.n	800ab58 <measure_noise+0x100>
 800ab20:	007f      	lsls	r7, r7, #1
 800ab22:	3f02      	subs	r7, #2
 800ab24:	f100 021a 	add.w	r2, r0, #26
 800ab28:	eb00 0e07 	add.w	lr, r0, r7
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 800ab32:	459e      	cmp	lr, r3
 800ab34:	440c      	add	r4, r1
 800ab36:	d1fa      	bne.n	800ab2e <measure_noise+0xd6>
 800ab38:	fbb4 f4fc 	udiv	r4, r4, ip
 800ab3c:	4438      	add	r0, r7
 800ab3e:	2100      	movs	r1, #0
 800ab40:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800ab44:	1b1b      	subs	r3, r3, r4
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	bfb8      	it	lt
 800ab4a:	425b      	neglt	r3, r3
 800ab4c:	4290      	cmp	r0, r2
 800ab4e:	4419      	add	r1, r3
 800ab50:	d1f6      	bne.n	800ab40 <measure_noise+0xe8>
 800ab52:	fbb1 f4fc 	udiv	r4, r1, ip
 800ab56:	b2a4      	uxth	r4, r4
 800ab58:	802c      	strh	r4, [r5, #0]
 800ab5a:	f7fe f9a1 	bl	8008ea0 <acc_rss_integration_log_level>
 800ab5e:	2803      	cmp	r0, #3
 800ab60:	d9b7      	bls.n	800aad2 <measure_noise+0x7a>
 800ab62:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <measure_noise+0x120>)
 800ab64:	4a07      	ldr	r2, [pc, #28]	; (800ab84 <measure_noise+0x12c>)
 800ab66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab68:	4905      	ldr	r1, [pc, #20]	; (800ab80 <measure_noise+0x128>)
 800ab6a:	2004      	movs	r0, #4
 800ab6c:	4798      	blx	r3
 800ab6e:	4630      	mov	r0, r6
 800ab70:	b037      	add	sp, #220	; 0xdc
 800ab72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab76:	bf00      	nop
 800ab78:	20001628 	.word	0x20001628
 800ab7c:	08018e88 	.word	0x08018e88
 800ab80:	08018eac 	.word	0x08018eac
 800ab84:	08018ec0 	.word	0x08018ec0

0800ab88 <calibrate>:
 800ab88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab8c:	b09b      	sub	sp, #108	; 0x6c
 800ab8e:	4604      	mov	r4, r0
 800ab90:	460e      	mov	r6, r1
 800ab92:	4617      	mov	r7, r2
 800ab94:	4698      	mov	r8, r3
 800ab96:	f7fe f983 	bl	8008ea0 <acc_rss_integration_log_level>
 800ab9a:	2803      	cmp	r0, #3
 800ab9c:	d905      	bls.n	800abaa <calibrate+0x22>
 800ab9e:	4b47      	ldr	r3, [pc, #284]	; (800acbc <calibrate+0x134>)
 800aba0:	4a47      	ldr	r2, [pc, #284]	; (800acc0 <calibrate+0x138>)
 800aba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aba4:	4947      	ldr	r1, [pc, #284]	; (800acc4 <calibrate+0x13c>)
 800aba6:	2004      	movs	r0, #4
 800aba8:	4798      	blx	r3
 800abaa:	6965      	ldr	r5, [r4, #20]
 800abac:	6824      	ldr	r4, [r4, #0]
 800abae:	2300      	movs	r3, #0
 800abb0:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800abb4:	f7fe f8ce 	bl	8008d54 <acc_rss_integration_get_sensor_reference_frequency>
 800abb8:	a812      	add	r0, sp, #72	; 0x48
 800abba:	a902      	add	r1, sp, #8
 800abbc:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 800abc0:	f006 f85a 	bl	8010c78 <acc_cpd_pll_divisors_calculate>
 800abc4:	b920      	cbnz	r0, 800abd0 <calibrate+0x48>
 800abc6:	2400      	movs	r4, #0
 800abc8:	4620      	mov	r0, r4
 800abca:	b01b      	add	sp, #108	; 0x6c
 800abcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abd0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800abd4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800abd8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800abdc:	f8bd c010 	ldrh.w	ip, [sp, #16]
 800abe0:	9207      	str	r2, [sp, #28]
 800abe2:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800abe6:	9008      	str	r0, [sp, #32]
 800abe8:	6871      	ldr	r1, [r6, #4]
 800abea:	6830      	ldr	r0, [r6, #0]
 800abec:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
 800abf0:	466b      	mov	r3, sp
 800abf2:	aa05      	add	r2, sp, #20
 800abf4:	f004 f83c 	bl	800ec70 <acc_cpd_cbank_and_vana_calibration>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d0e4      	beq.n	800abc6 <calibrate+0x3e>
 800abfc:	f8b5 90ce 	ldrh.w	r9, [r5, #206]	; 0xce
 800ac00:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
 800ac04:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800ac08:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 800ac0c:	f119 0000 	adds.w	r0, r9, #0
 800ac10:	bf18      	it	ne
 800ac12:	2001      	movne	r0, #1
 800ac14:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ac18:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 800ac1c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ac1e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800ac22:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ac26:	910c      	str	r1, [sp, #48]	; 0x30
 800ac28:	9900      	ldr	r1, [sp, #0]
 800ac2a:	940a      	str	r4, [sp, #40]	; 0x28
 800ac2c:	900d      	str	r0, [sp, #52]	; 0x34
 800ac2e:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800ac32:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 800ac36:	910f      	str	r1, [sp, #60]	; 0x3c
 800ac38:	ab12      	add	r3, sp, #72	; 0x48
 800ac3a:	aa0a      	add	r2, sp, #40	; 0x28
 800ac3c:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ac40:	9410      	str	r4, [sp, #64]	; 0x40
 800ac42:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
 800ac46:	f004 f9e3 	bl	800f010 <acc_cpd_dll_calibration>
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	f1b9 0f00 	cmp.w	r9, #0
 800ac50:	d006      	beq.n	800ac60 <calibrate+0xd8>
 800ac52:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac54:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 800ac58:	f8c8 2004 	str.w	r2, [r8, #4]
 800ac5c:	f888 3000 	strb.w	r3, [r8]
 800ac60:	2c00      	cmp	r4, #0
 800ac62:	d0b0      	beq.n	800abc6 <calibrate+0x3e>
 800ac64:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 800ac68:	9b00      	ldr	r3, [sp, #0]
 800ac6a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800ac6e:	80bb      	strh	r3, [r7, #4]
 800ac70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac72:	80f8      	strh	r0, [r7, #6]
 800ac74:	8139      	strh	r1, [r7, #8]
 800ac76:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 800ac7a:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 800ac7e:	817a      	strh	r2, [r7, #10]
 800ac80:	81bb      	strh	r3, [r7, #12]
 800ac82:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 800ac86:	81f8      	strh	r0, [r7, #14]
 800ac88:	2306      	movs	r3, #6
 800ac8a:	8239      	strh	r1, [r7, #16]
 800ac8c:	827a      	strh	r2, [r7, #18]
 800ac8e:	603b      	str	r3, [r7, #0]
 800ac90:	f7fe f906 	bl	8008ea0 <acc_rss_integration_log_level>
 800ac94:	2803      	cmp	r0, #3
 800ac96:	d905      	bls.n	800aca4 <calibrate+0x11c>
 800ac98:	4b08      	ldr	r3, [pc, #32]	; (800acbc <calibrate+0x134>)
 800ac9a:	4a0b      	ldr	r2, [pc, #44]	; (800acc8 <calibrate+0x140>)
 800ac9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac9e:	4909      	ldr	r1, [pc, #36]	; (800acc4 <calibrate+0x13c>)
 800aca0:	2004      	movs	r0, #4
 800aca2:	4798      	blx	r3
 800aca4:	f7fe f8fc 	bl	8008ea0 <acc_rss_integration_log_level>
 800aca8:	2801      	cmp	r0, #1
 800acaa:	d98d      	bls.n	800abc8 <calibrate+0x40>
 800acac:	4b03      	ldr	r3, [pc, #12]	; (800acbc <calibrate+0x134>)
 800acae:	4a07      	ldr	r2, [pc, #28]	; (800accc <calibrate+0x144>)
 800acb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb2:	4904      	ldr	r1, [pc, #16]	; (800acc4 <calibrate+0x13c>)
 800acb4:	2002      	movs	r0, #2
 800acb6:	4798      	blx	r3
 800acb8:	e786      	b.n	800abc8 <calibrate+0x40>
 800acba:	bf00      	nop
 800acbc:	20001628 	.word	0x20001628
 800acc0:	08018df8 	.word	0x08018df8
 800acc4:	08018eac 	.word	0x08018eac
 800acc8:	08018e18 	.word	0x08018e18
 800accc:	08018e34 	.word	0x08018e34

0800acd0 <set_calibration_context>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	680b      	ldr	r3, [r1, #0]
 800acd4:	2b06      	cmp	r3, #6
 800acd6:	b08c      	sub	sp, #48	; 0x30
 800acd8:	d00b      	beq.n	800acf2 <set_calibration_context+0x22>
 800acda:	4928      	ldr	r1, [pc, #160]	; (800ad7c <set_calibration_context+0xac>)
 800acdc:	4a28      	ldr	r2, [pc, #160]	; (800ad80 <set_calibration_context+0xb0>)
 800acde:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800ace0:	4928      	ldr	r1, [pc, #160]	; (800ad84 <set_calibration_context+0xb4>)
 800ace2:	2006      	movs	r0, #6
 800ace4:	9000      	str	r0, [sp, #0]
 800ace6:	2000      	movs	r0, #0
 800ace8:	47a0      	blx	r4
 800acea:	2500      	movs	r5, #0
 800acec:	4628      	mov	r0, r5
 800acee:	b00c      	add	sp, #48	; 0x30
 800acf0:	bd70      	pop	{r4, r5, r6, pc}
 800acf2:	460c      	mov	r4, r1
 800acf4:	4606      	mov	r6, r0
 800acf6:	f7fe f82d 	bl	8008d54 <acc_rss_integration_get_sensor_reference_frequency>
 800acfa:	a806      	add	r0, sp, #24
 800acfc:	a903      	add	r1, sp, #12
 800acfe:	ed8d 0a06 	vstr	s0, [sp, #24]
 800ad02:	f005 ffb9 	bl	8010c78 <acc_cpd_pll_divisors_calculate>
 800ad06:	4605      	mov	r5, r0
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d0ef      	beq.n	800acec <set_calibration_context+0x1c>
 800ad0c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800ad10:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ad14:	6073      	str	r3, [r6, #4]
 800ad16:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ad1a:	60b2      	str	r2, [r6, #8]
 800ad1c:	6033      	str	r3, [r6, #0]
 800ad1e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800ad22:	88a3      	ldrh	r3, [r4, #4]
 800ad24:	81b2      	strh	r2, [r6, #12]
 800ad26:	88e2      	ldrh	r2, [r4, #6]
 800ad28:	6133      	str	r3, [r6, #16]
 800ad2a:	8923      	ldrh	r3, [r4, #8]
 800ad2c:	6172      	str	r2, [r6, #20]
 800ad2e:	8962      	ldrh	r2, [r4, #10]
 800ad30:	61b3      	str	r3, [r6, #24]
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	61f2      	str	r2, [r6, #28]
 800ad36:	8a22      	ldrh	r2, [r4, #16]
 800ad38:	6233      	str	r3, [r6, #32]
 800ad3a:	8a63      	ldrh	r3, [r4, #18]
 800ad3c:	84f3      	strh	r3, [r6, #38]	; 0x26
 800ad3e:	84b2      	strh	r2, [r6, #36]	; 0x24
 800ad40:	89e0      	ldrh	r0, [r4, #14]
 800ad42:	aa06      	add	r2, sp, #24
 800ad44:	217c      	movs	r1, #124	; 0x7c
 800ad46:	f003 ff67 	bl	800ec18 <acc_dll_calculate_area_settings>
 800ad4a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800ad4e:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800ad52:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ad56:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ad5a:	62b0      	str	r0, [r6, #40]	; 0x28
 800ad5c:	62f1      	str	r1, [r6, #44]	; 0x2c
 800ad5e:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800ad62:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800ad66:	6332      	str	r2, [r6, #48]	; 0x30
 800ad68:	6373      	str	r3, [r6, #52]	; 0x34
 800ad6a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800ad6e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800ad72:	e9c6 010e 	strd	r0, r1, [r6, #56]	; 0x38
 800ad76:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
 800ad7a:	e7b7      	b.n	800acec <set_calibration_context+0x1c>
 800ad7c:	20001628 	.word	0x20001628
 800ad80:	08018f1c 	.word	0x08018f1c
 800ad84:	08018eac 	.word	0x08018eac

0800ad88 <get_package_range_coarse_max>:
 800ad88:	b530      	push	{r4, r5, lr}
 800ad8a:	f8b0 40cc 	ldrh.w	r4, [r0, #204]	; 0xcc
 800ad8e:	b087      	sub	sp, #28
 800ad90:	b17c      	cbz	r4, 800adb2 <get_package_range_coarse_max+0x2a>
 800ad92:	4669      	mov	r1, sp
 800ad94:	f8b0 50ce 	ldrh.w	r5, [r0, #206]	; 0xce
 800ad98:	f005 ff08 	bl	8010bac <acc_cpd_linear_sweep_get_info>
 800ad9c:	9800      	ldr	r0, [sp, #0]
 800ad9e:	f5c0 6000 	rsb	r0, r0, #2048	; 0x800
 800ada2:	1b40      	subs	r0, r0, r5
 800ada4:	237c      	movs	r3, #124	; 0x7c
 800ada6:	fbb3 f3f4 	udiv	r3, r3, r4
 800adaa:	fbb0 f0f3 	udiv	r0, r0, r3
 800adae:	b007      	add	sp, #28
 800adb0:	bd30      	pop	{r4, r5, pc}
 800adb2:	f240 1157 	movw	r1, #343	; 0x157
 800adb6:	4801      	ldr	r0, [pc, #4]	; (800adbc <get_package_range_coarse_max+0x34>)
 800adb8:	f7fd fb00 	bl	80083bc <acc_assert_fail>
 800adbc:	08018e54 	.word	0x08018e54

0800adc0 <initialize>:
 800adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	460c      	mov	r4, r1
 800adc6:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
 800adca:	2906      	cmp	r1, #6
 800adcc:	b091      	sub	sp, #68	; 0x44
 800adce:	4607      	mov	r7, r0
 800add0:	4691      	mov	r9, r2
 800add2:	4698      	mov	r8, r3
 800add4:	d00c      	beq.n	800adf0 <initialize+0x30>
 800add6:	2909      	cmp	r1, #9
 800add8:	d00a      	beq.n	800adf0 <initialize+0x30>
 800adda:	4bab      	ldr	r3, [pc, #684]	; (800b088 <initialize+0x2c8>)
 800addc:	4aab      	ldr	r2, [pc, #684]	; (800b08c <initialize+0x2cc>)
 800adde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade0:	49ab      	ldr	r1, [pc, #684]	; (800b090 <initialize+0x2d0>)
 800ade2:	2000      	movs	r0, #0
 800ade4:	4798      	blx	r3
 800ade6:	2600      	movs	r6, #0
 800ade8:	4630      	mov	r0, r6
 800adea:	b011      	add	sp, #68	; 0x44
 800adec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf0:	aa08      	add	r2, sp, #32
 800adf2:	f10d 011e 	add.w	r1, sp, #30
 800adf6:	4620      	mov	r0, r4
 800adf8:	697d      	ldr	r5, [r7, #20]
 800adfa:	f7fd fdfd 	bl	80089f8 <acc_base_configuration_cca_get>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d141      	bne.n	800ae86 <initialize+0xc6>
 800ae02:	f8a5 00ce 	strh.w	r0, [r5, #206]	; 0xce
 800ae06:	f885 00d0 	strb.w	r0, [r5, #208]	; 0xd0
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f7fd fd92 	bl	8008934 <acc_base_configuration_downsampling_factor_get>
 800ae10:	2300      	movs	r3, #0
 800ae12:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800ae16:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f7fd fb8e 	bl	800853c <acc_base_configuration_tx_disable_get>
 800ae20:	f04f 0b01 	mov.w	fp, #1
 800ae24:	f885 00c0 	strb.w	r0, [r5, #192]	; 0xc0
 800ae28:	f885 b0ad 	strb.w	fp, [r5, #173]	; 0xad
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f7ff ffab 	bl	800ad88 <get_package_range_coarse_max>
 800ae32:	4b98      	ldr	r3, [pc, #608]	; (800b094 <initialize+0x2d4>)
 800ae34:	b280      	uxth	r0, r0
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	9002      	str	r0, [sp, #8]
 800ae3a:	237c      	movs	r3, #124	; 0x7c
 800ae3c:	f107 0a04 	add.w	sl, r7, #4
 800ae40:	9201      	str	r2, [sp, #4]
 800ae42:	9300      	str	r3, [sp, #0]
 800ae44:	4652      	mov	r2, sl
 800ae46:	4643      	mov	r3, r8
 800ae48:	4649      	mov	r1, r9
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f001 fa2e 	bl	800c2ac <acc_radar_engine_common_sweep_w_dly_initialize_range>
 800ae50:	4606      	mov	r6, r0
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d0c8      	beq.n	800ade8 <initialize+0x28>
 800ae56:	4620      	mov	r0, r4
 800ae58:	f7fd fcae 	bl	80087b8 <acc_base_configuration_sweep_type_debug_get>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	f000 8109 	beq.w	800b074 <initialize+0x2b4>
 800ae62:	2300      	movs	r3, #0
 800ae64:	f8c5 b048 	str.w	fp, [r5, #72]	; 0x48
 800ae68:	64eb      	str	r3, [r5, #76]	; 0x4c
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	652b      	str	r3, [r5, #80]	; 0x50
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f7fd fc1e 	bl	80086b0 <acc_base_configuration_repetition_mode_get>
 800ae74:	2803      	cmp	r0, #3
 800ae76:	f200 80f1 	bhi.w	800b05c <initialize+0x29c>
 800ae7a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800ae7e:	00ea      	.short	0x00ea
 800ae80:	00cf00e1 	.word	0x00cf00e1
 800ae84:	000b      	.short	0x000b
 800ae86:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ae8a:	f89d 001e 	ldrb.w	r0, [sp, #30]
 800ae8e:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
 800ae92:	e7b8      	b.n	800ae06 <initialize+0x46>
 800ae94:	4620      	mov	r0, r4
 800ae96:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 800ae9a:	f7fd fc11 	bl	80086c0 <acc_base_configuration_update_rate_get>
 800ae9e:	a909      	add	r1, sp, #36	; 0x24
 800aea0:	4658      	mov	r0, fp
 800aea2:	f001 fe13 	bl	800cacc <acc_radar_engine_common_frequency_to_main_clk>
 800aea6:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e9c5 3315 	strd	r3, r3, [r5, #84]	; 0x54
 800aeb0:	e9c5 1217 	strd	r1, r2, [r5, #92]	; 0x5c
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f7fd faff 	bl	80084b8 <acc_base_configuration_power_save_mode_get>
 800aeba:	2804      	cmp	r0, #4
 800aebc:	d807      	bhi.n	800aece <initialize+0x10e>
 800aebe:	e8df f000 	tbb	[pc, r0]
 800aec2:	a9a9      	.short	0xa9a9
 800aec4:	03a4      	.short	0x03a4
 800aec6:	a9          	.byte	0xa9
 800aec7:	00          	.byte	0x00
 800aec8:	2300      	movs	r3, #0
 800aeca:	e9c5 3319 	strd	r3, r3, [r5, #100]	; 0x64
 800aece:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800aed2:	f10d 011f 	add.w	r1, sp, #31
 800aed6:	4620      	mov	r0, r4
 800aed8:	f7fd fd8e 	bl	80089f8 <acc_base_configuration_cca_get>
 800aedc:	2800      	cmp	r0, #0
 800aede:	f000 80c0 	beq.w	800b062 <initialize+0x2a2>
 800aee2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800aee6:	2201      	movs	r2, #1
 800aee8:	3b01      	subs	r3, #1
 800aeea:	e9c5 232d 	strd	r2, r3, [r5, #180]	; 0xb4
 800aeee:	4620      	mov	r0, r4
 800aef0:	f7fd fb24 	bl	800853c <acc_base_configuration_tx_disable_get>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	f040 80c4 	bne.w	800b082 <initialize+0x2c2>
 800aefa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800aefe:	f083 0301 	eor.w	r3, r3, #1
 800af02:	66eb      	str	r3, [r5, #108]	; 0x6c
 800af04:	4620      	mov	r0, r4
 800af06:	f7fd fb2b 	bl	8008560 <acc_base_configuration_decrease_tx_emission_get>
 800af0a:	f080 0001 	eor.w	r0, r0, #1
 800af0e:	2301      	movs	r3, #1
 800af10:	b2c0      	uxtb	r0, r0
 800af12:	e9c5 031c 	strd	r0, r3, [r5, #112]	; 0x70
 800af16:	4620      	mov	r0, r4
 800af18:	9305      	str	r3, [sp, #20]
 800af1a:	f7fd fb33 	bl	8008584 <acc_base_configuration_hw_accelerated_average_samples_get>
 800af1e:	3801      	subs	r0, #1
 800af20:	67a8      	str	r0, [r5, #120]	; 0x78
 800af22:	4620      	mov	r0, r4
 800af24:	f7fd fbe6 	bl	80086f4 <acc_base_configuration_gain_get>
 800af28:	67e8      	str	r0, [r5, #124]	; 0x7c
 800af2a:	4620      	mov	r0, r4
 800af2c:	f7fd fbf2 	bl	8008714 <acc_base_configuration_integrator_get>
 800af30:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
 800af34:	4620      	mov	r0, r4
 800af36:	f7fd fc11 	bl	800875c <acc_base_configuration_integrator_ramp_up_get>
 800af3a:	3801      	subs	r0, #1
 800af3c:	f8c5 0084 	str.w	r0, [r5, #132]	; 0x84
 800af40:	4620      	mov	r0, r4
 800af42:	f7fd fbf9 	bl	8008738 <acc_base_configuration_wg_duration_get>
 800af46:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
 800af4a:	4620      	mov	r0, r4
 800af4c:	f7fd fc9a 	bl	8008884 <acc_base_configuration_bba_fast_refresh_disable_get>
 800af50:	f885 008d 	strb.w	r0, [r5, #141]	; 0x8d
 800af54:	4620      	mov	r0, r4
 800af56:	f7fd fced 	bl	8008934 <acc_base_configuration_downsampling_factor_get>
 800af5a:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
 800af5e:	4620      	mov	r0, r4
 800af60:	f7fd fc6c 	bl	800883c <acc_base_configuration_bba_reset_clocksync_perturbation_get>
 800af64:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
 800af68:	4620      	mov	r0, r4
 800af6a:	f7fd fc79 	bl	8008860 <acc_base_configuration_bba_linear_resync_perturbation_get>
 800af6e:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
 800af72:	4620      	mov	r0, r4
 800af74:	f7fd fd0a 	bl	800898c <acc_base_configuration_asynchronous_measurement_get>
 800af78:	88ba      	ldrh	r2, [r7, #4]
 800af7a:	9b05      	ldr	r3, [sp, #20]
 800af7c:	f885 30ad 	strb.w	r3, [r5, #173]	; 0xad
 800af80:	f080 0001 	eor.w	r0, r0, #1
 800af84:	f885 00ac 	strb.w	r0, [r5, #172]	; 0xac
 800af88:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 800af8c:	4650      	mov	r0, sl
 800af8e:	f001 fd77 	bl	800ca80 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 800af92:	2800      	cmp	r0, #0
 800af94:	d171      	bne.n	800b07a <initialize+0x2ba>
 800af96:	8978      	ldrh	r0, [r7, #10]
 800af98:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800af9c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 800afa0:	3801      	subs	r0, #1
 800afa2:	88fb      	ldrh	r3, [r7, #6]
 800afa4:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 800afa8:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
 800afac:	f7fd fed2 	bl	8008d54 <acc_rss_integration_get_sensor_reference_frequency>
 800afb0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800afb4:	ed85 0a2c 	vstr	s0, [r5, #176]	; 0xb0
 800afb8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800afbc:	f8a9 2014 	strh.w	r2, [r9, #20]
 800afc0:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
 800afc4:	227c      	movs	r2, #124	; 0x7c
 800afc6:	fbb2 f2f1 	udiv	r2, r2, r1
 800afca:	fb03 f302 	mul.w	r3, r3, r2
 800afce:	2200      	movs	r2, #0
 800afd0:	f8a8 300a 	strh.w	r3, [r8, #10]
 800afd4:	f8a8 2018 	strh.w	r2, [r8, #24]
 800afd8:	4659      	mov	r1, fp
 800afda:	4628      	mov	r0, r5
 800afdc:	f005 fde6 	bl	8010bac <acc_cpd_linear_sweep_get_info>
 800afe0:	465a      	mov	r2, fp
 800afe2:	2301      	movs	r3, #1
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	2013      	movs	r0, #19
 800afe8:	f7ff fc4a 	bl	800a880 <acc_probes_execute_uint16>
 800afec:	f001 fdd4 	bl	800cb98 <acc_sensor_r2_get_max_header_length>
 800aff0:	f8b5 20ce 	ldrh.w	r2, [r5, #206]	; 0xce
 800aff4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800aff8:	4413      	add	r3, r2
 800affa:	4418      	add	r0, r3
 800affc:	f44f 6316 	mov.w	r3, #2400	; 0x960
 800b000:	f8a8 000e 	strh.w	r0, [r8, #14]
 800b004:	f8a8 300c 	strh.w	r3, [r8, #12]
 800b008:	e6ee      	b.n	800ade8 <initialize+0x28>
 800b00a:	2201      	movs	r2, #1
 800b00c:	2300      	movs	r3, #0
 800b00e:	e9c5 2319 	strd	r2, r3, [r5, #100]	; 0x64
 800b012:	e75c      	b.n	800aece <initialize+0x10e>
 800b014:	2301      	movs	r3, #1
 800b016:	e9c5 3319 	strd	r3, r3, [r5, #100]	; 0x64
 800b01a:	e758      	b.n	800aece <initialize+0x10e>
 800b01c:	4620      	mov	r0, r4
 800b01e:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 800b022:	f7fd fb4d 	bl	80086c0 <acc_base_configuration_update_rate_get>
 800b026:	a909      	add	r1, sp, #36	; 0x24
 800b028:	4658      	mov	r0, fp
 800b02a:	f001 fd4f 	bl	800cacc <acc_radar_engine_common_frequency_to_main_clk>
 800b02e:	2301      	movs	r3, #1
 800b030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b032:	656b      	str	r3, [r5, #84]	; 0x54
 800b034:	2100      	movs	r1, #0
 800b036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b038:	662b      	str	r3, [r5, #96]	; 0x60
 800b03a:	e9c5 1216 	strd	r1, r2, [r5, #88]	; 0x58
 800b03e:	e739      	b.n	800aeb4 <initialize+0xf4>
 800b040:	2300      	movs	r3, #0
 800b042:	2201      	movs	r2, #1
 800b044:	656b      	str	r3, [r5, #84]	; 0x54
 800b046:	e9c5 3317 	strd	r3, r3, [r5, #92]	; 0x5c
 800b04a:	65aa      	str	r2, [r5, #88]	; 0x58
 800b04c:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 800b050:	e730      	b.n	800aeb4 <initialize+0xf4>
 800b052:	2300      	movs	r3, #0
 800b054:	e9c5 3315 	strd	r3, r3, [r5, #84]	; 0x54
 800b058:	e9c5 3317 	strd	r3, r3, [r5, #92]	; 0x5c
 800b05c:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 800b060:	e728      	b.n	800aeb4 <initialize+0xf4>
 800b062:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
 800b066:	4620      	mov	r0, r4
 800b068:	f7fd fa68 	bl	800853c <acc_base_configuration_tx_disable_get>
 800b06c:	f080 0301 	eor.w	r3, r0, #1
 800b070:	b2db      	uxtb	r3, r3
 800b072:	e746      	b.n	800af02 <initialize+0x142>
 800b074:	e9c5 0b12 	strd	r0, fp, [r5, #72]	; 0x48
 800b078:	e6f7      	b.n	800ae6a <initialize+0xaa>
 800b07a:	6978      	ldr	r0, [r7, #20]
 800b07c:	f7ff fe84 	bl	800ad88 <get_package_range_coarse_max>
 800b080:	e78a      	b.n	800af98 <initialize+0x1d8>
 800b082:	2300      	movs	r3, #0
 800b084:	e73d      	b.n	800af02 <initialize+0x142>
 800b086:	bf00      	nop
 800b088:	20001628 	.word	0x20001628
 800b08c:	080187cc 	.word	0x080187cc
 800b090:	08018eac 	.word	0x08018eac
 800b094:	08018f18 	.word	0x08018f18

0800b098 <coarse_count_for_next_package.isra.3>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	6813      	ldr	r3, [r2, #0]
 800b09c:	3901      	subs	r1, #1
 800b09e:	f8b3 40c2 	ldrh.w	r4, [r3, #194]	; 0xc2
 800b0a2:	b289      	uxth	r1, r1
 800b0a4:	428c      	cmp	r4, r1
 800b0a6:	d004      	beq.n	800b0b2 <coarse_count_for_next_package.isra.3+0x1a>
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ae:	f7ff be6b 	b.w	800ad88 <get_package_range_coarse_max>
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	4614      	mov	r4, r2
 800b0b8:	f7ff fe66 	bl	800ad88 <get_package_range_coarse_max>
 800b0bc:	fbb5 f3f0 	udiv	r3, r5, r0
 800b0c0:	fb03 5010 	mls	r0, r3, r0, r5
 800b0c4:	b100      	cbz	r0, 800b0c8 <coarse_count_for_next_package.isra.3+0x30>
 800b0c6:	bd38      	pop	{r3, r4, r5, pc}
 800b0c8:	6820      	ldr	r0, [r4, #0]
 800b0ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ce:	f7ff be5b 	b.w	800ad88 <get_package_range_coarse_max>
 800b0d2:	bf00      	nop

0800b0d4 <update_program>:
 800b0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0d8:	6944      	ldr	r4, [r0, #20]
 800b0da:	460f      	mov	r7, r1
 800b0dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b0de:	8981      	ldrh	r1, [r0, #12]
 800b0e0:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	fab3 f383 	clz	r3, r3
 800b0ea:	2a00      	cmp	r2, #0
 800b0ec:	bf14      	ite	ne
 800b0ee:	4610      	movne	r0, r2
 800b0f0:	4638      	moveq	r0, r7
 800b0f2:	2901      	cmp	r1, #1
 800b0f4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800b0f8:	bf94      	ite	ls
 800b0fa:	f04f 0800 	movls.w	r8, #0
 800b0fe:	f04f 0801 	movhi.w	r8, #1
 800b102:	2901      	cmp	r1, #1
 800b104:	b084      	sub	sp, #16
 800b106:	ea83 0900 	eor.w	r9, r3, r0
 800b10a:	d934      	bls.n	800b176 <update_program+0xa2>
 800b10c:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
 800b110:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 800b114:	3601      	adds	r6, #1
 800b116:	b2b3      	uxth	r3, r6
 800b118:	fbb3 f6f1 	udiv	r6, r3, r1
 800b11c:	fb01 3616 	mls	r6, r1, r6, r3
 800b120:	b2b6      	uxth	r6, r6
 800b122:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
 800b126:	4620      	mov	r0, r4
 800b128:	f7ff fe2e 	bl	800ad88 <get_package_range_coarse_max>
 800b12c:	f105 0214 	add.w	r2, r5, #20
 800b130:	fb00 a606 	mla	r6, r0, r6, sl
 800b134:	89a9      	ldrh	r1, [r5, #12]
 800b136:	8968      	ldrh	r0, [r5, #10]
 800b138:	f7ff ffae 	bl	800b098 <coarse_count_for_next_package.isra.3>
 800b13c:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 800b140:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 800b144:	3801      	subs	r0, #1
 800b146:	f88d 8000 	strb.w	r8, [sp]
 800b14a:	f88d 8001 	strb.w	r8, [sp, #1]
 800b14e:	f88d 9002 	strb.w	r9, [sp, #2]
 800b152:	e9cd 0601 	strd	r0, r6, [sp, #4]
 800b156:	b15a      	cbz	r2, 800b170 <update_program+0x9c>
 800b158:	2700      	movs	r7, #0
 800b15a:	6828      	ldr	r0, [r5, #0]
 800b15c:	9703      	str	r7, [sp, #12]
 800b15e:	4669      	mov	r1, sp
 800b160:	f005 fcea 	bl	8010b38 <acc_cpd_linear_sweep_update_program>
 800b164:	b108      	cbz	r0, 800b16a <update_program+0x96>
 800b166:	9b03      	ldr	r3, [sp, #12]
 800b168:	66e3      	str	r3, [r4, #108]	; 0x6c
 800b16a:	b004      	add	sp, #16
 800b16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b170:	f087 0701 	eor.w	r7, r7, #1
 800b174:	e7f1      	b.n	800b15a <update_program+0x86>
 800b176:	4283      	cmp	r3, r0
 800b178:	d003      	beq.n	800b182 <update_program+0xae>
 800b17a:	f04f 30ff 	mov.w	r0, #4294967295
 800b17e:	2600      	movs	r6, #0
 800b180:	e7e1      	b.n	800b146 <update_program+0x72>
 800b182:	2001      	movs	r0, #1
 800b184:	b004      	add	sp, #16
 800b186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b18a:	bf00      	nop

0800b18c <start>:
 800b18c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b190:	6944      	ldr	r4, [r0, #20]
 800b192:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
 800b196:	f894 80ac 	ldrb.w	r8, [r4, #172]	; 0xac
 800b19a:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800b19e:	2300      	movs	r3, #0
 800b1a0:	b085      	sub	sp, #20
 800b1a2:	4605      	mov	r5, r0
 800b1a4:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 800b1a8:	460e      	mov	r6, r1
 800b1aa:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 800b1ae:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 800b1b2:	b117      	cbz	r7, 800b1ba <start+0x2e>
 800b1b4:	f1b8 0f00 	cmp.w	r8, #0
 800b1b8:	d122      	bne.n	800b200 <start+0x74>
 800b1ba:	f105 0214 	add.w	r2, r5, #20
 800b1be:	89a9      	ldrh	r1, [r5, #12]
 800b1c0:	8968      	ldrh	r0, [r5, #10]
 800b1c2:	f7ff ff69 	bl	800b098 <coarse_count_for_next_package.isra.3>
 800b1c6:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 800b1ca:	f7fd fe69 	bl	8008ea0 <acc_rss_integration_log_level>
 800b1ce:	2803      	cmp	r0, #3
 800b1d0:	d905      	bls.n	800b1de <start+0x52>
 800b1d2:	4b29      	ldr	r3, [pc, #164]	; (800b278 <start+0xec>)
 800b1d4:	4a29      	ldr	r2, [pc, #164]	; (800b27c <start+0xf0>)
 800b1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d8:	4929      	ldr	r1, [pc, #164]	; (800b280 <start+0xf4>)
 800b1da:	2004      	movs	r0, #4
 800b1dc:	4798      	blx	r3
 800b1de:	e9d6 1200 	ldrd	r1, r2, [r6]
 800b1e2:	4623      	mov	r3, r4
 800b1e4:	6828      	ldr	r0, [r5, #0]
 800b1e6:	f005 f817 	bl	8010218 <acc_cpd_linear_sweep_load_program>
 800b1ea:	4606      	mov	r6, r0
 800b1ec:	b950      	cbnz	r0, 800b204 <start+0x78>
 800b1ee:	4b22      	ldr	r3, [pc, #136]	; (800b278 <start+0xec>)
 800b1f0:	4a24      	ldr	r2, [pc, #144]	; (800b284 <start+0xf8>)
 800b1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f4:	4922      	ldr	r1, [pc, #136]	; (800b280 <start+0xf4>)
 800b1f6:	4798      	blx	r3
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	b005      	add	sp, #20
 800b1fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b200:	66e3      	str	r3, [r4, #108]	; 0x6c
 800b202:	e7da      	b.n	800b1ba <start+0x2e>
 800b204:	6828      	ldr	r0, [r5, #0]
 800b206:	f005 fc93 	bl	8010b30 <acc_cpd_linear_sweep_run_program>
 800b20a:	4606      	mov	r6, r0
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d031      	beq.n	800b274 <start+0xe8>
 800b210:	f1b8 0f00 	cmp.w	r8, #0
 800b214:	d00f      	beq.n	800b236 <start+0xaa>
 800b216:	6929      	ldr	r1, [r5, #16]
 800b218:	6828      	ldr	r0, [r5, #0]
 800b21a:	f002 fbd3 	bl	800d9c4 <acc_sensor_protocol_r2_wait_for_sync_start>
 800b21e:	b348      	cbz	r0, 800b274 <start+0xe8>
 800b220:	f7fd fe3e 	bl	8008ea0 <acc_rss_integration_log_level>
 800b224:	2801      	cmp	r0, #1
 800b226:	d905      	bls.n	800b234 <start+0xa8>
 800b228:	4b13      	ldr	r3, [pc, #76]	; (800b278 <start+0xec>)
 800b22a:	4a17      	ldr	r2, [pc, #92]	; (800b288 <start+0xfc>)
 800b22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b22e:	4914      	ldr	r1, [pc, #80]	; (800b280 <start+0xf4>)
 800b230:	2002      	movs	r0, #2
 800b232:	4798      	blx	r3
 800b234:	b957      	cbnz	r7, 800b24c <start+0xc0>
 800b236:	f7fd fe33 	bl	8008ea0 <acc_rss_integration_log_level>
 800b23a:	2803      	cmp	r0, #3
 800b23c:	d9dc      	bls.n	800b1f8 <start+0x6c>
 800b23e:	4b0e      	ldr	r3, [pc, #56]	; (800b278 <start+0xec>)
 800b240:	4a12      	ldr	r2, [pc, #72]	; (800b28c <start+0x100>)
 800b242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b244:	490e      	ldr	r1, [pc, #56]	; (800b280 <start+0xf4>)
 800b246:	2004      	movs	r0, #4
 800b248:	4798      	blx	r3
 800b24a:	e7d5      	b.n	800b1f8 <start+0x6c>
 800b24c:	2300      	movs	r3, #0
 800b24e:	2201      	movs	r2, #1
 800b250:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
 800b254:	6828      	ldr	r0, [r5, #0]
 800b256:	f8cd 900c 	str.w	r9, [sp, #12]
 800b25a:	4669      	mov	r1, sp
 800b25c:	f88d 3000 	strb.w	r3, [sp]
 800b260:	f88d 3001 	strb.w	r3, [sp, #1]
 800b264:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800b268:	f88d 2002 	strb.w	r2, [sp, #2]
 800b26c:	f005 fc64 	bl	8010b38 <acc_cpd_linear_sweep_update_program>
 800b270:	2800      	cmp	r0, #0
 800b272:	d1e0      	bne.n	800b236 <start+0xaa>
 800b274:	2600      	movs	r6, #0
 800b276:	e7bf      	b.n	800b1f8 <start+0x6c>
 800b278:	20001628 	.word	0x20001628
 800b27c:	08018f5c 	.word	0x08018f5c
 800b280:	08018eac 	.word	0x08018eac
 800b284:	08018f84 	.word	0x08018f84
 800b288:	08018fa0 	.word	0x08018fa0
 800b28c:	08018fc4 	.word	0x08018fc4

0800b290 <acc_radar_engine_linear_create>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4a11      	ldr	r2, [pc, #68]	; (800b2d8 <acc_radar_engine_linear_create+0x48>)
 800b294:	4604      	mov	r4, r0
 800b296:	460d      	mov	r5, r1
 800b298:	f240 132b 	movw	r3, #299	; 0x12b
 800b29c:	21d4      	movs	r1, #212	; 0xd4
 800b29e:	2001      	movs	r0, #1
 800b2a0:	f7fd fdce 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 800b2a4:	6160      	str	r0, [r4, #20]
 800b2a6:	b1a8      	cbz	r0, 800b2d4 <acc_radar_engine_linear_create+0x44>
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	f7fd f8b5 	bl	8008418 <acc_base_configuration_sensor_get>
 800b2ae:	6020      	str	r0, [r4, #0]
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	f7fd fb6b 	bl	800898c <acc_base_configuration_asynchronous_measurement_get>
 800b2b6:	73a0      	strb	r0, [r4, #14]
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	f7fd f8fd 	bl	80084b8 <acc_base_configuration_power_save_mode_get>
 800b2be:	fab0 f080 	clz	r0, r0
 800b2c2:	0940      	lsrs	r0, r0, #5
 800b2c4:	73e0      	strb	r0, [r4, #15]
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f001 fbe0 	bl	800ca8c <acc_radar_engine_common_get_timeout_ms>
 800b2cc:	4b03      	ldr	r3, [pc, #12]	; (800b2dc <acc_radar_engine_linear_create+0x4c>)
 800b2ce:	6120      	str	r0, [r4, #16]
 800b2d0:	61a3      	str	r3, [r4, #24]
 800b2d2:	2001      	movs	r0, #1
 800b2d4:	bd38      	pop	{r3, r4, r5, pc}
 800b2d6:	bf00      	nop
 800b2d8:	08018e54 	.word	0x08018e54
 800b2dc:	08018ee0 	.word	0x08018ee0

0800b2e0 <measure_noise>:
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	4770      	bx	lr

0800b2e4 <destroy>:
 800b2e4:	6943      	ldr	r3, [r0, #20]
 800b2e6:	b13b      	cbz	r3, 800b2f8 <destroy+0x14>
 800b2e8:	b510      	push	{r4, lr}
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7fd fdc5 	bl	8008e7c <acc_rss_integration_mem_free>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	6163      	str	r3, [r4, #20]
 800b2f6:	bd10      	pop	{r4, pc}
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop

0800b2fc <update_program>:
 800b2fc:	b510      	push	{r4, lr}
 800b2fe:	6944      	ldr	r4, [r0, #20]
 800b300:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 800b304:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b306:	b082      	sub	sp, #8
 800b308:	b932      	cbnz	r2, 800b318 <update_program+0x1c>
 800b30a:	b1a9      	cbz	r1, 800b338 <update_program+0x3c>
 800b30c:	3300      	adds	r3, #0
 800b30e:	bf18      	it	ne
 800b310:	2301      	movne	r3, #1
 800b312:	f88d 3000 	strb.w	r3, [sp]
 800b316:	e005      	b.n	800b324 <update_program+0x28>
 800b318:	3300      	adds	r3, #0
 800b31a:	bf18      	it	ne
 800b31c:	2301      	movne	r3, #1
 800b31e:	f88d 3000 	strb.w	r3, [sp]
 800b322:	2200      	movs	r2, #0
 800b324:	6800      	ldr	r0, [r0, #0]
 800b326:	9201      	str	r2, [sp, #4]
 800b328:	4669      	mov	r1, sp
 800b32a:	f006 f9fd 	bl	8011728 <acc_cpd_sparse_sweep_update_program>
 800b32e:	b108      	cbz	r0, 800b334 <update_program+0x38>
 800b330:	9b01      	ldr	r3, [sp, #4]
 800b332:	6423      	str	r3, [r4, #64]	; 0x40
 800b334:	b002      	add	sp, #8
 800b336:	bd10      	pop	{r4, pc}
 800b338:	fab3 f383 	clz	r3, r3
 800b33c:	095b      	lsrs	r3, r3, #5
 800b33e:	f88d 3000 	strb.w	r3, [sp]
 800b342:	2201      	movs	r2, #1
 800b344:	e7ee      	b.n	800b324 <update_program+0x28>
 800b346:	bf00      	nop

0800b348 <process_data>:
 800b348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b34c:	6944      	ldr	r4, [r0, #20]
 800b34e:	f8b4 60b8 	ldrh.w	r6, [r4, #184]	; 0xb8
 800b352:	b916      	cbnz	r6, 800b35a <process_data+0x12>
 800b354:	2001      	movs	r0, #1
 800b356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b35a:	461d      	mov	r5, r3
 800b35c:	f8b4 80b4 	ldrh.w	r8, [r4, #180]	; 0xb4
 800b360:	680b      	ldr	r3, [r1, #0]
 800b362:	6801      	ldr	r1, [r0, #0]
 800b364:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 800b368:	2001      	movs	r0, #1
 800b36a:	4633      	mov	r3, r6
 800b36c:	4617      	mov	r7, r2
 800b36e:	4642      	mov	r2, r8
 800b370:	f7ff fa86 	bl	800a880 <acc_probes_execute_uint16>
 800b374:	4640      	mov	r0, r8
 800b376:	f8b4 10b8 	ldrh.w	r1, [r4, #184]	; 0xb8
 800b37a:	f002 fce9 	bl	800dd50 <acc_alg_cca_calculate>
 800b37e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b3b4 <process_data+0x6c>
 800b382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b384:	ed85 0a01 	vstr	s0, [r5, #4]
 800b388:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b390:	bfcc      	ite	gt
 800b392:	2201      	movgt	r2, #1
 800b394:	2200      	movle	r2, #0
 800b396:	702a      	strb	r2, [r5, #0]
 800b398:	b13b      	cbz	r3, 800b3aa <process_data+0x62>
 800b39a:	2300      	movs	r3, #0
 800b39c:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 800b3a0:	722b      	strb	r3, [r5, #8]
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	603a      	str	r2, [r7, #0]
 800b3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3aa:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
 800b3ae:	f083 0301 	eor.w	r3, r3, #1
 800b3b2:	e7f3      	b.n	800b39c <process_data+0x54>
 800b3b4:	42640000 	.word	0x42640000

0800b3b8 <transfer_data>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	6943      	ldr	r3, [r0, #20]
 800b3bc:	6800      	ldr	r0, [r0, #0]
 800b3be:	f8b3 40b4 	ldrh.w	r4, [r3, #180]	; 0xb4
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	f8b3 10b8 	ldrh.w	r1, [r3, #184]	; 0xb8
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	440c      	add	r4, r1
 800b3cc:	7013      	strb	r3, [r2, #0]
 800b3ce:	6829      	ldr	r1, [r5, #0]
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	f002 fb21 	bl	800da18 <acc_sensor_protocol_r2_transfer_data>
 800b3d6:	0062      	lsls	r2, r4, #1
 800b3d8:	4601      	mov	r1, r0
 800b3da:	6828      	ldr	r0, [r5, #0]
 800b3dc:	f007 fc8e 	bl	8012cfc <memmove>
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}

0800b3e4 <start>:
 800b3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3e8:	6944      	ldr	r4, [r0, #20]
 800b3ea:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 800b3ee:	f8d4 807c 	ldr.w	r8, [r4, #124]	; 0x7c
 800b3f2:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	4605      	mov	r5, r0
 800b3fa:	b117      	cbz	r7, 800b402 <start+0x1e>
 800b3fc:	f1b8 0f00 	cmp.w	r8, #0
 800b400:	d110      	bne.n	800b424 <start+0x40>
 800b402:	4623      	mov	r3, r4
 800b404:	e9d1 1200 	ldrd	r1, r2, [r1]
 800b408:	6828      	ldr	r0, [r5, #0]
 800b40a:	f005 fdbd 	bl	8010f88 <acc_cpd_sparse_sweep_load_program>
 800b40e:	4606      	mov	r6, r0
 800b410:	b958      	cbnz	r0, 800b42a <start+0x46>
 800b412:	4b1a      	ldr	r3, [pc, #104]	; (800b47c <start+0x98>)
 800b414:	4a1a      	ldr	r2, [pc, #104]	; (800b480 <start+0x9c>)
 800b416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b418:	491a      	ldr	r1, [pc, #104]	; (800b484 <start+0xa0>)
 800b41a:	4798      	blx	r3
 800b41c:	4630      	mov	r0, r6
 800b41e:	b003      	add	sp, #12
 800b420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b424:	2300      	movs	r3, #0
 800b426:	6423      	str	r3, [r4, #64]	; 0x40
 800b428:	e7eb      	b.n	800b402 <start+0x1e>
 800b42a:	6828      	ldr	r0, [r5, #0]
 800b42c:	f006 f978 	bl	8011720 <acc_cpd_sparse_sweep_run_program>
 800b430:	4606      	mov	r6, r0
 800b432:	b300      	cbz	r0, 800b476 <start+0x92>
 800b434:	f1b8 0f00 	cmp.w	r8, #0
 800b438:	d0f0      	beq.n	800b41c <start+0x38>
 800b43a:	6929      	ldr	r1, [r5, #16]
 800b43c:	6828      	ldr	r0, [r5, #0]
 800b43e:	f002 fac1 	bl	800d9c4 <acc_sensor_protocol_r2_wait_for_sync_start>
 800b442:	b1c0      	cbz	r0, 800b476 <start+0x92>
 800b444:	f7fd fd2c 	bl	8008ea0 <acc_rss_integration_log_level>
 800b448:	2801      	cmp	r0, #1
 800b44a:	d905      	bls.n	800b458 <start+0x74>
 800b44c:	4b0b      	ldr	r3, [pc, #44]	; (800b47c <start+0x98>)
 800b44e:	4a0e      	ldr	r2, [pc, #56]	; (800b488 <start+0xa4>)
 800b450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b452:	490c      	ldr	r1, [pc, #48]	; (800b484 <start+0xa0>)
 800b454:	2002      	movs	r0, #2
 800b456:	4798      	blx	r3
 800b458:	2f00      	cmp	r7, #0
 800b45a:	d0df      	beq.n	800b41c <start+0x38>
 800b45c:	2301      	movs	r3, #1
 800b45e:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
 800b462:	6828      	ldr	r0, [r5, #0]
 800b464:	f8cd 9004 	str.w	r9, [sp, #4]
 800b468:	4669      	mov	r1, sp
 800b46a:	f88d 3000 	strb.w	r3, [sp]
 800b46e:	f006 f95b 	bl	8011728 <acc_cpd_sparse_sweep_update_program>
 800b472:	4606      	mov	r6, r0
 800b474:	e7d2      	b.n	800b41c <start+0x38>
 800b476:	2600      	movs	r6, #0
 800b478:	e7d0      	b.n	800b41c <start+0x38>
 800b47a:	bf00      	nop
 800b47c:	20001628 	.word	0x20001628
 800b480:	08019228 	.word	0x08019228
 800b484:	08019248 	.word	0x08019248
 800b488:	08018fa0 	.word	0x08018fa0

0800b48c <calibrate>:
 800b48c:	b570      	push	{r4, r5, r6, lr}
 800b48e:	b08a      	sub	sp, #40	; 0x28
 800b490:	460c      	mov	r4, r1
 800b492:	6806      	ldr	r6, [r0, #0]
 800b494:	4615      	mov	r5, r2
 800b496:	f7fd fc5d 	bl	8008d54 <acc_rss_integration_get_sensor_reference_frequency>
 800b49a:	a805      	add	r0, sp, #20
 800b49c:	a902      	add	r1, sp, #8
 800b49e:	ed8d 0a05 	vstr	s0, [sp, #20]
 800b4a2:	f005 fbe9 	bl	8010c78 <acc_cpd_pll_divisors_calculate>
 800b4a6:	b918      	cbnz	r0, 800b4b0 <calibrate+0x24>
 800b4a8:	2400      	movs	r4, #0
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	b00a      	add	sp, #40	; 0x28
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}
 800b4b0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 800b4b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b4b8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800b4bc:	9605      	str	r6, [sp, #20]
 800b4be:	9006      	str	r0, [sp, #24]
 800b4c0:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 800b4c4:	9307      	str	r3, [sp, #28]
 800b4c6:	9108      	str	r1, [sp, #32]
 800b4c8:	aa05      	add	r2, sp, #20
 800b4ca:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b4ce:	466b      	mov	r3, sp
 800b4d0:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800b4d4:	f003 fbcc 	bl	800ec70 <acc_cpd_cbank_and_vana_calibration>
 800b4d8:	4604      	mov	r4, r0
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d0e4      	beq.n	800b4a8 <calibrate+0x1c>
 800b4de:	9b00      	ldr	r3, [sp, #0]
 800b4e0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b4e4:	80ab      	strh	r3, [r5, #4]
 800b4e6:	2306      	movs	r3, #6
 800b4e8:	80ea      	strh	r2, [r5, #6]
 800b4ea:	602b      	str	r3, [r5, #0]
 800b4ec:	f7fd fcd8 	bl	8008ea0 <acc_rss_integration_log_level>
 800b4f0:	2801      	cmp	r0, #1
 800b4f2:	d9da      	bls.n	800b4aa <calibrate+0x1e>
 800b4f4:	4b04      	ldr	r3, [pc, #16]	; (800b508 <calibrate+0x7c>)
 800b4f6:	4a05      	ldr	r2, [pc, #20]	; (800b50c <calibrate+0x80>)
 800b4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4fa:	4905      	ldr	r1, [pc, #20]	; (800b510 <calibrate+0x84>)
 800b4fc:	2002      	movs	r0, #2
 800b4fe:	4798      	blx	r3
 800b500:	4620      	mov	r0, r4
 800b502:	b00a      	add	sp, #40	; 0x28
 800b504:	bd70      	pop	{r4, r5, r6, pc}
 800b506:	bf00      	nop
 800b508:	20001628 	.word	0x20001628
 800b50c:	08018e34 	.word	0x08018e34
 800b510:	08019248 	.word	0x08019248

0800b514 <set_calibration_context>:
 800b514:	b570      	push	{r4, r5, r6, lr}
 800b516:	680b      	ldr	r3, [r1, #0]
 800b518:	2b06      	cmp	r3, #6
 800b51a:	b086      	sub	sp, #24
 800b51c:	d00a      	beq.n	800b534 <set_calibration_context+0x20>
 800b51e:	4914      	ldr	r1, [pc, #80]	; (800b570 <set_calibration_context+0x5c>)
 800b520:	4a14      	ldr	r2, [pc, #80]	; (800b574 <set_calibration_context+0x60>)
 800b522:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800b524:	4914      	ldr	r1, [pc, #80]	; (800b578 <set_calibration_context+0x64>)
 800b526:	2006      	movs	r0, #6
 800b528:	9000      	str	r0, [sp, #0]
 800b52a:	2000      	movs	r0, #0
 800b52c:	47a0      	blx	r4
 800b52e:	2000      	movs	r0, #0
 800b530:	b006      	add	sp, #24
 800b532:	bd70      	pop	{r4, r5, r6, pc}
 800b534:	460c      	mov	r4, r1
 800b536:	4605      	mov	r5, r0
 800b538:	f7fd fc0c 	bl	8008d54 <acc_rss_integration_get_sensor_reference_frequency>
 800b53c:	a903      	add	r1, sp, #12
 800b53e:	a802      	add	r0, sp, #8
 800b540:	ed8d 0a02 	vstr	s0, [sp, #8]
 800b544:	f005 fb98 	bl	8010c78 <acc_cpd_pll_divisors_calculate>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d0f1      	beq.n	800b530 <set_calibration_context+0x1c>
 800b54c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800b550:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b554:	606a      	str	r2, [r5, #4]
 800b556:	60ab      	str	r3, [r5, #8]
 800b558:	88a2      	ldrh	r2, [r4, #4]
 800b55a:	88e3      	ldrh	r3, [r4, #6]
 800b55c:	f8bd 600e 	ldrh.w	r6, [sp, #14]
 800b560:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800b564:	602e      	str	r6, [r5, #0]
 800b566:	81a9      	strh	r1, [r5, #12]
 800b568:	e9c5 2304 	strd	r2, r3, [r5, #16]
 800b56c:	e7e0      	b.n	800b530 <set_calibration_context+0x1c>
 800b56e:	bf00      	nop
 800b570:	20001628 	.word	0x20001628
 800b574:	08018f1c 	.word	0x08018f1c
 800b578:	08019248 	.word	0x08019248

0800b57c <get_dt>:
 800b57c:	b508      	push	{r3, lr}
 800b57e:	ed2d 8b02 	vpush	{d8}
 800b582:	f7fd fbe7 	bl	8008d54 <acc_rss_integration_get_sensor_reference_frequency>
 800b586:	eeb0 8a40 	vmov.f32	s16, s0
 800b58a:	f005 fbf7 	bl	8010d7c <acc_cpd_pll_divisors_ref_divisor>
 800b58e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b592:	ecbd 8b02 	vpop	{d8}
 800b596:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b59a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b59e:	bd08      	pop	{r3, pc}

0800b5a0 <initialize>:
 800b5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	ed2d 8b0a 	vpush	{d8-d12}
 800b5aa:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
 800b5ae:	2906      	cmp	r1, #6
 800b5b0:	b093      	sub	sp, #76	; 0x4c
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	4690      	mov	r8, r2
 800b5b6:	461f      	mov	r7, r3
 800b5b8:	d00e      	beq.n	800b5d8 <initialize+0x38>
 800b5ba:	2909      	cmp	r1, #9
 800b5bc:	d00c      	beq.n	800b5d8 <initialize+0x38>
 800b5be:	4b92      	ldr	r3, [pc, #584]	; (800b808 <initialize+0x268>)
 800b5c0:	4a92      	ldr	r2, [pc, #584]	; (800b80c <initialize+0x26c>)
 800b5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c4:	4992      	ldr	r1, [pc, #584]	; (800b810 <initialize+0x270>)
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	4798      	blx	r3
 800b5ca:	2500      	movs	r5, #0
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	b013      	add	sp, #76	; 0x4c
 800b5d0:	ecbd 8b0a 	vpop	{d8-d12}
 800b5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f8d6 b014 	ldr.w	fp, [r6, #20]
 800b5de:	f7fd f8fd 	bl	80087dc <acc_base_configuration_use_point_range_get>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d14f      	bne.n	800b686 <initialize+0xe6>
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f7fc ff26 	bl	8008438 <acc_base_configuration_requested_start_get>
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	eeb0 8a40 	vmov.f32	s16, s0
 800b5f2:	f7fc ff3d 	bl	8008470 <acc_base_configuration_requested_length_get>
 800b5f6:	ee38 9a00 	vadd.f32	s18, s16, s0
 800b5fa:	f7ff ffbf 	bl	800b57c <get_dt>
 800b5fe:	eddf 8a85 	vldr	s17, [pc, #532]	; 800b814 <initialize+0x274>
 800b602:	ee78 7a08 	vadd.f32	s15, s16, s16
 800b606:	ee20 0a28 	vmul.f32	s0, s0, s17
 800b60a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b60e:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800b612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b616:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800b61a:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800b61e:	bf54      	ite	pl
 800b620:	eef0 7a69 	vmovpl.f32	s15, s19
 800b624:	eef0 7a48 	vmovmi.f32	s15, s16
 800b628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b62c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b630:	ee17 3a10 	vmov	r3, s14
 800b634:	fa0f fa83 	sxth.w	sl, r3
 800b638:	f7ff ffa0 	bl	800b57c <get_dt>
 800b63c:	ee39 7a09 	vadd.f32	s14, s18, s18
 800b640:	ee20 0a28 	vmul.f32	s0, s0, s17
 800b644:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800b648:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b650:	bf58      	it	pl
 800b652:	eeb0 8a69 	vmovpl.f32	s16, s19
 800b656:	ee77 7a88 	vadd.f32	s15, s15, s16
 800b65a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b65e:	ee17 3a90 	vmov	r3, s15
 800b662:	fa0f f983 	sxth.w	r9, r3
 800b666:	4620      	mov	r0, r4
 800b668:	f7fd f964 	bl	8008934 <acc_base_configuration_downsampling_factor_get>
 800b66c:	eba9 030a 	sub.w	r3, r9, sl
 800b670:	fb93 f5f0 	sdiv	r5, r3, r0
 800b674:	fb05 3510 	mls	r5, r5, r0, r3
 800b678:	2d00      	cmp	r5, #0
 800b67a:	dc11      	bgt.n	800b6a0 <initialize+0x100>
 800b67c:	45ca      	cmp	sl, r9
 800b67e:	dd1e      	ble.n	800b6be <initialize+0x11e>
 800b680:	4b61      	ldr	r3, [pc, #388]	; (800b808 <initialize+0x268>)
 800b682:	4a65      	ldr	r2, [pc, #404]	; (800b818 <initialize+0x278>)
 800b684:	e79d      	b.n	800b5c2 <initialize+0x22>
 800b686:	4620      	mov	r0, r4
 800b688:	f7fc fff8 	bl	800867c <acc_base_configuration_point_start_get>
 800b68c:	4682      	mov	sl, r0
 800b68e:	4620      	mov	r0, r4
 800b690:	f7fc fffc 	bl	800868c <acc_base_configuration_point_length_get>
 800b694:	4450      	add	r0, sl
 800b696:	fa0f f980 	sxth.w	r9, r0
 800b69a:	fa0f fa8a 	sxth.w	sl, sl
 800b69e:	e7e2      	b.n	800b666 <initialize+0xc6>
 800b6a0:	f7fd fbfe 	bl	8008ea0 <acc_rss_integration_log_level>
 800b6a4:	2801      	cmp	r0, #1
 800b6a6:	d905      	bls.n	800b6b4 <initialize+0x114>
 800b6a8:	4b57      	ldr	r3, [pc, #348]	; (800b808 <initialize+0x268>)
 800b6aa:	4a5c      	ldr	r2, [pc, #368]	; (800b81c <initialize+0x27c>)
 800b6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ae:	4958      	ldr	r1, [pc, #352]	; (800b810 <initialize+0x270>)
 800b6b0:	2002      	movs	r0, #2
 800b6b2:	4798      	blx	r3
 800b6b4:	eba9 0905 	sub.w	r9, r9, r5
 800b6b8:	fa0f f989 	sxth.w	r9, r9
 800b6bc:	e7de      	b.n	800b67c <initialize+0xdc>
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f7fd f8f2 	bl	80088a8 <acc_base_configuration_ignore_range_limits_get>
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	b9f0      	cbnz	r0, 800b706 <initialize+0x166>
 800b6c8:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 800b6cc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800b6ce:	b90a      	cbnz	r2, 800b6d4 <initialize+0x134>
 800b6d0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800b6d4:	015a      	lsls	r2, r3, #5
 800b6d6:	b219      	sxth	r1, r3
 800b6d8:	3a1a      	subs	r2, #26
 800b6da:	b212      	sxth	r2, r2
 800b6dc:	3901      	subs	r1, #1
 800b6de:	2a00      	cmp	r2, #0
 800b6e0:	ea4f 1341 	mov.w	r3, r1, lsl #5
 800b6e4:	bfb8      	it	lt
 800b6e6:	3207      	addlt	r2, #7
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	f1a3 010f 	sub.w	r1, r3, #15
 800b6ee:	f022 0207 	bic.w	r2, r2, #7
 800b6f2:	1a8a      	subs	r2, r1, r2
 800b6f4:	b212      	sxth	r2, r2
 800b6f6:	4552      	cmp	r2, sl
 800b6f8:	f300 8098 	bgt.w	800b82c <initialize+0x28c>
 800b6fc:	3b30      	subs	r3, #48	; 0x30
 800b6fe:	b21a      	sxth	r2, r3
 800b700:	454a      	cmp	r2, r9
 800b702:	f2c0 81b5 	blt.w	800ba70 <initialize+0x4d0>
 800b706:	4620      	mov	r0, r4
 800b708:	f7fd f914 	bl	8008934 <acc_base_configuration_downsampling_factor_get>
 800b70c:	eba9 030a 	sub.w	r3, r9, sl
 800b710:	4602      	mov	r2, r0
 800b712:	fb93 f3f2 	sdiv	r3, r3, r2
 800b716:	3301      	adds	r3, #1
 800b718:	b29b      	uxth	r3, r3
 800b71a:	9007      	str	r0, [sp, #28]
 800b71c:	4620      	mov	r0, r4
 800b71e:	461d      	mov	r5, r3
 800b720:	9308      	str	r3, [sp, #32]
 800b722:	f7fd f8e3 	bl	80088ec <acc_base_configuration_sparse_sweeps_per_frame_get>
 800b726:	fb15 f300 	smulbb	r3, r5, r0
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	aa0f      	add	r2, sp, #60	; 0x3c
 800b72e:	f10d 013a 	add.w	r1, sp, #58	; 0x3a
 800b732:	4620      	mov	r0, r4
 800b734:	9306      	str	r3, [sp, #24]
 800b736:	f7fd f95f 	bl	80089f8 <acc_base_configuration_cca_get>
 800b73a:	b160      	cbz	r0, 800b756 <initialize+0x1b6>
 800b73c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800b740:	4618      	mov	r0, r3
 800b742:	9a06      	ldr	r2, [sp, #24]
 800b744:	f8ab 30b8 	strh.w	r3, [fp, #184]	; 0xb8
 800b748:	4410      	add	r0, r2
 800b74a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800b74e:	dd04      	ble.n	800b75a <initialize+0x1ba>
 800b750:	4b2d      	ldr	r3, [pc, #180]	; (800b808 <initialize+0x268>)
 800b752:	4a33      	ldr	r2, [pc, #204]	; (800b820 <initialize+0x280>)
 800b754:	e735      	b.n	800b5c2 <initialize+0x22>
 800b756:	4603      	mov	r3, r0
 800b758:	e7f3      	b.n	800b742 <initialize+0x1a2>
 800b75a:	4620      	mov	r0, r4
 800b75c:	f7fc ff12 	bl	8008584 <acc_base_configuration_hw_accelerated_average_samples_get>
 800b760:	900a      	str	r0, [sp, #40]	; 0x28
 800b762:	4620      	mov	r0, r4
 800b764:	f7fd f974 	bl	8008a50 <acc_base_configuration_mur_get>
 800b768:	9009      	str	r0, [sp, #36]	; 0x24
 800b76a:	4620      	mov	r0, r4
 800b76c:	f7fd f808 	bl	8008780 <acc_base_configuration_sampling_mode_get>
 800b770:	9d08      	ldr	r5, [sp, #32]
 800b772:	e9dd 3109 	ldrd	r3, r1, [sp, #36]	; 0x24
 800b776:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d13c      	bne.n	800b7f8 <initialize+0x258>
 800b77e:	2007      	movs	r0, #7
 800b780:	f04f 0c0d 	mov.w	ip, #13
 800b784:	fb03 f305 	mul.w	r3, r3, r5
 800b788:	fb10 c101 	smlabb	r1, r0, r1, ip
 800b78c:	fb03 f301 	mul.w	r3, r3, r1
 800b790:	4413      	add	r3, r2
 800b792:	9209      	str	r2, [sp, #36]	; 0x24
 800b794:	ee08 3a10 	vmov	s16, r3
 800b798:	f7fd fadc 	bl	8008d54 <acc_rss_integration_get_sensor_reference_frequency>
 800b79c:	eef0 8a40 	vmov.f32	s17, s0
 800b7a0:	f005 faec 	bl	8010d7c <acc_cpd_pll_divisors_ref_divisor>
 800b7a4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b824 <initialize+0x284>
 800b7a8:	ee68 8a80 	vmul.f32	s17, s17, s0
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800b7b2:	f7fd f8b1 	bl	8008918 <acc_base_configuration_sparse_sweep_rate_get>
 800b7b6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7be:	f340 825c 	ble.w	800bc7a <initialize+0x6da>
 800b7c2:	eec8 6a80 	vdiv.f32	s13, s17, s0
 800b7c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7c8:	eef8 7a48 	vcvt.f32.u32	s15, s16
 800b7cc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b7d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b7d4:	ee07 2a90 	vmov	s15, r2
 800b7d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b7dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7e0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b7e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7e8:	ee17 3a90 	vmov	r3, s15
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f280 8265 	bge.w	800bcbc <initialize+0x71c>
 800b7f2:	4b05      	ldr	r3, [pc, #20]	; (800b808 <initialize+0x268>)
 800b7f4:	4a0c      	ldr	r2, [pc, #48]	; (800b828 <initialize+0x288>)
 800b7f6:	e6e4      	b.n	800b5c2 <initialize+0x22>
 800b7f8:	fb02 f201 	mul.w	r2, r2, r1
 800b7fc:	320f      	adds	r2, #15
 800b7fe:	fb03 f302 	mul.w	r3, r3, r2
 800b802:	33d4      	adds	r3, #212	; 0xd4
 800b804:	2203      	movs	r2, #3
 800b806:	e7c3      	b.n	800b790 <initialize+0x1f0>
 800b808:	20001628 	.word	0x20001628
 800b80c:	080191c4 	.word	0x080191c4
 800b810:	08019248 	.word	0x08019248
 800b814:	4d8ef3c2 	.word	0x4d8ef3c2
 800b818:	08019054 	.word	0x08019054
 800b81c:	08019020 	.word	0x08019020
 800b820:	08019104 	.word	0x08019104
 800b824:	3d000000 	.word	0x3d000000
 800b828:	08019164 	.word	0x08019164
 800b82c:	4b88      	ldr	r3, [pc, #544]	; (800ba50 <initialize+0x4b0>)
 800b82e:	9206      	str	r2, [sp, #24]
 800b830:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800b834:	ed9f ca87 	vldr	s24, [pc, #540]	; 800ba54 <initialize+0x4b4>
 800b838:	4f87      	ldr	r7, [pc, #540]	; (800ba58 <initialize+0x4b8>)
 800b83a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 800ba6c <initialize+0x4cc>
 800b83e:	eddf aa87 	vldr	s21, [pc, #540]	; 800ba5c <initialize+0x4bc>
 800b842:	eddf 9a87 	vldr	s19, [pc, #540]	; 800ba60 <initialize+0x4c0>
 800b846:	f7ff fe99 	bl	800b57c <get_dt>
 800b84a:	ee07 aa90 	vmov	s15, sl
 800b84e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800b852:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 800b856:	ee68 7a80 	vmul.f32	s15, s17, s0
 800b85a:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
 800b85e:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800b862:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800b866:	ee67 7aab 	vmul.f32	s15, s15, s23
 800b86a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b872:	bf4c      	ite	mi
 800b874:	46ba      	movmi	sl, r7
 800b876:	46ca      	movpl	sl, r9
 800b878:	f7ff fe80 	bl	800b57c <get_dt>
 800b87c:	ee28 8a80 	vmul.f32	s16, s17, s0
 800b880:	f7ff fe7c 	bl	800b57c <get_dt>
 800b884:	ee68 7a80 	vmul.f32	s15, s17, s0
 800b888:	ee28 8a0c 	vmul.f32	s16, s16, s24
 800b88c:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800b890:	ee28 8a2b 	vmul.f32	s16, s16, s23
 800b894:	ee67 7aab 	vmul.f32	s15, s15, s23
 800b898:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a0:	bf54      	ite	pl
 800b8a2:	eef0 7a4b 	vmovpl.f32	s15, s22
 800b8a6:	eef0 7a4a 	vmovmi.f32	s15, s20
 800b8aa:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b8ae:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800b8b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8b6:	ee17 6a90 	vmov	r6, s15
 800b8ba:	f7ff fe5f 	bl	800b57c <get_dt>
 800b8be:	ee28 8a80 	vmul.f32	s16, s17, s0
 800b8c2:	f7ff fe5b 	bl	800b57c <get_dt>
 800b8c6:	ee68 7a80 	vmul.f32	s15, s17, s0
 800b8ca:	ee28 8a0c 	vmul.f32	s16, s16, s24
 800b8ce:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800b8d2:	ee28 8a2b 	vmul.f32	s16, s16, s23
 800b8d6:	ee67 7aab 	vmul.f32	s15, s15, s23
 800b8da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e2:	bf54      	ite	pl
 800b8e4:	eef0 7a4b 	vmovpl.f32	s15, s22
 800b8e8:	eef0 7a4a 	vmovmi.f32	s15, s20
 800b8ec:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b8f0:	f7ff fe44 	bl	800b57c <get_dt>
 800b8f4:	ee28 9a80 	vmul.f32	s18, s17, s0
 800b8f8:	f7ff fe40 	bl	800b57c <get_dt>
 800b8fc:	ee68 7a80 	vmul.f32	s15, s17, s0
 800b900:	ee29 9a0c 	vmul.f32	s18, s18, s24
 800b904:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800b908:	ee29 9a2b 	vmul.f32	s18, s18, s23
 800b90c:	ee67 7aab 	vmul.f32	s15, s15, s23
 800b910:	ee38 8a2a 	vadd.f32	s16, s16, s21
 800b914:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b91c:	bf54      	ite	pl
 800b91e:	eef0 7a4b 	vmovpl.f32	s15, s22
 800b922:	eef0 7a4a 	vmovmi.f32	s15, s20
 800b926:	ee69 7a27 	vmul.f32	s15, s18, s15
 800b92a:	9a06      	ldr	r2, [sp, #24]
 800b92c:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800b930:	ee07 2a10 	vmov	s14, r2
 800b934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b938:	eef8 8ac7 	vcvt.f32.s32	s17, s14
 800b93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b940:	ee78 7a67 	vsub.f32	s15, s16, s15
 800b944:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800b948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b94c:	ee17 4a90 	vmov	r4, s15
 800b950:	f7ff fe14 	bl	800b57c <get_dt>
 800b954:	ee68 7a80 	vmul.f32	s15, s17, s0
 800b958:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800b95c:	ee67 7aab 	vmul.f32	s15, s15, s23
 800b960:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b968:	bf48      	it	mi
 800b96a:	46b9      	movmi	r9, r7
 800b96c:	f7ff fe06 	bl	800b57c <get_dt>
 800b970:	ee28 8a80 	vmul.f32	s16, s17, s0
 800b974:	f7ff fe02 	bl	800b57c <get_dt>
 800b978:	ee68 7a80 	vmul.f32	s15, s17, s0
 800b97c:	ee28 8a0c 	vmul.f32	s16, s16, s24
 800b980:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800b984:	ee28 8a2b 	vmul.f32	s16, s16, s23
 800b988:	ee67 7aab 	vmul.f32	s15, s15, s23
 800b98c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b994:	bf54      	ite	pl
 800b996:	eef0 7a4b 	vmovpl.f32	s15, s22
 800b99a:	eef0 7a4a 	vmovmi.f32	s15, s20
 800b99e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b9a2:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800b9a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9aa:	ee17 7a90 	vmov	r7, s15
 800b9ae:	f7ff fde5 	bl	800b57c <get_dt>
 800b9b2:	ee28 8a80 	vmul.f32	s16, s17, s0
 800b9b6:	f7ff fde1 	bl	800b57c <get_dt>
 800b9ba:	ee68 7a80 	vmul.f32	s15, s17, s0
 800b9be:	ee28 8a0c 	vmul.f32	s16, s16, s24
 800b9c2:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800b9c6:	ee28 8a2b 	vmul.f32	s16, s16, s23
 800b9ca:	ee67 7aab 	vmul.f32	s15, s15, s23
 800b9ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d6:	bf54      	ite	pl
 800b9d8:	eef0 7a4b 	vmovpl.f32	s15, s22
 800b9dc:	eef0 7a4a 	vmovmi.f32	s15, s20
 800b9e0:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b9e4:	f7ff fdca 	bl	800b57c <get_dt>
 800b9e8:	ee28 9a80 	vmul.f32	s18, s17, s0
 800b9ec:	f7ff fdc6 	bl	800b57c <get_dt>
 800b9f0:	ee68 7a80 	vmul.f32	s15, s17, s0
 800b9f4:	ee29 9a0c 	vmul.f32	s18, s18, s24
 800b9f8:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800b9fc:	ee29 9a2b 	vmul.f32	s18, s18, s23
 800ba00:	ee67 7aab 	vmul.f32	s15, s15, s23
 800ba04:	ee38 8a2a 	vadd.f32	s16, s16, s21
 800ba08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba10:	bf54      	ite	pl
 800ba12:	eef0 7a4b 	vmovpl.f32	s15, s22
 800ba16:	eef0 7a4a 	vmovmi.f32	s15, s20
 800ba1a:	ee69 7a27 	vmul.f32	s15, s18, s15
 800ba1e:	4a11      	ldr	r2, [pc, #68]	; (800ba64 <initialize+0x4c4>)
 800ba20:	9401      	str	r4, [sp, #4]
 800ba22:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800ba26:	9703      	str	r7, [sp, #12]
 800ba28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba2c:	9600      	str	r6, [sp, #0]
 800ba2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ba32:	4653      	mov	r3, sl
 800ba34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba38:	490b      	ldr	r1, [pc, #44]	; (800ba68 <initialize+0x4c8>)
 800ba3a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800ba3e:	2000      	movs	r0, #0
 800ba40:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800ba44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba48:	edcd 7a04 	vstr	s15, [sp, #16]
 800ba4c:	47c0      	blx	r8
 800ba4e:	e5bd      	b.n	800b5cc <initialize+0x2c>
 800ba50:	20001628 	.word	0x20001628
 800ba54:	4d8ef3c2 	.word	0x4d8ef3c2
 800ba58:	0801901c 	.word	0x0801901c
 800ba5c:	350637bd 	.word	0x350637bd
 800ba60:	49742400 	.word	0x49742400
 800ba64:	08019084 	.word	0x08019084
 800ba68:	08019248 	.word	0x08019248
 800ba6c:	0801d5bc 	.word	0x0801d5bc
 800ba70:	4b96      	ldr	r3, [pc, #600]	; (800bccc <initialize+0x72c>)
 800ba72:	9206      	str	r2, [sp, #24]
 800ba74:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800ba78:	ed9f ca9c 	vldr	s24, [pc, #624]	; 800bcec <initialize+0x74c>
 800ba7c:	4f94      	ldr	r7, [pc, #592]	; (800bcd0 <initialize+0x730>)
 800ba7e:	f8df a268 	ldr.w	sl, [pc, #616]	; 800bce8 <initialize+0x748>
 800ba82:	eddf aa94 	vldr	s21, [pc, #592]	; 800bcd4 <initialize+0x734>
 800ba86:	eddf 9a94 	vldr	s19, [pc, #592]	; 800bcd8 <initialize+0x738>
 800ba8a:	f7ff fd77 	bl	800b57c <get_dt>
 800ba8e:	ee07 9a90 	vmov	s15, r9
 800ba92:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800ba96:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 800ba9a:	ee68 7a80 	vmul.f32	s15, s17, s0
 800ba9e:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
 800baa2:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800baa6:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800baaa:	ee67 7aab 	vmul.f32	s15, s15, s23
 800baae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab6:	bf4c      	ite	mi
 800bab8:	46bb      	movmi	fp, r7
 800baba:	46d3      	movpl	fp, sl
 800babc:	f7ff fd5e 	bl	800b57c <get_dt>
 800bac0:	ee28 8a80 	vmul.f32	s16, s17, s0
 800bac4:	f7ff fd5a 	bl	800b57c <get_dt>
 800bac8:	ee68 7a80 	vmul.f32	s15, s17, s0
 800bacc:	ee28 8a0c 	vmul.f32	s16, s16, s24
 800bad0:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800bad4:	ee28 8a2b 	vmul.f32	s16, s16, s23
 800bad8:	ee67 7aab 	vmul.f32	s15, s15, s23
 800badc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bae4:	bf54      	ite	pl
 800bae6:	eef0 7a4b 	vmovpl.f32	s15, s22
 800baea:	eef0 7a4a 	vmovmi.f32	s15, s20
 800baee:	ee68 7a27 	vmul.f32	s15, s16, s15
 800baf2:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800baf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bafa:	ee17 6a90 	vmov	r6, s15
 800bafe:	f7ff fd3d 	bl	800b57c <get_dt>
 800bb02:	ee28 8a80 	vmul.f32	s16, s17, s0
 800bb06:	f7ff fd39 	bl	800b57c <get_dt>
 800bb0a:	ee68 7a80 	vmul.f32	s15, s17, s0
 800bb0e:	ee28 8a0c 	vmul.f32	s16, s16, s24
 800bb12:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800bb16:	ee28 8a2b 	vmul.f32	s16, s16, s23
 800bb1a:	ee67 7aab 	vmul.f32	s15, s15, s23
 800bb1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb26:	bf54      	ite	pl
 800bb28:	eef0 7a4b 	vmovpl.f32	s15, s22
 800bb2c:	eef0 7a4a 	vmovmi.f32	s15, s20
 800bb30:	ee28 8a27 	vmul.f32	s16, s16, s15
 800bb34:	f7ff fd22 	bl	800b57c <get_dt>
 800bb38:	ee28 9a80 	vmul.f32	s18, s17, s0
 800bb3c:	f7ff fd1e 	bl	800b57c <get_dt>
 800bb40:	ee68 7a80 	vmul.f32	s15, s17, s0
 800bb44:	ee29 9a0c 	vmul.f32	s18, s18, s24
 800bb48:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800bb4c:	ee29 9a2b 	vmul.f32	s18, s18, s23
 800bb50:	ee67 7aab 	vmul.f32	s15, s15, s23
 800bb54:	ee38 8a2a 	vadd.f32	s16, s16, s21
 800bb58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb60:	bf54      	ite	pl
 800bb62:	eef0 7a4b 	vmovpl.f32	s15, s22
 800bb66:	eef0 7a4a 	vmovmi.f32	s15, s20
 800bb6a:	ee69 7a27 	vmul.f32	s15, s18, s15
 800bb6e:	9a06      	ldr	r2, [sp, #24]
 800bb70:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800bb74:	ee07 2a10 	vmov	s14, r2
 800bb78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb7c:	eef8 8ac7 	vcvt.f32.s32	s17, s14
 800bb80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb84:	ee78 7a67 	vsub.f32	s15, s16, s15
 800bb88:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800bb8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb90:	ee17 4a90 	vmov	r4, s15
 800bb94:	f7ff fcf2 	bl	800b57c <get_dt>
 800bb98:	ee68 7a80 	vmul.f32	s15, s17, s0
 800bb9c:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800bba0:	ee67 7aab 	vmul.f32	s15, s15, s23
 800bba4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbac:	bf48      	it	mi
 800bbae:	46ba      	movmi	sl, r7
 800bbb0:	f7ff fce4 	bl	800b57c <get_dt>
 800bbb4:	ee28 8a80 	vmul.f32	s16, s17, s0
 800bbb8:	f7ff fce0 	bl	800b57c <get_dt>
 800bbbc:	ee68 7a80 	vmul.f32	s15, s17, s0
 800bbc0:	ee28 8a0c 	vmul.f32	s16, s16, s24
 800bbc4:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800bbc8:	ee28 8a2b 	vmul.f32	s16, s16, s23
 800bbcc:	ee67 7aab 	vmul.f32	s15, s15, s23
 800bbd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd8:	bf54      	ite	pl
 800bbda:	eef0 7a4b 	vmovpl.f32	s15, s22
 800bbde:	eef0 7a4a 	vmovmi.f32	s15, s20
 800bbe2:	ee68 7a27 	vmul.f32	s15, s16, s15
 800bbe6:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800bbea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbee:	ee17 7a90 	vmov	r7, s15
 800bbf2:	f7ff fcc3 	bl	800b57c <get_dt>
 800bbf6:	ee28 8a80 	vmul.f32	s16, s17, s0
 800bbfa:	f7ff fcbf 	bl	800b57c <get_dt>
 800bbfe:	ee68 7a80 	vmul.f32	s15, s17, s0
 800bc02:	ee28 8a0c 	vmul.f32	s16, s16, s24
 800bc06:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800bc0a:	ee28 8a2b 	vmul.f32	s16, s16, s23
 800bc0e:	ee67 7aab 	vmul.f32	s15, s15, s23
 800bc12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1a:	bf54      	ite	pl
 800bc1c:	eef0 7a4b 	vmovpl.f32	s15, s22
 800bc20:	eef0 7a4a 	vmovmi.f32	s15, s20
 800bc24:	ee28 8a27 	vmul.f32	s16, s16, s15
 800bc28:	f7ff fca8 	bl	800b57c <get_dt>
 800bc2c:	ee28 9a80 	vmul.f32	s18, s17, s0
 800bc30:	f7ff fca4 	bl	800b57c <get_dt>
 800bc34:	ee68 7a80 	vmul.f32	s15, s17, s0
 800bc38:	ee29 9a0c 	vmul.f32	s18, s18, s24
 800bc3c:	ee67 7a8c 	vmul.f32	s15, s15, s24
 800bc40:	ee29 9a2b 	vmul.f32	s18, s18, s23
 800bc44:	ee67 7aab 	vmul.f32	s15, s15, s23
 800bc48:	ee38 8a2a 	vadd.f32	s16, s16, s21
 800bc4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc54:	bf54      	ite	pl
 800bc56:	eef0 7a4b 	vmovpl.f32	s15, s22
 800bc5a:	eef0 7a4a 	vmovmi.f32	s15, s20
 800bc5e:	ee69 7a27 	vmul.f32	s15, s18, s15
 800bc62:	9401      	str	r4, [sp, #4]
 800bc64:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800bc68:	9703      	str	r7, [sp, #12]
 800bc6a:	9600      	str	r6, [sp, #0]
 800bc6c:	f8cd a008 	str.w	sl, [sp, #8]
 800bc70:	465b      	mov	r3, fp
 800bc72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc76:	4a19      	ldr	r2, [pc, #100]	; (800bcdc <initialize+0x73c>)
 800bc78:	e6dc      	b.n	800ba34 <initialize+0x494>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f8ab 30b6 	strh.w	r3, [fp, #182]	; 0xb6
 800bc80:	4620      	mov	r0, r4
 800bc82:	f7fc fc5b 	bl	800853c <acc_base_configuration_tx_disable_get>
 800bc86:	f88b 00ba 	strb.w	r0, [fp, #186]	; 0xba
 800bc8a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800bc8e:	9a06      	ldr	r2, [sp, #24]
 800bc90:	f8ab 20b4 	strh.w	r2, [fp, #180]	; 0xb4
 800bc94:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800bc96:	b90b      	cbnz	r3, 800bc9c <initialize+0x6fc>
 800bc98:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 800bc9c:	9b07      	ldr	r3, [sp, #28]
 800bc9e:	9908      	ldr	r1, [sp, #32]
 800bca0:	80b0      	strh	r0, [r6, #4]
 800bca2:	1e5a      	subs	r2, r3, #1
 800bca4:	b292      	uxth	r2, r2
 800bca6:	2301      	movs	r3, #1
 800bca8:	2a07      	cmp	r2, #7
 800bcaa:	81b3      	strh	r3, [r6, #12]
 800bcac:	f8a6 a008 	strh.w	sl, [r6, #8]
 800bcb0:	8171      	strh	r1, [r6, #10]
 800bcb2:	4653      	mov	r3, sl
 800bcb4:	d91c      	bls.n	800bcf0 <initialize+0x750>
 800bcb6:	4b05      	ldr	r3, [pc, #20]	; (800bccc <initialize+0x72c>)
 800bcb8:	4a09      	ldr	r2, [pc, #36]	; (800bce0 <initialize+0x740>)
 800bcba:	e482      	b.n	800b5c2 <initialize+0x22>
 800bcbc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800bcc0:	428b      	cmp	r3, r1
 800bcc2:	f340 81f9 	ble.w	800c0b8 <initialize+0xb18>
 800bcc6:	4b01      	ldr	r3, [pc, #4]	; (800bccc <initialize+0x72c>)
 800bcc8:	4a06      	ldr	r2, [pc, #24]	; (800bce4 <initialize+0x744>)
 800bcca:	e47a      	b.n	800b5c2 <initialize+0x22>
 800bccc:	20001628 	.word	0x20001628
 800bcd0:	0801901c 	.word	0x0801901c
 800bcd4:	350637bd 	.word	0x350637bd
 800bcd8:	49742400 	.word	0x49742400
 800bcdc:	080190c4 	.word	0x080190c4
 800bce0:	080191a8 	.word	0x080191a8
 800bce4:	08019188 	.word	0x08019188
 800bce8:	0801d5bc 	.word	0x0801d5bc
 800bcec:	4d8ef3c2 	.word	0x4d8ef3c2
 800bcf0:	9907      	ldr	r1, [sp, #28]
 800bcf2:	2208      	movs	r2, #8
 800bcf4:	fb92 f2f1 	sdiv	r2, r2, r1
 800bcf8:	fb01 f202 	mul.w	r2, r1, r2
 800bcfc:	2a08      	cmp	r2, #8
 800bcfe:	d1da      	bne.n	800bcb6 <initialize+0x716>
 800bd00:	b200      	sxth	r0, r0
 800bd02:	3801      	subs	r0, #1
 800bd04:	0140      	lsls	r0, r0, #5
 800bd06:	b282      	uxth	r2, r0
 800bd08:	f1a2 010f 	sub.w	r1, r2, #15
 800bd0c:	b289      	uxth	r1, r1
 800bd0e:	1a5b      	subs	r3, r3, r1
 800bd10:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd12:	b21a      	sxth	r2, r3
 800bd14:	eba9 0301 	sub.w	r3, r9, r1
 800bd18:	4250      	negs	r0, r2
 800bd1a:	b21b      	sxth	r3, r3
 800bd1c:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800bd20:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 800bd24:	f000 0007 	and.w	r0, r0, #7
 800bd28:	910c      	str	r1, [sp, #48]	; 0x30
 800bd2a:	f1c1 0101 	rsb	r1, r1, #1
 800bd2e:	f002 0207 	and.w	r2, r2, #7
 800bd32:	4461      	add	r1, ip
 800bd34:	bf58      	it	pl
 800bd36:	4242      	negpl	r2, r0
 800bd38:	9807      	ldr	r0, [sp, #28]
 800bd3a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd3c:	fa1f fe81 	uxth.w	lr, r1
 800bd40:	9b07      	ldr	r3, [sp, #28]
 800bd42:	2a00      	cmp	r2, #0
 800bd44:	f04f 0108 	mov.w	r1, #8
 800bd48:	fb91 f1f3 	sdiv	r1, r1, r3
 800bd4c:	f101 31ff 	add.w	r1, r1, #4294967295
 800bd50:	bfb8      	it	lt
 800bd52:	3208      	addlt	r2, #8
 800bd54:	fb11 f300 	smulbb	r3, r1, r0
 800bd58:	910d      	str	r1, [sp, #52]	; 0x34
 800bd5a:	4601      	mov	r1, r0
 800bd5c:	fb92 fcf0 	sdiv	ip, r2, r0
 800bd60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd62:	fb01 251c 	mls	r5, r1, ip, r2
 800bd66:	442b      	add	r3, r5
 800bd68:	4240      	negs	r0, r0
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd6e:	f000 0007 	and.w	r0, r0, #7
 800bd72:	f003 0307 	and.w	r3, r3, #7
 800bd76:	bf58      	it	pl
 800bd78:	4243      	negpl	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	b289      	uxth	r1, r1
 800bd7e:	bfb8      	it	lt
 800bd80:	3308      	addlt	r3, #8
 800bd82:	f1be 0f01 	cmp.w	lr, #1
 800bd86:	fa0f fc81 	sxth.w	ip, r1
 800bd8a:	b228      	sxth	r0, r5
 800bd8c:	f000 819c 	beq.w	800c0c8 <initialize+0xb28>
 800bd90:	ebbc 0c03 	subs.w	ip, ip, r3
 800bd94:	bf18      	it	ne
 800bd96:	f04f 0c01 	movne.w	ip, #1
 800bd9a:	4282      	cmp	r2, r0
 800bd9c:	bf14      	ite	ne
 800bd9e:	2001      	movne	r0, #1
 800bda0:	2000      	moveq	r0, #0
 800bda2:	ebae 0000 	sub.w	r0, lr, r0
 800bda6:	eba0 000c 	sub.w	r0, r0, ip
 800bdaa:	fa0f fe80 	sxth.w	lr, r0
 800bdae:	f040 8192 	bne.w	800c0d6 <initialize+0xb36>
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 800bdb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdba:	f1a1 0032 	sub.w	r0, r1, #50	; 0x32
 800bdbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bdc0:	b200      	sxth	r0, r0
 800bdc2:	00c9      	lsls	r1, r1, #3
 800bdc4:	4402      	add	r2, r0
 800bdc6:	910b      	str	r1, [sp, #44]	; 0x2c
 800bdc8:	920c      	str	r2, [sp, #48]	; 0x30
 800bdca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdcc:	6971      	ldr	r1, [r6, #20]
 800bdce:	f1be 0f00 	cmp.w	lr, #0
 800bdd2:	f1c2 0205 	rsb	r2, r2, #5
 800bdd6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
 800bdda:	bfcc      	ite	gt
 800bddc:	2201      	movgt	r2, #1
 800bdde:	2200      	movle	r2, #0
 800bde0:	eba3 0305 	sub.w	r3, r3, r5
 800bde4:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
 800bde8:	9a07      	ldr	r2, [sp, #28]
 800bdea:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdee:	f8c1 30ac 	str.w	r3, [r1, #172]	; 0xac
 800bdf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdf4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
 800bdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdfc:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
 800be00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be02:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
 800be06:	4428      	add	r0, r5
 800be08:	bfcc      	ite	gt
 800be0a:	f10e 33ff 	addgt.w	r3, lr, #4294967295
 800be0e:	2300      	movle	r3, #0
 800be10:	e9c1 2024 	strd	r2, r0, [r1, #144]	; 0x90
 800be14:	f8c1 c0a0 	str.w	ip, [r1, #160]	; 0xa0
 800be18:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
 800be1c:	4620      	mov	r0, r4
 800be1e:	f7fc fcaf 	bl	8008780 <acc_base_configuration_sampling_mode_get>
 800be22:	2800      	cmp	r0, #0
 800be24:	f040 813a 	bne.w	800c09c <initialize+0xafc>
 800be28:	232e      	movs	r3, #46	; 0x2e
 800be2a:	f88b 0070 	strb.w	r0, [fp, #112]	; 0x70
 800be2e:	f8cb 3068 	str.w	r3, [fp, #104]	; 0x68
 800be32:	4620      	mov	r0, r4
 800be34:	f7fc fc3c 	bl	80086b0 <acc_base_configuration_repetition_mode_get>
 800be38:	2803      	cmp	r0, #3
 800be3a:	f200 8126 	bhi.w	800c08a <initialize+0xaea>
 800be3e:	e8df f010 	tbh	[pc, r0, lsl #1]
 800be42:	011f      	.short	0x011f
 800be44:	00ff0114 	.word	0x00ff0114
 800be48:	0004      	.short	0x0004
 800be4a:	ab11      	add	r3, sp, #68	; 0x44
 800be4c:	461d      	mov	r5, r3
 800be4e:	4620      	mov	r0, r4
 800be50:	9309      	str	r3, [sp, #36]	; 0x24
 800be52:	f7fc fc35 	bl	80086c0 <acc_base_configuration_update_rate_get>
 800be56:	a910      	add	r1, sp, #64	; 0x40
 800be58:	4628      	mov	r0, r5
 800be5a:	f000 fe37 	bl	800cacc <acc_radar_engine_common_frequency_to_main_clk>
 800be5e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 800be62:	2301      	movs	r3, #1
 800be64:	e9cb 3309 	strd	r3, r3, [fp, #36]	; 0x24
 800be68:	e9cb 120b 	strd	r1, r2, [fp, #44]	; 0x2c
 800be6c:	4620      	mov	r0, r4
 800be6e:	f7fc fb23 	bl	80084b8 <acc_base_configuration_power_save_mode_get>
 800be72:	2804      	cmp	r0, #4
 800be74:	d809      	bhi.n	800be8a <initialize+0x8ea>
 800be76:	e8df f000 	tbb	[pc, r0]
 800be7a:	d5d5      	.short	0xd5d5
 800be7c:	cfdc      	.short	0xcfdc
 800be7e:	03          	.byte	0x03
 800be7f:	00          	.byte	0x00
 800be80:	2301      	movs	r3, #1
 800be82:	e9cb 330d 	strd	r3, r3, [fp, #52]	; 0x34
 800be86:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800be8a:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
 800be8e:	f10d 013b 	add.w	r1, sp, #59	; 0x3b
 800be92:	4620      	mov	r0, r4
 800be94:	f7fc fdb0 	bl	80089f8 <acc_base_configuration_cca_get>
 800be98:	2800      	cmp	r0, #0
 800be9a:	f000 80f9 	beq.w	800c090 <initialize+0xaf0>
 800be9e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 800bea2:	2301      	movs	r3, #1
 800bea4:	3a01      	subs	r2, #1
 800bea6:	e9cb 3221 	strd	r3, r2, [fp, #132]	; 0x84
 800beaa:	4620      	mov	r0, r4
 800beac:	930a      	str	r3, [sp, #40]	; 0x28
 800beae:	f7fc fb45 	bl	800853c <acc_base_configuration_tx_disable_get>
 800beb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beb4:	2800      	cmp	r0, #0
 800beb6:	f000 80fc 	beq.w	800c0b2 <initialize+0xb12>
 800beba:	4618      	mov	r0, r3
 800bebc:	f000 0301 	and.w	r3, r0, #1
 800bec0:	f083 0301 	eor.w	r3, r3, #1
 800bec4:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 800bec8:	4620      	mov	r0, r4
 800beca:	f7fc fb49 	bl	8008560 <acc_base_configuration_decrease_tx_emission_get>
 800bece:	f080 0201 	eor.w	r2, r0, #1
 800bed2:	2301      	movs	r3, #1
 800bed4:	b2d2      	uxtb	r2, r2
 800bed6:	e9cb 2311 	strd	r2, r3, [fp, #68]	; 0x44
 800beda:	4620      	mov	r0, r4
 800bedc:	930a      	str	r3, [sp, #40]	; 0x28
 800bede:	f7fc fb51 	bl	8008584 <acc_base_configuration_hw_accelerated_average_samples_get>
 800bee2:	2801      	cmp	r0, #1
 800bee4:	f240 80e1 	bls.w	800c0aa <initialize+0xb0a>
 800bee8:	3802      	subs	r0, #2
 800beea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beec:	f8cb 0050 	str.w	r0, [fp, #80]	; 0x50
 800bef0:	f8cb 304c 	str.w	r3, [fp, #76]	; 0x4c
 800bef4:	4620      	mov	r0, r4
 800bef6:	f7fc fbfd 	bl	80086f4 <acc_base_configuration_gain_get>
 800befa:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 800befe:	4620      	mov	r0, r4
 800bf00:	f7fc fc08 	bl	8008714 <acc_base_configuration_integrator_get>
 800bf04:	f8cb 0058 	str.w	r0, [fp, #88]	; 0x58
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f7fc fc15 	bl	8008738 <acc_base_configuration_wg_duration_get>
 800bf0e:	f8cb 005c 	str.w	r0, [fp, #92]	; 0x5c
 800bf12:	4620      	mov	r0, r4
 800bf14:	f7fc fcea 	bl	80088ec <acc_base_configuration_sparse_sweeps_per_frame_get>
 800bf18:	f8cb 0060 	str.w	r0, [fp, #96]	; 0x60
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f7fc fd09 	bl	8008934 <acc_base_configuration_downsampling_factor_get>
 800bf22:	f8cb 0078 	str.w	r0, [fp, #120]	; 0x78
 800bf26:	4620      	mov	r0, r4
 800bf28:	f7fc fd30 	bl	800898c <acc_base_configuration_asynchronous_measurement_get>
 800bf2c:	6972      	ldr	r2, [r6, #20]
 800bf2e:	8973      	ldrh	r3, [r6, #10]
 800bf30:	f8b2 10b6 	ldrh.w	r1, [r2, #182]	; 0xb6
 800bf34:	88b2      	ldrh	r2, [r6, #4]
 800bf36:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 800bf3a:	f080 0201 	eor.w	r2, r0, #1
 800bf3e:	b2d2      	uxtb	r2, r2
 800bf40:	3b01      	subs	r3, #1
 800bf42:	f8cb 207c 	str.w	r2, [fp, #124]	; 0x7c
 800bf46:	f8cb 306c 	str.w	r3, [fp, #108]	; 0x6c
 800bf4a:	f8cb 1074 	str.w	r1, [fp, #116]	; 0x74
 800bf4e:	f7fc ff01 	bl	8008d54 <acc_rss_integration_get_sensor_reference_frequency>
 800bf52:	ed8b 0a20 	vstr	s0, [fp, #128]	; 0x80
 800bf56:	f7ff fb11 	bl	800b57c <get_dt>
 800bf5a:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800bf5e:	eddd 7a07 	vldr	s15, [sp, #28]
 800bf62:	ed1f 9a9e 	vldr	s18, [pc, #-632]	; 800bcec <initialize+0x74c>
 800bf66:	ee88 7a88 	vdiv.f32	s14, s17, s16
 800bf6a:	2401      	movs	r4, #1
 800bf6c:	4625      	mov	r5, r4
 800bf6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf72:	ed88 7a04 	vstr	s14, [r8, #16]
 800bf76:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bf7a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800bf7e:	edc8 7a03 	vstr	s15, [r8, #12]
 800bf82:	f7ff fafb 	bl	800b57c <get_dt>
 800bf86:	ee07 aa90 	vmov	s15, sl
 800bf8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf8e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bf92:	ee67 7a89 	vmul.f32	s15, s15, s18
 800bf96:	ee67 7a88 	vmul.f32	s15, s15, s16
 800bf9a:	edc8 7a00 	vstr	s15, [r8]
 800bf9e:	f7ff faed 	bl	800b57c <get_dt>
 800bfa2:	ee07 9a90 	vmov	s15, r9
 800bfa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfaa:	ed98 7a00 	vldr	s14, [r8]
 800bfae:	6831      	ldr	r1, [r6, #0]
 800bfb0:	9806      	ldr	r0, [sp, #24]
 800bfb2:	f8a8 0016 	strh.w	r0, [r8, #22]
 800bfb6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bfba:	f04f 0c00 	mov.w	ip, #0
 800bfbe:	ee67 7a89 	vmul.f32	s15, s15, s18
 800bfc2:	f8a8 c014 	strh.w	ip, [r8, #20]
 800bfc6:	ee67 7a88 	vmul.f32	s15, s15, s16
 800bfca:	f8a8 4018 	strh.w	r4, [r8, #24]
 800bfce:	edc8 7a02 	vstr	s15, [r8, #8]
 800bfd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bfd6:	4623      	mov	r3, r4
 800bfd8:	edc8 7a01 	vstr	s15, [r8, #4]
 800bfdc:	80fc      	strh	r4, [r7, #6]
 800bfde:	823c      	strh	r4, [r7, #16]
 800bfe0:	9c08      	ldr	r4, [sp, #32]
 800bfe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfe4:	f8a7 c002 	strh.w	ip, [r7, #2]
 800bfe8:	f8a7 c018 	strh.w	ip, [r7, #24]
 800bfec:	8178      	strh	r0, [r7, #10]
 800bfee:	8038      	strh	r0, [r7, #0]
 800bff0:	80b8      	strh	r0, [r7, #4]
 800bff2:	813c      	strh	r4, [r7, #8]
 800bff4:	2013      	movs	r0, #19
 800bff6:	82bc      	strh	r4, [r7, #20]
 800bff8:	82fc      	strh	r4, [r7, #22]
 800bffa:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
 800bffe:	f7fe fc3f 	bl	800a880 <acc_probes_execute_uint16>
 800c002:	f000 fdc9 	bl	800cb98 <acc_sensor_r2_get_max_header_length>
 800c006:	f8bb 30b8 	ldrh.w	r3, [fp, #184]	; 0xb8
 800c00a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c00e:	4403      	add	r3, r0
 800c010:	81fb      	strh	r3, [r7, #14]
 800c012:	81ba      	strh	r2, [r7, #12]
 800c014:	f7ff bada 	b.w	800b5cc <initialize+0x2c>
 800c018:	2300      	movs	r3, #0
 800c01a:	e9cb 330d 	strd	r3, r3, [fp, #52]	; 0x34
 800c01e:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800c022:	e732      	b.n	800be8a <initialize+0x8ea>
 800c024:	2301      	movs	r3, #1
 800c026:	2200      	movs	r2, #0
 800c028:	e9cb 330d 	strd	r3, r3, [fp, #52]	; 0x34
 800c02c:	f8cb 203c 	str.w	r2, [fp, #60]	; 0x3c
 800c030:	e72b      	b.n	800be8a <initialize+0x8ea>
 800c032:	2300      	movs	r3, #0
 800c034:	2201      	movs	r2, #1
 800c036:	e9cb 230d 	strd	r2, r3, [fp, #52]	; 0x34
 800c03a:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800c03e:	e724      	b.n	800be8a <initialize+0x8ea>
 800c040:	ab11      	add	r3, sp, #68	; 0x44
 800c042:	461d      	mov	r5, r3
 800c044:	4620      	mov	r0, r4
 800c046:	9309      	str	r3, [sp, #36]	; 0x24
 800c048:	f7fc fb3a 	bl	80086c0 <acc_base_configuration_update_rate_get>
 800c04c:	a910      	add	r1, sp, #64	; 0x40
 800c04e:	4628      	mov	r0, r5
 800c050:	f000 fd3c 	bl	800cacc <acc_radar_engine_common_frequency_to_main_clk>
 800c054:	2301      	movs	r3, #1
 800c056:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c058:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 800c05c:	2100      	movs	r1, #0
 800c05e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c060:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 800c064:	e9cb 120a 	strd	r1, r2, [fp, #40]	; 0x28
 800c068:	e700      	b.n	800be6c <initialize+0x8cc>
 800c06a:	2300      	movs	r3, #0
 800c06c:	2201      	movs	r2, #1
 800c06e:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 800c072:	e9cb 330b 	strd	r3, r3, [fp, #44]	; 0x2c
 800c076:	ab11      	add	r3, sp, #68	; 0x44
 800c078:	f8cb 2028 	str.w	r2, [fp, #40]	; 0x28
 800c07c:	9309      	str	r3, [sp, #36]	; 0x24
 800c07e:	e6f5      	b.n	800be6c <initialize+0x8cc>
 800c080:	2300      	movs	r3, #0
 800c082:	e9cb 3309 	strd	r3, r3, [fp, #36]	; 0x24
 800c086:	e9cb 330b 	strd	r3, r3, [fp, #44]	; 0x2c
 800c08a:	ab11      	add	r3, sp, #68	; 0x44
 800c08c:	9309      	str	r3, [sp, #36]	; 0x24
 800c08e:	e6ed      	b.n	800be6c <initialize+0x8cc>
 800c090:	f8cb 0084 	str.w	r0, [fp, #132]	; 0x84
 800c094:	4620      	mov	r0, r4
 800c096:	f7fc fa51 	bl	800853c <acc_base_configuration_tx_disable_get>
 800c09a:	e70f      	b.n	800bebc <initialize+0x91c>
 800c09c:	2201      	movs	r2, #1
 800c09e:	232e      	movs	r3, #46	; 0x2e
 800c0a0:	f88b 2070 	strb.w	r2, [fp, #112]	; 0x70
 800c0a4:	f8cb 3068 	str.w	r3, [fp, #104]	; 0x68
 800c0a8:	e6c3      	b.n	800be32 <initialize+0x892>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	e9cb 3313 	strd	r3, r3, [fp, #76]	; 0x4c
 800c0b0:	e720      	b.n	800bef4 <initialize+0x954>
 800c0b2:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 800c0b6:	e701      	b.n	800bebc <initialize+0x91c>
 800c0b8:	ee18 1a10 	vmov	r1, s16
 800c0bc:	fb02 1203 	mla	r2, r2, r3, r1
 800c0c0:	ee08 2a10 	vmov	s16, r2
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	e5d9      	b.n	800bc7c <initialize+0x6dc>
 800c0c8:	4282      	cmp	r2, r0
 800c0ca:	d00d      	beq.n	800c0e8 <initialize+0xb48>
 800c0cc:	f04f 0e00 	mov.w	lr, #0
 800c0d0:	b299      	uxth	r1, r3
 800c0d2:	f04f 0c00 	mov.w	ip, #0
 800c0d6:	2001      	movs	r0, #1
 800c0d8:	1a89      	subs	r1, r1, r2
 800c0da:	900a      	str	r0, [sp, #40]	; 0x28
 800c0dc:	9807      	ldr	r0, [sp, #28]
 800c0de:	fb91 f1f0 	sdiv	r1, r1, r0
 800c0e2:	b289      	uxth	r1, r1
 800c0e4:	9109      	str	r1, [sp, #36]	; 0x24
 800c0e6:	e667      	b.n	800bdb8 <initialize+0x818>
 800c0e8:	459c      	cmp	ip, r3
 800c0ea:	bf0c      	ite	eq
 800c0ec:	f04f 0e01 	moveq.w	lr, #1
 800c0f0:	f04f 0e00 	movne.w	lr, #0
 800c0f4:	d1ec      	bne.n	800c0d0 <initialize+0xb30>
 800c0f6:	f04f 0c00 	mov.w	ip, #0
 800c0fa:	e9cd cc09 	strd	ip, ip, [sp, #36]	; 0x24
 800c0fe:	e65b      	b.n	800bdb8 <initialize+0x818>

0800c100 <acc_radar_engine_sparse_create>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4a11      	ldr	r2, [pc, #68]	; (800c148 <acc_radar_engine_sparse_create+0x48>)
 800c104:	4604      	mov	r4, r0
 800c106:	460d      	mov	r5, r1
 800c108:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c10c:	21bc      	movs	r1, #188	; 0xbc
 800c10e:	2001      	movs	r0, #1
 800c110:	f7fc fe96 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 800c114:	6160      	str	r0, [r4, #20]
 800c116:	b1a8      	cbz	r0, 800c144 <acc_radar_engine_sparse_create+0x44>
 800c118:	4628      	mov	r0, r5
 800c11a:	f7fc f97d 	bl	8008418 <acc_base_configuration_sensor_get>
 800c11e:	6020      	str	r0, [r4, #0]
 800c120:	4628      	mov	r0, r5
 800c122:	f7fc fc33 	bl	800898c <acc_base_configuration_asynchronous_measurement_get>
 800c126:	73a0      	strb	r0, [r4, #14]
 800c128:	4628      	mov	r0, r5
 800c12a:	f7fc f9c5 	bl	80084b8 <acc_base_configuration_power_save_mode_get>
 800c12e:	fab0 f080 	clz	r0, r0
 800c132:	0940      	lsrs	r0, r0, #5
 800c134:	73e0      	strb	r0, [r4, #15]
 800c136:	4628      	mov	r0, r5
 800c138:	f000 fca8 	bl	800ca8c <acc_radar_engine_common_get_timeout_ms>
 800c13c:	4b03      	ldr	r3, [pc, #12]	; (800c14c <acc_radar_engine_sparse_create+0x4c>)
 800c13e:	6120      	str	r0, [r4, #16]
 800c140:	61a3      	str	r3, [r4, #24]
 800c142:	2001      	movs	r0, #1
 800c144:	bd38      	pop	{r3, r4, r5, pc}
 800c146:	bf00      	nop
 800c148:	08018fe8 	.word	0x08018fe8
 800c14c:	080191f0 	.word	0x080191f0

0800c150 <acc_radar_engine_acquire_adc_data>:
 800c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c154:	ed2d 8b02 	vpush	{d8}
 800c158:	b089      	sub	sp, #36	; 0x24
 800c15a:	f8b0 b00c 	ldrh.w	fp, [r0, #12]
 800c15e:	7bc3      	ldrb	r3, [r0, #15]
 800c160:	ed9f 8a45 	vldr	s16, [pc, #276]	; 800c278 <acc_radar_engine_acquire_adc_data+0x128>
 800c164:	9301      	str	r3, [sp, #4]
 800c166:	2600      	movs	r6, #0
 800c168:	6903      	ldr	r3, [r0, #16]
 800c16a:	6807      	ldr	r7, [r0, #0]
 800c16c:	f88d 600e 	strb.w	r6, [sp, #14]
 800c170:	ed82 8a02 	vstr	s16, [r2, #8]
 800c174:	4688      	mov	r8, r1
 800c176:	7096      	strb	r6, [r2, #2]
 800c178:	70d6      	strb	r6, [r2, #3]
 800c17a:	8016      	strh	r6, [r2, #0]
 800c17c:	7316      	strb	r6, [r2, #12]
 800c17e:	7116      	strb	r6, [r2, #4]
 800c180:	f88d 600f 	strb.w	r6, [sp, #15]
 800c184:	f890 900e 	ldrb.w	r9, [r0, #14]
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	f1bb 0f00 	cmp.w	fp, #0
 800c18e:	d063      	beq.n	800c258 <acc_radar_engine_acquire_adc_data+0x108>
 800c190:	4605      	mov	r5, r0
 800c192:	4614      	mov	r4, r2
 800c194:	69ab      	ldr	r3, [r5, #24]
 800c196:	f1b9 0f00 	cmp.w	r9, #0
 800c19a:	d105      	bne.n	800c1a8 <acc_radar_engine_acquire_adc_data+0x58>
 800c19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19e:	4638      	mov	r0, r7
 800c1a0:	4798      	blx	r3
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	d061      	beq.n	800c26a <acc_radar_engine_acquire_adc_data+0x11a>
 800c1a6:	69ab      	ldr	r3, [r5, #24]
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	9900      	ldr	r1, [sp, #0]
 800c1ac:	f10d 020e 	add.w	r2, sp, #14
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	4798      	blx	r3
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d058      	beq.n	800c26a <acc_radar_engine_acquire_adc_data+0x11a>
 800c1b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800c1bc:	b903      	cbnz	r3, 800c1c0 <acc_radar_engine_acquire_adc_data+0x70>
 800c1be:	78a3      	ldrb	r3, [r4, #2]
 800c1c0:	69aa      	ldr	r2, [r5, #24]
 800c1c2:	70a3      	strb	r3, [r4, #2]
 800c1c4:	4641      	mov	r1, r8
 800c1c6:	69d3      	ldr	r3, [r2, #28]
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	f10d 020f 	add.w	r2, sp, #15
 800c1ce:	4798      	blx	r3
 800c1d0:	69aa      	ldr	r2, [r5, #24]
 800c1d2:	9004      	str	r0, [sp, #16]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800c1da:	f88d 3014 	strb.w	r3, [sp, #20]
 800c1de:	f88d 301c 	strb.w	r3, [sp, #28]
 800c1e2:	ed8d 8a06 	vstr	s16, [sp, #24]
 800c1e6:	ab05      	add	r3, sp, #20
 800c1e8:	aa04      	add	r2, sp, #16
 800c1ea:	4641      	mov	r1, r8
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	47d0      	blx	sl
 800c1f0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c1f4:	b903      	cbnz	r3, 800c1f8 <acc_radar_engine_acquire_adc_data+0xa8>
 800c1f6:	7b23      	ldrb	r3, [r4, #12]
 800c1f8:	f89d a014 	ldrb.w	sl, [sp, #20]
 800c1fc:	7323      	strb	r3, [r4, #12]
 800c1fe:	f1ba 0f00 	cmp.w	sl, #0
 800c202:	d130      	bne.n	800c266 <acc_radar_engine_acquire_adc_data+0x116>
 800c204:	7923      	ldrb	r3, [r4, #4]
 800c206:	edd4 0a02 	vldr	s1, [r4, #8]
 800c20a:	7123      	strb	r3, [r4, #4]
 800c20c:	ed9d 0a06 	vldr	s0, [sp, #24]
 800c210:	f007 fdab 	bl	8013d6a <fmaxf>
 800c214:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c218:	ed84 0a02 	vstr	s0, [r4, #8]
 800c21c:	b902      	cbnz	r2, 800c220 <acc_radar_engine_acquire_adc_data+0xd0>
 800c21e:	78e2      	ldrb	r2, [r4, #3]
 800c220:	8821      	ldrh	r1, [r4, #0]
 800c222:	9b04      	ldr	r3, [sp, #16]
 800c224:	70e2      	strb	r2, [r4, #3]
 800c226:	69aa      	ldr	r2, [r5, #24]
 800c228:	440b      	add	r3, r1
 800c22a:	8023      	strh	r3, [r4, #0]
 800c22c:	4651      	mov	r1, sl
 800c22e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c230:	4628      	mov	r0, r5
 800c232:	4798      	blx	r3
 800c234:	9b01      	ldr	r3, [sp, #4]
 800c236:	b11b      	cbz	r3, 800c240 <acc_radar_engine_acquire_adc_data+0xf0>
 800c238:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c23c:	42b3      	cmp	r3, r6
 800c23e:	d00b      	beq.n	800c258 <acc_radar_engine_acquire_adc_data+0x108>
 800c240:	f1b9 0f00 	cmp.w	r9, #0
 800c244:	d004      	beq.n	800c250 <acc_radar_engine_acquire_adc_data+0x100>
 800c246:	69ab      	ldr	r3, [r5, #24]
 800c248:	4638      	mov	r0, r7
 800c24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c24c:	4798      	blx	r3
 800c24e:	b160      	cbz	r0, 800c26a <acc_radar_engine_acquire_adc_data+0x11a>
 800c250:	3601      	adds	r6, #1
 800c252:	b2b3      	uxth	r3, r6
 800c254:	459b      	cmp	fp, r3
 800c256:	d89d      	bhi.n	800c194 <acc_radar_engine_acquire_adc_data+0x44>
 800c258:	f8d8 0000 	ldr.w	r0, [r8]
 800c25c:	b009      	add	sp, #36	; 0x24
 800c25e:	ecbd 8b02 	vpop	{d8}
 800c262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c266:	4653      	mov	r3, sl
 800c268:	e7cd      	b.n	800c206 <acc_radar_engine_acquire_adc_data+0xb6>
 800c26a:	2000      	movs	r0, #0
 800c26c:	b009      	add	sp, #36	; 0x24
 800c26e:	ecbd 8b02 	vpop	{d8}
 800c272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c276:	bf00      	nop
 800c278:	ff800000 	.word	0xff800000

0800c27c <get_dt>:
 800c27c:	b508      	push	{r3, lr}
 800c27e:	ed2d 8b02 	vpush	{d8}
 800c282:	ee08 0a10 	vmov	s16, r0
 800c286:	f7fc fd65 	bl	8008d54 <acc_rss_integration_get_sensor_reference_frequency>
 800c28a:	eef0 8a40 	vmov.f32	s17, s0
 800c28e:	f004 fd75 	bl	8010d7c <acc_cpd_pll_divisors_ref_divisor>
 800c292:	ee68 8a80 	vmul.f32	s17, s17, s0
 800c296:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c29a:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 800c29e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800c2a2:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800c2a6:	ecbd 8b02 	vpop	{d8}
 800c2aa:	bd08      	pop	{r3, pc}

0800c2ac <acc_radar_engine_common_sweep_w_dly_initialize_range>:
 800c2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b0:	ed2d 8b06 	vpush	{d8-d10}
 800c2b4:	b089      	sub	sp, #36	; 0x24
 800c2b6:	4689      	mov	r9, r1
 800c2b8:	4690      	mov	r8, r2
 800c2ba:	9306      	str	r3, [sp, #24]
 800c2bc:	4604      	mov	r4, r0
 800c2be:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c2c0:	f89d a064 	ldrb.w	sl, [sp, #100]	; 0x64
 800c2c4:	f9bd b066 	ldrsh.w	fp, [sp, #102]	; 0x66
 800c2c8:	f7fc fa88 	bl	80087dc <acc_base_configuration_use_point_range_get>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	f040 808c 	bne.w	800c3ea <acc_radar_engine_common_sweep_w_dly_initialize_range+0x13e>
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f7fc f8b0 	bl	8008438 <acc_base_configuration_requested_start_get>
 800c2d8:	4620      	mov	r0, r4
 800c2da:	eeb0 8a40 	vmov.f32	s16, s0
 800c2de:	f7fc f8c7 	bl	8008470 <acc_base_configuration_requested_length_get>
 800c2e2:	4638      	mov	r0, r7
 800c2e4:	ee38 9a00 	vadd.f32	s18, s16, s0
 800c2e8:	f7ff ffc8 	bl	800c27c <get_dt>
 800c2ec:	eddf 8ae0 	vldr	s17, [pc, #896]	; 800c670 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3c4>
 800c2f0:	ee38 7a08 	vadd.f32	s14, s16, s16
 800c2f4:	ee20 0a28 	vmul.f32	s0, s0, s17
 800c2f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c2fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c300:	4638      	mov	r0, r7
 800c302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c306:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800c30a:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800c30e:	bf54      	ite	pl
 800c310:	eeb0 7a69 	vmovpl.f32	s14, s19
 800c314:	eeb0 7a48 	vmovmi.f32	s14, s16
 800c318:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c31c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c320:	ee17 6a90 	vmov	r6, s15
 800c324:	f7ff ffaa 	bl	800c27c <get_dt>
 800c328:	ee39 7a09 	vadd.f32	s14, s18, s18
 800c32c:	ee20 0a28 	vmul.f32	s0, s0, s17
 800c330:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800c334:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c33c:	bf58      	it	pl
 800c33e:	eeb0 8a69 	vmovpl.f32	s16, s19
 800c342:	ee37 8a88 	vadd.f32	s16, s15, s16
 800c346:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c34a:	ee17 5a90 	vmov	r5, s15
 800c34e:	f06f 030b 	mvn.w	r3, #11
 800c352:	f1ba 0f00 	cmp.w	sl, #0
 800c356:	d02b      	beq.n	800c3b0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x104>
 800c358:	459b      	cmp	fp, r3
 800c35a:	bfb8      	it	lt
 800c35c:	469b      	movlt	fp, r3
 800c35e:	f8cd b01c 	str.w	fp, [sp, #28]
 800c362:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800c366:	f8b4 b030 	ldrh.w	fp, [r4, #48]	; 0x30
 800c36a:	b90b      	cbnz	r3, 800c370 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xc4>
 800c36c:	f894 b032 	ldrb.w	fp, [r4, #50]	; 0x32
 800c370:	4620      	mov	r0, r4
 800c372:	f7fc fadf 	bl	8008934 <acc_base_configuration_downsampling_factor_get>
 800c376:	2801      	cmp	r0, #1
 800c378:	4682      	mov	sl, r0
 800c37a:	d909      	bls.n	800c390 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xe4>
 800c37c:	2802      	cmp	r0, #2
 800c37e:	d026      	beq.n	800c3ce <acc_radar_engine_common_sweep_w_dly_initialize_range+0x122>
 800c380:	1bab      	subs	r3, r5, r6
 800c382:	fb93 f2fa 	sdiv	r2, r3, sl
 800c386:	fb0a 3a12 	mls	sl, sl, r2, r3
 800c38a:	f1ba 0f00 	cmp.w	sl, #0
 800c38e:	dc11      	bgt.n	800c3b4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x108>
 800c390:	42ae      	cmp	r6, r5
 800c392:	dd33      	ble.n	800c3fc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x150>
 800c394:	4bb7      	ldr	r3, [pc, #732]	; (800c674 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3c8>)
 800c396:	4ab8      	ldr	r2, [pc, #736]	; (800c678 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3cc>)
 800c398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c39a:	49b8      	ldr	r1, [pc, #736]	; (800c67c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3d0>)
 800c39c:	2000      	movs	r0, #0
 800c39e:	4798      	blx	r3
 800c3a0:	f04f 0a00 	mov.w	sl, #0
 800c3a4:	4650      	mov	r0, sl
 800c3a6:	b009      	add	sp, #36	; 0x24
 800c3a8:	ecbd 8b06 	vpop	{d8-d10}
 800c3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b0:	9307      	str	r3, [sp, #28]
 800c3b2:	e7d6      	b.n	800c362 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xb6>
 800c3b4:	f7fc fd74 	bl	8008ea0 <acc_rss_integration_log_level>
 800c3b8:	2801      	cmp	r0, #1
 800c3ba:	d905      	bls.n	800c3c8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x11c>
 800c3bc:	4bad      	ldr	r3, [pc, #692]	; (800c674 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3c8>)
 800c3be:	4ab0      	ldr	r2, [pc, #704]	; (800c680 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3d4>)
 800c3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3c2:	49ae      	ldr	r1, [pc, #696]	; (800c67c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3d0>)
 800c3c4:	2002      	movs	r0, #2
 800c3c6:	4798      	blx	r3
 800c3c8:	eba5 050a 	sub.w	r5, r5, sl
 800c3cc:	e7e0      	b.n	800c390 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xe4>
 800c3ce:	07f3      	lsls	r3, r6, #31
 800c3d0:	d4d6      	bmi.n	800c380 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xd4>
 800c3d2:	f7fc fd65 	bl	8008ea0 <acc_rss_integration_log_level>
 800c3d6:	2801      	cmp	r0, #1
 800c3d8:	d905      	bls.n	800c3e6 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x13a>
 800c3da:	4ba6      	ldr	r3, [pc, #664]	; (800c674 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3c8>)
 800c3dc:	4aa9      	ldr	r2, [pc, #676]	; (800c684 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3d8>)
 800c3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3e0:	49a6      	ldr	r1, [pc, #664]	; (800c67c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3d0>)
 800c3e2:	4650      	mov	r0, sl
 800c3e4:	4798      	blx	r3
 800c3e6:	3601      	adds	r6, #1
 800c3e8:	e7ca      	b.n	800c380 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xd4>
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f7fc f946 	bl	800867c <acc_base_configuration_point_start_get>
 800c3f0:	4606      	mov	r6, r0
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f7fc f94a 	bl	800868c <acc_base_configuration_point_length_get>
 800c3f8:	1835      	adds	r5, r6, r0
 800c3fa:	e7a8      	b.n	800c34e <acc_radar_engine_common_sweep_w_dly_initialize_range+0xa2>
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f7fc fa53 	bl	80088a8 <acc_base_configuration_ignore_range_limits_get>
 800c402:	4682      	mov	sl, r0
 800c404:	2800      	cmp	r0, #0
 800c406:	f040 8149 	bne.w	800c69c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3f0>
 800c40a:	9b07      	ldr	r3, [sp, #28]
 800c40c:	fb03 f307 	mul.w	r3, r3, r7
 800c410:	42b3      	cmp	r3, r6
 800c412:	9307      	str	r3, [sp, #28]
 800c414:	f300 81fe 	bgt.w	800c814 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x568>
 800c418:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
 800c41c:	f1ab 0b4b 	sub.w	fp, fp, #75	; 0x4b
 800c420:	fb07 fb0b 	mul.w	fp, r7, fp
 800c424:	45ab      	cmp	fp, r5
 800c426:	f280 8139 	bge.w	800c69c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3f0>
 800c42a:	4b92      	ldr	r3, [pc, #584]	; (800c674 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3c8>)
 800c42c:	eddf 9a90 	vldr	s19, [pc, #576]	; 800c670 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3c4>
 800c430:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800c432:	ed9f aa8f 	vldr	s20, [pc, #572]	; 800c670 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3c4>
 800c436:	eddf aa8e 	vldr	s21, [pc, #568]	; 800c670 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3c4>
 800c43a:	4638      	mov	r0, r7
 800c43c:	f7ff ff1e 	bl	800c27c <get_dt>
 800c440:	ee07 5a90 	vmov	s15, r5
 800c444:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800c448:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800c44c:	ee69 7a00 	vmul.f32	s15, s18, s0
 800c450:	4a8d      	ldr	r2, [pc, #564]	; (800c688 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3dc>)
 800c452:	4b8e      	ldr	r3, [pc, #568]	; (800c68c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3e0>)
 800c454:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c458:	4638      	mov	r0, r7
 800c45a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c45e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c466:	bf4c      	ite	mi
 800c468:	4690      	movmi	r8, r2
 800c46a:	4698      	movpl	r8, r3
 800c46c:	f7ff ff06 	bl	800c27c <get_dt>
 800c470:	4638      	mov	r0, r7
 800c472:	ee29 8a00 	vmul.f32	s16, s18, s0
 800c476:	f7ff ff01 	bl	800c27c <get_dt>
 800c47a:	ee69 7a00 	vmul.f32	s15, s18, s0
 800c47e:	ee28 8a29 	vmul.f32	s16, s16, s19
 800c482:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c486:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c48a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c48e:	4638      	mov	r0, r7
 800c490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c498:	eddf 9a7d 	vldr	s19, [pc, #500]	; 800c690 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3e4>
 800c49c:	bf48      	it	mi
 800c49e:	eeb1 8a48 	vnegmi.f32	s16, s16
 800c4a2:	f7ff feeb 	bl	800c27c <get_dt>
 800c4a6:	ee38 8a29 	vadd.f32	s16, s16, s19
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	eefc 9ac8 	vcvt.u32.f32	s19, s16
 800c4b0:	ee29 8a00 	vmul.f32	s16, s18, s0
 800c4b4:	f7ff fee2 	bl	800c27c <get_dt>
 800c4b8:	ee69 7a00 	vmul.f32	s15, s18, s0
 800c4bc:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800c4c0:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800c4c4:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800c4c8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c4cc:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c4d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d8:	eddf 7a6d 	vldr	s15, [pc, #436]	; 800c690 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3e4>
 800c4dc:	bf48      	it	mi
 800c4de:	eeb1 8a48 	vnegmi.f32	s16, s16
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	ee38 8a27 	vadd.f32	s16, s16, s15
 800c4e8:	f7ff fec8 	bl	800c27c <get_dt>
 800c4ec:	4638      	mov	r0, r7
 800c4ee:	ee69 8a00 	vmul.f32	s17, s18, s0
 800c4f2:	f7ff fec3 	bl	800c27c <get_dt>
 800c4f6:	ee69 7a00 	vmul.f32	s15, s18, s0
 800c4fa:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800c4fe:	ee67 7aaa 	vmul.f32	s15, s15, s21
 800c502:	ee68 8aaa 	vmul.f32	s17, s17, s21
 800c506:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800c50a:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800c50e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c516:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800c690 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3e4>
 800c51a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800c694 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3e8>
 800c51e:	ed9f aa54 	vldr	s20, [pc, #336]	; 800c670 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3c4>
 800c522:	eddf aa53 	vldr	s21, [pc, #332]	; 800c670 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3c4>
 800c526:	bf48      	it	mi
 800c528:	eef1 8a68 	vnegmi.f32	s17, s17
 800c52c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800c530:	ee06 ba90 	vmov	s13, fp
 800c534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c538:	4638      	mov	r0, r7
 800c53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c53e:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 800c542:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c546:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800c54a:	ee68 7a07 	vmul.f32	s15, s16, s14
 800c54e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c552:	ee17 4a90 	vmov	r4, s15
 800c556:	f7ff fe91 	bl	800c27c <get_dt>
 800c55a:	ee69 7a00 	vmul.f32	s15, s18, s0
 800c55e:	4b4a      	ldr	r3, [pc, #296]	; (800c688 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3dc>)
 800c560:	4a4a      	ldr	r2, [pc, #296]	; (800c68c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3e0>)
 800c562:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800c566:	4638      	mov	r0, r7
 800c568:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c56c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c574:	bf4c      	ite	mi
 800c576:	4699      	movmi	r9, r3
 800c578:	4691      	movpl	r9, r2
 800c57a:	f7ff fe7f 	bl	800c27c <get_dt>
 800c57e:	4638      	mov	r0, r7
 800c580:	ee29 8a00 	vmul.f32	s16, s18, s0
 800c584:	f7ff fe7a 	bl	800c27c <get_dt>
 800c588:	ee69 7a00 	vmul.f32	s15, s18, s0
 800c58c:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800c590:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800c594:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c598:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c59c:	4638      	mov	r0, r7
 800c59e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a6:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800c690 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3e4>
 800c5aa:	ed9f aa31 	vldr	s20, [pc, #196]	; 800c670 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3c4>
 800c5ae:	bf48      	it	mi
 800c5b0:	eeb1 8a48 	vnegmi.f32	s16, s16
 800c5b4:	ee38 8a27 	vadd.f32	s16, s16, s15
 800c5b8:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800c5bc:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800c5c0:	ee17 5a90 	vmov	r5, s15
 800c5c4:	f7ff fe5a 	bl	800c27c <get_dt>
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	ee29 8a00 	vmul.f32	s16, s18, s0
 800c5ce:	f7ff fe55 	bl	800c27c <get_dt>
 800c5d2:	ee69 7a00 	vmul.f32	s15, s18, s0
 800c5d6:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800c5da:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800c5de:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c5e2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5f0:	eddf 7a27 	vldr	s15, [pc, #156]	; 800c690 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3e4>
 800c5f4:	bf48      	it	mi
 800c5f6:	eeb1 8a48 	vnegmi.f32	s16, s16
 800c5fa:	ee38 8a27 	vadd.f32	s16, s16, s15
 800c5fe:	f7ff fe3d 	bl	800c27c <get_dt>
 800c602:	4638      	mov	r0, r7
 800c604:	ee69 8a00 	vmul.f32	s17, s18, s0
 800c608:	f7ff fe38 	bl	800c27c <get_dt>
 800c60c:	ee69 7a00 	vmul.f32	s15, s18, s0
 800c610:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800c614:	ee67 7aaa 	vmul.f32	s15, s15, s21
 800c618:	ee68 8aaa 	vmul.f32	s17, s17, s21
 800c61c:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800c620:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800c624:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c62c:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c690 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3e4>
 800c630:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c694 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3e8>
 800c634:	9503      	str	r5, [sp, #12]
 800c636:	bf48      	it	mi
 800c638:	eef1 8a68 	vnegmi.f32	s17, s17
 800c63c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800c640:	f8cd 9008 	str.w	r9, [sp, #8]
 800c644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c648:	9401      	str	r4, [sp, #4]
 800c64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c64e:	edcd 9a00 	vstr	s19, [sp]
 800c652:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c656:	4643      	mov	r3, r8
 800c658:	ee68 7a07 	vmul.f32	s15, s16, s14
 800c65c:	4a0e      	ldr	r2, [pc, #56]	; (800c698 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3ec>)
 800c65e:	4907      	ldr	r1, [pc, #28]	; (800c67c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x3d0>)
 800c660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c664:	2000      	movs	r0, #0
 800c666:	edcd 7a04 	vstr	s15, [sp, #16]
 800c66a:	47b0      	blx	r6
 800c66c:	e69a      	b.n	800c3a4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xf8>
 800c66e:	bf00      	nop
 800c670:	4d8ef3c2 	.word	0x4d8ef3c2
 800c674:	20001628 	.word	0x20001628
 800c678:	08019054 	.word	0x08019054
 800c67c:	08019294 	.word	0x08019294
 800c680:	08019020 	.word	0x08019020
 800c684:	0801925c 	.word	0x0801925c
 800c688:	0801901c 	.word	0x0801901c
 800c68c:	0801d5bc 	.word	0x0801d5bc
 800c690:	350637bd 	.word	0x350637bd
 800c694:	49742400 	.word	0x49742400
 800c698:	080190c4 	.word	0x080190c4
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7fc f949 	bl	8008934 <acc_base_configuration_downsampling_factor_get>
 800c6a2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800c6a6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800c6aa:	4683      	mov	fp, r0
 800c6ac:	b90b      	cbnz	r3, 800c6b2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x406>
 800c6ae:	f894 e032 	ldrb.w	lr, [r4, #50]	; 0x32
 800c6b2:	981a      	ldr	r0, [sp, #104]	; 0x68
 800c6b4:	fb96 f2fb 	sdiv	r2, r6, fp
 800c6b8:	0fe9      	lsrs	r1, r5, #31
 800c6ba:	194b      	adds	r3, r1, r5
 800c6bc:	fb93 f3f7 	sdiv	r3, r3, r7
 800c6c0:	1a5b      	subs	r3, r3, r1
 800c6c2:	0ff1      	lsrs	r1, r6, #31
 800c6c4:	468c      	mov	ip, r1
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	4431      	add	r1, r6
 800c6ca:	fb91 f1f7 	sdiv	r1, r1, r7
 800c6ce:	eba1 010c 	sub.w	r1, r1, ip
 800c6d2:	1a5b      	subs	r3, r3, r1
 800c6d4:	fb0b 6212 	mls	r2, fp, r2, r6
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	445a      	add	r2, fp
 800c6dc:	fbb3 fcf0 	udiv	ip, r3, r0
 800c6e0:	f8a8 3006 	strh.w	r3, [r8, #6]
 800c6e4:	fb00 301c 	mls	r0, r0, ip, r3
 800c6e8:	fb92 f3fb 	sdiv	r3, r2, fp
 800c6ec:	fb0b 2213 	mls	r2, fp, r3, r2
 800c6f0:	f8a8 e000 	strh.w	lr, [r8]
 800c6f4:	9007      	str	r0, [sp, #28]
 800c6f6:	f8a8 1004 	strh.w	r1, [r8, #4]
 800c6fa:	fa1f f38c 	uxth.w	r3, ip
 800c6fe:	f8a8 2002 	strh.w	r2, [r8, #2]
 800c702:	b100      	cbz	r0, 800c706 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x45a>
 800c704:	3301      	adds	r3, #1
 800c706:	f8a8 3008 	strh.w	r3, [r8, #8]
 800c70a:	4620      	mov	r0, r4
 800c70c:	f7fb fed4 	bl	80084b8 <acc_base_configuration_power_save_mode_get>
 800c710:	4682      	mov	sl, r0
 800c712:	4620      	mov	r0, r4
 800c714:	f7fb ffcc 	bl	80086b0 <acc_base_configuration_repetition_mode_get>
 800c718:	f1ba 0f04 	cmp.w	sl, #4
 800c71c:	d001      	beq.n	800c722 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x476>
 800c71e:	2801      	cmp	r0, #1
 800c720:	d007      	beq.n	800c732 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x486>
 800c722:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800c726:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c728:	4293      	cmp	r3, r2
 800c72a:	d902      	bls.n	800c732 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x486>
 800c72c:	4bcb      	ldr	r3, [pc, #812]	; (800ca5c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7b0>)
 800c72e:	4acc      	ldr	r2, [pc, #816]	; (800ca60 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7b4>)
 800c730:	e632      	b.n	800c398 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xec>
 800c732:	4638      	mov	r0, r7
 800c734:	f7ff fda2 	bl	800c27c <get_dt>
 800c738:	ee07 ba90 	vmov	s15, fp
 800c73c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c740:	4638      	mov	r0, r7
 800c742:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c746:	eddf 8ac7 	vldr	s17, [pc, #796]	; 800ca64 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7b8>
 800c74a:	ed89 0a03 	vstr	s0, [r9, #12]
 800c74e:	f7ff fd95 	bl	800c27c <get_dt>
 800c752:	ee07 6a90 	vmov	s15, r6
 800c756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c75a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c75e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c762:	4638      	mov	r0, r7
 800c764:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c768:	ee67 7a88 	vmul.f32	s15, s15, s16
 800c76c:	edc9 7a00 	vstr	s15, [r9]
 800c770:	f7ff fd84 	bl	800c27c <get_dt>
 800c774:	fb96 f2f7 	sdiv	r2, r6, r7
 800c778:	ee07 5a90 	vmov	s15, r5
 800c77c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c780:	ed99 7a00 	vldr	s14, [r9]
 800c784:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800c788:	9c06      	ldr	r4, [sp, #24]
 800c78a:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 800c78e:	f8a9 0018 	strh.w	r0, [r9, #24]
 800c792:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c796:	1bab      	subs	r3, r5, r6
 800c798:	ee20 0a28 	vmul.f32	s0, s0, s17
 800c79c:	fb93 f3fb 	sdiv	r3, r3, fp
 800c7a0:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	f8a9 3016 	strh.w	r3, [r9, #22]
 800c7b0:	ed89 0a02 	vstr	s0, [r9, #8]
 800c7b4:	ed89 7a01 	vstr	s14, [r9, #4]
 800c7b8:	80a3      	strh	r3, [r4, #4]
 800c7ba:	fb01 f307 	mul.w	r3, r1, r7
 800c7be:	fbb3 f3fb 	udiv	r3, r3, fp
 800c7c2:	8023      	strh	r3, [r4, #0]
 800c7c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c7c6:	8121      	strh	r1, [r4, #8]
 800c7c8:	fb07 6612 	mls	r6, r7, r2, r6
 800c7cc:	443e      	add	r6, r7
 800c7ce:	428b      	cmp	r3, r1
 800c7d0:	fb96 f2f7 	sdiv	r2, r6, r7
 800c7d4:	8220      	strh	r0, [r4, #16]
 800c7d6:	fb07 6612 	mls	r6, r7, r2, r6
 800c7da:	fbb7 f7fb 	udiv	r7, r7, fp
 800c7de:	fb96 f6fb 	sdiv	r6, r6, fp
 800c7e2:	80e7      	strh	r7, [r4, #6]
 800c7e4:	8066      	strh	r6, [r4, #2]
 800c7e6:	d20f      	bcs.n	800c808 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x55c>
 800c7e8:	9a07      	ldr	r2, [sp, #28]
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	82a3      	strh	r3, [r4, #20]
 800c7ee:	b132      	cbz	r2, 800c7fe <acc_radar_engine_common_sweep_w_dly_initialize_range+0x552>
 800c7f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c7f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c7f4:	fbb1 f3f3 	udiv	r3, r1, r3
 800c7f8:	fb02 1113 	mls	r1, r2, r3, r1
 800c7fc:	b28b      	uxth	r3, r1
 800c7fe:	9a06      	ldr	r2, [sp, #24]
 800c800:	f04f 0a01 	mov.w	sl, #1
 800c804:	82d3      	strh	r3, [r2, #22]
 800c806:	e5cd      	b.n	800c3a4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xf8>
 800c808:	9b06      	ldr	r3, [sp, #24]
 800c80a:	f04f 0a01 	mov.w	sl, #1
 800c80e:	8299      	strh	r1, [r3, #20]
 800c810:	82d9      	strh	r1, [r3, #22]
 800c812:	e5c7      	b.n	800c3a4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xf8>
 800c814:	4b91      	ldr	r3, [pc, #580]	; (800ca5c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7b0>)
 800c816:	eddf 9a93 	vldr	s19, [pc, #588]	; 800ca64 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7b8>
 800c81a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800c81e:	ed9f aa91 	vldr	s20, [pc, #580]	; 800ca64 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7b8>
 800c822:	4638      	mov	r0, r7
 800c824:	f7ff fd2a 	bl	800c27c <get_dt>
 800c828:	ee07 6a90 	vmov	s15, r6
 800c82c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800c830:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800c834:	ee68 7a80 	vmul.f32	s15, s17, s0
 800c838:	4a8b      	ldr	r2, [pc, #556]	; (800ca68 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7bc>)
 800c83a:	4b8c      	ldr	r3, [pc, #560]	; (800ca6c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7c0>)
 800c83c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c840:	4638      	mov	r0, r7
 800c842:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c846:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c84e:	bf4c      	ite	mi
 800c850:	4691      	movmi	r9, r2
 800c852:	4699      	movpl	r9, r3
 800c854:	f7ff fd12 	bl	800c27c <get_dt>
 800c858:	4638      	mov	r0, r7
 800c85a:	ee28 8a80 	vmul.f32	s16, s17, s0
 800c85e:	f7ff fd0d 	bl	800c27c <get_dt>
 800c862:	ee68 7a80 	vmul.f32	s15, s17, s0
 800c866:	ee28 8a29 	vmul.f32	s16, s16, s19
 800c86a:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c86e:	ee28 8a09 	vmul.f32	s16, s16, s18
 800c872:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c876:	4638      	mov	r0, r7
 800c878:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c880:	eddf 7a7b 	vldr	s15, [pc, #492]	; 800ca70 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7c4>
 800c884:	eddf 9a77 	vldr	s19, [pc, #476]	; 800ca64 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7b8>
 800c888:	bf48      	it	mi
 800c88a:	eeb1 8a48 	vnegmi.f32	s16, s16
 800c88e:	ee38 8a27 	vadd.f32	s16, s16, s15
 800c892:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800c896:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800c89a:	ee17 6a90 	vmov	r6, s15
 800c89e:	f7ff fced 	bl	800c27c <get_dt>
 800c8a2:	4638      	mov	r0, r7
 800c8a4:	ee28 8a80 	vmul.f32	s16, s17, s0
 800c8a8:	f7ff fce8 	bl	800c27c <get_dt>
 800c8ac:	ee68 7a80 	vmul.f32	s15, s17, s0
 800c8b0:	ee28 8a29 	vmul.f32	s16, s16, s19
 800c8b4:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c8b8:	ee28 8a09 	vmul.f32	s16, s16, s18
 800c8bc:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c8c0:	4638      	mov	r0, r7
 800c8c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ca:	eddf 7a69 	vldr	s15, [pc, #420]	; 800ca70 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7c4>
 800c8ce:	bf48      	it	mi
 800c8d0:	eeb1 8a48 	vnegmi.f32	s16, s16
 800c8d4:	ee38 8a27 	vadd.f32	s16, s16, s15
 800c8d8:	f7ff fcd0 	bl	800c27c <get_dt>
 800c8dc:	4638      	mov	r0, r7
 800c8de:	ee28 9a80 	vmul.f32	s18, s17, s0
 800c8e2:	f7ff fccb 	bl	800c27c <get_dt>
 800c8e6:	ee68 7a80 	vmul.f32	s15, s17, s0
 800c8ea:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800c8ee:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800c8f2:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800c8f6:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c8fa:	ee29 9a29 	vmul.f32	s18, s18, s19
 800c8fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c906:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800ca70 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7c4>
 800c90a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800ca74 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7c8>
 800c90e:	eddd 6a07 	vldr	s13, [sp, #28]
 800c912:	eddf 8a54 	vldr	s17, [pc, #336]	; 800ca64 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7b8>
 800c916:	ed9f aa53 	vldr	s20, [pc, #332]	; 800ca64 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7b8>
 800c91a:	bf48      	it	mi
 800c91c:	eeb1 9a49 	vnegmi.f32	s18, s18
 800c920:	ee79 7a27 	vadd.f32	s15, s18, s15
 800c924:	4638      	mov	r0, r7
 800c926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c92a:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 800c92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c932:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800c936:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c93a:	ee68 7a07 	vmul.f32	s15, s16, s14
 800c93e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c942:	ee17 4a90 	vmov	r4, s15
 800c946:	f7ff fc99 	bl	800c27c <get_dt>
 800c94a:	ee69 7a00 	vmul.f32	s15, s18, s0
 800c94e:	4b46      	ldr	r3, [pc, #280]	; (800ca68 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7bc>)
 800c950:	4a46      	ldr	r2, [pc, #280]	; (800ca6c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7c0>)
 800c952:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c956:	4638      	mov	r0, r7
 800c958:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c95c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c964:	bf4c      	ite	mi
 800c966:	469b      	movmi	fp, r3
 800c968:	4693      	movpl	fp, r2
 800c96a:	f7ff fc87 	bl	800c27c <get_dt>
 800c96e:	4638      	mov	r0, r7
 800c970:	ee29 8a00 	vmul.f32	s16, s18, s0
 800c974:	f7ff fc82 	bl	800c27c <get_dt>
 800c978:	ee69 7a00 	vmul.f32	s15, s18, s0
 800c97c:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c980:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c984:	ee28 8a29 	vmul.f32	s16, s16, s19
 800c988:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c98c:	4638      	mov	r0, r7
 800c98e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c996:	eddf 7a36 	vldr	s15, [pc, #216]	; 800ca70 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7c4>
 800c99a:	eddf 9a32 	vldr	s19, [pc, #200]	; 800ca64 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7b8>
 800c99e:	bf48      	it	mi
 800c9a0:	eeb1 8a48 	vnegmi.f32	s16, s16
 800c9a4:	ee38 8a27 	vadd.f32	s16, s16, s15
 800c9a8:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800c9ac:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800c9b0:	ee17 5a90 	vmov	r5, s15
 800c9b4:	f7ff fc62 	bl	800c27c <get_dt>
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	ee29 8a00 	vmul.f32	s16, s18, s0
 800c9be:	f7ff fc5d 	bl	800c27c <get_dt>
 800c9c2:	ee69 7a00 	vmul.f32	s15, s18, s0
 800c9c6:	ee28 8a29 	vmul.f32	s16, s16, s19
 800c9ca:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c9ce:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c9d2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e0:	eddf 7a23 	vldr	s15, [pc, #140]	; 800ca70 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7c4>
 800c9e4:	bf48      	it	mi
 800c9e6:	eeb1 8a48 	vnegmi.f32	s16, s16
 800c9ea:	ee38 8a27 	vadd.f32	s16, s16, s15
 800c9ee:	f7ff fc45 	bl	800c27c <get_dt>
 800c9f2:	4638      	mov	r0, r7
 800c9f4:	ee69 8a00 	vmul.f32	s17, s18, s0
 800c9f8:	f7ff fc40 	bl	800c27c <get_dt>
 800c9fc:	ee69 7a00 	vmul.f32	s15, s18, s0
 800ca00:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800ca04:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800ca08:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800ca0c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800ca10:	ee68 8aa9 	vmul.f32	s17, s17, s19
 800ca14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ca18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800ca70 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7c4>
 800ca20:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800ca74 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7c8>
 800ca24:	9503      	str	r5, [sp, #12]
 800ca26:	bf48      	it	mi
 800ca28:	eef1 8a68 	vnegmi.f32	s17, s17
 800ca2c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800ca30:	f8cd b008 	str.w	fp, [sp, #8]
 800ca34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca38:	9401      	str	r4, [sp, #4]
 800ca3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3e:	9600      	str	r6, [sp, #0]
 800ca40:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ca44:	464b      	mov	r3, r9
 800ca46:	ee68 7a07 	vmul.f32	s15, s16, s14
 800ca4a:	4a0b      	ldr	r2, [pc, #44]	; (800ca78 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7cc>)
 800ca4c:	490b      	ldr	r1, [pc, #44]	; (800ca7c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7d0>)
 800ca4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca52:	2000      	movs	r0, #0
 800ca54:	edcd 7a04 	vstr	s15, [sp, #16]
 800ca58:	47c0      	blx	r8
 800ca5a:	e4a3      	b.n	800c3a4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xf8>
 800ca5c:	20001628 	.word	0x20001628
 800ca60:	080192b4 	.word	0x080192b4
 800ca64:	4d8ef3c2 	.word	0x4d8ef3c2
 800ca68:	0801901c 	.word	0x0801901c
 800ca6c:	0801d5bc 	.word	0x0801d5bc
 800ca70:	350637bd 	.word	0x350637bd
 800ca74:	49742400 	.word	0x49742400
 800ca78:	08019084 	.word	0x08019084
 800ca7c:	08019294 	.word	0x08019294

0800ca80 <acc_radar_engine_common_sweep_w_dly_stitching_required>:
 800ca80:	8900      	ldrh	r0, [r0, #8]
 800ca82:	2801      	cmp	r0, #1
 800ca84:	bf94      	ite	ls
 800ca86:	2000      	movls	r0, #0
 800ca88:	2001      	movhi	r0, #1
 800ca8a:	4770      	bx	lr

0800ca8c <acc_radar_engine_common_get_timeout_ms>:
 800ca8c:	b510      	push	{r4, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	4604      	mov	r4, r0
 800ca92:	f7fb fe0d 	bl	80086b0 <acc_base_configuration_repetition_mode_get>
 800ca96:	2801      	cmp	r0, #1
 800ca98:	d00f      	beq.n	800caba <acc_radar_engine_common_get_timeout_ms+0x2e>
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f7fb fe10 	bl	80086c0 <acc_base_configuration_update_rate_get>
 800caa0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800cac8 <acc_radar_engine_common_get_timeout_ms+0x3c>
 800caa4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800caa8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800caac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800cab0:	edcd 7a01 	vstr	s15, [sp, #4]
 800cab4:	9801      	ldr	r0, [sp, #4]
 800cab6:	b002      	add	sp, #8
 800cab8:	bd10      	pop	{r4, pc}
 800caba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cabe:	9301      	str	r3, [sp, #4]
 800cac0:	9801      	ldr	r0, [sp, #4]
 800cac2:	b002      	add	sp, #8
 800cac4:	bd10      	pop	{r4, pc}
 800cac6:	bf00      	nop
 800cac8:	44fa0000 	.word	0x44fa0000

0800cacc <acc_radar_engine_common_frequency_to_main_clk>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	ed2d 8b02 	vpush	{d8}
 800cad2:	4604      	mov	r4, r0
 800cad4:	eeb0 8a40 	vmov.f32	s16, s0
 800cad8:	460d      	mov	r5, r1
 800cada:	f7fc f93b 	bl	8008d54 <acc_rss_integration_get_sensor_reference_frequency>
 800cade:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800cae2:	ecbd 8b02 	vpop	{d8}
 800cae6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800caea:	ee17 3a90 	vmov	r3, s15
 800caee:	0c1a      	lsrs	r2, r3, #16
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	602a      	str	r2, [r5, #0]
 800caf4:	6023      	str	r3, [r4, #0]
 800caf6:	bd38      	pop	{r3, r4, r5, pc}

0800caf8 <internal_buffer_processed_read>:
 800caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafc:	b085      	sub	sp, #20
 800cafe:	4698      	mov	r8, r3
 800cb00:	4683      	mov	fp, r0
 800cb02:	9101      	str	r1, [sp, #4]
 800cb04:	4616      	mov	r6, r2
 800cb06:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 800cb0a:	f7fc f929 	bl	8008d60 <acc_rss_integration_get_max_spi_transfer_size>
 800cb0e:	2300      	movs	r3, #0
 800cb10:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cb14:	9302      	str	r3, [sp, #8]
 800cb16:	f1b8 0f00 	cmp.w	r8, #0
 800cb1a:	d037      	beq.n	800cb8c <internal_buffer_processed_read+0x94>
 800cb1c:	429c      	cmp	r4, r3
 800cb1e:	bf14      	ite	ne
 800cb20:	f44f 42e0 	movne.w	r2, #28672	; 0x7000
 800cb24:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 800cb28:	0840      	lsrs	r0, r0, #1
 800cb2a:	469a      	mov	sl, r3
 800cb2c:	b213      	sxth	r3, r2
 800cb2e:	f1a0 0903 	sub.w	r9, r0, #3
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	9d01      	ldr	r5, [sp, #4]
 800cb36:	e01e      	b.n	800cb76 <internal_buffer_processed_read+0x7e>
 800cb38:	9b00      	ldr	r3, [sp, #0]
 800cb3a:	f8a5 a004 	strh.w	sl, [r5, #4]
 800cb3e:	b2a7      	uxth	r7, r4
 800cb40:	4333      	orrs	r3, r6
 800cb42:	1e7a      	subs	r2, r7, #1
 800cb44:	806a      	strh	r2, [r5, #2]
 800cb46:	802b      	strh	r3, [r5, #0]
 800cb48:	4629      	mov	r1, r5
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	4658      	mov	r0, fp
 800cb4e:	1ce2      	adds	r2, r4, #3
 800cb50:	f7fc f936 	bl	8008dc0 <acc_rss_integration_sensor_device_transfer>
 800cb54:	9802      	ldr	r0, [sp, #8]
 800cb56:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cb5a:	6028      	str	r0, [r5, #0]
 800cb5c:	80ab      	strh	r3, [r5, #4]
 800cb5e:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 800cb62:	443e      	add	r6, r7
 800cb64:	6828      	ldr	r0, [r5, #0]
 800cb66:	88ab      	ldrh	r3, [r5, #4]
 800cb68:	9002      	str	r0, [sp, #8]
 800cb6a:	ebb8 0804 	subs.w	r8, r8, r4
 800cb6e:	b2b6      	uxth	r6, r6
 800cb70:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cb74:	d00a      	beq.n	800cb8c <internal_buffer_processed_read+0x94>
 800cb76:	45c1      	cmp	r9, r8
 800cb78:	464c      	mov	r4, r9
 800cb7a:	bf28      	it	cs
 800cb7c:	4644      	movcs	r4, r8
 800cb7e:	45c1      	cmp	r9, r8
 800cb80:	d2da      	bcs.n	800cb38 <internal_buffer_processed_read+0x40>
 800cb82:	e000      	b.n	800cb86 <internal_buffer_processed_read+0x8e>
 800cb84:	3c01      	subs	r4, #1
 800cb86:	07e3      	lsls	r3, r4, #31
 800cb88:	d4fc      	bmi.n	800cb84 <internal_buffer_processed_read+0x8c>
 800cb8a:	e7d5      	b.n	800cb38 <internal_buffer_processed_read+0x40>
 800cb8c:	9801      	ldr	r0, [sp, #4]
 800cb8e:	3006      	adds	r0, #6
 800cb90:	b005      	add	sp, #20
 800cb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb96:	bf00      	nop

0800cb98 <acc_sensor_r2_get_max_header_length>:
 800cb98:	2003      	movs	r0, #3
 800cb9a:	4770      	bx	lr

0800cb9c <acc_sensor_r2_conf_write_instr>:
 800cb9c:	b530      	push	{r4, r5, lr}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	ac04      	add	r4, sp, #16
 800cba2:	f441 41a0 	orr.w	r1, r1, #20480	; 0x5000
 800cba6:	f824 1d08 	strh.w	r1, [r4, #-8]!
 800cbaa:	4605      	mov	r5, r0
 800cbac:	9201      	str	r2, [sp, #4]
 800cbae:	f10d 010a 	add.w	r1, sp, #10
 800cbb2:	a801      	add	r0, sp, #4
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	f7fd fa13 	bl	8009fe0 <acc_utils_uint32_to_transfer_buffer>
 800cbba:	4621      	mov	r1, r4
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	2203      	movs	r2, #3
 800cbc2:	f7fc f8fd 	bl	8008dc0 <acc_rss_integration_sensor_device_transfer>
 800cbc6:	b005      	add	sp, #20
 800cbc8:	bd30      	pop	{r4, r5, pc}
 800cbca:	bf00      	nop

0800cbcc <acc_sensor_r2_prepare_load_confmem>:
 800cbcc:	0849      	lsrs	r1, r1, #1
 800cbce:	b538      	push	{r3, r4, r5, lr}
 800cbd0:	6010      	str	r0, [r2, #0]
 800cbd2:	461c      	mov	r4, r3
 800cbd4:	6019      	str	r1, [r3, #0]
 800cbd6:	4615      	mov	r5, r2
 800cbd8:	f7fc f8c2 	bl	8008d60 <acc_rss_integration_get_max_spi_transfer_size>
 800cbdc:	6821      	ldr	r1, [r4, #0]
 800cbde:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 800cbe2:	d902      	bls.n	800cbea <acc_sensor_r2_prepare_load_confmem+0x1e>
 800cbe4:	f7fc f8bc 	bl	8008d60 <acc_rss_integration_get_max_spi_transfer_size>
 800cbe8:	0841      	lsrs	r1, r0, #1
 800cbea:	682b      	ldr	r3, [r5, #0]
 800cbec:	3901      	subs	r1, #1
 800cbee:	f021 0101 	bic.w	r1, r1, #1
 800cbf2:	3302      	adds	r3, #2
 800cbf4:	602b      	str	r3, [r5, #0]
 800cbf6:	6021      	str	r1, [r4, #0]
 800cbf8:	bd38      	pop	{r3, r4, r5, pc}
 800cbfa:	bf00      	nop

0800cbfc <acc_sensor_r2_load_confmem>:
 800cbfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc00:	b083      	sub	sp, #12
 800cc02:	1c5d      	adds	r5, r3, #1
 800cc04:	4607      	mov	r7, r0
 800cc06:	460c      	mov	r4, r1
 800cc08:	4691      	mov	r9, r2
 800cc0a:	f7fc f949 	bl	8008ea0 <acc_rss_integration_log_level>
 800cc0e:	2803      	cmp	r0, #3
 800cc10:	ea4f 0645 	mov.w	r6, r5, lsl #1
 800cc14:	d908      	bls.n	800cc28 <acc_sensor_r2_load_confmem+0x2c>
 800cc16:	4b12      	ldr	r3, [pc, #72]	; (800cc60 <acc_sensor_r2_load_confmem+0x64>)
 800cc18:	9400      	str	r4, [sp, #0]
 800cc1a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800cc1e:	4a11      	ldr	r2, [pc, #68]	; (800cc64 <acc_sensor_r2_load_confmem+0x68>)
 800cc20:	4911      	ldr	r1, [pc, #68]	; (800cc68 <acc_sensor_r2_load_confmem+0x6c>)
 800cc22:	463b      	mov	r3, r7
 800cc24:	2004      	movs	r0, #4
 800cc26:	47c0      	blx	r8
 800cc28:	f7fc f89a 	bl	8008d60 <acc_rss_integration_get_max_spi_transfer_size>
 800cc2c:	42b0      	cmp	r0, r6
 800cc2e:	d208      	bcs.n	800cc42 <acc_sensor_r2_load_confmem+0x46>
 800cc30:	4b0b      	ldr	r3, [pc, #44]	; (800cc60 <acc_sensor_r2_load_confmem+0x64>)
 800cc32:	4a0e      	ldr	r2, [pc, #56]	; (800cc6c <acc_sensor_r2_load_confmem+0x70>)
 800cc34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc36:	490c      	ldr	r1, [pc, #48]	; (800cc68 <acc_sensor_r2_load_confmem+0x6c>)
 800cc38:	2000      	movs	r0, #0
 800cc3a:	b003      	add	sp, #12
 800cc3c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc40:	4718      	bx	r3
 800cc42:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
 800cc46:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800cc4a:	4649      	mov	r1, r9
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	2300      	movs	r3, #0
 800cc50:	f8a9 4000 	strh.w	r4, [r9]
 800cc54:	b003      	add	sp, #12
 800cc56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc5a:	f7fc b8b1 	b.w	8008dc0 <acc_rss_integration_sensor_device_transfer>
 800cc5e:	bf00      	nop
 800cc60:	20001628 	.word	0x20001628
 800cc64:	080192e0 	.word	0x080192e0
 800cc68:	08019308 	.word	0x08019308
 800cc6c:	08019314 	.word	0x08019314

0800cc70 <acc_sensor_r2_buffer_processed_verify_size>:
 800cc70:	3103      	adds	r1, #3
 800cc72:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 800cc76:	bf2c      	ite	cs
 800cc78:	2001      	movcs	r0, #1
 800cc7a:	2000      	movcc	r0, #0
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop

0800cc80 <acc_sensor_r2_buffer_processed_read>:
 800cc80:	b510      	push	{r4, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	2400      	movs	r4, #0
 800cc86:	9400      	str	r4, [sp, #0]
 800cc88:	f7ff ff36 	bl	800caf8 <internal_buffer_processed_read>
 800cc8c:	b002      	add	sp, #8
 800cc8e:	bd10      	pop	{r4, pc}

0800cc90 <acc_sensor_manager_power_on_and_start_sensor>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	6985      	ldr	r5, [r0, #24]
 800cc94:	4604      	mov	r4, r0
 800cc96:	4628      	mov	r0, r5
 800cc98:	f7fc f868 	bl	8008d6c <acc_rss_integration_sensor_device_power_on>
 800cc9c:	4b0a      	ldr	r3, [pc, #40]	; (800ccc8 <acc_sensor_manager_power_on_and_start_sensor+0x38>)
 800cc9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cca0:	6819      	ldr	r1, [r3, #0]
 800cca2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800cca6:	00db      	lsls	r3, r3, #3
 800cca8:	3b48      	subs	r3, #72	; 0x48
 800ccaa:	4419      	add	r1, r3
 800ccac:	1d20      	adds	r0, r4, #4
 800ccae:	f000 ffa1 	bl	800dbf4 <acc_sweep_manager_start>
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	b118      	cbz	r0, 800ccbe <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	70e3      	strb	r3, [r4, #3]
 800ccba:	4630      	mov	r0, r6
 800ccbc:	bd70      	pop	{r4, r5, r6, pc}
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f7fc f85a 	bl	8008d78 <acc_rss_integration_sensor_device_power_off>
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	bd70      	pop	{r4, r5, r6, pc}
 800ccc8:	20001610 	.word	0x20001610

0800cccc <acc_sensor_manager_hibernate_enter>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	4603      	mov	r3, r0
 800ccd0:	3004      	adds	r0, #4
 800ccd2:	699d      	ldr	r5, [r3, #24]
 800ccd4:	f000 ffa6 	bl	800dc24 <acc_sweep_manager_wait_for_hibernate_ready>
 800ccd8:	4604      	mov	r4, r0
 800ccda:	b930      	cbnz	r0, 800ccea <acc_sensor_manager_hibernate_enter+0x1e>
 800ccdc:	4b05      	ldr	r3, [pc, #20]	; (800ccf4 <acc_sensor_manager_hibernate_enter+0x28>)
 800ccde:	4a06      	ldr	r2, [pc, #24]	; (800ccf8 <acc_sensor_manager_hibernate_enter+0x2c>)
 800cce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cce2:	4906      	ldr	r1, [pc, #24]	; (800ccfc <acc_sensor_manager_hibernate_enter+0x30>)
 800cce4:	4798      	blx	r3
 800cce6:	4620      	mov	r0, r4
 800cce8:	bd38      	pop	{r3, r4, r5, pc}
 800ccea:	4628      	mov	r0, r5
 800ccec:	f7fc f84a 	bl	8008d84 <acc_rss_integration_sensor_device_hibernate_enter>
 800ccf0:	e7f9      	b.n	800cce6 <acc_sensor_manager_hibernate_enter+0x1a>
 800ccf2:	bf00      	nop
 800ccf4:	20001628 	.word	0x20001628
 800ccf8:	080193ec 	.word	0x080193ec
 800ccfc:	0801940c 	.word	0x0801940c

0800cd00 <calibrate_sensor>:
 800cd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd04:	4f28      	ldr	r7, [pc, #160]	; (800cda8 <calibrate_sensor+0xa8>)
 800cd06:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800cdbc <calibrate_sensor+0xbc>
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 800cd10:	00e4      	lsls	r4, r4, #3
 800cd12:	3c48      	subs	r4, #72	; 0x48
 800cd14:	4423      	add	r3, r4
 800cd16:	2500      	movs	r5, #0
 800cd18:	b085      	sub	sp, #20
 800cd1a:	468a      	mov	sl, r1
 800cd1c:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
 800cd20:	f883 5042 	strb.w	r5, [r3, #66]	; 0x42
 800cd24:	f8c3 9044 	str.w	r9, [r3, #68]	; 0x44
 800cd28:	4606      	mov	r6, r0
 800cd2a:	4693      	mov	fp, r2
 800cd2c:	f7fc f81e 	bl	8008d6c <acc_rss_integration_sensor_device_power_on>
 800cd30:	4650      	mov	r0, sl
 800cd32:	f000 ff3b 	bl	800dbac <acc_sweep_manager_is_sensor_connected>
 800cd36:	b968      	cbnz	r0, 800cd54 <calibrate_sensor+0x54>
 800cd38:	4b1c      	ldr	r3, [pc, #112]	; (800cdac <calibrate_sensor+0xac>)
 800cd3a:	4a1d      	ldr	r2, [pc, #116]	; (800cdb0 <calibrate_sensor+0xb0>)
 800cd3c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800cd3e:	491d      	ldr	r1, [pc, #116]	; (800cdb4 <calibrate_sensor+0xb4>)
 800cd40:	4633      	mov	r3, r6
 800cd42:	4680      	mov	r8, r0
 800cd44:	47a0      	blx	r4
 800cd46:	4630      	mov	r0, r6
 800cd48:	f7fc f816 	bl	8008d78 <acc_rss_integration_sensor_device_power_off>
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	b005      	add	sp, #20
 800cd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd54:	4631      	mov	r1, r6
 800cd56:	200b      	movs	r0, #11
 800cd58:	f7fd fdc2 	bl	800a8e0 <acc_probes_execute_primitive_probe>
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	9501      	str	r5, [sp, #4]
 800cd60:	4659      	mov	r1, fp
 800cd62:	4650      	mov	r0, sl
 800cd64:	4422      	add	r2, r4
 800cd66:	ab01      	add	r3, sp, #4
 800cd68:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd6c:	9503      	str	r5, [sp, #12]
 800cd6e:	f000 ff21 	bl	800dbb4 <acc_sweep_manager_calibrate>
 800cd72:	4680      	mov	r8, r0
 800cd74:	b990      	cbnz	r0, 800cd9c <calibrate_sensor+0x9c>
 800cd76:	4b0d      	ldr	r3, [pc, #52]	; (800cdac <calibrate_sensor+0xac>)
 800cd78:	4a0f      	ldr	r2, [pc, #60]	; (800cdb8 <calibrate_sensor+0xb8>)
 800cd7a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800cd7c:	490d      	ldr	r1, [pc, #52]	; (800cdb4 <calibrate_sensor+0xb4>)
 800cd7e:	4633      	mov	r3, r6
 800cd80:	47a8      	blx	r5
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	441c      	add	r4, r3
 800cd86:	9a02      	ldr	r2, [sp, #8]
 800cd88:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cd8c:	6462      	str	r2, [r4, #68]	; 0x44
 800cd8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd92:	4631      	mov	r1, r6
 800cd94:	200c      	movs	r0, #12
 800cd96:	f7fd fda3 	bl	800a8e0 <acc_probes_execute_primitive_probe>
 800cd9a:	e7d4      	b.n	800cd46 <calibrate_sensor+0x46>
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	441c      	add	r4, r3
 800cda0:	2301      	movs	r3, #1
 800cda2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800cda6:	e7ee      	b.n	800cd86 <calibrate_sensor+0x86>
 800cda8:	20001610 	.word	0x20001610
 800cdac:	20001628 	.word	0x20001628
 800cdb0:	0801941c 	.word	0x0801941c
 800cdb4:	0801940c 	.word	0x0801940c
 800cdb8:	08019458 	.word	0x08019458
 800cdbc:	ff800000 	.word	0xff800000

0800cdc0 <acc_sensor_manager_activate>:
 800cdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc4:	4e19      	ldr	r6, [pc, #100]	; (800ce2c <acc_sensor_manager_activate+0x6c>)
 800cdc6:	7834      	ldrb	r4, [r6, #0]
 800cdc8:	b114      	cbz	r4, 800cdd0 <acc_sensor_manager_activate+0x10>
 800cdca:	4620      	mov	r0, r4
 800cdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd0:	f7fb ffba 	bl	8008d48 <acc_rss_integration_get_sensor_count>
 800cdd4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800cdd8:	00c0      	lsls	r0, r0, #3
 800cdda:	f240 1253 	movw	r2, #339	; 0x153
 800cdde:	4914      	ldr	r1, [pc, #80]	; (800ce30 <acc_sensor_manager_activate+0x70>)
 800cde0:	4f14      	ldr	r7, [pc, #80]	; (800ce34 <acc_sensor_manager_activate+0x74>)
 800cde2:	f7fc f807 	bl	8008df4 <acc_rss_integration_mem_alloc_debug>
 800cde6:	6038      	str	r0, [r7, #0]
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d0ee      	beq.n	800cdca <acc_sensor_manager_activate+0xa>
 800cdec:	4625      	mov	r5, r4
 800cdee:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800ce38 <acc_sensor_manager_activate+0x78>
 800cdf2:	e010      	b.n	800ce16 <acc_sensor_manager_activate+0x56>
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	2244      	movs	r2, #68	; 0x44
 800cdfe:	2100      	movs	r1, #0
 800ce00:	f005 ff96 	bl	8012d30 <memset>
 800ce04:	3401      	adds	r4, #1
 800ce06:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
 800ce0a:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
 800ce0e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 800ce12:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
 800ce16:	f7fb ff97 	bl	8008d48 <acc_rss_integration_get_sensor_count>
 800ce1a:	42a0      	cmp	r0, r4
 800ce1c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800ce20:	d8e8      	bhi.n	800cdf4 <acc_sensor_manager_activate+0x34>
 800ce22:	2401      	movs	r4, #1
 800ce24:	7034      	strb	r4, [r6, #0]
 800ce26:	4620      	mov	r0, r4
 800ce28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce2c:	2000160a 	.word	0x2000160a
 800ce30:	0801934c 	.word	0x0801934c
 800ce34:	20001610 	.word	0x20001610
 800ce38:	ff800000 	.word	0xff800000

0800ce3c <acc_sensor_manager_deactivate>:
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	4c05      	ldr	r4, [pc, #20]	; (800ce54 <acc_sensor_manager_deactivate+0x18>)
 800ce40:	7823      	ldrb	r3, [r4, #0]
 800ce42:	b903      	cbnz	r3, 800ce46 <acc_sensor_manager_deactivate+0xa>
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	4b04      	ldr	r3, [pc, #16]	; (800ce58 <acc_sensor_manager_deactivate+0x1c>)
 800ce48:	6818      	ldr	r0, [r3, #0]
 800ce4a:	f7fc f817 	bl	8008e7c <acc_rss_integration_mem_free>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	7023      	strb	r3, [r4, #0]
 800ce52:	bd10      	pop	{r4, pc}
 800ce54:	2000160a 	.word	0x2000160a
 800ce58:	20001610 	.word	0x20001610

0800ce5c <acc_sensor_manager_acquire_adc_data>:
 800ce5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce60:	7846      	ldrb	r6, [r0, #1]
 800ce62:	461c      	mov	r4, r3
 800ce64:	b13e      	cbz	r6, 800ce76 <acc_sensor_manager_acquire_adc_data+0x1a>
 800ce66:	2300      	movs	r3, #0
 800ce68:	7023      	strb	r3, [r4, #0]
 800ce6a:	7063      	strb	r3, [r4, #1]
 800ce6c:	70a3      	strb	r3, [r4, #2]
 800ce6e:	70e3      	strb	r3, [r4, #3]
 800ce70:	4630      	mov	r0, r6
 800ce72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce76:	f8df c104 	ldr.w	ip, [pc, #260]	; 800cf7c <acc_sensor_manager_acquire_adc_data+0x120>
 800ce7a:	f8d0 a018 	ldr.w	sl, [r0, #24]
 800ce7e:	f8dc c000 	ldr.w	ip, [ip]
 800ce82:	4605      	mov	r5, r0
 800ce84:	460f      	mov	r7, r1
 800ce86:	4690      	mov	r8, r2
 800ce88:	f1bc 0f00 	cmp.w	ip, #0
 800ce8c:	d014      	beq.n	800ceb8 <acc_sensor_manager_acquire_adc_data+0x5c>
 800ce8e:	f8dc 900c 	ldr.w	r9, [ip, #12]
 800ce92:	f1b9 0f00 	cmp.w	r9, #0
 800ce96:	d00f      	beq.n	800ceb8 <acc_sensor_manager_acquire_adc_data+0x5c>
 800ce98:	47c8      	blx	r9
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	d0e8      	beq.n	800ce70 <acc_sensor_manager_acquire_adc_data+0x14>
 800ce9e:	786e      	ldrb	r6, [r5, #1]
 800cea0:	2e00      	cmp	r6, #0
 800cea2:	d1e5      	bne.n	800ce70 <acc_sensor_manager_acquire_adc_data+0x14>
 800cea4:	4643      	mov	r3, r8
 800cea6:	463a      	mov	r2, r7
 800cea8:	4651      	mov	r1, sl
 800ceaa:	2002      	movs	r0, #2
 800ceac:	2601      	movs	r6, #1
 800ceae:	f7fd fce7 	bl	800a880 <acc_probes_execute_uint16>
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb8:	2300      	movs	r3, #0
 800ceba:	7023      	strb	r3, [r4, #0]
 800cebc:	7063      	strb	r3, [r4, #1]
 800cebe:	70a3      	strb	r3, [r4, #2]
 800cec0:	70e3      	strb	r3, [r4, #3]
 800cec2:	f895 9000 	ldrb.w	r9, [r5]
 800cec6:	f1b9 0f02 	cmp.w	r9, #2
 800ceca:	d033      	beq.n	800cf34 <acc_sensor_manager_acquire_adc_data+0xd8>
 800cecc:	f1b9 0f01 	cmp.w	r9, #1
 800ced0:	d036      	beq.n	800cf40 <acc_sensor_manager_acquire_adc_data+0xe4>
 800ced2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800ced4:	1d28      	adds	r0, r5, #4
 800ced6:	f000 feaf 	bl	800dc38 <acc_sweep_manager_acquire_adc_data>
 800ceda:	6843      	ldr	r3, [r0, #4]
 800cedc:	b943      	cbnz	r3, 800cef0 <acc_sensor_manager_acquire_adc_data+0x94>
 800cede:	4922      	ldr	r1, [pc, #136]	; (800cf68 <acc_sensor_manager_acquire_adc_data+0x10c>)
 800cee0:	4a22      	ldr	r2, [pc, #136]	; (800cf6c <acc_sensor_manager_acquire_adc_data+0x110>)
 800cee2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800cee4:	4922      	ldr	r1, [pc, #136]	; (800cf70 <acc_sensor_manager_acquire_adc_data+0x114>)
 800cee6:	4618      	mov	r0, r3
 800cee8:	47a0      	blx	r4
 800ceea:	4630      	mov	r0, r6
 800ceec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef0:	42bb      	cmp	r3, r7
 800cef2:	d134      	bne.n	800cf5e <acc_sensor_manager_acquire_adc_data+0x102>
 800cef4:	8843      	ldrh	r3, [r0, #2]
 800cef6:	4543      	cmp	r3, r8
 800cef8:	d12c      	bne.n	800cf54 <acc_sensor_manager_acquire_adc_data+0xf8>
 800cefa:	4b1e      	ldr	r3, [pc, #120]	; (800cf74 <acc_sensor_manager_acquire_adc_data+0x118>)
 800cefc:	68c1      	ldr	r1, [r0, #12]
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	7a06      	ldrb	r6, [r0, #8]
 800cf02:	eb0a 03ca 	add.w	r3, sl, sl, lsl #3
 800cf06:	00db      	lsls	r3, r3, #3
 800cf08:	3b48      	subs	r3, #72	; 0x48
 800cf0a:	4413      	add	r3, r2
 800cf0c:	7802      	ldrb	r2, [r0, #0]
 800cf0e:	7022      	strb	r2, [r4, #0]
 800cf10:	7842      	ldrb	r2, [r0, #1]
 800cf12:	7062      	strb	r2, [r4, #1]
 800cf14:	f1b9 0f02 	cmp.w	r9, #2
 800cf18:	7a42      	ldrb	r2, [r0, #9]
 800cf1a:	70e2      	strb	r2, [r4, #3]
 800cf1c:	70a6      	strb	r6, [r4, #2]
 800cf1e:	6459      	str	r1, [r3, #68]	; 0x44
 800cf20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf24:	d010      	beq.n	800cf48 <acc_sensor_manager_acquire_adc_data+0xec>
 800cf26:	f1b9 0f01 	cmp.w	r9, #1
 800cf2a:	d1b8      	bne.n	800ce9e <acc_sensor_manager_acquire_adc_data+0x42>
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	f7ff fecd 	bl	800cccc <acc_sensor_manager_hibernate_enter>
 800cf32:	e7b4      	b.n	800ce9e <acc_sensor_manager_acquire_adc_data+0x42>
 800cf34:	4628      	mov	r0, r5
 800cf36:	f7ff feab 	bl	800cc90 <acc_sensor_manager_power_on_and_start_sensor>
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	d1c9      	bne.n	800ced2 <acc_sensor_manager_acquire_adc_data+0x76>
 800cf3e:	e797      	b.n	800ce70 <acc_sensor_manager_acquire_adc_data+0x14>
 800cf40:	4650      	mov	r0, sl
 800cf42:	f7fb ff27 	bl	8008d94 <acc_rss_integration_sensor_device_hibernate_exit>
 800cf46:	e7c4      	b.n	800ced2 <acc_sensor_manager_acquire_adc_data+0x76>
 800cf48:	4650      	mov	r0, sl
 800cf4a:	f7fb ff15 	bl	8008d78 <acc_rss_integration_sensor_device_power_off>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	70eb      	strb	r3, [r5, #3]
 800cf52:	e7a4      	b.n	800ce9e <acc_sensor_manager_acquire_adc_data+0x42>
 800cf54:	f240 11c9 	movw	r1, #457	; 0x1c9
 800cf58:	4807      	ldr	r0, [pc, #28]	; (800cf78 <acc_sensor_manager_acquire_adc_data+0x11c>)
 800cf5a:	f7fb fa2f 	bl	80083bc <acc_assert_fail>
 800cf5e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800cf62:	4805      	ldr	r0, [pc, #20]	; (800cf78 <acc_sensor_manager_acquire_adc_data+0x11c>)
 800cf64:	f7fb fa2a 	bl	80083bc <acc_assert_fail>
 800cf68:	20001628 	.word	0x20001628
 800cf6c:	08019334 	.word	0x08019334
 800cf70:	0801940c 	.word	0x0801940c
 800cf74:	20001610 	.word	0x20001610
 800cf78:	0801934c 	.word	0x0801934c
 800cf7c:	2000160c 	.word	0x2000160c

0800cf80 <acc_sensor_manager_prepare_radar_engine>:
 800cf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf84:	1d06      	adds	r6, r0, #4
 800cf86:	4691      	mov	r9, r2
 800cf88:	4605      	mov	r5, r0
 800cf8a:	2234      	movs	r2, #52	; 0x34
 800cf8c:	460c      	mov	r4, r1
 800cf8e:	4630      	mov	r0, r6
 800cf90:	2100      	movs	r1, #0
 800cf92:	461f      	mov	r7, r3
 800cf94:	f005 fecc 	bl	8012d30 <memset>
 800cf98:	4b1c      	ldr	r3, [pc, #112]	; (800d00c <acc_sensor_manager_prepare_radar_engine+0x8c>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	464a      	mov	r2, r9
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	b36b      	cbz	r3, 800cffe <acc_sensor_manager_prepare_radar_engine+0x7e>
 800cfa2:	f8d3 8000 	ldr.w	r8, [r3]
 800cfa6:	f1b8 0f00 	cmp.w	r8, #0
 800cfaa:	d028      	beq.n	800cffe <acc_sensor_manager_prepare_radar_engine+0x7e>
 800cfac:	463b      	mov	r3, r7
 800cfae:	4621      	mov	r1, r4
 800cfb0:	47c0      	blx	r8
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f7fb fa7f 	bl	80084b8 <acc_base_configuration_power_save_mode_get>
 800cfba:	b1e8      	cbz	r0, 800cff8 <acc_sensor_manager_prepare_radar_engine+0x78>
 800cfbc:	2804      	cmp	r0, #4
 800cfbe:	d018      	beq.n	800cff2 <acc_sensor_manager_prepare_radar_engine+0x72>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	702b      	strb	r3, [r5, #0]
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f7fb fb73 	bl	80086b0 <acc_base_configuration_repetition_mode_get>
 800cfca:	fab0 f080 	clz	r0, r0
 800cfce:	0940      	lsrs	r0, r0, #5
 800cfd0:	7068      	strb	r0, [r5, #1]
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f7fb fcda 	bl	800898c <acc_base_configuration_asynchronous_measurement_get>
 800cfd8:	70a8      	strb	r0, [r5, #2]
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f7fb fa1c 	bl	8008418 <acc_base_configuration_sensor_get>
 800cfe0:	463a      	mov	r2, r7
 800cfe2:	4601      	mov	r1, r0
 800cfe4:	231c      	movs	r3, #28
 800cfe6:	2005      	movs	r0, #5
 800cfe8:	f7fd fc62 	bl	800a8b0 <acc_probes_execute_struct>
 800cfec:	4630      	mov	r0, r6
 800cfee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cff2:	2301      	movs	r3, #1
 800cff4:	702b      	strb	r3, [r5, #0]
 800cff6:	e7e5      	b.n	800cfc4 <acc_sensor_manager_prepare_radar_engine+0x44>
 800cff8:	2302      	movs	r3, #2
 800cffa:	702b      	strb	r3, [r5, #0]
 800cffc:	e7e2      	b.n	800cfc4 <acc_sensor_manager_prepare_radar_engine+0x44>
 800cffe:	463b      	mov	r3, r7
 800d000:	4621      	mov	r1, r4
 800d002:	f000 fd3b 	bl	800da7c <acc_sweep_manager_prepare>
 800d006:	4606      	mov	r6, r0
 800d008:	e7d4      	b.n	800cfb4 <acc_sensor_manager_prepare_radar_engine+0x34>
 800d00a:	bf00      	nop
 800d00c:	2000160c 	.word	0x2000160c

0800d010 <acc_sensor_manager_prepare_measurement>:
 800d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	4680      	mov	r8, r0
 800d016:	b083      	sub	sp, #12
 800d018:	4608      	mov	r0, r1
 800d01a:	460c      	mov	r4, r1
 800d01c:	4616      	mov	r6, r2
 800d01e:	469a      	mov	sl, r3
 800d020:	f7fb f9fa 	bl	8008418 <acc_base_configuration_sensor_get>
 800d024:	4605      	mov	r5, r0
 800d026:	4620      	mov	r0, r4
 800d028:	f7fb fca8 	bl	800897c <acc_base_configuration_noise_deviation_override_get>
 800d02c:	4f34      	ldr	r7, [pc, #208]	; (800d100 <acc_sensor_manager_prepare_measurement+0xf0>)
 800d02e:	4b35      	ldr	r3, [pc, #212]	; (800d104 <acc_sensor_manager_prepare_measurement+0xf4>)
 800d030:	4a35      	ldr	r2, [pc, #212]	; (800d108 <acc_sensor_manager_prepare_measurement+0xf8>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800d038:	4681      	mov	r9, r0
 800d03a:	00c9      	lsls	r1, r1, #3
 800d03c:	6838      	ldr	r0, [r7, #0]
 800d03e:	3948      	subs	r1, #72	; 0x48
 800d040:	4401      	add	r1, r0
 800d042:	2000      	movs	r0, #0
 800d044:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
 800d048:	644a      	str	r2, [r1, #68]	; 0x44
 800d04a:	b1cb      	cbz	r3, 800d080 <acc_sensor_manager_prepare_measurement+0x70>
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	b1bb      	cbz	r3, 800d080 <acc_sensor_manager_prepare_measurement+0x70>
 800d050:	4652      	mov	r2, sl
 800d052:	4620      	mov	r0, r4
 800d054:	4631      	mov	r1, r6
 800d056:	4798      	blx	r3
 800d058:	4603      	mov	r3, r0
 800d05a:	b918      	cbnz	r0, 800d064 <acc_sensor_manager_prepare_measurement+0x54>
 800d05c:	4618      	mov	r0, r3
 800d05e:	b003      	add	sp, #12
 800d060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d064:	f1b9 0f00 	cmp.w	r9, #0
 800d068:	d112      	bne.n	800d090 <acc_sensor_manager_prepare_measurement+0x80>
 800d06a:	4632      	mov	r2, r6
 800d06c:	4629      	mov	r1, r5
 800d06e:	2320      	movs	r3, #32
 800d070:	200e      	movs	r0, #14
 800d072:	f7fd fc1d 	bl	800a8b0 <acc_probes_execute_struct>
 800d076:	2301      	movs	r3, #1
 800d078:	4618      	mov	r0, r3
 800d07a:	b003      	add	sp, #12
 800d07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d080:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
 800d084:	f8c8 a038 	str.w	sl, [r8, #56]	; 0x38
 800d088:	b12b      	cbz	r3, 800d096 <acc_sensor_manager_prepare_measurement+0x86>
 800d08a:	f1b9 0f00 	cmp.w	r9, #0
 800d08e:	d011      	beq.n	800d0b4 <acc_sensor_manager_prepare_measurement+0xa4>
 800d090:	f8a6 9014 	strh.w	r9, [r6, #20]
 800d094:	e7e9      	b.n	800d06a <acc_sensor_manager_prepare_measurement+0x5a>
 800d096:	f108 0b04 	add.w	fp, r8, #4
 800d09a:	4652      	mov	r2, sl
 800d09c:	4659      	mov	r1, fp
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f7ff fe2e 	bl	800cd00 <calibrate_sensor>
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d1f0      	bne.n	800d08a <acc_sensor_manager_prepare_measurement+0x7a>
 800d0a8:	9001      	str	r0, [sp, #4]
 800d0aa:	4658      	mov	r0, fp
 800d0ac:	f000 fd76 	bl	800db9c <acc_sweep_manager_release>
 800d0b0:	9b01      	ldr	r3, [sp, #4]
 800d0b2:	e7d3      	b.n	800d05c <acc_sensor_manager_prepare_measurement+0x4c>
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	f7fb fc4f 	bl	8008958 <acc_base_configuration_noise_level_normalization_get>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d0d5      	beq.n	800d06a <acc_sensor_manager_prepare_measurement+0x5a>
 800d0be:	f8d8 4018 	ldr.w	r4, [r8, #24]
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f7fb fe52 	bl	8008d6c <acc_rss_integration_sensor_device_power_on>
 800d0c8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800d0d2:	00db      	lsls	r3, r3, #3
 800d0d4:	3b48      	subs	r3, #72	; 0x48
 800d0d6:	f108 0804 	add.w	r8, r8, #4
 800d0da:	4419      	add	r1, r3
 800d0dc:	4640      	mov	r0, r8
 800d0de:	f106 0314 	add.w	r3, r6, #20
 800d0e2:	f000 fd71 	bl	800dbc8 <acc_sweep_manager_measure_noise>
 800d0e6:	9001      	str	r0, [sp, #4]
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f7fb fe45 	bl	8008d78 <acc_rss_integration_sensor_device_power_off>
 800d0ee:	9b01      	ldr	r3, [sp, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1ba      	bne.n	800d06a <acc_sensor_manager_prepare_measurement+0x5a>
 800d0f4:	4640      	mov	r0, r8
 800d0f6:	f000 fd51 	bl	800db9c <acc_sweep_manager_release>
 800d0fa:	9b01      	ldr	r3, [sp, #4]
 800d0fc:	e7ae      	b.n	800d05c <acc_sensor_manager_prepare_measurement+0x4c>
 800d0fe:	bf00      	nop
 800d100:	20001610 	.word	0x20001610
 800d104:	2000160c 	.word	0x2000160c
 800d108:	ff800000 	.word	0xff800000

0800d10c <acc_sensor_manager_start_measurement>:
 800d10c:	4b1a      	ldr	r3, [pc, #104]	; (800d178 <acc_sensor_manager_start_measurement+0x6c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	b570      	push	{r4, r5, r6, lr}
 800d112:	4604      	mov	r4, r0
 800d114:	b123      	cbz	r3, 800d120 <acc_sensor_manager_start_measurement+0x14>
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	b113      	cbz	r3, 800d120 <acc_sensor_manager_start_measurement+0x14>
 800d11a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d11e:	4718      	bx	r3
 800d120:	7823      	ldrb	r3, [r4, #0]
 800d122:	2b02      	cmp	r3, #2
 800d124:	d008      	beq.n	800d138 <acc_sensor_manager_start_measurement+0x2c>
 800d126:	4620      	mov	r0, r4
 800d128:	f7ff fdb2 	bl	800cc90 <acc_sensor_manager_power_on_and_start_sensor>
 800d12c:	b188      	cbz	r0, 800d152 <acc_sensor_manager_start_measurement+0x46>
 800d12e:	78a3      	ldrb	r3, [r4, #2]
 800d130:	b12b      	cbz	r3, 800d13e <acc_sensor_manager_start_measurement+0x32>
 800d132:	7823      	ldrb	r3, [r4, #0]
 800d134:	2b01      	cmp	r3, #1
 800d136:	d00f      	beq.n	800d158 <acc_sensor_manager_start_measurement+0x4c>
 800d138:	2501      	movs	r5, #1
 800d13a:	4628      	mov	r0, r5
 800d13c:	bd70      	pop	{r4, r5, r6, pc}
 800d13e:	1d25      	adds	r5, r4, #4
 800d140:	4628      	mov	r0, r5
 800d142:	f000 fd75 	bl	800dc30 <acc_sweep_manager_measure>
 800d146:	b120      	cbz	r0, 800d152 <acc_sensor_manager_start_measurement+0x46>
 800d148:	4628      	mov	r0, r5
 800d14a:	f000 fd65 	bl	800dc18 <acc_sweep_manager_wait_for_data>
 800d14e:	2800      	cmp	r0, #0
 800d150:	d1ef      	bne.n	800d132 <acc_sensor_manager_start_measurement+0x26>
 800d152:	2500      	movs	r5, #0
 800d154:	4628      	mov	r0, r5
 800d156:	bd70      	pop	{r4, r5, r6, pc}
 800d158:	1d25      	adds	r5, r4, #4
 800d15a:	4628      	mov	r0, r5
 800d15c:	f000 fd5c 	bl	800dc18 <acc_sweep_manager_wait_for_data>
 800d160:	2800      	cmp	r0, #0
 800d162:	d0f6      	beq.n	800d152 <acc_sensor_manager_start_measurement+0x46>
 800d164:	4628      	mov	r0, r5
 800d166:	f000 fd63 	bl	800dc30 <acc_sweep_manager_measure>
 800d16a:	4605      	mov	r5, r0
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d0f0      	beq.n	800d152 <acc_sensor_manager_start_measurement+0x46>
 800d170:	4620      	mov	r0, r4
 800d172:	f7ff fdab 	bl	800cccc <acc_sensor_manager_hibernate_enter>
 800d176:	e7e0      	b.n	800d13a <acc_sensor_manager_start_measurement+0x2e>
 800d178:	2000160c 	.word	0x2000160c

0800d17c <acc_sensor_manager_stop_measurement>:
 800d17c:	78c3      	ldrb	r3, [r0, #3]
 800d17e:	b903      	cbnz	r3, 800d182 <acc_sensor_manager_stop_measurement+0x6>
 800d180:	4770      	bx	lr
 800d182:	b510      	push	{r4, lr}
 800d184:	4604      	mov	r4, r0
 800d186:	6980      	ldr	r0, [r0, #24]
 800d188:	f7fb fdf6 	bl	8008d78 <acc_rss_integration_sensor_device_power_off>
 800d18c:	2300      	movs	r3, #0
 800d18e:	70e3      	strb	r3, [r4, #3]
 800d190:	bd10      	pop	{r4, pc}
 800d192:	bf00      	nop

0800d194 <acc_sensor_manager_release_measurement>:
 800d194:	6983      	ldr	r3, [r0, #24]
 800d196:	b173      	cbz	r3, 800d1b6 <acc_sensor_manager_release_measurement+0x22>
 800d198:	4a07      	ldr	r2, [pc, #28]	; (800d1b8 <acc_sensor_manager_release_measurement+0x24>)
 800d19a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800d19e:	6812      	ldr	r2, [r2, #0]
 800d1a0:	00db      	lsls	r3, r3, #3
 800d1a2:	3b48      	subs	r3, #72	; 0x48
 800d1a4:	4413      	add	r3, r2
 800d1a6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d1aa:	b90a      	cbnz	r2, 800d1b0 <acc_sensor_manager_release_measurement+0x1c>
 800d1ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1b0:	3004      	adds	r0, #4
 800d1b2:	f000 bcf3 	b.w	800db9c <acc_sweep_manager_release>
 800d1b6:	4770      	bx	lr
 800d1b8:	20001610 	.word	0x20001610

0800d1bc <acc_sensor_manager_calibration_context_get>:
 800d1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1be:	b091      	sub	sp, #68	; 0x44
 800d1c0:	4604      	mov	r4, r0
 800d1c2:	2234      	movs	r2, #52	; 0x34
 800d1c4:	460e      	mov	r6, r1
 800d1c6:	a803      	add	r0, sp, #12
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	f005 fdb1 	bl	8012d30 <memset>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	a803      	add	r0, sp, #12
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	f000 fc51 	bl	800da7c <acc_sweep_manager_prepare>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d037      	beq.n	800d24e <acc_sensor_manager_calibration_context_get+0x92>
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f7fb f91a 	bl	8008418 <acc_base_configuration_sensor_get>
 800d1e4:	4604      	mov	r4, r0
 800d1e6:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 800d1ea:	4601      	mov	r1, r0
 800d1ec:	9002      	str	r0, [sp, #8]
 800d1ee:	2500      	movs	r5, #0
 800d1f0:	f240 23cf 	movw	r3, #719	; 0x2cf
 800d1f4:	4a28      	ldr	r2, [pc, #160]	; (800d298 <acc_sensor_manager_calibration_context_get+0xdc>)
 800d1f6:	9501      	str	r5, [sp, #4]
 800d1f8:	2001      	movs	r0, #1
 800d1fa:	f7fb fe21 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 800d1fe:	9001      	str	r0, [sp, #4]
 800d200:	2800      	cmp	r0, #0
 800d202:	d03c      	beq.n	800d27e <acc_sensor_manager_calibration_context_get+0xc2>
 800d204:	aa01      	add	r2, sp, #4
 800d206:	a903      	add	r1, sp, #12
 800d208:	4620      	mov	r0, r4
 800d20a:	f7ff fd79 	bl	800cd00 <calibrate_sensor>
 800d20e:	4605      	mov	r5, r0
 800d210:	a803      	add	r0, sp, #12
 800d212:	f000 fcc3 	bl	800db9c <acc_sweep_manager_release>
 800d216:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800d21a:	00db      	lsls	r3, r3, #3
 800d21c:	3b48      	subs	r3, #72	; 0x48
 800d21e:	4a1f      	ldr	r2, [pc, #124]	; (800d29c <acc_sensor_manager_calibration_context_get+0xe0>)
 800d220:	b3b5      	cbz	r5, 800d290 <acc_sensor_manager_calibration_context_get+0xd4>
 800d222:	6810      	ldr	r0, [r2, #0]
 800d224:	4403      	add	r3, r0
 800d226:	461a      	mov	r2, r3
 800d228:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d22c:	6817      	ldr	r7, [r2, #0]
 800d22e:	6854      	ldr	r4, [r2, #4]
 800d230:	6890      	ldr	r0, [r2, #8]
 800d232:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800d236:	f8c6 c00c 	str.w	ip, [r6, #12]
 800d23a:	3210      	adds	r2, #16
 800d23c:	428a      	cmp	r2, r1
 800d23e:	6037      	str	r7, [r6, #0]
 800d240:	6074      	str	r4, [r6, #4]
 800d242:	60b0      	str	r0, [r6, #8]
 800d244:	f106 0610 	add.w	r6, r6, #16
 800d248:	d1f0      	bne.n	800d22c <acc_sensor_manager_calibration_context_get+0x70>
 800d24a:	9801      	ldr	r0, [sp, #4]
 800d24c:	e00d      	b.n	800d26a <acc_sensor_manager_calibration_context_get+0xae>
 800d24e:	4605      	mov	r5, r0
 800d250:	4620      	mov	r0, r4
 800d252:	f7fb f8e1 	bl	8008418 <acc_base_configuration_sensor_get>
 800d256:	4b11      	ldr	r3, [pc, #68]	; (800d29c <acc_sensor_manager_calibration_context_get+0xe0>)
 800d258:	9501      	str	r5, [sp, #4]
 800d25a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d25e:	00c0      	lsls	r0, r0, #3
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	9502      	str	r5, [sp, #8]
 800d264:	3848      	subs	r0, #72	; 0x48
 800d266:	4403      	add	r3, r0
 800d268:	4628      	mov	r0, r5
 800d26a:	2200      	movs	r2, #0
 800d26c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d274:	f7fb fe02 	bl	8008e7c <acc_rss_integration_mem_free>
 800d278:	4628      	mov	r0, r5
 800d27a:	b011      	add	sp, #68	; 0x44
 800d27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d27e:	4a07      	ldr	r2, [pc, #28]	; (800d29c <acc_sensor_manager_calibration_context_get+0xe0>)
 800d280:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800d284:	00db      	lsls	r3, r3, #3
 800d286:	6812      	ldr	r2, [r2, #0]
 800d288:	3b48      	subs	r3, #72	; 0x48
 800d28a:	4413      	add	r3, r2
 800d28c:	4605      	mov	r5, r0
 800d28e:	e7ec      	b.n	800d26a <acc_sensor_manager_calibration_context_get+0xae>
 800d290:	6812      	ldr	r2, [r2, #0]
 800d292:	9801      	ldr	r0, [sp, #4]
 800d294:	4413      	add	r3, r2
 800d296:	e7e8      	b.n	800d26a <acc_sensor_manager_calibration_context_get+0xae>
 800d298:	0801934c 	.word	0x0801934c
 800d29c:	20001610 	.word	0x20001610

0800d2a0 <acc_sensor_manager_calibration_context_set>:
 800d2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a4:	b093      	sub	sp, #76	; 0x4c
 800d2a6:	4689      	mov	r9, r1
 800d2a8:	9201      	str	r2, [sp, #4]
 800d2aa:	4680      	mov	r8, r0
 800d2ac:	f7fb f8b4 	bl	8008418 <acc_base_configuration_sensor_get>
 800d2b0:	4d74      	ldr	r5, [pc, #464]	; (800d484 <acc_sensor_manager_calibration_context_set+0x1e4>)
 800d2b2:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 800d2b6:	00e4      	lsls	r4, r4, #3
 800d2b8:	682b      	ldr	r3, [r5, #0]
 800d2ba:	3c48      	subs	r4, #72	; 0x48
 800d2bc:	4423      	add	r3, r4
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d2c4:	4606      	mov	r6, r0
 800d2c6:	4649      	mov	r1, r9
 800d2c8:	f109 0240 	add.w	r2, r9, #64	; 0x40
 800d2cc:	f8d1 e000 	ldr.w	lr, [r1]
 800d2d0:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800d2d4:	6888      	ldr	r0, [r1, #8]
 800d2d6:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800d2da:	f8c3 900c 	str.w	r9, [r3, #12]
 800d2de:	3110      	adds	r1, #16
 800d2e0:	4291      	cmp	r1, r2
 800d2e2:	f8c3 e000 	str.w	lr, [r3]
 800d2e6:	f8c3 c004 	str.w	ip, [r3, #4]
 800d2ea:	6098      	str	r0, [r3, #8]
 800d2ec:	f103 0310 	add.w	r3, r3, #16
 800d2f0:	d1ec      	bne.n	800d2cc <acc_sensor_manager_calibration_context_set+0x2c>
 800d2f2:	2234      	movs	r2, #52	; 0x34
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	a805      	add	r0, sp, #20
 800d2f8:	f005 fd1a 	bl	8012d30 <memset>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	a805      	add	r0, sp, #20
 800d300:	461a      	mov	r2, r3
 800d302:	4641      	mov	r1, r8
 800d304:	f000 fbba 	bl	800da7c <acc_sweep_manager_prepare>
 800d308:	4681      	mov	r9, r0
 800d30a:	b9c0      	cbnz	r0, 800d33e <acc_sensor_manager_calibration_context_set+0x9e>
 800d30c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 800d310:	f7fb fdc6 	bl	8008ea0 <acc_rss_integration_log_level>
 800d314:	2801      	cmp	r0, #1
 800d316:	d905      	bls.n	800d324 <acc_sensor_manager_calibration_context_set+0x84>
 800d318:	4b5b      	ldr	r3, [pc, #364]	; (800d488 <acc_sensor_manager_calibration_context_set+0x1e8>)
 800d31a:	4a5c      	ldr	r2, [pc, #368]	; (800d48c <acc_sensor_manager_calibration_context_set+0x1ec>)
 800d31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d31e:	495c      	ldr	r1, [pc, #368]	; (800d490 <acc_sensor_manager_calibration_context_set+0x1f0>)
 800d320:	2002      	movs	r0, #2
 800d322:	4798      	blx	r3
 800d324:	9b01      	ldr	r3, [sp, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	f040 8084 	bne.w	800d434 <acc_sensor_manager_calibration_context_set+0x194>
 800d32c:	9803      	ldr	r0, [sp, #12]
 800d32e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d332:	f7fb fda3 	bl	8008e7c <acc_rss_integration_mem_free>
 800d336:	4648      	mov	r0, r9
 800d338:	b013      	add	sp, #76	; 0x4c
 800d33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33e:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 800d342:	4601      	mov	r1, r0
 800d344:	9004      	str	r0, [sp, #16]
 800d346:	2700      	movs	r7, #0
 800d348:	f240 3309 	movw	r3, #777	; 0x309
 800d34c:	4a51      	ldr	r2, [pc, #324]	; (800d494 <acc_sensor_manager_calibration_context_set+0x1f4>)
 800d34e:	9703      	str	r7, [sp, #12]
 800d350:	2001      	movs	r0, #1
 800d352:	f7fb fd75 	bl	8008e40 <acc_rss_integration_mem_calloc_debug>
 800d356:	9003      	str	r0, [sp, #12]
 800d358:	2800      	cmp	r0, #0
 800d35a:	d0d9      	beq.n	800d310 <acc_sensor_manager_calibration_context_set+0x70>
 800d35c:	4640      	mov	r0, r8
 800d35e:	463a      	mov	r2, r7
 800d360:	f10d 010b 	add.w	r1, sp, #11
 800d364:	f7fb fb48 	bl	80089f8 <acc_base_configuration_cca_get>
 800d368:	2800      	cmp	r0, #0
 800d36a:	d04c      	beq.n	800d406 <acc_sensor_manager_calibration_context_set+0x166>
 800d36c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d048      	beq.n	800d406 <acc_sensor_manager_calibration_context_set+0x166>
 800d374:	4630      	mov	r0, r6
 800d376:	f7fb fcf9 	bl	8008d6c <acc_rss_integration_sensor_device_power_on>
 800d37a:	6829      	ldr	r1, [r5, #0]
 800d37c:	f10d 080c 	add.w	r8, sp, #12
 800d380:	4421      	add	r1, r4
 800d382:	4642      	mov	r2, r8
 800d384:	a805      	add	r0, sp, #20
 800d386:	f000 fc35 	bl	800dbf4 <acc_sweep_manager_start>
 800d38a:	f04f 0a06 	mov.w	sl, #6
 800d38e:	2800      	cmp	r0, #0
 800d390:	d046      	beq.n	800d420 <acc_sensor_manager_calibration_context_set+0x180>
 800d392:	f04f 0b00 	mov.w	fp, #0
 800d396:	4641      	mov	r1, r8
 800d398:	a805      	add	r0, sp, #20
 800d39a:	f000 fc4d 	bl	800dc38 <acc_sweep_manager_acquire_adc_data>
 800d39e:	6843      	ldr	r3, [r0, #4]
 800d3a0:	f10b 0b01 	add.w	fp, fp, #1
 800d3a4:	fa1f f18b 	uxth.w	r1, fp
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d039      	beq.n	800d420 <acc_sensor_manager_calibration_context_set+0x180>
 800d3ac:	b117      	cbz	r7, 800d3b4 <acc_sensor_manager_calibration_context_set+0x114>
 800d3ae:	7843      	ldrb	r3, [r0, #1]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d135      	bne.n	800d420 <acc_sensor_manager_calibration_context_set+0x180>
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	7a42      	ldrb	r2, [r0, #9]
 800d3b8:	68c0      	ldr	r0, [r0, #12]
 800d3ba:	4423      	add	r3, r4
 800d3bc:	464f      	mov	r7, r9
 800d3be:	6458      	str	r0, [r3, #68]	; 0x44
 800d3c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3c4:	bb62      	cbnz	r2, 800d420 <acc_sensor_manager_calibration_context_set+0x180>
 800d3c6:	458a      	cmp	sl, r1
 800d3c8:	d8e5      	bhi.n	800d396 <acc_sensor_manager_calibration_context_set+0xf6>
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	f7fb fcd4 	bl	8008d78 <acc_rss_integration_sensor_device_power_off>
 800d3d0:	a805      	add	r0, sp, #20
 800d3d2:	f000 fbe3 	bl	800db9c <acc_sweep_manager_release>
 800d3d6:	682b      	ldr	r3, [r5, #0]
 800d3d8:	441c      	add	r4, r3
 800d3da:	2301      	movs	r3, #1
 800d3dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d3e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d3e4:	f7fb fd5c 	bl	8008ea0 <acc_rss_integration_log_level>
 800d3e8:	2802      	cmp	r0, #2
 800d3ea:	d905      	bls.n	800d3f8 <acc_sensor_manager_calibration_context_set+0x158>
 800d3ec:	4b26      	ldr	r3, [pc, #152]	; (800d488 <acc_sensor_manager_calibration_context_set+0x1e8>)
 800d3ee:	4a2a      	ldr	r2, [pc, #168]	; (800d498 <acc_sensor_manager_calibration_context_set+0x1f8>)
 800d3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f2:	4927      	ldr	r1, [pc, #156]	; (800d490 <acc_sensor_manager_calibration_context_set+0x1f0>)
 800d3f4:	2003      	movs	r0, #3
 800d3f6:	4798      	blx	r3
 800d3f8:	9803      	ldr	r0, [sp, #12]
 800d3fa:	f7fb fd3f 	bl	8008e7c <acc_rss_integration_mem_free>
 800d3fe:	4648      	mov	r0, r9
 800d400:	b013      	add	sp, #76	; 0x4c
 800d402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d406:	4630      	mov	r0, r6
 800d408:	f7fb fcb0 	bl	8008d6c <acc_rss_integration_sensor_device_power_on>
 800d40c:	6829      	ldr	r1, [r5, #0]
 800d40e:	f10d 080c 	add.w	r8, sp, #12
 800d412:	4421      	add	r1, r4
 800d414:	4642      	mov	r2, r8
 800d416:	a805      	add	r0, sp, #20
 800d418:	f000 fbec 	bl	800dbf4 <acc_sweep_manager_start>
 800d41c:	4607      	mov	r7, r0
 800d41e:	b930      	cbnz	r0, 800d42e <acc_sensor_manager_calibration_context_set+0x18e>
 800d420:	4630      	mov	r0, r6
 800d422:	f7fb fca9 	bl	8008d78 <acc_rss_integration_sensor_device_power_off>
 800d426:	a805      	add	r0, sp, #20
 800d428:	f000 fbb8 	bl	800db9c <acc_sweep_manager_release>
 800d42c:	e770      	b.n	800d310 <acc_sensor_manager_calibration_context_set+0x70>
 800d42e:	f04f 0a05 	mov.w	sl, #5
 800d432:	e7ae      	b.n	800d392 <acc_sensor_manager_calibration_context_set+0xf2>
 800d434:	f7fb fd34 	bl	8008ea0 <acc_rss_integration_log_level>
 800d438:	2801      	cmp	r0, #1
 800d43a:	d905      	bls.n	800d448 <acc_sensor_manager_calibration_context_set+0x1a8>
 800d43c:	4b12      	ldr	r3, [pc, #72]	; (800d488 <acc_sensor_manager_calibration_context_set+0x1e8>)
 800d43e:	4a17      	ldr	r2, [pc, #92]	; (800d49c <acc_sensor_manager_calibration_context_set+0x1fc>)
 800d440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d442:	4913      	ldr	r1, [pc, #76]	; (800d490 <acc_sensor_manager_calibration_context_set+0x1f0>)
 800d444:	2002      	movs	r0, #2
 800d446:	4798      	blx	r3
 800d448:	682b      	ldr	r3, [r5, #0]
 800d44a:	441c      	add	r4, r3
 800d44c:	2301      	movs	r3, #1
 800d44e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d452:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d456:	f7fb fd23 	bl	8008ea0 <acc_rss_integration_log_level>
 800d45a:	2802      	cmp	r0, #2
 800d45c:	d90e      	bls.n	800d47c <acc_sensor_manager_calibration_context_set+0x1dc>
 800d45e:	4b0a      	ldr	r3, [pc, #40]	; (800d488 <acc_sensor_manager_calibration_context_set+0x1e8>)
 800d460:	4a0d      	ldr	r2, [pc, #52]	; (800d498 <acc_sensor_manager_calibration_context_set+0x1f8>)
 800d462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d464:	490a      	ldr	r1, [pc, #40]	; (800d490 <acc_sensor_manager_calibration_context_set+0x1f0>)
 800d466:	2003      	movs	r0, #3
 800d468:	4798      	blx	r3
 800d46a:	9803      	ldr	r0, [sp, #12]
 800d46c:	f7fb fd06 	bl	8008e7c <acc_rss_integration_mem_free>
 800d470:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d474:	4648      	mov	r0, r9
 800d476:	b013      	add	sp, #76	; 0x4c
 800d478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47c:	9803      	ldr	r0, [sp, #12]
 800d47e:	f7fb fcfd 	bl	8008e7c <acc_rss_integration_mem_free>
 800d482:	e7f5      	b.n	800d470 <acc_sensor_manager_calibration_context_set+0x1d0>
 800d484:	20001610 	.word	0x20001610
 800d488:	20001628 	.word	0x20001628
 800d48c:	0801937c 	.word	0x0801937c
 800d490:	0801940c 	.word	0x0801940c
 800d494:	0801934c 	.word	0x0801934c
 800d498:	080193d4 	.word	0x080193d4
 800d49c:	080193ac 	.word	0x080193ac

0800d4a0 <acc_sensor_manager_get_sensor_id>:
 800d4a0:	6980      	ldr	r0, [r0, #24]
 800d4a2:	4770      	bx	lr

0800d4a4 <acc_sensor_protocol_r2_prepare_load>:
 800d4a4:	b570      	push	{r4, r5, r6, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	460c      	mov	r4, r1
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	4611      	mov	r1, r2
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	ac04      	add	r4, sp, #16
 800d4b4:	9b08      	ldr	r3, [sp, #32]
 800d4b6:	f7ff fb89 	bl	800cbcc <acc_sensor_r2_prepare_load_confmem>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	f824 3d02 	strh.w	r3, [r4, #-2]!
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	4622      	mov	r2, r4
 800d4c4:	212a      	movs	r1, #42	; 0x2a
 800d4c6:	f004 f9b1 	bl	801182c <acc_sensor_reg_read>
 800d4ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d4ce:	065b      	lsls	r3, r3, #25
 800d4d0:	d419      	bmi.n	800d506 <acc_sensor_protocol_r2_prepare_load+0x62>
 800d4d2:	4622      	mov	r2, r4
 800d4d4:	2111      	movs	r1, #17
 800d4d6:	2400      	movs	r4, #0
 800d4d8:	4628      	mov	r0, r5
 800d4da:	f8ad 400e 	strh.w	r4, [sp, #14]
 800d4de:	f004 f9a5 	bl	801182c <acc_sensor_reg_read>
 800d4e2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d4e6:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 800d4ea:	d01a      	beq.n	800d522 <acc_sensor_protocol_r2_prepare_load+0x7e>
 800d4ec:	4b1a      	ldr	r3, [pc, #104]	; (800d558 <acc_sensor_protocol_r2_prepare_load+0xb4>)
 800d4ee:	4a1b      	ldr	r2, [pc, #108]	; (800d55c <acc_sensor_protocol_r2_prepare_load+0xb8>)
 800d4f0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800d4f2:	491b      	ldr	r1, [pc, #108]	; (800d560 <acc_sensor_protocol_r2_prepare_load+0xbc>)
 800d4f4:	462b      	mov	r3, r5
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	47b0      	blx	r6
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	f004 fa06 	bl	801190c <acc_sensor_diagnostics_r2_sensor_status>
 800d500:	4620      	mov	r0, r4
 800d502:	b004      	add	sp, #16
 800d504:	bd70      	pop	{r4, r5, r6, pc}
 800d506:	f7fb fccb 	bl	8008ea0 <acc_rss_integration_log_level>
 800d50a:	b130      	cbz	r0, 800d51a <acc_sensor_protocol_r2_prepare_load+0x76>
 800d50c:	4b12      	ldr	r3, [pc, #72]	; (800d558 <acc_sensor_protocol_r2_prepare_load+0xb4>)
 800d50e:	4a15      	ldr	r2, [pc, #84]	; (800d564 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 800d510:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800d512:	4913      	ldr	r1, [pc, #76]	; (800d560 <acc_sensor_protocol_r2_prepare_load+0xbc>)
 800d514:	462b      	mov	r3, r5
 800d516:	2001      	movs	r0, #1
 800d518:	47b0      	blx	r6
 800d51a:	4628      	mov	r0, r5
 800d51c:	f004 f9f6 	bl	801190c <acc_sensor_diagnostics_r2_sensor_status>
 800d520:	e7d7      	b.n	800d4d2 <acc_sensor_protocol_r2_prepare_load+0x2e>
 800d522:	2401      	movs	r4, #1
 800d524:	4621      	mov	r1, r4
 800d526:	2380      	movs	r3, #128	; 0x80
 800d528:	2202      	movs	r2, #2
 800d52a:	4628      	mov	r0, r5
 800d52c:	9400      	str	r4, [sp, #0]
 800d52e:	f004 f9a3 	bl	8011878 <acc_sensor_reg_field_write>
 800d532:	2380      	movs	r3, #128	; 0x80
 800d534:	461a      	mov	r2, r3
 800d536:	2107      	movs	r1, #7
 800d538:	4628      	mov	r0, r5
 800d53a:	9600      	str	r6, [sp, #0]
 800d53c:	f004 f99c 	bl	8011878 <acc_sensor_reg_field_write>
 800d540:	4622      	mov	r2, r4
 800d542:	2105      	movs	r1, #5
 800d544:	4628      	mov	r0, r5
 800d546:	f004 f987 	bl	8011858 <acc_sensor_reg_write>
 800d54a:	4628      	mov	r0, r5
 800d54c:	2203      	movs	r2, #3
 800d54e:	217a      	movs	r1, #122	; 0x7a
 800d550:	f004 f982 	bl	8011858 <acc_sensor_reg_write>
 800d554:	4620      	mov	r0, r4
 800d556:	e7d4      	b.n	800d502 <acc_sensor_protocol_r2_prepare_load+0x5e>
 800d558:	20001628 	.word	0x20001628
 800d55c:	08019668 	.word	0x08019668
 800d560:	08019658 	.word	0x08019658
 800d564:	0801962c 	.word	0x0801962c

0800d568 <acc_sensor_protocol_r2_run_program>:
 800d568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d56a:	b085      	sub	sp, #20
 800d56c:	4605      	mov	r5, r0
 800d56e:	460f      	mov	r7, r1
 800d570:	f7fb fc96 	bl	8008ea0 <acc_rss_integration_log_level>
 800d574:	2803      	cmp	r0, #3
 800d576:	d907      	bls.n	800d588 <acc_sensor_protocol_r2_run_program+0x20>
 800d578:	4b1d      	ldr	r3, [pc, #116]	; (800d5f0 <acc_sensor_protocol_r2_run_program+0x88>)
 800d57a:	9700      	str	r7, [sp, #0]
 800d57c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800d57e:	4a1d      	ldr	r2, [pc, #116]	; (800d5f4 <acc_sensor_protocol_r2_run_program+0x8c>)
 800d580:	491d      	ldr	r1, [pc, #116]	; (800d5f8 <acc_sensor_protocol_r2_run_program+0x90>)
 800d582:	462b      	mov	r3, r5
 800d584:	2004      	movs	r0, #4
 800d586:	47a0      	blx	r4
 800d588:	aa04      	add	r2, sp, #16
 800d58a:	2400      	movs	r4, #0
 800d58c:	4628      	mov	r0, r5
 800d58e:	f822 4d02 	strh.w	r4, [r2, #-2]!
 800d592:	2111      	movs	r1, #17
 800d594:	f004 f94a 	bl	801182c <acc_sensor_reg_read>
 800d598:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d59c:	f410 6680 	ands.w	r6, r0, #1024	; 0x400
 800d5a0:	d00c      	beq.n	800d5bc <acc_sensor_protocol_r2_run_program+0x54>
 800d5a2:	4b13      	ldr	r3, [pc, #76]	; (800d5f0 <acc_sensor_protocol_r2_run_program+0x88>)
 800d5a4:	4a15      	ldr	r2, [pc, #84]	; (800d5fc <acc_sensor_protocol_r2_run_program+0x94>)
 800d5a6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800d5a8:	4913      	ldr	r1, [pc, #76]	; (800d5f8 <acc_sensor_protocol_r2_run_program+0x90>)
 800d5aa:	462b      	mov	r3, r5
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	47b0      	blx	r6
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f004 f9ab 	bl	801190c <acc_sensor_diagnostics_r2_sensor_status>
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	b005      	add	sp, #20
 800d5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5bc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800d5c0:	d309      	bcc.n	800d5d6 <acc_sensor_protocol_r2_run_program+0x6e>
 800d5c2:	4b0b      	ldr	r3, [pc, #44]	; (800d5f0 <acc_sensor_protocol_r2_run_program+0x88>)
 800d5c4:	4a0e      	ldr	r2, [pc, #56]	; (800d600 <acc_sensor_protocol_r2_run_program+0x98>)
 800d5c6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800d5c8:	490b      	ldr	r1, [pc, #44]	; (800d5f8 <acc_sensor_protocol_r2_run_program+0x90>)
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	463b      	mov	r3, r7
 800d5ce:	47a0      	blx	r4
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	b005      	add	sp, #20
 800d5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5d6:	4632      	mov	r2, r6
 800d5d8:	2110      	movs	r1, #16
 800d5da:	4628      	mov	r0, r5
 800d5dc:	f004 f93c 	bl	8011858 <acc_sensor_reg_write>
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	f447 6280 	orr.w	r2, r7, #1024	; 0x400
 800d5e6:	2110      	movs	r1, #16
 800d5e8:	f004 f936 	bl	8011858 <acc_sensor_reg_write>
 800d5ec:	2001      	movs	r0, #1
 800d5ee:	e7e3      	b.n	800d5b8 <acc_sensor_protocol_r2_run_program+0x50>
 800d5f0:	20001628 	.word	0x20001628
 800d5f4:	08019698 	.word	0x08019698
 800d5f8:	08019658 	.word	0x08019658
 800d5fc:	080196bc 	.word	0x080196bc
 800d600:	080196ec 	.word	0x080196ec

0800d604 <acc_sensor_protocol_r2_terminate_program>:
 800d604:	b530      	push	{r4, r5, lr}
 800d606:	b083      	sub	sp, #12
 800d608:	aa02      	add	r2, sp, #8
 800d60a:	2300      	movs	r3, #0
 800d60c:	f822 3d02 	strh.w	r3, [r2, #-2]!
 800d610:	2111      	movs	r1, #17
 800d612:	4605      	mov	r5, r0
 800d614:	f004 f90a 	bl	801182c <acc_sensor_reg_read>
 800d618:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800d61c:	f410 6480 	ands.w	r4, r0, #1024	; 0x400
 800d620:	d10b      	bne.n	800d63a <acc_sensor_protocol_r2_terminate_program+0x36>
 800d622:	4b09      	ldr	r3, [pc, #36]	; (800d648 <acc_sensor_protocol_r2_terminate_program+0x44>)
 800d624:	4a09      	ldr	r2, [pc, #36]	; (800d64c <acc_sensor_protocol_r2_terminate_program+0x48>)
 800d626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d628:	4909      	ldr	r1, [pc, #36]	; (800d650 <acc_sensor_protocol_r2_terminate_program+0x4c>)
 800d62a:	4620      	mov	r0, r4
 800d62c:	4798      	blx	r3
 800d62e:	4628      	mov	r0, r5
 800d630:	f004 f96c 	bl	801190c <acc_sensor_diagnostics_r2_sensor_status>
 800d634:	4620      	mov	r0, r4
 800d636:	b003      	add	sp, #12
 800d638:	bd30      	pop	{r4, r5, pc}
 800d63a:	4628      	mov	r0, r5
 800d63c:	2201      	movs	r2, #1
 800d63e:	2174      	movs	r1, #116	; 0x74
 800d640:	f004 f90a 	bl	8011858 <acc_sensor_reg_write>
 800d644:	2001      	movs	r0, #1
 800d646:	e7f6      	b.n	800d636 <acc_sensor_protocol_r2_terminate_program+0x32>
 800d648:	20001628 	.word	0x20001628
 800d64c:	08019728 	.word	0x08019728
 800d650:	08019658 	.word	0x08019658

0800d654 <acc_sensor_protocol_r2_is_sensor_running>:
 800d654:	b500      	push	{lr}
 800d656:	b083      	sub	sp, #12
 800d658:	aa02      	add	r2, sp, #8
 800d65a:	2300      	movs	r3, #0
 800d65c:	f822 3d02 	strh.w	r3, [r2, #-2]!
 800d660:	2111      	movs	r1, #17
 800d662:	f004 f8e3 	bl	801182c <acc_sensor_reg_read>
 800d666:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800d66a:	f3c0 2080 	ubfx	r0, r0, #10, #1
 800d66e:	b003      	add	sp, #12
 800d670:	f85d fb04 	ldr.w	pc, [sp], #4

0800d674 <acc_sensor_protocol_r2_ack_event>:
 800d674:	b570      	push	{r4, r5, r6, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	aa02      	add	r2, sp, #8
 800d67a:	2300      	movs	r3, #0
 800d67c:	f822 3d02 	strh.w	r3, [r2, #-2]!
 800d680:	2138      	movs	r1, #56	; 0x38
 800d682:	4605      	mov	r5, r0
 800d684:	f004 f8d2 	bl	801182c <acc_sensor_reg_read>
 800d688:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 800d68c:	b964      	cbnz	r4, 800d6a8 <acc_sensor_protocol_r2_ack_event+0x34>
 800d68e:	4b08      	ldr	r3, [pc, #32]	; (800d6b0 <acc_sensor_protocol_r2_ack_event+0x3c>)
 800d690:	4a08      	ldr	r2, [pc, #32]	; (800d6b4 <acc_sensor_protocol_r2_ack_event+0x40>)
 800d692:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800d694:	4908      	ldr	r1, [pc, #32]	; (800d6b8 <acc_sensor_protocol_r2_ack_event+0x44>)
 800d696:	462b      	mov	r3, r5
 800d698:	4620      	mov	r0, r4
 800d69a:	47b0      	blx	r6
 800d69c:	4628      	mov	r0, r5
 800d69e:	f004 f935 	bl	801190c <acc_sensor_diagnostics_r2_sensor_status>
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	b002      	add	sp, #8
 800d6a6:	bd70      	pop	{r4, r5, r6, pc}
 800d6a8:	2001      	movs	r0, #1
 800d6aa:	b002      	add	sp, #8
 800d6ac:	bd70      	pop	{r4, r5, r6, pc}
 800d6ae:	bf00      	nop
 800d6b0:	20001628 	.word	0x20001628
 800d6b4:	08019530 	.word	0x08019530
 800d6b8:	08019658 	.word	0x08019658

0800d6bc <acc_sensor_protocol_r2_get_event>:
 800d6bc:	b570      	push	{r4, r5, r6, lr}
 800d6be:	460c      	mov	r4, r1
 800d6c0:	b084      	sub	sp, #16
 800d6c2:	b941      	cbnz	r1, 800d6d6 <acc_sensor_protocol_r2_get_event+0x1a>
 800d6c4:	4b2a      	ldr	r3, [pc, #168]	; (800d770 <acc_sensor_protocol_r2_get_event+0xb4>)
 800d6c6:	4a2b      	ldr	r2, [pc, #172]	; (800d774 <acc_sensor_protocol_r2_get_event+0xb8>)
 800d6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ca:	492b      	ldr	r1, [pc, #172]	; (800d778 <acc_sensor_protocol_r2_get_event+0xbc>)
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	4798      	blx	r3
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	b004      	add	sp, #16
 800d6d4:	bd70      	pop	{r4, r5, r6, pc}
 800d6d6:	f10d 020e 	add.w	r2, sp, #14
 800d6da:	2128      	movs	r1, #40	; 0x28
 800d6dc:	4605      	mov	r5, r0
 800d6de:	f004 f8a5 	bl	801182c <acc_sensor_reg_read>
 800d6e2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800d6e6:	8062      	strh	r2, [r4, #2]
 800d6e8:	b2d3      	uxtb	r3, r2
 800d6ea:	7023      	strb	r3, [r4, #0]
 800d6ec:	2b0b      	cmp	r3, #11
 800d6ee:	d82b      	bhi.n	800d748 <acc_sensor_protocol_r2_get_event+0x8c>
 800d6f0:	e8df f003 	tbb	[pc, r3]
 800d6f4:	06060822 	.word	0x06060822
 800d6f8:	06060606 	.word	0x06060606
 800d6fc:	06060606 	.word	0x06060606
 800d700:	2001      	movs	r0, #1
 800d702:	e7e6      	b.n	800d6d2 <acc_sensor_protocol_r2_get_event+0x16>
 800d704:	0a12      	lsrs	r2, r2, #8
 800d706:	2a10      	cmp	r2, #16
 800d708:	d828      	bhi.n	800d75c <acc_sensor_protocol_r2_get_event+0xa0>
 800d70a:	2001      	movs	r0, #1
 800d70c:	491b      	ldr	r1, [pc, #108]	; (800d77c <acc_sensor_protocol_r2_get_event+0xc0>)
 800d70e:	4090      	lsls	r0, r2
 800d710:	4001      	ands	r1, r0
 800d712:	b2d2      	uxtb	r2, r2
 800d714:	b311      	cbz	r1, 800d75c <acc_sensor_protocol_r2_get_event+0xa0>
 800d716:	3a01      	subs	r2, #1
 800d718:	4915      	ldr	r1, [pc, #84]	; (800d770 <acc_sensor_protocol_r2_get_event+0xb4>)
 800d71a:	b2d3      	uxtb	r3, r2
 800d71c:	2b20      	cmp	r3, #32
 800d71e:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800d720:	d922      	bls.n	800d768 <acc_sensor_protocol_r2_get_event+0xac>
 800d722:	4b17      	ldr	r3, [pc, #92]	; (800d780 <acc_sensor_protocol_r2_get_event+0xc4>)
 800d724:	4a17      	ldr	r2, [pc, #92]	; (800d784 <acc_sensor_protocol_r2_get_event+0xc8>)
 800d726:	4914      	ldr	r1, [pc, #80]	; (800d778 <acc_sensor_protocol_r2_get_event+0xbc>)
 800d728:	2000      	movs	r0, #0
 800d72a:	47b0      	blx	r6
 800d72c:	4628      	mov	r0, r5
 800d72e:	f004 f8ed 	bl	801190c <acc_sensor_diagnostics_r2_sensor_status>
 800d732:	2000      	movs	r0, #0
 800d734:	b004      	add	sp, #16
 800d736:	bd70      	pop	{r4, r5, r6, pc}
 800d738:	4b0d      	ldr	r3, [pc, #52]	; (800d770 <acc_sensor_protocol_r2_get_event+0xb4>)
 800d73a:	4a13      	ldr	r2, [pc, #76]	; (800d788 <acc_sensor_protocol_r2_get_event+0xcc>)
 800d73c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800d73e:	490e      	ldr	r1, [pc, #56]	; (800d778 <acc_sensor_protocol_r2_get_event+0xbc>)
 800d740:	462b      	mov	r3, r5
 800d742:	2000      	movs	r0, #0
 800d744:	47a0      	blx	r4
 800d746:	e7f1      	b.n	800d72c <acc_sensor_protocol_r2_get_event+0x70>
 800d748:	4a09      	ldr	r2, [pc, #36]	; (800d770 <acc_sensor_protocol_r2_get_event+0xb4>)
 800d74a:	9500      	str	r5, [sp, #0]
 800d74c:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800d74e:	490a      	ldr	r1, [pc, #40]	; (800d778 <acc_sensor_protocol_r2_get_event+0xbc>)
 800d750:	4a0e      	ldr	r2, [pc, #56]	; (800d78c <acc_sensor_protocol_r2_get_event+0xd0>)
 800d752:	2000      	movs	r0, #0
 800d754:	47b0      	blx	r6
 800d756:	2300      	movs	r3, #0
 800d758:	7023      	strb	r3, [r4, #0]
 800d75a:	e7e7      	b.n	800d72c <acc_sensor_protocol_r2_get_event+0x70>
 800d75c:	4a04      	ldr	r2, [pc, #16]	; (800d770 <acc_sensor_protocol_r2_get_event+0xb4>)
 800d75e:	f443 5304 	orr.w	r3, r3, #8448	; 0x2100
 800d762:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800d764:	8063      	strh	r3, [r4, #2]
 800d766:	2320      	movs	r3, #32
 800d768:	4a09      	ldr	r2, [pc, #36]	; (800d790 <acc_sensor_protocol_r2_get_event+0xd4>)
 800d76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d76e:	e7d9      	b.n	800d724 <acc_sensor_protocol_r2_get_event+0x68>
 800d770:	20001628 	.word	0x20001628
 800d774:	080195a4 	.word	0x080195a4
 800d778:	08019658 	.word	0x08019658
 800d77c:	00010016 	.word	0x00010016
 800d780:	08019594 	.word	0x08019594
 800d784:	080195dc 	.word	0x080195dc
 800d788:	080195b8 	.word	0x080195b8
 800d78c:	080195fc 	.word	0x080195fc
 800d790:	0801947c 	.word	0x0801947c

0800d794 <acc_sensor_protocol_r2_wait_for_event>:
 800d794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d798:	b087      	sub	sp, #28
 800d79a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800d84c <acc_sensor_protocol_r2_wait_for_event+0xb8>
 800d79e:	9202      	str	r2, [sp, #8]
 800d7a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d860 <acc_sensor_protocol_r2_wait_for_event+0xcc>
 800d7a4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800d854 <acc_sensor_protocol_r2_wait_for_event+0xc0>
 800d7a8:	9303      	str	r3, [sp, #12]
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	460f      	mov	r7, r1
 800d7ae:	f102 0801 	add.w	r8, r2, #1
 800d7b2:	2500      	movs	r5, #0
 800d7b4:	e014      	b.n	800d7e0 <acc_sensor_protocol_r2_wait_for_event+0x4c>
 800d7b6:	f822 3d02 	strh.w	r3, [r2, #-2]!
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	f004 f836 	bl	801182c <acc_sensor_reg_read>
 800d7c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800d7c4:	065b      	lsls	r3, r3, #25
 800d7c6:	d430      	bmi.n	800d82a <acc_sensor_protocol_r2_wait_for_event+0x96>
 800d7c8:	f7fb fb6a 	bl	8008ea0 <acc_rss_integration_log_level>
 800d7cc:	4623      	mov	r3, r4
 800d7ce:	4652      	mov	r2, sl
 800d7d0:	4649      	mov	r1, r9
 800d7d2:	b118      	cbz	r0, 800d7dc <acc_sensor_protocol_r2_wait_for_event+0x48>
 800d7d4:	f8db 6034 	ldr.w	r6, [fp, #52]	; 0x34
 800d7d8:	2001      	movs	r0, #1
 800d7da:	47b0      	blx	r6
 800d7dc:	45a8      	cmp	r8, r5
 800d7de:	d017      	beq.n	800d810 <acc_sensor_protocol_r2_wait_for_event+0x7c>
 800d7e0:	4639      	mov	r1, r7
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f7fb fae6 	bl	8008db4 <acc_rss_integration_wait_for_sensor_interrupt>
 800d7e8:	3501      	adds	r5, #1
 800d7ea:	4606      	mov	r6, r0
 800d7ec:	aa06      	add	r2, sp, #24
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	212a      	movs	r1, #42	; 0x2a
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d1df      	bne.n	800d7b6 <acc_sensor_protocol_r2_wait_for_event+0x22>
 800d7f6:	4b15      	ldr	r3, [pc, #84]	; (800d84c <acc_sensor_protocol_r2_wait_for_event+0xb8>)
 800d7f8:	4a15      	ldr	r2, [pc, #84]	; (800d850 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 800d7fa:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800d7fc:	4915      	ldr	r1, [pc, #84]	; (800d854 <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 800d7fe:	4623      	mov	r3, r4
 800d800:	47a8      	blx	r5
 800d802:	4620      	mov	r0, r4
 800d804:	f004 f882 	bl	801190c <acc_sensor_diagnostics_r2_sensor_status>
 800d808:	4630      	mov	r0, r6
 800d80a:	b007      	add	sp, #28
 800d80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d810:	4a0e      	ldr	r2, [pc, #56]	; (800d84c <acc_sensor_protocol_r2_wait_for_event+0xb8>)
 800d812:	9400      	str	r4, [sp, #0]
 800d814:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d816:	9b02      	ldr	r3, [sp, #8]
 800d818:	4a0f      	ldr	r2, [pc, #60]	; (800d858 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 800d81a:	490e      	ldr	r1, [pc, #56]	; (800d854 <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 800d81c:	2000      	movs	r0, #0
 800d81e:	47a0      	blx	r4
 800d820:	2600      	movs	r6, #0
 800d822:	4630      	mov	r0, r6
 800d824:	b007      	add	sp, #28
 800d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82a:	9903      	ldr	r1, [sp, #12]
 800d82c:	4620      	mov	r0, r4
 800d82e:	f7ff ff45 	bl	800d6bc <acc_sensor_protocol_r2_get_event>
 800d832:	4606      	mov	r6, r0
 800d834:	2800      	cmp	r0, #0
 800d836:	d1e7      	bne.n	800d808 <acc_sensor_protocol_r2_wait_for_event+0x74>
 800d838:	4b04      	ldr	r3, [pc, #16]	; (800d84c <acc_sensor_protocol_r2_wait_for_event+0xb8>)
 800d83a:	4a08      	ldr	r2, [pc, #32]	; (800d85c <acc_sensor_protocol_r2_wait_for_event+0xc8>)
 800d83c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800d83e:	4905      	ldr	r1, [pc, #20]	; (800d854 <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 800d840:	4623      	mov	r3, r4
 800d842:	47a8      	blx	r5
 800d844:	4630      	mov	r0, r6
 800d846:	b007      	add	sp, #28
 800d848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84c:	20001628 	.word	0x20001628
 800d850:	0801975c 	.word	0x0801975c
 800d854:	08019658 	.word	0x08019658
 800d858:	080197a8 	.word	0x080197a8
 800d85c:	080197e4 	.word	0x080197e4
 800d860:	08019784 	.word	0x08019784

0800d864 <acc_sensor_protocol_r2_wait_for_specific_event>:
 800d864:	b570      	push	{r4, r5, r6, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	4614      	mov	r4, r2
 800d86a:	461d      	mov	r5, r3
 800d86c:	2264      	movs	r2, #100	; 0x64
 800d86e:	ab03      	add	r3, sp, #12
 800d870:	4606      	mov	r6, r0
 800d872:	f7ff ff8f 	bl	800d794 <acc_sensor_protocol_r2_wait_for_event>
 800d876:	b168      	cbz	r0, 800d894 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 800d878:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d87c:	42a3      	cmp	r3, r4
 800d87e:	d00b      	beq.n	800d898 <acc_sensor_protocol_r2_wait_for_specific_event+0x34>
 800d880:	e9cd 3400 	strd	r3, r4, [sp]
 800d884:	4a07      	ldr	r2, [pc, #28]	; (800d8a4 <acc_sensor_protocol_r2_wait_for_specific_event+0x40>)
 800d886:	4b08      	ldr	r3, [pc, #32]	; (800d8a8 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 800d888:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d88a:	4908      	ldr	r1, [pc, #32]	; (800d8ac <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 800d88c:	4a08      	ldr	r2, [pc, #32]	; (800d8b0 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 800d88e:	2000      	movs	r0, #0
 800d890:	47a0      	blx	r4
 800d892:	2000      	movs	r0, #0
 800d894:	b004      	add	sp, #16
 800d896:	bd70      	pop	{r4, r5, r6, pc}
 800d898:	2d00      	cmp	r5, #0
 800d89a:	d0fb      	beq.n	800d894 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 800d89c:	4630      	mov	r0, r6
 800d89e:	f7ff fee9 	bl	800d674 <acc_sensor_protocol_r2_ack_event>
 800d8a2:	e7f7      	b.n	800d894 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 800d8a4:	20001628 	.word	0x20001628
 800d8a8:	08019500 	.word	0x08019500
 800d8ac:	08019658 	.word	0x08019658
 800d8b0:	08019870 	.word	0x08019870

0800d8b4 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	220b      	movs	r2, #11
 800d8b8:	f7ff bfd4 	b.w	800d864 <acc_sensor_protocol_r2_wait_for_specific_event>

0800d8bc <acc_sensor_protocol_r2_stop>:
 800d8bc:	b530      	push	{r4, r5, lr}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	460d      	mov	r5, r1
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	f7ff fe9e 	bl	800d604 <acc_sensor_protocol_r2_terminate_program>
 800d8c8:	b910      	cbnz	r0, 800d8d0 <acc_sensor_protocol_r2_stop+0x14>
 800d8ca:	2000      	movs	r0, #0
 800d8cc:	b003      	add	sp, #12
 800d8ce:	bd30      	pop	{r4, r5, pc}
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	f7ff fecf 	bl	800d674 <acc_sensor_protocol_r2_ack_event>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d0f7      	beq.n	800d8ca <acc_sensor_protocol_r2_stop+0xe>
 800d8da:	4629      	mov	r1, r5
 800d8dc:	ab01      	add	r3, sp, #4
 800d8de:	2264      	movs	r2, #100	; 0x64
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f7ff ff57 	bl	800d794 <acc_sensor_protocol_r2_wait_for_event>
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	d0ef      	beq.n	800d8ca <acc_sensor_protocol_r2_stop+0xe>
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f7ff fec2 	bl	800d674 <acc_sensor_protocol_r2_ack_event>
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	d0ea      	beq.n	800d8ca <acc_sensor_protocol_r2_stop+0xe>
 800d8f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d0e7      	beq.n	800d8cc <acc_sensor_protocol_r2_stop+0x10>
 800d8fc:	4a05      	ldr	r2, [pc, #20]	; (800d914 <acc_sensor_protocol_r2_stop+0x58>)
 800d8fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d902:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800d904:	4904      	ldr	r1, [pc, #16]	; (800d918 <acc_sensor_protocol_r2_stop+0x5c>)
 800d906:	4a05      	ldr	r2, [pc, #20]	; (800d91c <acc_sensor_protocol_r2_stop+0x60>)
 800d908:	2000      	movs	r0, #0
 800d90a:	47a8      	blx	r5
 800d90c:	4620      	mov	r0, r4
 800d90e:	f003 fffd 	bl	801190c <acc_sensor_diagnostics_r2_sensor_status>
 800d912:	e7da      	b.n	800d8ca <acc_sensor_protocol_r2_stop+0xe>
 800d914:	20001628 	.word	0x20001628
 800d918:	08019658 	.word	0x08019658
 800d91c:	08019708 	.word	0x08019708

0800d920 <acc_sensor_protocol_r2_wait_for_radar_data>:
 800d920:	b570      	push	{r4, r5, r6, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	4616      	mov	r6, r2
 800d926:	ab03      	add	r3, sp, #12
 800d928:	2264      	movs	r2, #100	; 0x64
 800d92a:	4605      	mov	r5, r0
 800d92c:	f7ff ff32 	bl	800d794 <acc_sensor_protocol_r2_wait_for_event>
 800d930:	4604      	mov	r4, r0
 800d932:	b170      	cbz	r0, 800d952 <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 800d934:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800d938:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d93c:	2a06      	cmp	r2, #6
 800d93e:	d00b      	beq.n	800d958 <acc_sensor_protocol_r2_wait_for_radar_data+0x38>
 800d940:	4a1b      	ldr	r2, [pc, #108]	; (800d9b0 <acc_sensor_protocol_r2_wait_for_radar_data+0x90>)
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d946:	491b      	ldr	r1, [pc, #108]	; (800d9b4 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 800d948:	4a1b      	ldr	r2, [pc, #108]	; (800d9b8 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 800d94a:	462b      	mov	r3, r5
 800d94c:	2000      	movs	r0, #0
 800d94e:	47a0      	blx	r4
 800d950:	2400      	movs	r4, #0
 800d952:	4620      	mov	r0, r4
 800d954:	b004      	add	sp, #16
 800d956:	bd70      	pop	{r4, r5, r6, pc}
 800d958:	0519      	lsls	r1, r3, #20
 800d95a:	d5f1      	bpl.n	800d940 <acc_sensor_protocol_r2_wait_for_radar_data+0x20>
 800d95c:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
 800d960:	d110      	bne.n	800d984 <acc_sensor_protocol_r2_wait_for_radar_data+0x64>
 800d962:	b106      	cbz	r6, 800d966 <acc_sensor_protocol_r2_wait_for_radar_data+0x46>
 800d964:	7032      	strb	r2, [r6, #0]
 800d966:	05da      	lsls	r2, r3, #23
 800d968:	d414      	bmi.n	800d994 <acc_sensor_protocol_r2_wait_for_radar_data+0x74>
 800d96a:	059b      	lsls	r3, r3, #22
 800d96c:	d5f1      	bpl.n	800d952 <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 800d96e:	f7fb fa97 	bl	8008ea0 <acc_rss_integration_log_level>
 800d972:	2803      	cmp	r0, #3
 800d974:	d9ed      	bls.n	800d952 <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 800d976:	4b0e      	ldr	r3, [pc, #56]	; (800d9b0 <acc_sensor_protocol_r2_wait_for_radar_data+0x90>)
 800d978:	4a10      	ldr	r2, [pc, #64]	; (800d9bc <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800d97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d97c:	490d      	ldr	r1, [pc, #52]	; (800d9b4 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 800d97e:	2004      	movs	r0, #4
 800d980:	4798      	blx	r3
 800d982:	e7e6      	b.n	800d952 <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 800d984:	4629      	mov	r1, r5
 800d986:	200f      	movs	r0, #15
 800d988:	f7fc ffaa 	bl	800a8e0 <acc_probes_execute_primitive_probe>
 800d98c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d990:	4622      	mov	r2, r4
 800d992:	e7e6      	b.n	800d962 <acc_sensor_protocol_r2_wait_for_radar_data+0x42>
 800d994:	f7fb fa84 	bl	8008ea0 <acc_rss_integration_log_level>
 800d998:	2803      	cmp	r0, #3
 800d99a:	d905      	bls.n	800d9a8 <acc_sensor_protocol_r2_wait_for_radar_data+0x88>
 800d99c:	4b04      	ldr	r3, [pc, #16]	; (800d9b0 <acc_sensor_protocol_r2_wait_for_radar_data+0x90>)
 800d99e:	4a08      	ldr	r2, [pc, #32]	; (800d9c0 <acc_sensor_protocol_r2_wait_for_radar_data+0xa0>)
 800d9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a2:	4904      	ldr	r1, [pc, #16]	; (800d9b4 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 800d9a4:	2004      	movs	r0, #4
 800d9a6:	4798      	blx	r3
 800d9a8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d9ac:	e7dd      	b.n	800d96a <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 800d9ae:	bf00      	nop
 800d9b0:	20001628 	.word	0x20001628
 800d9b4:	08019658 	.word	0x08019658
 800d9b8:	0801980c 	.word	0x0801980c
 800d9bc:	08019858 	.word	0x08019858
 800d9c0:	0801983c 	.word	0x0801983c

0800d9c4 <acc_sensor_protocol_r2_wait_for_sync_start>:
 800d9c4:	b570      	push	{r4, r5, r6, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	ab03      	add	r3, sp, #12
 800d9ca:	2264      	movs	r2, #100	; 0x64
 800d9cc:	4605      	mov	r5, r0
 800d9ce:	f7ff fee1 	bl	800d794 <acc_sensor_protocol_r2_wait_for_event>
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	b940      	cbnz	r0, 800d9e8 <acc_sensor_protocol_r2_wait_for_sync_start+0x24>
 800d9d6:	4b0c      	ldr	r3, [pc, #48]	; (800da08 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 800d9d8:	4a0c      	ldr	r2, [pc, #48]	; (800da0c <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 800d9da:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800d9dc:	490c      	ldr	r1, [pc, #48]	; (800da10 <acc_sensor_protocol_r2_wait_for_sync_start+0x4c>)
 800d9de:	462b      	mov	r3, r5
 800d9e0:	47b0      	blx	r6
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	b004      	add	sp, #16
 800d9e6:	bd70      	pop	{r4, r5, r6, pc}
 800d9e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d9ec:	2b06      	cmp	r3, #6
 800d9ee:	d0f8      	beq.n	800d9e2 <acc_sensor_protocol_r2_wait_for_sync_start+0x1e>
 800d9f0:	4a05      	ldr	r2, [pc, #20]	; (800da08 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d9f6:	4906      	ldr	r1, [pc, #24]	; (800da10 <acc_sensor_protocol_r2_wait_for_sync_start+0x4c>)
 800d9f8:	4a06      	ldr	r2, [pc, #24]	; (800da14 <acc_sensor_protocol_r2_wait_for_sync_start+0x50>)
 800d9fa:	462b      	mov	r3, r5
 800d9fc:	2000      	movs	r0, #0
 800d9fe:	47a0      	blx	r4
 800da00:	2400      	movs	r4, #0
 800da02:	4620      	mov	r0, r4
 800da04:	b004      	add	sp, #16
 800da06:	bd70      	pop	{r4, r5, r6, pc}
 800da08:	20001628 	.word	0x20001628
 800da0c:	0801989c 	.word	0x0801989c
 800da10:	08019658 	.word	0x08019658
 800da14:	080198d0 	.word	0x080198d0

0800da18 <acc_sensor_protocol_r2_transfer_data>:
 800da18:	b570      	push	{r4, r5, r6, lr}
 800da1a:	4613      	mov	r3, r2
 800da1c:	4615      	mov	r5, r2
 800da1e:	2200      	movs	r2, #0
 800da20:	4606      	mov	r6, r0
 800da22:	f7ff f92d 	bl	800cc80 <acc_sensor_r2_buffer_processed_read>
 800da26:	462b      	mov	r3, r5
 800da28:	4604      	mov	r4, r0
 800da2a:	4602      	mov	r2, r0
 800da2c:	4631      	mov	r1, r6
 800da2e:	2000      	movs	r0, #0
 800da30:	f7fc ff26 	bl	800a880 <acc_probes_execute_uint16>
 800da34:	4620      	mov	r0, r4
 800da36:	bd70      	pop	{r4, r5, r6, pc}

0800da38 <acc_sensor_protocol_r2_check_asic_id>:
 800da38:	b530      	push	{r4, r5, lr}
 800da3a:	b085      	sub	sp, #20
 800da3c:	aa04      	add	r2, sp, #16
 800da3e:	2400      	movs	r4, #0
 800da40:	f822 4d02 	strh.w	r4, [r2, #-2]!
 800da44:	4621      	mov	r1, r4
 800da46:	f003 fef1 	bl	801182c <acc_sensor_reg_read>
 800da4a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800da4e:	f241 1312 	movw	r3, #4370	; 0x1112
 800da52:	429a      	cmp	r2, r3
 800da54:	d009      	beq.n	800da6a <acc_sensor_protocol_r2_check_asic_id+0x32>
 800da56:	4906      	ldr	r1, [pc, #24]	; (800da70 <acc_sensor_protocol_r2_check_asic_id+0x38>)
 800da58:	9200      	str	r2, [sp, #0]
 800da5a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800da5c:	4a05      	ldr	r2, [pc, #20]	; (800da74 <acc_sensor_protocol_r2_check_asic_id+0x3c>)
 800da5e:	4906      	ldr	r1, [pc, #24]	; (800da78 <acc_sensor_protocol_r2_check_asic_id+0x40>)
 800da60:	4620      	mov	r0, r4
 800da62:	47a8      	blx	r5
 800da64:	4620      	mov	r0, r4
 800da66:	b005      	add	sp, #20
 800da68:	bd30      	pop	{r4, r5, pc}
 800da6a:	2001      	movs	r0, #1
 800da6c:	e7fb      	b.n	800da66 <acc_sensor_protocol_r2_check_asic_id+0x2e>
 800da6e:	bf00      	nop
 800da70:	20001628 	.word	0x20001628
 800da74:	08019564 	.word	0x08019564
 800da78:	08019658 	.word	0x08019658

0800da7c <acc_sweep_manager_prepare>:
 800da7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da80:	4607      	mov	r7, r0
 800da82:	b093      	sub	sp, #76	; 0x4c
 800da84:	4608      	mov	r0, r1
 800da86:	460c      	mov	r4, r1
 800da88:	4691      	mov	r9, r2
 800da8a:	4698      	mov	r8, r3
 800da8c:	f7fa fcc4 	bl	8008418 <acc_base_configuration_sensor_get>
 800da90:	4605      	mov	r5, r0
 800da92:	4620      	mov	r0, r4
 800da94:	f7fa fe50 	bl	8008738 <acc_base_configuration_wg_duration_get>
 800da98:	f8ad 0004 	strh.w	r0, [sp, #4]
 800da9c:	4620      	mov	r0, r4
 800da9e:	f7fa fe39 	bl	8008714 <acc_base_configuration_integrator_get>
 800daa2:	f8ad 0006 	strh.w	r0, [sp, #6]
 800daa6:	4620      	mov	r0, r4
 800daa8:	f7fa fe58 	bl	800875c <acc_base_configuration_integrator_ramp_up_get>
 800daac:	f8ad 0008 	strh.w	r0, [sp, #8]
 800dab0:	4620      	mov	r0, r4
 800dab2:	f7fa fd55 	bl	8008560 <acc_base_configuration_decrease_tx_emission_get>
 800dab6:	2304      	movs	r3, #4
 800dab8:	eb0d 0203 	add.w	r2, sp, r3
 800dabc:	4629      	mov	r1, r5
 800dabe:	f8ad 000a 	strh.w	r0, [sp, #10]
 800dac2:	f107 0514 	add.w	r5, r7, #20
 800dac6:	2012      	movs	r0, #18
 800dac8:	f7fc feda 	bl	800a880 <acc_probes_execute_uint16>
 800dacc:	2220      	movs	r2, #32
 800dace:	2100      	movs	r1, #0
 800dad0:	4628      	mov	r0, r5
 800dad2:	f005 f92d 	bl	8012d30 <memset>
 800dad6:	4628      	mov	r0, r5
 800dad8:	6823      	ldr	r3, [r4, #0]
 800dada:	4621      	mov	r1, r4
 800dadc:	4798      	blx	r3
 800dade:	4606      	mov	r6, r0
 800dae0:	b1c8      	cbz	r0, 800db16 <acc_sweep_manager_prepare+0x9a>
 800dae2:	2220      	movs	r2, #32
 800dae4:	2100      	movs	r1, #0
 800dae6:	a80a      	add	r0, sp, #40	; 0x28
 800dae8:	f005 f922 	bl	8012d30 <memset>
 800daec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800daee:	2300      	movs	r3, #0
 800daf0:	680e      	ldr	r6, [r1, #0]
 800daf2:	9309      	str	r3, [sp, #36]	; 0x24
 800daf4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800daf8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800dafc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800db00:	aa0a      	add	r2, sp, #40	; 0x28
 800db02:	ab03      	add	r3, sp, #12
 800db04:	4621      	mov	r1, r4
 800db06:	4628      	mov	r0, r5
 800db08:	47b0      	blx	r6
 800db0a:	4606      	mov	r6, r0
 800db0c:	b938      	cbnz	r0, 800db1e <acc_sweep_manager_prepare+0xa2>
 800db0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db10:	4628      	mov	r0, r5
 800db12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db14:	4798      	blx	r3
 800db16:	4630      	mov	r0, r6
 800db18:	b013      	add	sp, #76	; 0x4c
 800db1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db1e:	f1b9 0f00 	cmp.w	r9, #0
 800db22:	d007      	beq.n	800db34 <acc_sweep_manager_prepare+0xb8>
 800db24:	ad0a      	add	r5, sp, #40	; 0x28
 800db26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db28:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800db2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800db30:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 800db34:	f1b8 0f00 	cmp.w	r8, #0
 800db38:	d010      	beq.n	800db5c <acc_sweep_manager_prepare+0xe0>
 800db3a:	ad03      	add	r5, sp, #12
 800db3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db3e:	f8c8 0000 	str.w	r0, [r8]
 800db42:	f8c8 1004 	str.w	r1, [r8, #4]
 800db46:	f8c8 2008 	str.w	r2, [r8, #8]
 800db4a:	cd07      	ldmia	r5!, {r0, r1, r2}
 800db4c:	f8c8 300c 	str.w	r3, [r8, #12]
 800db50:	f8c8 0010 	str.w	r0, [r8, #16]
 800db54:	f8c8 1014 	str.w	r1, [r8, #20]
 800db58:	f8c8 2018 	str.w	r2, [r8, #24]
 800db5c:	4620      	mov	r0, r4
 800db5e:	f7fa fda7 	bl	80086b0 <acc_base_configuration_repetition_mode_get>
 800db62:	2801      	cmp	r0, #1
 800db64:	d014      	beq.n	800db90 <acc_sweep_manager_prepare+0x114>
 800db66:	4620      	mov	r0, r4
 800db68:	f7fa fdaa 	bl	80086c0 <acc_base_configuration_update_rate_get>
 800db6c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800db98 <acc_sweep_manager_prepare+0x11c>
 800db70:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800db74:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db78:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800db7c:	ee17 3a90 	vmov	r3, s15
 800db80:	2200      	movs	r2, #0
 800db82:	4630      	mov	r0, r6
 800db84:	603b      	str	r3, [r7, #0]
 800db86:	60ba      	str	r2, [r7, #8]
 800db88:	80fa      	strh	r2, [r7, #6]
 800db8a:	b013      	add	sp, #76	; 0x4c
 800db8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800db94:	e7f4      	b.n	800db80 <acc_sweep_manager_prepare+0x104>
 800db96:	bf00      	nop
 800db98:	44fa0000 	.word	0x44fa0000

0800db9c <acc_sweep_manager_release>:
 800db9c:	b120      	cbz	r0, 800dba8 <acc_sweep_manager_release+0xc>
 800db9e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800dba0:	b113      	cbz	r3, 800dba8 <acc_sweep_manager_release+0xc>
 800dba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dba4:	3014      	adds	r0, #20
 800dba6:	4718      	bx	r3
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop

0800dbac <acc_sweep_manager_is_sensor_connected>:
 800dbac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800dbae:	6940      	ldr	r0, [r0, #20]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	4718      	bx	r3

0800dbb4 <acc_sweep_manager_calibrate>:
 800dbb4:	b410      	push	{r4}
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	3014      	adds	r0, #20
 800dbba:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800dbbc:	68e4      	ldr	r4, [r4, #12]
 800dbbe:	46a4      	mov	ip, r4
 800dbc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbc4:	4760      	bx	ip
 800dbc6:	bf00      	nop

0800dbc8 <acc_sweep_manager_measure_noise>:
 800dbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbcc:	4604      	mov	r4, r0
 800dbce:	4617      	mov	r7, r2
 800dbd0:	e9d0 020a 	ldrd	r0, r2, [r0, #40]	; 0x28
 800dbd4:	6895      	ldr	r5, [r2, #8]
 800dbd6:	4698      	mov	r8, r3
 800dbd8:	47a8      	blx	r5
 800dbda:	b148      	cbz	r0, 800dbf0 <acc_sweep_manager_measure_noise+0x28>
 800dbdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dbde:	f104 0614 	add.w	r6, r4, #20
 800dbe2:	4642      	mov	r2, r8
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	4630      	mov	r0, r6
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbee:	4718      	bx	r3
 800dbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbf4 <acc_sweep_manager_start>:
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	e9d0 030a 	ldrd	r0, r3, [r0, #40]	; 0x28
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	4615      	mov	r5, r2
 800dc00:	4798      	blx	r3
 800dc02:	b138      	cbz	r0, 800dc14 <acc_sweep_manager_start+0x20>
 800dc04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dc06:	4629      	mov	r1, r5
 800dc08:	f104 0014 	add.w	r0, r4, #20
 800dc0c:	695b      	ldr	r3, [r3, #20]
 800dc0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc12:	4718      	bx	r3
 800dc14:	bd70      	pop	{r4, r5, r6, pc}
 800dc16:	bf00      	nop

0800dc18 <acc_sweep_manager_wait_for_data>:
 800dc18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800dc1a:	6801      	ldr	r1, [r0, #0]
 800dc1c:	699b      	ldr	r3, [r3, #24]
 800dc1e:	6940      	ldr	r0, [r0, #20]
 800dc20:	2200      	movs	r2, #0
 800dc22:	4718      	bx	r3

0800dc24 <acc_sweep_manager_wait_for_hibernate_ready>:
 800dc24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800dc26:	6801      	ldr	r1, [r0, #0]
 800dc28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc2a:	6940      	ldr	r0, [r0, #20]
 800dc2c:	4718      	bx	r3
 800dc2e:	bf00      	nop

0800dc30 <acc_sweep_manager_measure>:
 800dc30:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800dc32:	6940      	ldr	r0, [r0, #20]
 800dc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc36:	4718      	bx	r3

0800dc38 <acc_sweep_manager_acquire_adc_data>:
 800dc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	6043      	str	r3, [r0, #4]
 800dc3e:	6083      	str	r3, [r0, #8]
 800dc40:	60c3      	str	r3, [r0, #12]
 800dc42:	6103      	str	r3, [r0, #16]
 800dc44:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800dc46:	b085      	sub	sp, #20
 800dc48:	4604      	mov	r4, r0
 800dc4a:	1d05      	adds	r5, r0, #4
 800dc4c:	466a      	mov	r2, sp
 800dc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc50:	3014      	adds	r0, #20
 800dc52:	4798      	blx	r3
 800dc54:	f8bd 2000 	ldrh.w	r2, [sp]
 800dc58:	9b02      	ldr	r3, [sp, #8]
 800dc5a:	f89d 7002 	ldrb.w	r7, [sp, #2]
 800dc5e:	f89d 6003 	ldrb.w	r6, [sp, #3]
 800dc62:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800dc66:	80e2      	strh	r2, [r4, #6]
 800dc68:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc6c:	60a0      	str	r0, [r4, #8]
 800dc6e:	4628      	mov	r0, r5
 800dc70:	7127      	strb	r7, [r4, #4]
 800dc72:	7166      	strb	r6, [r4, #5]
 800dc74:	7321      	strb	r1, [r4, #12]
 800dc76:	7362      	strb	r2, [r4, #13]
 800dc78:	6123      	str	r3, [r4, #16]
 800dc7a:	b005      	add	sp, #20
 800dc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc7e:	bf00      	nop

0800dc80 <acc_alg_basic_subtract_mean_uint16>:
 800dc80:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800dc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc86:	d13b      	bne.n	800dd00 <acc_alg_basic_subtract_mean_uint16+0x80>
 800dc88:	b341      	cbz	r1, 800dcdc <acc_alg_basic_subtract_mean_uint16+0x5c>
 800dc8a:	004f      	lsls	r7, r1, #1
 800dc8c:	19c6      	adds	r6, r0, r7
 800dc8e:	4604      	mov	r4, r0
 800dc90:	2500      	movs	r5, #0
 800dc92:	f834 2b02 	ldrh.w	r2, [r4], #2
 800dc96:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800dc9a:	42a6      	cmp	r6, r4
 800dc9c:	4415      	add	r5, r2
 800dc9e:	d1f8      	bne.n	800dc92 <acc_alg_basic_subtract_mean_uint16+0x12>
 800dca0:	2d00      	cmp	r5, #0
 800dca2:	bfac      	ite	ge
 800dca4:	2401      	movge	r4, #1
 800dca6:	f04f 34ff 	movlt.w	r4, #4294967295
 800dcaa:	084a      	lsrs	r2, r1, #1
 800dcac:	fb04 5502 	mla	r5, r4, r2, r5
 800dcb0:	fb95 f1f1 	sdiv	r1, r5, r1
 800dcb4:	b20d      	sxth	r5, r1
 800dcb6:	2d00      	cmp	r5, #0
 800dcb8:	f1a0 0002 	sub.w	r0, r0, #2
 800dcbc:	dd12      	ble.n	800dce4 <acc_alg_basic_subtract_mean_uint16+0x64>
 800dcbe:	19c4      	adds	r4, r0, r7
 800dcc0:	b289      	uxth	r1, r1
 800dcc2:	2600      	movs	r6, #0
 800dcc4:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800dcc8:	428a      	cmp	r2, r1
 800dcca:	bf2a      	itet	cs
 800dccc:	1a52      	subcs	r2, r2, r1
 800dcce:	8006      	strhcc	r6, [r0, #0]
 800dcd0:	8002      	strhcs	r2, [r0, #0]
 800dcd2:	4284      	cmp	r4, r0
 800dcd4:	d1f6      	bne.n	800dcc4 <acc_alg_basic_subtract_mean_uint16+0x44>
 800dcd6:	b103      	cbz	r3, 800dcda <acc_alg_basic_subtract_mean_uint16+0x5a>
 800dcd8:	801d      	strh	r5, [r3, #0]
 800dcda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d0fc      	beq.n	800dcda <acc_alg_basic_subtract_mean_uint16+0x5a>
 800dce0:	8019      	strh	r1, [r3, #0]
 800dce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dce4:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800dce8:	183c      	adds	r4, r7, r0
 800dcea:	19af      	adds	r7, r5, r6
 800dcec:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800dcf0:	42ba      	cmp	r2, r7
 800dcf2:	bfd6      	itet	le
 800dcf4:	1a52      	suble	r2, r2, r1
 800dcf6:	8006      	strhgt	r6, [r0, #0]
 800dcf8:	8002      	strhle	r2, [r0, #0]
 800dcfa:	42a0      	cmp	r0, r4
 800dcfc:	d1f6      	bne.n	800dcec <acc_alg_basic_subtract_mean_uint16+0x6c>
 800dcfe:	e7ea      	b.n	800dcd6 <acc_alg_basic_subtract_mean_uint16+0x56>
 800dd00:	2119      	movs	r1, #25
 800dd02:	4801      	ldr	r0, [pc, #4]	; (800dd08 <acc_alg_basic_subtract_mean_uint16+0x88>)
 800dd04:	f7fa fb5a 	bl	80083bc <acc_assert_fail>
 800dd08:	080199b8 	.word	0x080199b8

0800dd0c <acc_alg_basic_subtract_section_mean_q12_4>:
 800dd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd10:	2a00      	cmp	r2, #0
 800dd12:	bf14      	ite	ne
 800dd14:	4617      	movne	r7, r2
 800dd16:	460f      	moveq	r7, r1
 800dd18:	b1c1      	cbz	r1, 800dd4c <acc_alg_basic_subtract_section_mean_q12_4+0x40>
 800dd1a:	4699      	mov	r9, r3
 800dd1c:	4680      	mov	r8, r0
 800dd1e:	460e      	mov	r6, r1
 800dd20:	468a      	mov	sl, r1
 800dd22:	463d      	mov	r5, r7
 800dd24:	2400      	movs	r4, #0
 800dd26:	1963      	adds	r3, r4, r5
 800dd28:	42b3      	cmp	r3, r6
 800dd2a:	bfc8      	it	gt
 800dd2c:	4655      	movgt	r5, sl
 800dd2e:	eb08 0044 	add.w	r0, r8, r4, lsl #1
 800dd32:	443c      	add	r4, r7
 800dd34:	464a      	mov	r2, r9
 800dd36:	4629      	mov	r1, r5
 800dd38:	2300      	movs	r3, #0
 800dd3a:	b2a4      	uxth	r4, r4
 800dd3c:	f7ff ffa0 	bl	800dc80 <acc_alg_basic_subtract_mean_uint16>
 800dd40:	ebaa 0207 	sub.w	r2, sl, r7
 800dd44:	42a6      	cmp	r6, r4
 800dd46:	fa1f fa82 	uxth.w	sl, r2
 800dd4a:	d8ec      	bhi.n	800dd26 <acc_alg_basic_subtract_section_mean_q12_4+0x1a>
 800dd4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800dd50 <acc_alg_cca_calculate>:
 800dd50:	2901      	cmp	r1, #1
 800dd52:	b538      	push	{r3, r4, r5, lr}
 800dd54:	d922      	bls.n	800dd9c <acc_alg_cca_calculate+0x4c>
 800dd56:	1e8d      	subs	r5, r1, #2
 800dd58:	1c83      	adds	r3, r0, #2
 800dd5a:	b2ad      	uxth	r5, r5
 800dd5c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800dd60:	2400      	movs	r4, #0
 800dd62:	4602      	mov	r2, r0
 800dd64:	3002      	adds	r0, #2
 800dd66:	8853      	ldrh	r3, [r2, #2]
 800dd68:	8812      	ldrh	r2, [r2, #0]
 800dd6a:	1a9b      	subs	r3, r3, r2
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	bfb8      	it	lt
 800dd70:	425b      	neglt	r3, r3
 800dd72:	4285      	cmp	r5, r0
 800dd74:	441c      	add	r4, r3
 800dd76:	d1f4      	bne.n	800dd62 <acc_alg_cca_calculate+0x12>
 800dd78:	ee07 4a90 	vmov	s15, r4
 800dd7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd80:	3901      	subs	r1, #1
 800dd82:	ee07 1a10 	vmov	s14, r1
 800dd86:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800dd8a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800dd8e:	f006 f899 	bl	8013ec4 <log10f>
 800dd92:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800dd96:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dd9a:	bd38      	pop	{r3, r4, r5, pc}
 800dd9c:	eddf 7a01 	vldr	s15, [pc, #4]	; 800dda4 <acc_alg_cca_calculate+0x54>
 800dda0:	e7ee      	b.n	800dd80 <acc_alg_cca_calculate+0x30>
 800dda2:	bf00      	nop
 800dda4:	00000000 	.word	0x00000000

0800dda8 <acc_diagnostic_log_set_scope>:
 800dda8:	4b02      	ldr	r3, [pc, #8]	; (800ddb4 <acc_diagnostic_log_set_scope+0xc>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	b10b      	cbz	r3, 800ddb2 <acc_diagnostic_log_set_scope+0xa>
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4718      	bx	r3
 800ddb2:	4770      	bx	lr
 800ddb4:	20001614 	.word	0x20001614

0800ddb8 <acc_diagnostic_log_declare_parameter>:
 800ddb8:	4b02      	ldr	r3, [pc, #8]	; (800ddc4 <acc_diagnostic_log_declare_parameter+0xc>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	b10b      	cbz	r3, 800ddc2 <acc_diagnostic_log_declare_parameter+0xa>
 800ddbe:	685b      	ldr	r3, [r3, #4]
 800ddc0:	4718      	bx	r3
 800ddc2:	4770      	bx	lr
 800ddc4:	20001614 	.word	0x20001614

0800ddc8 <acc_diagnostic_log_set_parameter>:
 800ddc8:	4b02      	ldr	r3, [pc, #8]	; (800ddd4 <acc_diagnostic_log_set_parameter+0xc>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	b10b      	cbz	r3, 800ddd2 <acc_diagnostic_log_set_parameter+0xa>
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	4718      	bx	r3
 800ddd2:	4770      	bx	lr
 800ddd4:	20001614 	.word	0x20001614

0800ddd8 <acc_diagnostic_log_array>:
 800ddd8:	4b02      	ldr	r3, [pc, #8]	; (800dde4 <acc_diagnostic_log_array+0xc>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	b10b      	cbz	r3, 800dde2 <acc_diagnostic_log_array+0xa>
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	4718      	bx	r3
 800dde2:	4770      	bx	lr
 800dde4:	20001614 	.word	0x20001614

0800dde8 <acc_diagnostic_log_scalar>:
 800dde8:	4b02      	ldr	r3, [pc, #8]	; (800ddf4 <acc_diagnostic_log_scalar+0xc>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	b10b      	cbz	r3, 800ddf2 <acc_diagnostic_log_scalar+0xa>
 800ddee:	695b      	ldr	r3, [r3, #20]
 800ddf0:	4718      	bx	r3
 800ddf2:	4770      	bx	lr
 800ddf4:	20001614 	.word	0x20001614

0800ddf8 <acc_diagnostic_log_data_u16>:
 800ddf8:	4b02      	ldr	r3, [pc, #8]	; (800de04 <acc_diagnostic_log_data_u16+0xc>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	b10b      	cbz	r3, 800de02 <acc_diagnostic_log_data_u16+0xa>
 800ddfe:	699b      	ldr	r3, [r3, #24]
 800de00:	4718      	bx	r3
 800de02:	4770      	bx	lr
 800de04:	20001614 	.word	0x20001614

0800de08 <acc_diagnostic_log_data_i16>:
 800de08:	4b02      	ldr	r3, [pc, #8]	; (800de14 <acc_diagnostic_log_data_i16+0xc>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	b10b      	cbz	r3, 800de12 <acc_diagnostic_log_data_i16+0xa>
 800de0e:	69db      	ldr	r3, [r3, #28]
 800de10:	4718      	bx	r3
 800de12:	4770      	bx	lr
 800de14:	20001614 	.word	0x20001614

0800de18 <acc_diagnostic_log_data_u8>:
 800de18:	4b02      	ldr	r3, [pc, #8]	; (800de24 <acc_diagnostic_log_data_u8+0xc>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	b10b      	cbz	r3, 800de22 <acc_diagnostic_log_data_u8+0xa>
 800de1e:	6a1b      	ldr	r3, [r3, #32]
 800de20:	4718      	bx	r3
 800de22:	4770      	bx	lr
 800de24:	20001614 	.word	0x20001614

0800de28 <acc_element_sizeof>:
 800de28:	3801      	subs	r0, #1
 800de2a:	b2c0      	uxtb	r0, r0
 800de2c:	2808      	cmp	r0, #8
 800de2e:	bf9a      	itte	ls
 800de30:	4b02      	ldrls	r3, [pc, #8]	; (800de3c <acc_element_sizeof+0x14>)
 800de32:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800de36:	2000      	movhi	r0, #0
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	080199ec 	.word	0x080199ec

0800de40 <acc_element_connect>:
 800de40:	6001      	str	r1, [r0, #0]
 800de42:	4770      	bx	lr

0800de44 <event>:
 800de44:	b570      	push	{r4, r5, r6, lr}
 800de46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de48:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800de4a:	682a      	ldr	r2, [r5, #0]
 800de4c:	4604      	mov	r4, r0
 800de4e:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800de52:	4798      	blx	r3
 800de54:	6823      	ldr	r3, [r4, #0]
 800de56:	6028      	str	r0, [r5, #0]
 800de58:	685a      	ldr	r2, [r3, #4]
 800de5a:	4618      	mov	r0, r3
 800de5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de60:	4710      	bx	r2
 800de62:	bf00      	nop

0800de64 <reset>:
 800de64:	6800      	ldr	r0, [r0, #0]
 800de66:	68c3      	ldr	r3, [r0, #12]
 800de68:	4718      	bx	r3
 800de6a:	bf00      	nop

0800de6c <validate>:
 800de6c:	6983      	ldr	r3, [r0, #24]
 800de6e:	b510      	push	{r4, lr}
 800de70:	4604      	mov	r4, r0
 800de72:	b143      	cbz	r3, 800de86 <validate+0x1a>
 800de74:	f7fb f814 	bl	8008ea0 <acc_rss_integration_log_level>
 800de78:	b128      	cbz	r0, 800de86 <validate+0x1a>
 800de7a:	4b0b      	ldr	r3, [pc, #44]	; (800dea8 <validate+0x3c>)
 800de7c:	4a0b      	ldr	r2, [pc, #44]	; (800deac <validate+0x40>)
 800de7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de80:	490b      	ldr	r1, [pc, #44]	; (800deb0 <validate+0x44>)
 800de82:	2001      	movs	r0, #1
 800de84:	4798      	blx	r3
 800de86:	69e3      	ldr	r3, [r4, #28]
 800de88:	b143      	cbz	r3, 800de9c <validate+0x30>
 800de8a:	f7fb f809 	bl	8008ea0 <acc_rss_integration_log_level>
 800de8e:	b128      	cbz	r0, 800de9c <validate+0x30>
 800de90:	4b05      	ldr	r3, [pc, #20]	; (800dea8 <validate+0x3c>)
 800de92:	4a08      	ldr	r2, [pc, #32]	; (800deb4 <validate+0x48>)
 800de94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de96:	4906      	ldr	r1, [pc, #24]	; (800deb0 <validate+0x44>)
 800de98:	2001      	movs	r0, #1
 800de9a:	4798      	blx	r3
 800de9c:	6820      	ldr	r0, [r4, #0]
 800de9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dea2:	6883      	ldr	r3, [r0, #8]
 800dea4:	4718      	bx	r3
 800dea6:	bf00      	nop
 800dea8:	20001628 	.word	0x20001628
 800deac:	08019a24 	.word	0x08019a24
 800deb0:	08019a38 	.word	0x08019a38
 800deb4:	08019a44 	.word	0x08019a44

0800deb8 <abs_q3_12_complex>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	0897      	lsrs	r7, r2, #2
 800debc:	d00b      	beq.n	800ded6 <abs_q3_12_complex+0x1e>
 800debe:	4604      	mov	r4, r0
 800dec0:	1e8d      	subs	r5, r1, #2
 800dec2:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 800dec6:	f854 0b04 	ldr.w	r0, [r4], #4
 800deca:	f7f9 fc81 	bl	80077d0 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 800dece:	42b4      	cmp	r4, r6
 800ded0:	f825 0f02 	strh.w	r0, [r5, #2]!
 800ded4:	d1f7      	bne.n	800dec6 <abs_q3_12_complex+0xe>
 800ded6:	0078      	lsls	r0, r7, #1
 800ded8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deda:	bf00      	nop

0800dedc <acc_element_abs_init>:
 800dedc:	b510      	push	{r4, lr}
 800dede:	4a0b      	ldr	r2, [pc, #44]	; (800df0c <acc_element_abs_init+0x30>)
 800dee0:	4c0b      	ldr	r4, [pc, #44]	; (800df10 <acc_element_abs_init+0x34>)
 800dee2:	4b0c      	ldr	r3, [pc, #48]	; (800df14 <acc_element_abs_init+0x38>)
 800dee4:	60c3      	str	r3, [r0, #12]
 800dee6:	2908      	cmp	r1, #8
 800dee8:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800deec:	d009      	beq.n	800df02 <acc_element_abs_init+0x26>
 800deee:	4b0a      	ldr	r3, [pc, #40]	; (800df18 <acc_element_abs_init+0x3c>)
 800def0:	4a0a      	ldr	r2, [pc, #40]	; (800df1c <acc_element_abs_init+0x40>)
 800def2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800def4:	490a      	ldr	r1, [pc, #40]	; (800df20 <acc_element_abs_init+0x44>)
 800def6:	2400      	movs	r4, #0
 800def8:	6384      	str	r4, [r0, #56]	; 0x38
 800defa:	4620      	mov	r0, r4
 800defc:	4798      	blx	r3
 800defe:	4620      	mov	r0, r4
 800df00:	bd10      	pop	{r4, pc}
 800df02:	4b08      	ldr	r3, [pc, #32]	; (800df24 <acc_element_abs_init+0x48>)
 800df04:	6383      	str	r3, [r0, #56]	; 0x38
 800df06:	2001      	movs	r0, #1
 800df08:	bd10      	pop	{r4, pc}
 800df0a:	bf00      	nop
 800df0c:	0800de6d 	.word	0x0800de6d
 800df10:	0800de45 	.word	0x0800de45
 800df14:	0800de65 	.word	0x0800de65
 800df18:	20001628 	.word	0x20001628
 800df1c:	08019a10 	.word	0x08019a10
 800df20:	08019a38 	.word	0x08019a38
 800df24:	0800deb9 	.word	0x0800deb9

0800df28 <event>:
 800df28:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800df2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800df2c:	6811      	ldr	r1, [r2, #0]
 800df2e:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800df30:	b510      	push	{r4, lr}
 800df32:	4604      	mov	r4, r0
 800df34:	6900      	ldr	r0, [r0, #16]
 800df36:	4798      	blx	r3
 800df38:	6820      	ldr	r0, [r4, #0]
 800df3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df3e:	6843      	ldr	r3, [r0, #4]
 800df40:	4718      	bx	r3
 800df42:	bf00      	nop

0800df44 <reset>:
 800df44:	6800      	ldr	r0, [r0, #0]
 800df46:	68c3      	ldr	r3, [r0, #12]
 800df48:	4718      	bx	r3
 800df4a:	bf00      	nop

0800df4c <validate>:
 800df4c:	6983      	ldr	r3, [r0, #24]
 800df4e:	b510      	push	{r4, lr}
 800df50:	4604      	mov	r4, r0
 800df52:	b143      	cbz	r3, 800df66 <validate+0x1a>
 800df54:	f7fa ffa4 	bl	8008ea0 <acc_rss_integration_log_level>
 800df58:	b128      	cbz	r0, 800df66 <validate+0x1a>
 800df5a:	4b0b      	ldr	r3, [pc, #44]	; (800df88 <validate+0x3c>)
 800df5c:	4a0b      	ldr	r2, [pc, #44]	; (800df8c <validate+0x40>)
 800df5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df60:	490b      	ldr	r1, [pc, #44]	; (800df90 <validate+0x44>)
 800df62:	2001      	movs	r0, #1
 800df64:	4798      	blx	r3
 800df66:	69e3      	ldr	r3, [r4, #28]
 800df68:	b143      	cbz	r3, 800df7c <validate+0x30>
 800df6a:	f7fa ff99 	bl	8008ea0 <acc_rss_integration_log_level>
 800df6e:	b128      	cbz	r0, 800df7c <validate+0x30>
 800df70:	4b05      	ldr	r3, [pc, #20]	; (800df88 <validate+0x3c>)
 800df72:	4a08      	ldr	r2, [pc, #32]	; (800df94 <validate+0x48>)
 800df74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df76:	4906      	ldr	r1, [pc, #24]	; (800df90 <validate+0x44>)
 800df78:	2001      	movs	r0, #1
 800df7a:	4798      	blx	r3
 800df7c:	6820      	ldr	r0, [r4, #0]
 800df7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df82:	6883      	ldr	r3, [r0, #8]
 800df84:	4718      	bx	r3
 800df86:	bf00      	nop
 800df88:	20001628 	.word	0x20001628
 800df8c:	08019a24 	.word	0x08019a24
 800df90:	08019a54 	.word	0x08019a54
 800df94:	08019a44 	.word	0x08019a44

0800df98 <centering_q12_4>:
 800df98:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800df9c:	f3c1 014f 	ubfx	r1, r1, #1, #16
 800dfa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfa4:	f7ff beb2 	b.w	800dd0c <acc_alg_basic_subtract_section_mean_q12_4>

0800dfa8 <acc_element_centering_init>:
 800dfa8:	b430      	push	{r4, r5}
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2905      	cmp	r1, #5
 800dfae:	4808      	ldr	r0, [pc, #32]	; (800dfd0 <acc_element_centering_init+0x28>)
 800dfb0:	4d08      	ldr	r5, [pc, #32]	; (800dfd4 <acc_element_centering_init+0x2c>)
 800dfb2:	4c09      	ldr	r4, [pc, #36]	; (800dfd8 <acc_element_centering_init+0x30>)
 800dfb4:	60d8      	str	r0, [r3, #12]
 800dfb6:	bf14      	ite	ne
 800dfb8:	2000      	movne	r0, #0
 800dfba:	4908      	ldreq	r1, [pc, #32]	; (800dfdc <acc_element_centering_init+0x34>)
 800dfbc:	879a      	strh	r2, [r3, #60]	; 0x3c
 800dfbe:	bf18      	it	ne
 800dfc0:	4601      	movne	r1, r0
 800dfc2:	e9c3 5401 	strd	r5, r4, [r3, #4]
 800dfc6:	bf08      	it	eq
 800dfc8:	2001      	moveq	r0, #1
 800dfca:	6399      	str	r1, [r3, #56]	; 0x38
 800dfcc:	bc30      	pop	{r4, r5}
 800dfce:	4770      	bx	lr
 800dfd0:	0800df45 	.word	0x0800df45
 800dfd4:	0800df29 	.word	0x0800df29
 800dfd8:	0800df4d 	.word	0x0800df4d
 800dfdc:	0800df99 	.word	0x0800df99

0800dfe0 <convert_q3_12_to_u16>:
 800dfe0:	b410      	push	{r4}
 800dfe2:	0854      	lsrs	r4, r2, #1
 800dfe4:	d009      	beq.n	800dffa <convert_q3_12_to_u16+0x1a>
 800dfe6:	0064      	lsls	r4, r4, #1
 800dfe8:	4421      	add	r1, r4
 800dfea:	4404      	add	r4, r0
 800dfec:	f834 3d02 	ldrh.w	r3, [r4, #-2]!
 800dff0:	005b      	lsls	r3, r3, #1
 800dff2:	4284      	cmp	r4, r0
 800dff4:	f821 3d02 	strh.w	r3, [r1, #-2]!
 800dff8:	d1f8      	bne.n	800dfec <convert_q3_12_to_u16+0xc>
 800dffa:	f022 0001 	bic.w	r0, r2, #1
 800dffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <convert_q15_16_to_f32>:
 800e004:	b410      	push	{r4}
 800e006:	0894      	lsrs	r4, r2, #2
 800e008:	d019      	beq.n	800e03e <convert_q15_16_to_f32+0x3a>
 800e00a:	00a4      	lsls	r4, r4, #2
 800e00c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800e048 <convert_q15_16_to_f32+0x44>
 800e010:	4421      	add	r1, r4
 800e012:	4404      	add	r4, r0
 800e014:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800e018:	fa1f fc83 	uxth.w	ip, r3
 800e01c:	ee07 ca10 	vmov	s14, ip
 800e020:	141b      	asrs	r3, r3, #16
 800e022:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e026:	ee07 3a90 	vmov	s15, r3
 800e02a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e02e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e032:	42a0      	cmp	r0, r4
 800e034:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e038:	ed61 7a01 	vstmdb	r1!, {s15}
 800e03c:	d1ea      	bne.n	800e014 <convert_q15_16_to_f32+0x10>
 800e03e:	f022 0003 	bic.w	r0, r2, #3
 800e042:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e046:	4770      	bx	lr
 800e048:	37800000 	.word	0x37800000

0800e04c <convert_q3_12_complex_to_f32_complex>:
 800e04c:	0892      	lsrs	r2, r2, #2
 800e04e:	b410      	push	{r4}
 800e050:	d026      	beq.n	800e0a0 <convert_q3_12_complex_to_f32_complex+0x54>
 800e052:	00d4      	lsls	r4, r2, #3
 800e054:	eddf 6a15 	vldr	s13, [pc, #84]	; 800e0ac <convert_q3_12_complex_to_f32_complex+0x60>
 800e058:	eddf 5a15 	vldr	s11, [pc, #84]	; 800e0b0 <convert_q3_12_complex_to_f32_complex+0x64>
 800e05c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e060:	190b      	adds	r3, r1, r4
 800e062:	f932 0c02 	ldrsh.w	r0, [r2, #-2]
 800e066:	ee07 0a10 	vmov	s14, r0
 800e06a:	f932 0d04 	ldrsh.w	r0, [r2, #-4]!
 800e06e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e072:	ee07 0a90 	vmov	s15, r0
 800e076:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e07a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e07e:	ee27 6a25 	vmul.f32	s12, s14, s11
 800e082:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e086:	ed03 7a01 	vstr	s14, [r3, #-4]
 800e08a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e08e:	3b08      	subs	r3, #8
 800e090:	edc3 7a00 	vstr	s15, [r3]
 800e094:	4299      	cmp	r1, r3
 800e096:	d1e4      	bne.n	800e062 <convert_q3_12_complex_to_f32_complex+0x16>
 800e098:	4620      	mov	r0, r4
 800e09a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e09e:	4770      	bx	lr
 800e0a0:	4614      	mov	r4, r2
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	39800000 	.word	0x39800000
 800e0b0:	00000000 	.word	0x00000000

0800e0b4 <convert_q12_4_to_q15_16>:
 800e0b4:	0852      	lsrs	r2, r2, #1
 800e0b6:	b410      	push	{r4}
 800e0b8:	d00e      	beq.n	800e0d8 <convert_q12_4_to_q15_16+0x24>
 800e0ba:	0094      	lsls	r4, r2, #2
 800e0bc:	4421      	add	r1, r4
 800e0be:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e0c2:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
 800e0c6:	031b      	lsls	r3, r3, #12
 800e0c8:	4282      	cmp	r2, r0
 800e0ca:	f841 3d04 	str.w	r3, [r1, #-4]!
 800e0ce:	d1f8      	bne.n	800e0c2 <convert_q12_4_to_q15_16+0xe>
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0d6:	4770      	bx	lr
 800e0d8:	4614      	mov	r4, r2
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0e0:	4770      	bx	lr
 800e0e2:	bf00      	nop

0800e0e4 <convert_q12_4_to_q3_12>:
 800e0e4:	b410      	push	{r4}
 800e0e6:	0854      	lsrs	r4, r2, #1
 800e0e8:	d00b      	beq.n	800e102 <convert_q12_4_to_q3_12+0x1e>
 800e0ea:	0064      	lsls	r4, r4, #1
 800e0ec:	4421      	add	r1, r4
 800e0ee:	4404      	add	r4, r0
 800e0f0:	f934 3d02 	ldrsh.w	r3, [r4, #-2]!
 800e0f4:	105b      	asrs	r3, r3, #1
 800e0f6:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800e0fa:	4284      	cmp	r4, r0
 800e0fc:	f821 3d02 	strh.w	r3, [r1, #-2]!
 800e100:	d1f6      	bne.n	800e0f0 <convert_q12_4_to_q3_12+0xc>
 800e102:	f022 0001 	bic.w	r0, r2, #1
 800e106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <convert_q12_4_to_q3_12_complex>:
 800e10c:	0852      	lsrs	r2, r2, #1
 800e10e:	b430      	push	{r4, r5}
 800e110:	d014      	beq.n	800e13c <convert_q12_4_to_q3_12_complex+0x30>
 800e112:	0095      	lsls	r5, r2, #2
 800e114:	4429      	add	r1, r5
 800e116:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e11a:	2400      	movs	r4, #0
 800e11c:	f932 3d02 	ldrsh.w	r3, [r2, #-2]!
 800e120:	f821 4c02 	strh.w	r4, [r1, #-2]
 800e124:	105b      	asrs	r3, r3, #1
 800e126:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800e12a:	4290      	cmp	r0, r2
 800e12c:	f821 3c04 	strh.w	r3, [r1, #-4]
 800e130:	f1a1 0104 	sub.w	r1, r1, #4
 800e134:	d1f2      	bne.n	800e11c <convert_q12_4_to_q3_12_complex+0x10>
 800e136:	4628      	mov	r0, r5
 800e138:	bc30      	pop	{r4, r5}
 800e13a:	4770      	bx	lr
 800e13c:	4615      	mov	r5, r2
 800e13e:	4628      	mov	r0, r5
 800e140:	bc30      	pop	{r4, r5}
 800e142:	4770      	bx	lr

0800e144 <event>:
 800e144:	b570      	push	{r4, r5, r6, lr}
 800e146:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e148:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e14a:	682a      	ldr	r2, [r5, #0]
 800e14c:	4604      	mov	r4, r0
 800e14e:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800e152:	4798      	blx	r3
 800e154:	6823      	ldr	r3, [r4, #0]
 800e156:	6028      	str	r0, [r5, #0]
 800e158:	685a      	ldr	r2, [r3, #4]
 800e15a:	4618      	mov	r0, r3
 800e15c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e160:	4710      	bx	r2
 800e162:	bf00      	nop

0800e164 <reset>:
 800e164:	6800      	ldr	r0, [r0, #0]
 800e166:	68c3      	ldr	r3, [r0, #12]
 800e168:	4718      	bx	r3
 800e16a:	bf00      	nop

0800e16c <validate>:
 800e16c:	6983      	ldr	r3, [r0, #24]
 800e16e:	b510      	push	{r4, lr}
 800e170:	4604      	mov	r4, r0
 800e172:	b143      	cbz	r3, 800e186 <validate+0x1a>
 800e174:	f7fa fe94 	bl	8008ea0 <acc_rss_integration_log_level>
 800e178:	b128      	cbz	r0, 800e186 <validate+0x1a>
 800e17a:	4b0b      	ldr	r3, [pc, #44]	; (800e1a8 <validate+0x3c>)
 800e17c:	4a0b      	ldr	r2, [pc, #44]	; (800e1ac <validate+0x40>)
 800e17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e180:	490b      	ldr	r1, [pc, #44]	; (800e1b0 <validate+0x44>)
 800e182:	2001      	movs	r0, #1
 800e184:	4798      	blx	r3
 800e186:	69e3      	ldr	r3, [r4, #28]
 800e188:	b143      	cbz	r3, 800e19c <validate+0x30>
 800e18a:	f7fa fe89 	bl	8008ea0 <acc_rss_integration_log_level>
 800e18e:	b128      	cbz	r0, 800e19c <validate+0x30>
 800e190:	4b05      	ldr	r3, [pc, #20]	; (800e1a8 <validate+0x3c>)
 800e192:	4a08      	ldr	r2, [pc, #32]	; (800e1b4 <validate+0x48>)
 800e194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e196:	4906      	ldr	r1, [pc, #24]	; (800e1b0 <validate+0x44>)
 800e198:	2001      	movs	r0, #1
 800e19a:	4798      	blx	r3
 800e19c:	6820      	ldr	r0, [r4, #0]
 800e19e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1a2:	6883      	ldr	r3, [r0, #8]
 800e1a4:	4718      	bx	r3
 800e1a6:	bf00      	nop
 800e1a8:	20001628 	.word	0x20001628
 800e1ac:	08019a24 	.word	0x08019a24
 800e1b0:	08019a90 	.word	0x08019a90
 800e1b4:	08019a44 	.word	0x08019a44

0800e1b8 <acc_element_converter_init>:
 800e1b8:	3a01      	subs	r2, #1
 800e1ba:	b510      	push	{r4, lr}
 800e1bc:	2a07      	cmp	r2, #7
 800e1be:	d805      	bhi.n	800e1cc <acc_element_converter_init+0x14>
 800e1c0:	e8df f002 	tbb	[pc, r2]
 800e1c4:	22041e1a 	.word	0x22041e1a
 800e1c8:	262a0e04 	.word	0x262a0e04
 800e1cc:	4b14      	ldr	r3, [pc, #80]	; (800e220 <acc_element_converter_init+0x68>)
 800e1ce:	4a15      	ldr	r2, [pc, #84]	; (800e224 <acc_element_converter_init+0x6c>)
 800e1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d2:	4915      	ldr	r1, [pc, #84]	; (800e228 <acc_element_converter_init+0x70>)
 800e1d4:	2400      	movs	r4, #0
 800e1d6:	6384      	str	r4, [r0, #56]	; 0x38
 800e1d8:	4620      	mov	r0, r4
 800e1da:	4798      	blx	r3
 800e1dc:	4620      	mov	r0, r4
 800e1de:	bd10      	pop	{r4, pc}
 800e1e0:	2905      	cmp	r1, #5
 800e1e2:	d1f3      	bne.n	800e1cc <acc_element_converter_init+0x14>
 800e1e4:	4b11      	ldr	r3, [pc, #68]	; (800e22c <acc_element_converter_init+0x74>)
 800e1e6:	4c12      	ldr	r4, [pc, #72]	; (800e230 <acc_element_converter_init+0x78>)
 800e1e8:	4912      	ldr	r1, [pc, #72]	; (800e234 <acc_element_converter_init+0x7c>)
 800e1ea:	4a13      	ldr	r2, [pc, #76]	; (800e238 <acc_element_converter_init+0x80>)
 800e1ec:	6383      	str	r3, [r0, #56]	; 0x38
 800e1ee:	e9c0 4101 	strd	r4, r1, [r0, #4]
 800e1f2:	60c2      	str	r2, [r0, #12]
 800e1f4:	2001      	movs	r0, #1
 800e1f6:	bd10      	pop	{r4, pc}
 800e1f8:	2906      	cmp	r1, #6
 800e1fa:	d1e7      	bne.n	800e1cc <acc_element_converter_init+0x14>
 800e1fc:	4b0f      	ldr	r3, [pc, #60]	; (800e23c <acc_element_converter_init+0x84>)
 800e1fe:	e7f2      	b.n	800e1e6 <acc_element_converter_init+0x2e>
 800e200:	2904      	cmp	r1, #4
 800e202:	d1e3      	bne.n	800e1cc <acc_element_converter_init+0x14>
 800e204:	4b0e      	ldr	r3, [pc, #56]	; (800e240 <acc_element_converter_init+0x88>)
 800e206:	e7ee      	b.n	800e1e6 <acc_element_converter_init+0x2e>
 800e208:	2905      	cmp	r1, #5
 800e20a:	d1df      	bne.n	800e1cc <acc_element_converter_init+0x14>
 800e20c:	4b0d      	ldr	r3, [pc, #52]	; (800e244 <acc_element_converter_init+0x8c>)
 800e20e:	e7ea      	b.n	800e1e6 <acc_element_converter_init+0x2e>
 800e210:	2905      	cmp	r1, #5
 800e212:	d1db      	bne.n	800e1cc <acc_element_converter_init+0x14>
 800e214:	4b0c      	ldr	r3, [pc, #48]	; (800e248 <acc_element_converter_init+0x90>)
 800e216:	e7e6      	b.n	800e1e6 <acc_element_converter_init+0x2e>
 800e218:	2908      	cmp	r1, #8
 800e21a:	d1d7      	bne.n	800e1cc <acc_element_converter_init+0x14>
 800e21c:	4b0b      	ldr	r3, [pc, #44]	; (800e24c <acc_element_converter_init+0x94>)
 800e21e:	e7e2      	b.n	800e1e6 <acc_element_converter_init+0x2e>
 800e220:	20001628 	.word	0x20001628
 800e224:	08019a68 	.word	0x08019a68
 800e228:	08019a90 	.word	0x08019a90
 800e22c:	0800e0b5 	.word	0x0800e0b5
 800e230:	0800e145 	.word	0x0800e145
 800e234:	0800e16d 	.word	0x0800e16d
 800e238:	0800e165 	.word	0x0800e165
 800e23c:	0800e005 	.word	0x0800e005
 800e240:	0800dfe1 	.word	0x0800dfe1
 800e244:	0800e0e5 	.word	0x0800e0e5
 800e248:	0800e10d 	.word	0x0800e10d
 800e24c:	0800e04d 	.word	0x0800e04d

0800e250 <event>:
 800e250:	4603      	mov	r3, r0
 800e252:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e254:	6800      	ldr	r0, [r0, #0]
 800e256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e258:	6013      	str	r3, [r2, #0]
 800e25a:	6843      	ldr	r3, [r0, #4]
 800e25c:	4718      	bx	r3
 800e25e:	bf00      	nop

0800e260 <reset>:
 800e260:	6800      	ldr	r0, [r0, #0]
 800e262:	68c3      	ldr	r3, [r0, #12]
 800e264:	4718      	bx	r3
 800e266:	bf00      	nop

0800e268 <validate>:
 800e268:	6983      	ldr	r3, [r0, #24]
 800e26a:	b510      	push	{r4, lr}
 800e26c:	4604      	mov	r4, r0
 800e26e:	b143      	cbz	r3, 800e282 <validate+0x1a>
 800e270:	f7fa fe16 	bl	8008ea0 <acc_rss_integration_log_level>
 800e274:	b128      	cbz	r0, 800e282 <validate+0x1a>
 800e276:	4b0b      	ldr	r3, [pc, #44]	; (800e2a4 <validate+0x3c>)
 800e278:	4a0b      	ldr	r2, [pc, #44]	; (800e2a8 <validate+0x40>)
 800e27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e27c:	490b      	ldr	r1, [pc, #44]	; (800e2ac <validate+0x44>)
 800e27e:	2001      	movs	r0, #1
 800e280:	4798      	blx	r3
 800e282:	69e3      	ldr	r3, [r4, #28]
 800e284:	b143      	cbz	r3, 800e298 <validate+0x30>
 800e286:	f7fa fe0b 	bl	8008ea0 <acc_rss_integration_log_level>
 800e28a:	b128      	cbz	r0, 800e298 <validate+0x30>
 800e28c:	4b05      	ldr	r3, [pc, #20]	; (800e2a4 <validate+0x3c>)
 800e28e:	4a08      	ldr	r2, [pc, #32]	; (800e2b0 <validate+0x48>)
 800e290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e292:	4906      	ldr	r1, [pc, #24]	; (800e2ac <validate+0x44>)
 800e294:	2001      	movs	r0, #1
 800e296:	4798      	blx	r3
 800e298:	6820      	ldr	r0, [r4, #0]
 800e29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e29e:	6883      	ldr	r3, [r0, #8]
 800e2a0:	4718      	bx	r3
 800e2a2:	bf00      	nop
 800e2a4:	20001628 	.word	0x20001628
 800e2a8:	08019a24 	.word	0x08019a24
 800e2ac:	08019aa4 	.word	0x08019aa4
 800e2b0:	08019a44 	.word	0x08019a44

0800e2b4 <acc_element_crop_init>:
 800e2b4:	b538      	push	{r3, r4, r5, lr}
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	4608      	mov	r0, r1
 800e2ba:	4615      	mov	r5, r2
 800e2bc:	f7ff fdb4 	bl	800de28 <acc_element_sizeof>
 800e2c0:	4a04      	ldr	r2, [pc, #16]	; (800e2d4 <acc_element_crop_init+0x20>)
 800e2c2:	4b05      	ldr	r3, [pc, #20]	; (800e2d8 <acc_element_crop_init+0x24>)
 800e2c4:	4905      	ldr	r1, [pc, #20]	; (800e2dc <acc_element_crop_init+0x28>)
 800e2c6:	6061      	str	r1, [r4, #4]
 800e2c8:	fb05 f000 	mul.w	r0, r5, r0
 800e2cc:	63a0      	str	r0, [r4, #56]	; 0x38
 800e2ce:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e2d2:	bd38      	pop	{r3, r4, r5, pc}
 800e2d4:	0800e269 	.word	0x0800e269
 800e2d8:	0800e261 	.word	0x0800e261
 800e2dc:	0800e251 	.word	0x0800e251

0800e2e0 <filter_no_operation>:
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop

0800e2e4 <event>:
 800e2e4:	b510      	push	{r4, lr}
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e2ea:	4798      	blx	r3
 800e2ec:	6820      	ldr	r0, [r4, #0]
 800e2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2f2:	6843      	ldr	r3, [r0, #4]
 800e2f4:	4718      	bx	r3
 800e2f6:	bf00      	nop

0800e2f8 <reset>:
 800e2f8:	6800      	ldr	r0, [r0, #0]
 800e2fa:	68c3      	ldr	r3, [r0, #12]
 800e2fc:	4718      	bx	r3
 800e2fe:	bf00      	nop

0800e300 <filter_q3_12_complex>:
 800e300:	4603      	mov	r3, r0
 800e302:	3040      	adds	r0, #64	; 0x40
 800e304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e306:	6919      	ldr	r1, [r3, #16]
 800e308:	6812      	ldr	r2, [r2, #0]
 800e30a:	0892      	lsrs	r2, r2, #2
 800e30c:	f003 bf5a 	b.w	80121c4 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>

0800e310 <validate>:
 800e310:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800e314:	429a      	cmp	r2, r3
 800e316:	b510      	push	{r4, lr}
 800e318:	d007      	beq.n	800e32a <validate+0x1a>
 800e31a:	4b12      	ldr	r3, [pc, #72]	; (800e364 <validate+0x54>)
 800e31c:	4a12      	ldr	r2, [pc, #72]	; (800e368 <validate+0x58>)
 800e31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e320:	4912      	ldr	r1, [pc, #72]	; (800e36c <validate+0x5c>)
 800e322:	2000      	movs	r0, #0
 800e324:	4798      	blx	r3
 800e326:	2000      	movs	r0, #0
 800e328:	bd10      	pop	{r4, pc}
 800e32a:	6983      	ldr	r3, [r0, #24]
 800e32c:	4604      	mov	r4, r0
 800e32e:	b143      	cbz	r3, 800e342 <validate+0x32>
 800e330:	f7fa fdb6 	bl	8008ea0 <acc_rss_integration_log_level>
 800e334:	b128      	cbz	r0, 800e342 <validate+0x32>
 800e336:	4b0b      	ldr	r3, [pc, #44]	; (800e364 <validate+0x54>)
 800e338:	4a0d      	ldr	r2, [pc, #52]	; (800e370 <validate+0x60>)
 800e33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e33c:	490b      	ldr	r1, [pc, #44]	; (800e36c <validate+0x5c>)
 800e33e:	2001      	movs	r0, #1
 800e340:	4798      	blx	r3
 800e342:	69e3      	ldr	r3, [r4, #28]
 800e344:	b143      	cbz	r3, 800e358 <validate+0x48>
 800e346:	f7fa fdab 	bl	8008ea0 <acc_rss_integration_log_level>
 800e34a:	b128      	cbz	r0, 800e358 <validate+0x48>
 800e34c:	4b05      	ldr	r3, [pc, #20]	; (800e364 <validate+0x54>)
 800e34e:	4a09      	ldr	r2, [pc, #36]	; (800e374 <validate+0x64>)
 800e350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e352:	4906      	ldr	r1, [pc, #24]	; (800e36c <validate+0x5c>)
 800e354:	2001      	movs	r0, #1
 800e356:	4798      	blx	r3
 800e358:	6820      	ldr	r0, [r4, #0]
 800e35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e35e:	6883      	ldr	r3, [r0, #8]
 800e360:	4718      	bx	r3
 800e362:	bf00      	nop
 800e364:	20001628 	.word	0x20001628
 800e368:	08019ae0 	.word	0x08019ae0
 800e36c:	08019b08 	.word	0x08019b08
 800e370:	08019a24 	.word	0x08019a24
 800e374:	08019a44 	.word	0x08019a44

0800e378 <acc_element_depth_domain_low_pass_filter_init>:
 800e378:	b570      	push	{r4, r5, r6, lr}
 800e37a:	4604      	mov	r4, r0
 800e37c:	4822      	ldr	r0, [pc, #136]	; (800e408 <acc_element_depth_domain_low_pass_filter_init+0x90>)
 800e37e:	4d23      	ldr	r5, [pc, #140]	; (800e40c <acc_element_depth_domain_low_pass_filter_init+0x94>)
 800e380:	6060      	str	r0, [r4, #4]
 800e382:	4823      	ldr	r0, [pc, #140]	; (800e410 <acc_element_depth_domain_low_pass_filter_init+0x98>)
 800e384:	60a5      	str	r5, [r4, #8]
 800e386:	461e      	mov	r6, r3
 800e388:	60e0      	str	r0, [r4, #12]
 800e38a:	b1ea      	cbz	r2, 800e3c8 <acc_element_depth_domain_low_pass_filter_init+0x50>
 800e38c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800e414 <acc_element_depth_domain_low_pass_filter_init+0x9c>
 800e390:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e398:	d50f      	bpl.n	800e3ba <acc_element_depth_domain_low_pass_filter_init+0x42>
 800e39a:	eeb0 0a67 	vmov.f32	s0, s15
 800e39e:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800e3a2:	2908      	cmp	r1, #8
 800e3a4:	d019      	beq.n	800e3da <acc_element_depth_domain_low_pass_filter_init+0x62>
 800e3a6:	4b1c      	ldr	r3, [pc, #112]	; (800e418 <acc_element_depth_domain_low_pass_filter_init+0xa0>)
 800e3a8:	4a1c      	ldr	r2, [pc, #112]	; (800e41c <acc_element_depth_domain_low_pass_filter_init+0xa4>)
 800e3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ac:	491c      	ldr	r1, [pc, #112]	; (800e420 <acc_element_depth_domain_low_pass_filter_init+0xa8>)
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	63a0      	str	r0, [r4, #56]	; 0x38
 800e3b2:	4605      	mov	r5, r0
 800e3b4:	4798      	blx	r3
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	bd70      	pop	{r4, r5, r6, pc}
 800e3ba:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800e424 <acc_element_depth_domain_low_pass_filter_init+0xac>
 800e3be:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c6:	dd1a      	ble.n	800e3fe <acc_element_depth_domain_low_pass_filter_init+0x86>
 800e3c8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800e3cc:	4a16      	ldr	r2, [pc, #88]	; (800e428 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 800e3ce:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e3d0:	63a2      	str	r2, [r4, #56]	; 0x38
 800e3d2:	61f3      	str	r3, [r6, #28]
 800e3d4:	2501      	movs	r5, #1
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	bd70      	pop	{r4, r5, r6, pc}
 800e3da:	4b14      	ldr	r3, [pc, #80]	; (800e42c <acc_element_depth_domain_low_pass_filter_init+0xb4>)
 800e3dc:	63a3      	str	r3, [r4, #56]	; 0x38
 800e3de:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800e3e8:	2001      	movs	r0, #1
 800e3ea:	f003 fd73 	bl	8011ed4 <acc_alg_biquad_q3_12_lowpass_coeffs>
 800e3ee:	4605      	mov	r5, r0
 800e3f0:	b940      	cbnz	r0, 800e404 <acc_element_depth_domain_low_pass_filter_init+0x8c>
 800e3f2:	4b09      	ldr	r3, [pc, #36]	; (800e418 <acc_element_depth_domain_low_pass_filter_init+0xa0>)
 800e3f4:	4a0e      	ldr	r2, [pc, #56]	; (800e430 <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 800e3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f8:	4909      	ldr	r1, [pc, #36]	; (800e420 <acc_element_depth_domain_low_pass_filter_init+0xa8>)
 800e3fa:	4798      	blx	r3
 800e3fc:	e7eb      	b.n	800e3d6 <acc_element_depth_domain_low_pass_filter_init+0x5e>
 800e3fe:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800e402:	e7ce      	b.n	800e3a2 <acc_element_depth_domain_low_pass_filter_init+0x2a>
 800e404:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e406:	e7e4      	b.n	800e3d2 <acc_element_depth_domain_low_pass_filter_init+0x5a>
 800e408:	0800e2e5 	.word	0x0800e2e5
 800e40c:	0800e311 	.word	0x0800e311
 800e410:	0800e2f9 	.word	0x0800e2f9
 800e414:	3b843809 	.word	0x3b843809
 800e418:	20001628 	.word	0x20001628
 800e41c:	08019a10 	.word	0x08019a10
 800e420:	08019b08 	.word	0x08019b08
 800e424:	3efdca08 	.word	0x3efdca08
 800e428:	0800e2e1 	.word	0x0800e2e1
 800e42c:	0800e301 	.word	0x0800e301
 800e430:	08019ab4 	.word	0x08019ab4

0800e434 <event>:
 800e434:	b510      	push	{r4, lr}
 800e436:	4604      	mov	r4, r0
 800e438:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e43a:	4798      	blx	r3
 800e43c:	6820      	ldr	r0, [r4, #0]
 800e43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e442:	6843      	ldr	r3, [r0, #4]
 800e444:	4718      	bx	r3
 800e446:	bf00      	nop

0800e448 <reset>:
 800e448:	6800      	ldr	r0, [r0, #0]
 800e44a:	68c3      	ldr	r3, [r0, #12]
 800e44c:	4718      	bx	r3
 800e44e:	bf00      	nop

0800e450 <iq_mix_q3_12>:
 800e450:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e452:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 800e456:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 800e45a:	b538      	push	{r3, r4, r5, lr}
 800e45c:	6815      	ldr	r5, [r2, #0]
 800e45e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e460:	4604      	mov	r4, r0
 800e462:	086d      	lsrs	r5, r5, #1
 800e464:	ed93 0a00 	vldr	s0, [r3]
 800e468:	462a      	mov	r2, r5
 800e46a:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800e46e:	f003 fec7 	bl	8012200 <acc_alg_iq_demodulation_q3_12_real>
 800e472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e474:	00ad      	lsls	r5, r5, #2
 800e476:	601d      	str	r5, [r3, #0]
 800e478:	bd38      	pop	{r3, r4, r5, pc}
 800e47a:	bf00      	nop

0800e47c <iq_mix_q3_12_complex>:
 800e47c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e47e:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 800e482:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 800e486:	b538      	push	{r3, r4, r5, lr}
 800e488:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e48a:	6815      	ldr	r5, [r2, #0]
 800e48c:	ed93 0a00 	vldr	s0, [r3]
 800e490:	4604      	mov	r4, r0
 800e492:	08a9      	lsrs	r1, r5, #2
 800e494:	6900      	ldr	r0, [r0, #16]
 800e496:	f003 ff15 	bl	80122c4 <acc_alg_iq_demodulation_q3_12_complex>
 800e49a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e49c:	f025 0503 	bic.w	r5, r5, #3
 800e4a0:	601d      	str	r5, [r3, #0]
 800e4a2:	bd38      	pop	{r3, r4, r5, pc}

0800e4a4 <validate>:
 800e4a4:	4a21      	ldr	r2, [pc, #132]	; (800e52c <validate+0x88>)
 800e4a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	b510      	push	{r4, lr}
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	d00a      	beq.n	800e4c6 <validate+0x22>
 800e4b0:	4a1f      	ldr	r2, [pc, #124]	; (800e530 <validate+0x8c>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d02e      	beq.n	800e514 <validate+0x70>
 800e4b6:	4b1f      	ldr	r3, [pc, #124]	; (800e534 <validate+0x90>)
 800e4b8:	4a1f      	ldr	r2, [pc, #124]	; (800e538 <validate+0x94>)
 800e4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4bc:	491f      	ldr	r1, [pc, #124]	; (800e53c <validate+0x98>)
 800e4be:	2000      	movs	r0, #0
 800e4c0:	4798      	blx	r3
 800e4c2:	2000      	movs	r0, #0
 800e4c4:	bd10      	pop	{r4, pc}
 800e4c6:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d007      	beq.n	800e4de <validate+0x3a>
 800e4ce:	4b19      	ldr	r3, [pc, #100]	; (800e534 <validate+0x90>)
 800e4d0:	4a1b      	ldr	r2, [pc, #108]	; (800e540 <validate+0x9c>)
 800e4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d4:	4919      	ldr	r1, [pc, #100]	; (800e53c <validate+0x98>)
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	4798      	blx	r3
 800e4da:	2000      	movs	r0, #0
 800e4dc:	bd10      	pop	{r4, pc}
 800e4de:	69a3      	ldr	r3, [r4, #24]
 800e4e0:	b143      	cbz	r3, 800e4f4 <validate+0x50>
 800e4e2:	f7fa fcdd 	bl	8008ea0 <acc_rss_integration_log_level>
 800e4e6:	b128      	cbz	r0, 800e4f4 <validate+0x50>
 800e4e8:	4b12      	ldr	r3, [pc, #72]	; (800e534 <validate+0x90>)
 800e4ea:	4a16      	ldr	r2, [pc, #88]	; (800e544 <validate+0xa0>)
 800e4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ee:	4913      	ldr	r1, [pc, #76]	; (800e53c <validate+0x98>)
 800e4f0:	2001      	movs	r0, #1
 800e4f2:	4798      	blx	r3
 800e4f4:	69e3      	ldr	r3, [r4, #28]
 800e4f6:	b143      	cbz	r3, 800e50a <validate+0x66>
 800e4f8:	f7fa fcd2 	bl	8008ea0 <acc_rss_integration_log_level>
 800e4fc:	b128      	cbz	r0, 800e50a <validate+0x66>
 800e4fe:	4b0d      	ldr	r3, [pc, #52]	; (800e534 <validate+0x90>)
 800e500:	4a11      	ldr	r2, [pc, #68]	; (800e548 <validate+0xa4>)
 800e502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e504:	490d      	ldr	r1, [pc, #52]	; (800e53c <validate+0x98>)
 800e506:	2001      	movs	r0, #1
 800e508:	4798      	blx	r3
 800e50a:	6820      	ldr	r0, [r4, #0]
 800e50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e510:	6883      	ldr	r3, [r0, #8]
 800e512:	4718      	bx	r3
 800e514:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d1e0      	bne.n	800e4de <validate+0x3a>
 800e51c:	4b05      	ldr	r3, [pc, #20]	; (800e534 <validate+0x90>)
 800e51e:	4a0b      	ldr	r2, [pc, #44]	; (800e54c <validate+0xa8>)
 800e520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e522:	4906      	ldr	r1, [pc, #24]	; (800e53c <validate+0x98>)
 800e524:	2000      	movs	r0, #0
 800e526:	4798      	blx	r3
 800e528:	e7cb      	b.n	800e4c2 <validate+0x1e>
 800e52a:	bf00      	nop
 800e52c:	0800e47d 	.word	0x0800e47d
 800e530:	0800e451 	.word	0x0800e451
 800e534:	20001628 	.word	0x20001628
 800e538:	08019b6c 	.word	0x08019b6c
 800e53c:	08019b20 	.word	0x08019b20
 800e540:	08019ae0 	.word	0x08019ae0
 800e544:	08019a24 	.word	0x08019a24
 800e548:	08019a44 	.word	0x08019a44
 800e54c:	08019b34 	.word	0x08019b34

0800e550 <acc_element_iq_mixer_init>:
 800e550:	b510      	push	{r4, lr}
 800e552:	4a10      	ldr	r2, [pc, #64]	; (800e594 <acc_element_iq_mixer_init+0x44>)
 800e554:	4c10      	ldr	r4, [pc, #64]	; (800e598 <acc_element_iq_mixer_init+0x48>)
 800e556:	4b11      	ldr	r3, [pc, #68]	; (800e59c <acc_element_iq_mixer_init+0x4c>)
 800e558:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 800e55c:	2904      	cmp	r1, #4
 800e55e:	edc0 0a10 	vstr	s1, [r0, #64]	; 0x40
 800e562:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800e566:	60c3      	str	r3, [r0, #12]
 800e568:	d00f      	beq.n	800e58a <acc_element_iq_mixer_init+0x3a>
 800e56a:	2908      	cmp	r1, #8
 800e56c:	d103      	bne.n	800e576 <acc_element_iq_mixer_init+0x26>
 800e56e:	4b0c      	ldr	r3, [pc, #48]	; (800e5a0 <acc_element_iq_mixer_init+0x50>)
 800e570:	6383      	str	r3, [r0, #56]	; 0x38
 800e572:	2001      	movs	r0, #1
 800e574:	bd10      	pop	{r4, pc}
 800e576:	4b0b      	ldr	r3, [pc, #44]	; (800e5a4 <acc_element_iq_mixer_init+0x54>)
 800e578:	4a0b      	ldr	r2, [pc, #44]	; (800e5a8 <acc_element_iq_mixer_init+0x58>)
 800e57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e57c:	490b      	ldr	r1, [pc, #44]	; (800e5ac <acc_element_iq_mixer_init+0x5c>)
 800e57e:	2400      	movs	r4, #0
 800e580:	6384      	str	r4, [r0, #56]	; 0x38
 800e582:	4620      	mov	r0, r4
 800e584:	4798      	blx	r3
 800e586:	4620      	mov	r0, r4
 800e588:	bd10      	pop	{r4, pc}
 800e58a:	4b09      	ldr	r3, [pc, #36]	; (800e5b0 <acc_element_iq_mixer_init+0x60>)
 800e58c:	6383      	str	r3, [r0, #56]	; 0x38
 800e58e:	2001      	movs	r0, #1
 800e590:	bd10      	pop	{r4, pc}
 800e592:	bf00      	nop
 800e594:	0800e4a5 	.word	0x0800e4a5
 800e598:	0800e435 	.word	0x0800e435
 800e59c:	0800e449 	.word	0x0800e449
 800e5a0:	0800e47d 	.word	0x0800e47d
 800e5a4:	20001628 	.word	0x20001628
 800e5a8:	08019a10 	.word	0x08019a10
 800e5ac:	08019b20 	.word	0x08019b20
 800e5b0:	0800e451 	.word	0x0800e451

0800e5b4 <noise_level_normalization_u16>:
 800e5b4:	0849      	lsrs	r1, r1, #1
 800e5b6:	d01f      	beq.n	800e5f8 <noise_level_normalization_u16+0x44>
 800e5b8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800e5bc:	b470      	push	{r4, r5, r6}
 800e5be:	3802      	subs	r0, #2
 800e5c0:	1e8c      	subs	r4, r1, #2
 800e5c2:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800e5c6:	2600      	movs	r6, #0
 800e5c8:	e006      	b.n	800e5d8 <noise_level_normalization_u16+0x24>
 800e5ca:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800e5ce:	bfa8      	it	ge
 800e5d0:	4629      	movge	r1, r5
 800e5d2:	4284      	cmp	r4, r0
 800e5d4:	8001      	strh	r1, [r0, #0]
 800e5d6:	d00d      	beq.n	800e5f4 <noise_level_normalization_u16+0x40>
 800e5d8:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 800e5dc:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800e5e0:	fb03 f101 	mul.w	r1, r3, r1
 800e5e4:	fb91 f1f2 	sdiv	r1, r1, r2
 800e5e8:	f511 4100 	adds.w	r1, r1, #32768	; 0x8000
 800e5ec:	d5ed      	bpl.n	800e5ca <noise_level_normalization_u16+0x16>
 800e5ee:	4284      	cmp	r4, r0
 800e5f0:	8006      	strh	r6, [r0, #0]
 800e5f2:	d1f1      	bne.n	800e5d8 <noise_level_normalization_u16+0x24>
 800e5f4:	bc70      	pop	{r4, r5, r6}
 800e5f6:	4770      	bx	lr
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop

0800e5fc <event>:
 800e5fc:	b570      	push	{r4, r5, r6, lr}
 800e5fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e600:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800e602:	6819      	ldr	r1, [r3, #0]
 800e604:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800e606:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 800e608:	4604      	mov	r4, r0
 800e60a:	6900      	ldr	r0, [r0, #16]
 800e60c:	47a8      	blx	r5
 800e60e:	6820      	ldr	r0, [r4, #0]
 800e610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e614:	6843      	ldr	r3, [r0, #4]
 800e616:	4718      	bx	r3

0800e618 <reset>:
 800e618:	6800      	ldr	r0, [r0, #0]
 800e61a:	68c3      	ldr	r3, [r0, #12]
 800e61c:	4718      	bx	r3
 800e61e:	bf00      	nop

0800e620 <validate>:
 800e620:	6983      	ldr	r3, [r0, #24]
 800e622:	b510      	push	{r4, lr}
 800e624:	4604      	mov	r4, r0
 800e626:	b143      	cbz	r3, 800e63a <validate+0x1a>
 800e628:	f7fa fc3a 	bl	8008ea0 <acc_rss_integration_log_level>
 800e62c:	b128      	cbz	r0, 800e63a <validate+0x1a>
 800e62e:	4b0b      	ldr	r3, [pc, #44]	; (800e65c <validate+0x3c>)
 800e630:	4a0b      	ldr	r2, [pc, #44]	; (800e660 <validate+0x40>)
 800e632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e634:	490b      	ldr	r1, [pc, #44]	; (800e664 <validate+0x44>)
 800e636:	2001      	movs	r0, #1
 800e638:	4798      	blx	r3
 800e63a:	69e3      	ldr	r3, [r4, #28]
 800e63c:	b143      	cbz	r3, 800e650 <validate+0x30>
 800e63e:	f7fa fc2f 	bl	8008ea0 <acc_rss_integration_log_level>
 800e642:	b128      	cbz	r0, 800e650 <validate+0x30>
 800e644:	4b05      	ldr	r3, [pc, #20]	; (800e65c <validate+0x3c>)
 800e646:	4a08      	ldr	r2, [pc, #32]	; (800e668 <validate+0x48>)
 800e648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e64a:	4906      	ldr	r1, [pc, #24]	; (800e664 <validate+0x44>)
 800e64c:	2001      	movs	r0, #1
 800e64e:	4798      	blx	r3
 800e650:	6820      	ldr	r0, [r4, #0]
 800e652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e656:	6883      	ldr	r3, [r0, #8]
 800e658:	4718      	bx	r3
 800e65a:	bf00      	nop
 800e65c:	20001628 	.word	0x20001628
 800e660:	08019a24 	.word	0x08019a24
 800e664:	08019b84 	.word	0x08019b84
 800e668:	08019a44 	.word	0x08019a44

0800e66c <acc_element_noise_level_normalization_init>:
 800e66c:	2902      	cmp	r1, #2
 800e66e:	b510      	push	{r4, lr}
 800e670:	8702      	strh	r2, [r0, #56]	; 0x38
 800e672:	8743      	strh	r3, [r0, #58]	; 0x3a
 800e674:	d00b      	beq.n	800e68e <acc_element_noise_level_normalization_init+0x22>
 800e676:	2905      	cmp	r1, #5
 800e678:	d009      	beq.n	800e68e <acc_element_noise_level_normalization_init+0x22>
 800e67a:	4b0a      	ldr	r3, [pc, #40]	; (800e6a4 <acc_element_noise_level_normalization_init+0x38>)
 800e67c:	4a0a      	ldr	r2, [pc, #40]	; (800e6a8 <acc_element_noise_level_normalization_init+0x3c>)
 800e67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e680:	490a      	ldr	r1, [pc, #40]	; (800e6ac <acc_element_noise_level_normalization_init+0x40>)
 800e682:	2400      	movs	r4, #0
 800e684:	63c4      	str	r4, [r0, #60]	; 0x3c
 800e686:	4620      	mov	r0, r4
 800e688:	4798      	blx	r3
 800e68a:	4620      	mov	r0, r4
 800e68c:	bd10      	pop	{r4, pc}
 800e68e:	4908      	ldr	r1, [pc, #32]	; (800e6b0 <acc_element_noise_level_normalization_init+0x44>)
 800e690:	4a08      	ldr	r2, [pc, #32]	; (800e6b4 <acc_element_noise_level_normalization_init+0x48>)
 800e692:	4c09      	ldr	r4, [pc, #36]	; (800e6b8 <acc_element_noise_level_normalization_init+0x4c>)
 800e694:	4b09      	ldr	r3, [pc, #36]	; (800e6bc <acc_element_noise_level_normalization_init+0x50>)
 800e696:	63c4      	str	r4, [r0, #60]	; 0x3c
 800e698:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e69c:	60c3      	str	r3, [r0, #12]
 800e69e:	2001      	movs	r0, #1
 800e6a0:	bd10      	pop	{r4, pc}
 800e6a2:	bf00      	nop
 800e6a4:	20001628 	.word	0x20001628
 800e6a8:	08019a10 	.word	0x08019a10
 800e6ac:	08019b84 	.word	0x08019b84
 800e6b0:	0800e5fd 	.word	0x0800e5fd
 800e6b4:	0800e621 	.word	0x0800e621
 800e6b8:	0800e5b5 	.word	0x0800e5b5
 800e6bc:	0800e619 	.word	0x0800e619

0800e6c0 <event>:
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e6c6:	4798      	blx	r3
 800e6c8:	6820      	ldr	r0, [r4, #0]
 800e6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6ce:	6843      	ldr	r3, [r0, #4]
 800e6d0:	4718      	bx	r3
 800e6d2:	bf00      	nop

0800e6d4 <reset>:
 800e6d4:	6800      	ldr	r0, [r0, #0]
 800e6d6:	68c3      	ldr	r3, [r0, #12]
 800e6d8:	4718      	bx	r3
 800e6da:	bf00      	nop

0800e6dc <do_phase_compensation_q3_12>:
 800e6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e0:	2a7c      	cmp	r2, #124	; 0x7c
 800e6e2:	b0fd      	sub	sp, #500	; 0x1f4
 800e6e4:	d82a      	bhi.n	800e73c <do_phase_compensation_q3_12+0x60>
 800e6e6:	4689      	mov	r9, r1
 800e6e8:	b329      	cbz	r1, 800e736 <do_phase_compensation_q3_12+0x5a>
 800e6ea:	469a      	mov	sl, r3
 800e6ec:	ab7c      	add	r3, sp, #496	; 0x1f0
 800e6ee:	2600      	movs	r6, #0
 800e6f0:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 800e6f4:	4615      	mov	r5, r2
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	46b0      	mov	r8, r6
 800e6fa:	f5ab 7bfa 	sub.w	fp, fp, #500	; 0x1f4
 800e6fe:	0097      	lsls	r7, r2, #2
 800e700:	4621      	mov	r1, r4
 800e702:	463a      	mov	r2, r7
 800e704:	4668      	mov	r0, sp
 800e706:	f004 faeb 	bl	8012ce0 <memcpy>
 800e70a:	462a      	mov	r2, r5
 800e70c:	4651      	mov	r1, sl
 800e70e:	4668      	mov	r0, sp
 800e710:	f8cd 8000 	str.w	r8, [sp]
 800e714:	f8cb 8000 	str.w	r8, [fp]
 800e718:	f003 fe4e 	bl	80123b8 <acc_alg_phase_estimation_q3_12>
 800e71c:	4629      	mov	r1, r5
 800e71e:	4668      	mov	r0, sp
 800e720:	f7f9 f88a 	bl	8007838 <acc_alg_basic_math_q3_12_complex_conj_normalize>
 800e724:	3601      	adds	r6, #1
 800e726:	4620      	mov	r0, r4
 800e728:	462a      	mov	r2, r5
 800e72a:	4669      	mov	r1, sp
 800e72c:	f7f9 f828 	bl	8007780 <acc_alg_basic_math_q3_12_complex_mul>
 800e730:	45b1      	cmp	r9, r6
 800e732:	443c      	add	r4, r7
 800e734:	d1e4      	bne.n	800e700 <do_phase_compensation_q3_12+0x24>
 800e736:	b07d      	add	sp, #500	; 0x1f4
 800e738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73c:	217d      	movs	r1, #125	; 0x7d
 800e73e:	4801      	ldr	r0, [pc, #4]	; (800e744 <do_phase_compensation_q3_12+0x68>)
 800e740:	f7f9 fe3c 	bl	80083bc <acc_assert_fail>
 800e744:	08019ba8 	.word	0x08019ba8

0800e748 <phase_compensate_q3_12_complex>:
 800e748:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
 800e74c:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 800e750:	6900      	ldr	r0, [r0, #16]
 800e752:	f7ff bfc3 	b.w	800e6dc <do_phase_compensation_q3_12>
 800e756:	bf00      	nop

0800e758 <validate>:
 800e758:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	b510      	push	{r4, lr}
 800e760:	d007      	beq.n	800e772 <validate+0x1a>
 800e762:	4b12      	ldr	r3, [pc, #72]	; (800e7ac <validate+0x54>)
 800e764:	4a12      	ldr	r2, [pc, #72]	; (800e7b0 <validate+0x58>)
 800e766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e768:	4912      	ldr	r1, [pc, #72]	; (800e7b4 <validate+0x5c>)
 800e76a:	2000      	movs	r0, #0
 800e76c:	4798      	blx	r3
 800e76e:	2000      	movs	r0, #0
 800e770:	bd10      	pop	{r4, pc}
 800e772:	6983      	ldr	r3, [r0, #24]
 800e774:	4604      	mov	r4, r0
 800e776:	b143      	cbz	r3, 800e78a <validate+0x32>
 800e778:	f7fa fb92 	bl	8008ea0 <acc_rss_integration_log_level>
 800e77c:	b128      	cbz	r0, 800e78a <validate+0x32>
 800e77e:	4b0b      	ldr	r3, [pc, #44]	; (800e7ac <validate+0x54>)
 800e780:	4a0d      	ldr	r2, [pc, #52]	; (800e7b8 <validate+0x60>)
 800e782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e784:	490b      	ldr	r1, [pc, #44]	; (800e7b4 <validate+0x5c>)
 800e786:	2001      	movs	r0, #1
 800e788:	4798      	blx	r3
 800e78a:	69e3      	ldr	r3, [r4, #28]
 800e78c:	b143      	cbz	r3, 800e7a0 <validate+0x48>
 800e78e:	f7fa fb87 	bl	8008ea0 <acc_rss_integration_log_level>
 800e792:	b128      	cbz	r0, 800e7a0 <validate+0x48>
 800e794:	4b05      	ldr	r3, [pc, #20]	; (800e7ac <validate+0x54>)
 800e796:	4a09      	ldr	r2, [pc, #36]	; (800e7bc <validate+0x64>)
 800e798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e79a:	4906      	ldr	r1, [pc, #24]	; (800e7b4 <validate+0x5c>)
 800e79c:	2001      	movs	r0, #1
 800e79e:	4798      	blx	r3
 800e7a0:	6820      	ldr	r0, [r4, #0]
 800e7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7a6:	6883      	ldr	r3, [r0, #8]
 800e7a8:	4718      	bx	r3
 800e7aa:	bf00      	nop
 800e7ac:	20001628 	.word	0x20001628
 800e7b0:	08019ae0 	.word	0x08019ae0
 800e7b4:	08019bdc 	.word	0x08019bdc
 800e7b8:	08019a24 	.word	0x08019a24
 800e7bc:	08019a44 	.word	0x08019a44

0800e7c0 <acc_element_phase_compensation_init>:
 800e7c0:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e820 <acc_element_phase_compensation_init+0x60>
 800e7c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e7d0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e7d4:	ee20 0a26 	vmul.f32	s0, s0, s13
 800e7d8:	bfb8      	it	lt
 800e7da:	eef0 7a47 	vmovlt.f32	s15, s14
 800e7de:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e7e2:	b538      	push	{r3, r4, r5, lr}
 800e7e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e7e8:	e9c0 230f 	strd	r2, r3, [r0, #60]	; 0x3c
 800e7ec:	4b0d      	ldr	r3, [pc, #52]	; (800e824 <acc_element_phase_compensation_init+0x64>)
 800e7ee:	4d0e      	ldr	r5, [pc, #56]	; (800e828 <acc_element_phase_compensation_init+0x68>)
 800e7f0:	4c0e      	ldr	r4, [pc, #56]	; (800e82c <acc_element_phase_compensation_init+0x6c>)
 800e7f2:	60c3      	str	r3, [r0, #12]
 800e7f4:	ee10 3a10 	vmov	r3, s0
 800e7f8:	2908      	cmp	r1, #8
 800e7fa:	e9c0 5401 	strd	r5, r4, [r0, #4]
 800e7fe:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800e802:	d009      	beq.n	800e818 <acc_element_phase_compensation_init+0x58>
 800e804:	4b0a      	ldr	r3, [pc, #40]	; (800e830 <acc_element_phase_compensation_init+0x70>)
 800e806:	4a0b      	ldr	r2, [pc, #44]	; (800e834 <acc_element_phase_compensation_init+0x74>)
 800e808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e80a:	490b      	ldr	r1, [pc, #44]	; (800e838 <acc_element_phase_compensation_init+0x78>)
 800e80c:	2400      	movs	r4, #0
 800e80e:	6384      	str	r4, [r0, #56]	; 0x38
 800e810:	4620      	mov	r0, r4
 800e812:	4798      	blx	r3
 800e814:	4620      	mov	r0, r4
 800e816:	bd38      	pop	{r3, r4, r5, pc}
 800e818:	4b08      	ldr	r3, [pc, #32]	; (800e83c <acc_element_phase_compensation_init+0x7c>)
 800e81a:	6383      	str	r3, [r0, #56]	; 0x38
 800e81c:	2001      	movs	r0, #1
 800e81e:	bd38      	pop	{r3, r4, r5, pc}
 800e820:	45800000 	.word	0x45800000
 800e824:	0800e6d5 	.word	0x0800e6d5
 800e828:	0800e6c1 	.word	0x0800e6c1
 800e82c:	0800e759 	.word	0x0800e759
 800e830:	20001628 	.word	0x20001628
 800e834:	08019a10 	.word	0x08019a10
 800e838:	08019bdc 	.word	0x08019bdc
 800e83c:	0800e749 	.word	0x0800e749

0800e840 <event>:
 800e840:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e842:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e844:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 800e848:	6811      	ldr	r1, [r2, #0]
 800e84a:	b570      	push	{r4, r5, r6, lr}
 800e84c:	4604      	mov	r4, r0
 800e84e:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 800e852:	4798      	blx	r3
 800e854:	6823      	ldr	r3, [r4, #0]
 800e856:	7028      	strb	r0, [r5, #0]
 800e858:	685a      	ldr	r2, [r3, #4]
 800e85a:	4618      	mov	r0, r3
 800e85c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e860:	4710      	bx	r2
 800e862:	bf00      	nop

0800e864 <reset>:
 800e864:	6800      	ldr	r0, [r0, #0]
 800e866:	68c3      	ldr	r3, [r0, #12]
 800e868:	4718      	bx	r3
 800e86a:	bf00      	nop

0800e86c <validate>:
 800e86c:	6983      	ldr	r3, [r0, #24]
 800e86e:	b510      	push	{r4, lr}
 800e870:	4604      	mov	r4, r0
 800e872:	b143      	cbz	r3, 800e886 <validate+0x1a>
 800e874:	f7fa fb14 	bl	8008ea0 <acc_rss_integration_log_level>
 800e878:	b128      	cbz	r0, 800e886 <validate+0x1a>
 800e87a:	4b0b      	ldr	r3, [pc, #44]	; (800e8a8 <validate+0x3c>)
 800e87c:	4a0b      	ldr	r2, [pc, #44]	; (800e8ac <validate+0x40>)
 800e87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e880:	490b      	ldr	r1, [pc, #44]	; (800e8b0 <validate+0x44>)
 800e882:	2001      	movs	r0, #1
 800e884:	4798      	blx	r3
 800e886:	69e3      	ldr	r3, [r4, #28]
 800e888:	b143      	cbz	r3, 800e89c <validate+0x30>
 800e88a:	f7fa fb09 	bl	8008ea0 <acc_rss_integration_log_level>
 800e88e:	b128      	cbz	r0, 800e89c <validate+0x30>
 800e890:	4b05      	ldr	r3, [pc, #20]	; (800e8a8 <validate+0x3c>)
 800e892:	4a08      	ldr	r2, [pc, #32]	; (800e8b4 <validate+0x48>)
 800e894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e896:	4906      	ldr	r1, [pc, #24]	; (800e8b0 <validate+0x44>)
 800e898:	2001      	movs	r0, #1
 800e89a:	4798      	blx	r3
 800e89c:	6820      	ldr	r0, [r4, #0]
 800e89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8a2:	6883      	ldr	r3, [r0, #8]
 800e8a4:	4718      	bx	r3
 800e8a6:	bf00      	nop
 800e8a8:	20001628 	.word	0x20001628
 800e8ac:	08019a24 	.word	0x08019a24
 800e8b0:	08019bf8 	.word	0x08019bf8
 800e8b4:	08019a44 	.word	0x08019a44

0800e8b8 <saturation_check_i16>:
 800e8b8:	f003 baa0 	b.w	8011dfc <acc_alg_basic_saturation_check_i16>

0800e8bc <saturation_check_u16>:
 800e8bc:	f003 ba64 	b.w	8011d88 <acc_alg_basic_saturation_check_u16>

0800e8c0 <acc_element_saturation_check_init>:
 800e8c0:	2903      	cmp	r1, #3
 800e8c2:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 800e8c6:	d018      	beq.n	800e8fa <acc_element_saturation_check_init+0x3a>
 800e8c8:	2905      	cmp	r1, #5
 800e8ca:	d00c      	beq.n	800e8e6 <acc_element_saturation_check_init+0x26>
 800e8cc:	2902      	cmp	r1, #2
 800e8ce:	d00a      	beq.n	800e8e6 <acc_element_saturation_check_init+0x26>
 800e8d0:	b510      	push	{r4, lr}
 800e8d2:	4b0b      	ldr	r3, [pc, #44]	; (800e900 <acc_element_saturation_check_init+0x40>)
 800e8d4:	4a0b      	ldr	r2, [pc, #44]	; (800e904 <acc_element_saturation_check_init+0x44>)
 800e8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d8:	490b      	ldr	r1, [pc, #44]	; (800e908 <acc_element_saturation_check_init+0x48>)
 800e8da:	2400      	movs	r4, #0
 800e8dc:	63c4      	str	r4, [r0, #60]	; 0x3c
 800e8de:	4620      	mov	r0, r4
 800e8e0:	4798      	blx	r3
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	bd10      	pop	{r4, pc}
 800e8e6:	4b09      	ldr	r3, [pc, #36]	; (800e90c <acc_element_saturation_check_init+0x4c>)
 800e8e8:	63c3      	str	r3, [r0, #60]	; 0x3c
 800e8ea:	4909      	ldr	r1, [pc, #36]	; (800e910 <acc_element_saturation_check_init+0x50>)
 800e8ec:	4a09      	ldr	r2, [pc, #36]	; (800e914 <acc_element_saturation_check_init+0x54>)
 800e8ee:	4b0a      	ldr	r3, [pc, #40]	; (800e918 <acc_element_saturation_check_init+0x58>)
 800e8f0:	60c3      	str	r3, [r0, #12]
 800e8f2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e8f6:	2001      	movs	r0, #1
 800e8f8:	4770      	bx	lr
 800e8fa:	4b08      	ldr	r3, [pc, #32]	; (800e91c <acc_element_saturation_check_init+0x5c>)
 800e8fc:	63c3      	str	r3, [r0, #60]	; 0x3c
 800e8fe:	e7f4      	b.n	800e8ea <acc_element_saturation_check_init+0x2a>
 800e900:	20001628 	.word	0x20001628
 800e904:	08019a10 	.word	0x08019a10
 800e908:	08019bf8 	.word	0x08019bf8
 800e90c:	0800e8bd 	.word	0x0800e8bd
 800e910:	0800e841 	.word	0x0800e841
 800e914:	0800e86d 	.word	0x0800e86d
 800e918:	0800e865 	.word	0x0800e865
 800e91c:	0800e8b9 	.word	0x0800e8b9

0800e920 <reset>:
 800e920:	69c3      	ldr	r3, [r0, #28]
 800e922:	6800      	ldr	r0, [r0, #0]
 800e924:	2201      	movs	r2, #1
 800e926:	701a      	strb	r2, [r3, #0]
 800e928:	68c3      	ldr	r3, [r0, #12]
 800e92a:	4718      	bx	r3

0800e92c <event>:
 800e92c:	b570      	push	{r4, r5, r6, lr}
 800e92e:	69c5      	ldr	r5, [r0, #28]
 800e930:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e932:	782b      	ldrb	r3, [r5, #0]
 800e934:	6812      	ldr	r2, [r2, #0]
 800e936:	4604      	mov	r4, r0
 800e938:	1d2e      	adds	r6, r5, #4
 800e93a:	6900      	ldr	r0, [r0, #16]
 800e93c:	b94b      	cbnz	r3, 800e952 <event+0x26>
 800e93e:	4631      	mov	r1, r6
 800e940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e942:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 800e946:	4798      	blx	r3
 800e948:	6820      	ldr	r0, [r4, #0]
 800e94a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e94e:	6843      	ldr	r3, [r0, #4]
 800e950:	4718      	bx	r3
 800e952:	4601      	mov	r1, r0
 800e954:	4630      	mov	r0, r6
 800e956:	f004 f9c3 	bl	8012ce0 <memcpy>
 800e95a:	2300      	movs	r3, #0
 800e95c:	702b      	strb	r3, [r5, #0]
 800e95e:	e7f3      	b.n	800e948 <event+0x1c>

0800e960 <filter_q3_12_complex>:
 800e960:	b570      	push	{r4, r5, r6, lr}
 800e962:	4604      	mov	r4, r0
 800e964:	ed2d 8b02 	vpush	{d8}
 800e968:	2008      	movs	r0, #8
 800e96a:	eeb0 8a40 	vmov.f32	s16, s0
 800e96e:	4616      	mov	r6, r2
 800e970:	460d      	mov	r5, r1
 800e972:	f7ff fa59 	bl	800de28 <acc_element_sizeof>
 800e976:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e9b8 <filter_q3_12_complex+0x58>
 800e97a:	fbb6 f3f0 	udiv	r3, r6, r0
 800e97e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e986:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800e98a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800e98e:	ee28 8a07 	vmul.f32	s16, s16, s14
 800e992:	bfb8      	it	lt
 800e994:	eeb0 0a67 	vmovlt.f32	s0, s15
 800e998:	ee38 8a00 	vadd.f32	s16, s16, s0
 800e99c:	4629      	mov	r1, r5
 800e99e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	ee18 2a10 	vmov	r2, s16
 800e9a8:	ecbd 8b02 	vpop	{d8}
 800e9ac:	b212      	sxth	r2, r2
 800e9ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9b2:	f003 ba61 	b.w	8011e78 <acc_alg_basic_exponential_smoothing_q3_12_complex>
 800e9b6:	bf00      	nop
 800e9b8:	45800000 	.word	0x45800000

0800e9bc <validate>:
 800e9bc:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	b510      	push	{r4, lr}
 800e9c4:	d107      	bne.n	800e9d6 <validate+0x1a>
 800e9c6:	4b11      	ldr	r3, [pc, #68]	; (800ea0c <validate+0x50>)
 800e9c8:	4a11      	ldr	r2, [pc, #68]	; (800ea10 <validate+0x54>)
 800e9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9cc:	4911      	ldr	r1, [pc, #68]	; (800ea14 <validate+0x58>)
 800e9ce:	2000      	movs	r0, #0
 800e9d0:	4798      	blx	r3
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	bd10      	pop	{r4, pc}
 800e9d6:	6984      	ldr	r4, [r0, #24]
 800e9d8:	b13c      	cbz	r4, 800e9ea <validate+0x2e>
 800e9da:	4b0c      	ldr	r3, [pc, #48]	; (800ea0c <validate+0x50>)
 800e9dc:	4a0e      	ldr	r2, [pc, #56]	; (800ea18 <validate+0x5c>)
 800e9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9e0:	490c      	ldr	r1, [pc, #48]	; (800ea14 <validate+0x58>)
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	4798      	blx	r3
 800e9e6:	2000      	movs	r0, #0
 800e9e8:	bd10      	pop	{r4, pc}
 800e9ea:	69c2      	ldr	r2, [r0, #28]
 800e9ec:	3204      	adds	r2, #4
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d006      	beq.n	800ea00 <validate+0x44>
 800e9f2:	4b06      	ldr	r3, [pc, #24]	; (800ea0c <validate+0x50>)
 800e9f4:	4a09      	ldr	r2, [pc, #36]	; (800ea1c <validate+0x60>)
 800e9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f8:	4906      	ldr	r1, [pc, #24]	; (800ea14 <validate+0x58>)
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	4798      	blx	r3
 800e9fe:	e7e8      	b.n	800e9d2 <validate+0x16>
 800ea00:	6800      	ldr	r0, [r0, #0]
 800ea02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea06:	6883      	ldr	r3, [r0, #8]
 800ea08:	4718      	bx	r3
 800ea0a:	bf00      	nop
 800ea0c:	20001628 	.word	0x20001628
 800ea10:	08019c14 	.word	0x08019c14
 800ea14:	08019c40 	.word	0x08019c40
 800ea18:	08019c64 	.word	0x08019c64
 800ea1c:	08019c84 	.word	0x08019c84

0800ea20 <acc_element_time_domain_low_pass_filter_init>:
 800ea20:	b510      	push	{r4, lr}
 800ea22:	4a0c      	ldr	r2, [pc, #48]	; (800ea54 <acc_element_time_domain_low_pass_filter_init+0x34>)
 800ea24:	4c0c      	ldr	r4, [pc, #48]	; (800ea58 <acc_element_time_domain_low_pass_filter_init+0x38>)
 800ea26:	4b0d      	ldr	r3, [pc, #52]	; (800ea5c <acc_element_time_domain_low_pass_filter_init+0x3c>)
 800ea28:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 800ea2c:	2908      	cmp	r1, #8
 800ea2e:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800ea32:	60c3      	str	r3, [r0, #12]
 800ea34:	d009      	beq.n	800ea4a <acc_element_time_domain_low_pass_filter_init+0x2a>
 800ea36:	4b0a      	ldr	r3, [pc, #40]	; (800ea60 <acc_element_time_domain_low_pass_filter_init+0x40>)
 800ea38:	4a0a      	ldr	r2, [pc, #40]	; (800ea64 <acc_element_time_domain_low_pass_filter_init+0x44>)
 800ea3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea3c:	490a      	ldr	r1, [pc, #40]	; (800ea68 <acc_element_time_domain_low_pass_filter_init+0x48>)
 800ea3e:	2400      	movs	r4, #0
 800ea40:	6384      	str	r4, [r0, #56]	; 0x38
 800ea42:	4620      	mov	r0, r4
 800ea44:	4798      	blx	r3
 800ea46:	4620      	mov	r0, r4
 800ea48:	bd10      	pop	{r4, pc}
 800ea4a:	4b08      	ldr	r3, [pc, #32]	; (800ea6c <acc_element_time_domain_low_pass_filter_init+0x4c>)
 800ea4c:	6383      	str	r3, [r0, #56]	; 0x38
 800ea4e:	2001      	movs	r0, #1
 800ea50:	bd10      	pop	{r4, pc}
 800ea52:	bf00      	nop
 800ea54:	0800e9bd 	.word	0x0800e9bd
 800ea58:	0800e92d 	.word	0x0800e92d
 800ea5c:	0800e921 	.word	0x0800e921
 800ea60:	20001628 	.word	0x20001628
 800ea64:	08019a10 	.word	0x08019a10
 800ea68:	08019c40 	.word	0x08019c40
 800ea6c:	0800e961 	.word	0x0800e961

0800ea70 <consume>:
 800ea70:	b510      	push	{r4, lr}
 800ea72:	4604      	mov	r4, r0
 800ea74:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 800ea78:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ea7a:	6900      	ldr	r0, [r0, #16]
 800ea7c:	4798      	blx	r3
 800ea7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea80:	2200      	movs	r2, #0
 800ea82:	615a      	str	r2, [r3, #20]
 800ea84:	bd10      	pop	{r4, pc}
 800ea86:	bf00      	nop

0800ea88 <reset>:
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop

0800ea8c <validate>:
 800ea8c:	6983      	ldr	r3, [r0, #24]
 800ea8e:	b510      	push	{r4, lr}
 800ea90:	4604      	mov	r4, r0
 800ea92:	b143      	cbz	r3, 800eaa6 <validate+0x1a>
 800ea94:	f7fa fa04 	bl	8008ea0 <acc_rss_integration_log_level>
 800ea98:	b128      	cbz	r0, 800eaa6 <validate+0x1a>
 800ea9a:	4b0e      	ldr	r3, [pc, #56]	; (800ead4 <validate+0x48>)
 800ea9c:	4a0e      	ldr	r2, [pc, #56]	; (800ead8 <validate+0x4c>)
 800ea9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaa0:	490e      	ldr	r1, [pc, #56]	; (800eadc <validate+0x50>)
 800eaa2:	2001      	movs	r0, #1
 800eaa4:	4798      	blx	r3
 800eaa6:	69e3      	ldr	r3, [r4, #28]
 800eaa8:	b143      	cbz	r3, 800eabc <validate+0x30>
 800eaaa:	f7fa f9f9 	bl	8008ea0 <acc_rss_integration_log_level>
 800eaae:	b128      	cbz	r0, 800eabc <validate+0x30>
 800eab0:	4b08      	ldr	r3, [pc, #32]	; (800ead4 <validate+0x48>)
 800eab2:	4a0b      	ldr	r2, [pc, #44]	; (800eae0 <validate+0x54>)
 800eab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eab6:	4909      	ldr	r1, [pc, #36]	; (800eadc <validate+0x50>)
 800eab8:	2001      	movs	r0, #1
 800eaba:	4798      	blx	r3
 800eabc:	6963      	ldr	r3, [r4, #20]
 800eabe:	b13b      	cbz	r3, 800ead0 <validate+0x44>
 800eac0:	4b04      	ldr	r3, [pc, #16]	; (800ead4 <validate+0x48>)
 800eac2:	4a08      	ldr	r2, [pc, #32]	; (800eae4 <validate+0x58>)
 800eac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac6:	4905      	ldr	r1, [pc, #20]	; (800eadc <validate+0x50>)
 800eac8:	2000      	movs	r0, #0
 800eaca:	4798      	blx	r3
 800eacc:	2000      	movs	r0, #0
 800eace:	bd10      	pop	{r4, pc}
 800ead0:	2001      	movs	r0, #1
 800ead2:	bd10      	pop	{r4, pc}
 800ead4:	20001628 	.word	0x20001628
 800ead8:	08019a24 	.word	0x08019a24
 800eadc:	08019cac 	.word	0x08019cac
 800eae0:	08019a44 	.word	0x08019a44
 800eae4:	08019cc4 	.word	0x08019cc4

0800eae8 <acc_element_sink_callback_init>:
 800eae8:	b410      	push	{r4}
 800eaea:	4a05      	ldr	r2, [pc, #20]	; (800eb00 <acc_element_sink_callback_init+0x18>)
 800eaec:	4c05      	ldr	r4, [pc, #20]	; (800eb04 <acc_element_sink_callback_init+0x1c>)
 800eaee:	4b06      	ldr	r3, [pc, #24]	; (800eb08 <acc_element_sink_callback_init+0x20>)
 800eaf0:	6401      	str	r1, [r0, #64]	; 0x40
 800eaf2:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800eaf6:	60c3      	str	r3, [r0, #12]
 800eaf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	0800ea8d 	.word	0x0800ea8d
 800eb04:	0800ea71 	.word	0x0800ea71
 800eb08:	0800ea89 	.word	0x0800ea89

0800eb0c <acc_element_source_adc_init_radar_engine>:
 800eb0c:	b538      	push	{r3, r4, r5, lr}
 800eb0e:	9d04      	ldr	r5, [sp, #16]
 800eb10:	4604      	mov	r4, r0
 800eb12:	4608      	mov	r0, r1
 800eb14:	63e1      	str	r1, [r4, #60]	; 0x3c
 800eb16:	4611      	mov	r1, r2
 800eb18:	461a      	mov	r2, r3
 800eb1a:	462b      	mov	r3, r5
 800eb1c:	f7fe fa30 	bl	800cf80 <acc_sensor_manager_prepare_radar_engine>
 800eb20:	896b      	ldrh	r3, [r5, #10]
 800eb22:	8723      	strh	r3, [r4, #56]	; 0x38
 800eb24:	bd38      	pop	{r3, r4, r5, pc}
 800eb26:	bf00      	nop

0800eb28 <acc_element_source_adc_init>:
 800eb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb2c:	4605      	mov	r5, r0
 800eb2e:	460c      	mov	r4, r1
 800eb30:	4616      	mov	r6, r2
 800eb32:	461f      	mov	r7, r3
 800eb34:	4608      	mov	r0, r1
 800eb36:	f7f9 ff95 	bl	8008a64 <acc_base_configuration_print>
 800eb3a:	463b      	mov	r3, r7
 800eb3c:	4632      	mov	r2, r6
 800eb3e:	4621      	mov	r1, r4
 800eb40:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800eb42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb46:	f7fe ba63 	b.w	800d010 <acc_sensor_manager_prepare_measurement>
 800eb4a:	bf00      	nop

0800eb4c <acc_element_source_adc_release>:
 800eb4c:	b110      	cbz	r0, 800eb54 <acc_element_source_adc_release+0x8>
 800eb4e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800eb50:	f7fe bb20 	b.w	800d194 <acc_sensor_manager_release_measurement>
 800eb54:	4770      	bx	lr
 800eb56:	bf00      	nop

0800eb58 <acc_element_source_adc_reset>:
 800eb58:	6800      	ldr	r0, [r0, #0]
 800eb5a:	68c3      	ldr	r3, [r0, #12]
 800eb5c:	4718      	bx	r3
 800eb5e:	bf00      	nop

0800eb60 <acc_element_source_adc_validate>:
 800eb60:	6800      	ldr	r0, [r0, #0]
 800eb62:	6883      	ldr	r3, [r0, #8]
 800eb64:	4718      	bx	r3
 800eb66:	bf00      	nop

0800eb68 <acc_element_source_adc_produce>:
 800eb68:	b530      	push	{r4, r5, lr}
 800eb6a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800eb6c:	b083      	sub	sp, #12
 800eb6e:	b1c3      	cbz	r3, 800eba2 <acc_element_source_adc_produce+0x3a>
 800eb70:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800eb72:	491a      	ldr	r1, [pc, #104]	; (800ebdc <acc_element_source_adc_produce+0x74>)
 800eb74:	6a05      	ldr	r5, [r0, #32]
 800eb76:	6011      	str	r1, [r2, #0]
 800eb78:	4604      	mov	r4, r0
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fe fc90 	bl	800d4a0 <acc_sensor_manager_get_sensor_id>
 800eb80:	ab01      	add	r3, sp, #4
 800eb82:	6028      	str	r0, [r5, #0]
 800eb84:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800eb86:	6961      	ldr	r1, [r4, #20]
 800eb88:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800eb8a:	f7fe f967 	bl	800ce5c <acc_sensor_manager_acquire_adc_data>
 800eb8e:	4605      	mov	r5, r0
 800eb90:	b958      	cbnz	r0, 800ebaa <acc_element_source_adc_produce+0x42>
 800eb92:	4b13      	ldr	r3, [pc, #76]	; (800ebe0 <acc_element_source_adc_produce+0x78>)
 800eb94:	4a13      	ldr	r2, [pc, #76]	; (800ebe4 <acc_element_source_adc_produce+0x7c>)
 800eb96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb98:	4913      	ldr	r1, [pc, #76]	; (800ebe8 <acc_element_source_adc_produce+0x80>)
 800eb9a:	4798      	blx	r3
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	b003      	add	sp, #12
 800eba0:	bd30      	pop	{r4, r5, pc}
 800eba2:	461d      	mov	r5, r3
 800eba4:	4628      	mov	r0, r5
 800eba6:	b003      	add	sp, #12
 800eba8:	bd30      	pop	{r4, r5, pc}
 800ebaa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800ebac:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ebb0:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800ebb4:	005b      	lsls	r3, r3, #1
 800ebb6:	6003      	str	r3, [r0, #0]
 800ebb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ebba:	7011      	strb	r1, [r2, #0]
 800ebbc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ebc0:	701a      	strb	r2, [r3, #0]
 800ebc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ebc6:	b12b      	cbz	r3, 800ebd4 <acc_element_source_adc_produce+0x6c>
 800ebc8:	6820      	ldr	r0, [r4, #0]
 800ebca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ebcc:	7013      	strb	r3, [r2, #0]
 800ebce:	6843      	ldr	r3, [r0, #4]
 800ebd0:	4798      	blx	r3
 800ebd2:	e7e3      	b.n	800eb9c <acc_element_source_adc_produce+0x34>
 800ebd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ebd8:	e7f6      	b.n	800ebc8 <acc_element_source_adc_produce+0x60>
 800ebda:	bf00      	nop
 800ebdc:	51645c3c 	.word	0x51645c3c
 800ebe0:	20001628 	.word	0x20001628
 800ebe4:	08019cec 	.word	0x08019cec
 800ebe8:	08019d0c 	.word	0x08019d0c

0800ebec <acc_element_source_adc_inject_data>:
 800ebec:	b570      	push	{r4, r5, r6, lr}
 800ebee:	4604      	mov	r4, r0
 800ebf0:	6940      	ldr	r0, [r0, #20]
 800ebf2:	4d08      	ldr	r5, [pc, #32]	; (800ec14 <acc_element_source_adc_inject_data+0x28>)
 800ebf4:	4616      	mov	r6, r2
 800ebf6:	f004 f873 	bl	8012ce0 <memcpy>
 800ebfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ebfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ebfe:	6820      	ldr	r0, [r4, #0]
 800ec00:	6a22      	ldr	r2, [r4, #32]
 800ec02:	600e      	str	r6, [r1, #0]
 800ec04:	2100      	movs	r1, #0
 800ec06:	601d      	str	r5, [r3, #0]
 800ec08:	6843      	ldr	r3, [r0, #4]
 800ec0a:	6011      	str	r1, [r2, #0]
 800ec0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec10:	4718      	bx	r3
 800ec12:	bf00      	nop
 800ec14:	51645c3c 	.word	0x51645c3c

0800ec18 <acc_dll_calculate_area_settings>:
 800ec18:	0080      	lsls	r0, r0, #2
 800ec1a:	b280      	uxth	r0, r0
 800ec1c:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	428b      	cmp	r3, r1
 800ec24:	8010      	strh	r0, [r2, #0]
 800ec26:	8053      	strh	r3, [r2, #2]
 800ec28:	d314      	bcc.n	800ec54 <acc_dll_calculate_area_settings+0x3c>
 800ec2a:	b430      	push	{r4, r5}
 800ec2c:	fbb3 f4f1 	udiv	r4, r3, r1
 800ec30:	2500      	movs	r5, #0
 800ec32:	fb01 3114 	mls	r1, r1, r4, r3
 800ec36:	2401      	movs	r4, #1
 800ec38:	2303      	movs	r3, #3
 800ec3a:	8094      	strh	r4, [r2, #4]
 800ec3c:	80d4      	strh	r4, [r2, #6]
 800ec3e:	8154      	strh	r4, [r2, #10]
 800ec40:	8214      	strh	r4, [r2, #16]
 800ec42:	8254      	strh	r4, [r2, #18]
 800ec44:	8195      	strh	r5, [r2, #12]
 800ec46:	81d5      	strh	r5, [r2, #14]
 800ec48:	8295      	strh	r5, [r2, #20]
 800ec4a:	8050      	strh	r0, [r2, #2]
 800ec4c:	8011      	strh	r1, [r2, #0]
 800ec4e:	8113      	strh	r3, [r2, #8]
 800ec50:	bc30      	pop	{r4, r5}
 800ec52:	4770      	bx	lr
 800ec54:	2301      	movs	r3, #1
 800ec56:	2100      	movs	r1, #0
 800ec58:	2003      	movs	r0, #3
 800ec5a:	8093      	strh	r3, [r2, #4]
 800ec5c:	8153      	strh	r3, [r2, #10]
 800ec5e:	8193      	strh	r3, [r2, #12]
 800ec60:	8213      	strh	r3, [r2, #16]
 800ec62:	80d1      	strh	r1, [r2, #6]
 800ec64:	8251      	strh	r1, [r2, #18]
 800ec66:	8291      	strh	r1, [r2, #20]
 800ec68:	8110      	strh	r0, [r2, #8]
 800ec6a:	81d0      	strh	r0, [r2, #14]
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop

0800ec70 <acc_cpd_cbank_and_vana_calibration>:
 800ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	b08b      	sub	sp, #44	; 0x2c
 800ec76:	4604      	mov	r4, r0
 800ec78:	e9cd 3106 	strd	r3, r1, [sp, #24]
 800ec7c:	ab09      	add	r3, sp, #36	; 0x24
 800ec7e:	4691      	mov	r9, r2
 800ec80:	9005      	str	r0, [sp, #20]
 800ec82:	2500      	movs	r5, #0
 800ec84:	6810      	ldr	r0, [r2, #0]
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	460a      	mov	r2, r1
 800ec8a:	ab08      	add	r3, sp, #32
 800ec8c:	4621      	mov	r1, r4
 800ec8e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800ec92:	f7fe fc07 	bl	800d4a4 <acc_sensor_protocol_r2_prepare_load>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d067      	beq.n	800ed6a <acc_cpd_cbank_and_vana_calibration+0xfa>
 800ec9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec9c:	f8df b30c 	ldr.w	fp, [pc, #780]	; 800efac <acc_cpd_cbank_and_vana_calibration+0x33c>
 800eca0:	461c      	mov	r4, r3
 800eca2:	f5c5 63ae 	rsb	r3, r5, #1392	; 0x570
 800eca6:	3302      	adds	r3, #2
 800eca8:	429c      	cmp	r4, r3
 800ecaa:	bf28      	it	cs
 800ecac:	461c      	movcs	r4, r3
 800ecae:	9e08      	ldr	r6, [sp, #32]
 800ecb0:	4bb3      	ldr	r3, [pc, #716]	; (800ef80 <acc_cpd_cbank_and_vana_calibration+0x310>)
 800ecb2:	ea4f 0a55 	mov.w	sl, r5, lsr #1
 800ecb6:	0862      	lsrs	r2, r4, #1
 800ecb8:	eb03 008a 	add.w	r0, r3, sl, lsl #2
 800ecbc:	4631      	mov	r1, r6
 800ecbe:	f003 fdf9 	bl	80128b4 <acc_confprogram_copy>
 800ecc2:	fa1f f884 	uxth.w	r8, r4
 800ecc6:	b2af      	uxth	r7, r5
 800ecc8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800eccc:	9301      	str	r3, [sp, #4]
 800ecce:	221b      	movs	r2, #27
 800ecd0:	9200      	str	r2, [sp, #0]
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	4642      	mov	r2, r8
 800ecd6:	4639      	mov	r1, r7
 800ecd8:	465b      	mov	r3, fp
 800ecda:	f003 fcf7 	bl	80126cc <acc_confprogram_patch_offset>
 800ecde:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ece2:	9301      	str	r3, [sp, #4]
 800ece4:	2319      	movs	r3, #25
 800ece6:	4642      	mov	r2, r8
 800ece8:	4639      	mov	r1, r7
 800ecea:	4630      	mov	r0, r6
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	465b      	mov	r3, fp
 800ecf0:	f003 fcec 	bl	80126cc <acc_confprogram_patch_offset>
 800ecf4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ecf8:	9301      	str	r3, [sp, #4]
 800ecfa:	231a      	movs	r3, #26
 800ecfc:	4642      	mov	r2, r8
 800ecfe:	4639      	mov	r1, r7
 800ed00:	4630      	mov	r0, r6
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	465b      	mov	r3, fp
 800ed06:	f003 fce1 	bl	80126cc <acc_confprogram_patch_offset>
 800ed0a:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 800ed0e:	9301      	str	r3, [sp, #4]
 800ed10:	2317      	movs	r3, #23
 800ed12:	4642      	mov	r2, r8
 800ed14:	4639      	mov	r1, r7
 800ed16:	4630      	mov	r0, r6
 800ed18:	9300      	str	r3, [sp, #0]
 800ed1a:	465b      	mov	r3, fp
 800ed1c:	f003 fcd6 	bl	80126cc <acc_confprogram_patch_offset>
 800ed20:	2310      	movs	r3, #16
 800ed22:	9301      	str	r3, [sp, #4]
 800ed24:	2300      	movs	r3, #0
 800ed26:	4642      	mov	r2, r8
 800ed28:	4639      	mov	r1, r7
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	9300      	str	r3, [sp, #0]
 800ed2e:	465b      	mov	r3, fp
 800ed30:	f003 fccc 	bl	80126cc <acc_confprogram_patch_offset>
 800ed34:	4623      	mov	r3, r4
 800ed36:	9a05      	ldr	r2, [sp, #20]
 800ed38:	f8d9 0000 	ldr.w	r0, [r9]
 800ed3c:	fa1f f18a 	uxth.w	r1, sl
 800ed40:	f7fd ff5c 	bl	800cbfc <acc_sensor_r2_load_confmem>
 800ed44:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ed46:	f240 5371 	movw	r3, #1393	; 0x571
 800ed4a:	4425      	add	r5, r4
 800ed4c:	429d      	cmp	r5, r3
 800ed4e:	d9a8      	bls.n	800eca2 <acc_cpd_cbank_and_vana_calibration+0x32>
 800ed50:	2118      	movs	r1, #24
 800ed52:	f8d9 0000 	ldr.w	r0, [r9]
 800ed56:	f7fe fc07 	bl	800d568 <acc_sensor_protocol_r2_run_program>
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	b978      	cbnz	r0, 800ed7e <acc_cpd_cbank_and_vana_calibration+0x10e>
 800ed5e:	4b89      	ldr	r3, [pc, #548]	; (800ef84 <acc_cpd_cbank_and_vana_calibration+0x314>)
 800ed60:	4a89      	ldr	r2, [pc, #548]	; (800ef88 <acc_cpd_cbank_and_vana_calibration+0x318>)
 800ed62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed64:	4989      	ldr	r1, [pc, #548]	; (800ef8c <acc_cpd_cbank_and_vana_calibration+0x31c>)
 800ed66:	4798      	blx	r3
 800ed68:	e005      	b.n	800ed76 <acc_cpd_cbank_and_vana_calibration+0x106>
 800ed6a:	4b86      	ldr	r3, [pc, #536]	; (800ef84 <acc_cpd_cbank_and_vana_calibration+0x314>)
 800ed6c:	4a88      	ldr	r2, [pc, #544]	; (800ef90 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800ed6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed70:	4986      	ldr	r1, [pc, #536]	; (800ef8c <acc_cpd_cbank_and_vana_calibration+0x31c>)
 800ed72:	4604      	mov	r4, r0
 800ed74:	4798      	blx	r3
 800ed76:	4620      	mov	r0, r4
 800ed78:	b00b      	add	sp, #44	; 0x2c
 800ed7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7e:	4885      	ldr	r0, [pc, #532]	; (800ef94 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800ed80:	f7ff f812 	bl	800dda8 <acc_diagnostic_log_set_scope>
 800ed84:	f8d9 1000 	ldr.w	r1, [r9]
 800ed88:	4883      	ldr	r0, [pc, #524]	; (800ef98 <acc_cpd_cbank_and_vana_calibration+0x328>)
 800ed8a:	f7ff f82d 	bl	800dde8 <acc_diagnostic_log_scalar>
 800ed8e:	2203      	movs	r2, #3
 800ed90:	2100      	movs	r1, #0
 800ed92:	4882      	ldr	r0, [pc, #520]	; (800ef9c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800ed94:	f7ff f810 	bl	800ddb8 <acc_diagnostic_log_declare_parameter>
 800ed98:	f8d9 4000 	ldr.w	r4, [r9]
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4620      	mov	r0, r4
 800eda0:	2203      	movs	r2, #3
 800eda2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800eda6:	f7fe fd5d 	bl	800d864 <acc_sensor_protocol_r2_wait_for_specific_event>
 800edaa:	b938      	cbnz	r0, 800edbc <acc_cpd_cbank_and_vana_calibration+0x14c>
 800edac:	4b75      	ldr	r3, [pc, #468]	; (800ef84 <acc_cpd_cbank_and_vana_calibration+0x314>)
 800edae:	4a7c      	ldr	r2, [pc, #496]	; (800efa0 <acc_cpd_cbank_and_vana_calibration+0x330>)
 800edb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edb2:	4976      	ldr	r1, [pc, #472]	; (800ef8c <acc_cpd_cbank_and_vana_calibration+0x31c>)
 800edb4:	2000      	movs	r0, #0
 800edb6:	4798      	blx	r3
 800edb8:	2400      	movs	r4, #0
 800edba:	e7dc      	b.n	800ed76 <acc_cpd_cbank_and_vana_calibration+0x106>
 800edbc:	aa09      	add	r2, sp, #36	; 0x24
 800edbe:	219d      	movs	r1, #157	; 0x9d
 800edc0:	4620      	mov	r0, r4
 800edc2:	f002 fd33 	bl	801182c <acc_sensor_reg_read>
 800edc6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 800edca:	2006      	movs	r0, #6
 800edcc:	2301      	movs	r3, #1
 800edce:	f005 0507 	and.w	r5, r5, #7
 800edd2:	aa09      	add	r2, sp, #36	; 0x24
 800edd4:	4621      	mov	r1, r4
 800edd6:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 800edda:	f7fb fd51 	bl	800a880 <acc_probes_execute_uint16>
 800edde:	4620      	mov	r0, r4
 800ede0:	f7fe fc48 	bl	800d674 <acc_sensor_protocol_r2_ack_event>
 800ede4:	2800      	cmp	r0, #0
 800ede6:	d0e1      	beq.n	800edac <acc_cpd_cbank_and_vana_calibration+0x13c>
 800ede8:	f8d9 6000 	ldr.w	r6, [r9]
 800edec:	9b06      	ldr	r3, [sp, #24]
 800edee:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 800edf2:	601d      	str	r5, [r3, #0]
 800edf4:	4630      	mov	r0, r6
 800edf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800edfa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800edfe:	f7fe fc29 	bl	800d654 <acc_sensor_protocol_r2_is_sensor_running>
 800ee02:	4604      	mov	r4, r0
 800ee04:	b168      	cbz	r0, 800ee22 <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800ee06:	4c5f      	ldr	r4, [pc, #380]	; (800ef84 <acc_cpd_cbank_and_vana_calibration+0x314>)
 800ee08:	4a66      	ldr	r2, [pc, #408]	; (800efa4 <acc_cpd_cbank_and_vana_calibration+0x334>)
 800ee0a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800ee0c:	495f      	ldr	r1, [pc, #380]	; (800ef8c <acc_cpd_cbank_and_vana_calibration+0x31c>)
 800ee0e:	4633      	mov	r3, r6
 800ee10:	2000      	movs	r0, #0
 800ee12:	47a8      	blx	r5
 800ee14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee16:	4a64      	ldr	r2, [pc, #400]	; (800efa8 <acc_cpd_cbank_and_vana_calibration+0x338>)
 800ee18:	495c      	ldr	r1, [pc, #368]	; (800ef8c <acc_cpd_cbank_and_vana_calibration+0x31c>)
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	4798      	blx	r3
 800ee1e:	2400      	movs	r4, #0
 800ee20:	e7a9      	b.n	800ed76 <acc_cpd_cbank_and_vana_calibration+0x106>
 800ee22:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800efc4 <acc_cpd_cbank_and_vana_calibration+0x354>
 800ee26:	4956      	ldr	r1, [pc, #344]	; (800ef80 <acc_cpd_cbank_and_vana_calibration+0x310>)
 800ee28:	9501      	str	r5, [sp, #4]
 800ee2a:	2311      	movs	r3, #17
 800ee2c:	4602      	mov	r2, r0
 800ee2e:	9300      	str	r3, [sp, #0]
 800ee30:	4630      	mov	r0, r6
 800ee32:	4b5e      	ldr	r3, [pc, #376]	; (800efac <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800ee34:	f8cd 8008 	str.w	r8, [sp, #8]
 800ee38:	f003 fccc 	bl	80127d4 <acc_confprogram_live_patch>
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	9300      	str	r3, [sp, #0]
 800ee40:	e9cd 4801 	strd	r4, r8, [sp, #4]
 800ee44:	4b59      	ldr	r3, [pc, #356]	; (800efac <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800ee46:	494e      	ldr	r1, [pc, #312]	; (800ef80 <acc_cpd_cbank_and_vana_calibration+0x310>)
 800ee48:	f8df a150 	ldr.w	sl, [pc, #336]	; 800ef9c <acc_cpd_cbank_and_vana_calibration+0x32c>
 800ee4c:	4622      	mov	r2, r4
 800ee4e:	4630      	mov	r0, r6
 800ee50:	46a1      	mov	r9, r4
 800ee52:	f003 fcbf 	bl	80127d4 <acc_confprogram_live_patch>
 800ee56:	ab09      	add	r3, sp, #36	; 0x24
 800ee58:	4650      	mov	r0, sl
 800ee5a:	f813 7009 	ldrb.w	r7, [r3, r9]
 800ee5e:	4639      	mov	r1, r7
 800ee60:	f7fe ffb2 	bl	800ddc8 <acc_diagnostic_log_set_parameter>
 800ee64:	231f      	movs	r3, #31
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	4945      	ldr	r1, [pc, #276]	; (800ef80 <acc_cpd_cbank_and_vana_calibration+0x310>)
 800ee6a:	4b50      	ldr	r3, [pc, #320]	; (800efac <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	f003 fcae 	bl	80127d4 <acc_confprogram_live_patch>
 800ee78:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800ee7c:	4630      	mov	r0, r6
 800ee7e:	f7fe fb73 	bl	800d568 <acc_sensor_protocol_r2_run_program>
 800ee82:	b178      	cbz	r0, 800eea4 <acc_cpd_cbank_and_vana_calibration+0x234>
 800ee84:	2300      	movs	r3, #0
 800ee86:	2209      	movs	r2, #9
 800ee88:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	f7fe fce9 	bl	800d864 <acc_sensor_protocol_r2_wait_for_specific_event>
 800ee92:	b970      	cbnz	r0, 800eeb2 <acc_cpd_cbank_and_vana_calibration+0x242>
 800ee94:	4c3b      	ldr	r4, [pc, #236]	; (800ef84 <acc_cpd_cbank_and_vana_calibration+0x314>)
 800ee96:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800ee98:	4a45      	ldr	r2, [pc, #276]	; (800efb0 <acc_cpd_cbank_and_vana_calibration+0x340>)
 800ee9a:	493c      	ldr	r1, [pc, #240]	; (800ef8c <acc_cpd_cbank_and_vana_calibration+0x31c>)
 800ee9c:	463b      	mov	r3, r7
 800ee9e:	2000      	movs	r0, #0
 800eea0:	47a8      	blx	r5
 800eea2:	e7b7      	b.n	800ee14 <acc_cpd_cbank_and_vana_calibration+0x1a4>
 800eea4:	4c37      	ldr	r4, [pc, #220]	; (800ef84 <acc_cpd_cbank_and_vana_calibration+0x314>)
 800eea6:	4a43      	ldr	r2, [pc, #268]	; (800efb4 <acc_cpd_cbank_and_vana_calibration+0x344>)
 800eea8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800eeaa:	4938      	ldr	r1, [pc, #224]	; (800ef8c <acc_cpd_cbank_and_vana_calibration+0x31c>)
 800eeac:	463b      	mov	r3, r7
 800eeae:	47a8      	blx	r5
 800eeb0:	e7b0      	b.n	800ee14 <acc_cpd_cbank_and_vana_calibration+0x1a4>
 800eeb2:	2110      	movs	r1, #16
 800eeb4:	9807      	ldr	r0, [sp, #28]
 800eeb6:	f7fd fedb 	bl	800cc70 <acc_sensor_r2_buffer_processed_verify_size>
 800eeba:	b928      	cbnz	r0, 800eec8 <acc_cpd_cbank_and_vana_calibration+0x258>
 800eebc:	4c31      	ldr	r4, [pc, #196]	; (800ef84 <acc_cpd_cbank_and_vana_calibration+0x314>)
 800eebe:	4a3e      	ldr	r2, [pc, #248]	; (800efb8 <acc_cpd_cbank_and_vana_calibration+0x348>)
 800eec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eec2:	4932      	ldr	r1, [pc, #200]	; (800ef8c <acc_cpd_cbank_and_vana_calibration+0x31c>)
 800eec4:	4798      	blx	r3
 800eec6:	e7e6      	b.n	800ee96 <acc_cpd_cbank_and_vana_calibration+0x226>
 800eec8:	2310      	movs	r3, #16
 800eeca:	2200      	movs	r2, #0
 800eecc:	9905      	ldr	r1, [sp, #20]
 800eece:	4630      	mov	r0, r6
 800eed0:	f7fd fed6 	bl	800cc80 <acc_sensor_r2_buffer_processed_read>
 800eed4:	2310      	movs	r3, #16
 800eed6:	4602      	mov	r2, r0
 800eed8:	4604      	mov	r4, r0
 800eeda:	4631      	mov	r1, r6
 800eedc:	2000      	movs	r0, #0
 800eede:	f7fb fccf 	bl	800a880 <acc_probes_execute_uint16>
 800eee2:	4630      	mov	r0, r6
 800eee4:	f7fe fbc6 	bl	800d674 <acc_sensor_protocol_r2_ack_event>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	d0d3      	beq.n	800ee94 <acc_cpd_cbank_and_vana_calibration+0x224>
 800eeec:	2500      	movs	r5, #0
 800eeee:	46ab      	mov	fp, r5
 800eef0:	4621      	mov	r1, r4
 800eef2:	f104 001e 	add.w	r0, r4, #30
 800eef6:	884b      	ldrh	r3, [r1, #2]
 800eef8:	f831 2b02 	ldrh.w	r2, [r1], #2
 800eefc:	4293      	cmp	r3, r2
 800eefe:	449b      	add	fp, r3
 800ef00:	bf34      	ite	cc
 800ef02:	1ad3      	subcc	r3, r2, r3
 800ef04:	1a9b      	subcs	r3, r3, r2
 800ef06:	429d      	cmp	r5, r3
 800ef08:	bf38      	it	cc
 800ef0a:	461d      	movcc	r5, r3
 800ef0c:	4288      	cmp	r0, r1
 800ef0e:	d1f2      	bne.n	800eef6 <acc_cpd_cbank_and_vana_calibration+0x286>
 800ef10:	4651      	mov	r1, sl
 800ef12:	482a      	ldr	r0, [pc, #168]	; (800efbc <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800ef14:	f7fe ff60 	bl	800ddd8 <acc_diagnostic_log_array>
 800ef18:	2110      	movs	r1, #16
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	f7fe ff6c 	bl	800ddf8 <acc_diagnostic_log_data_u16>
 800ef20:	8823      	ldrh	r3, [r4, #0]
 800ef22:	449b      	add	fp, r3
 800ef24:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 800ef28:	f5ab 43f2 	sub.w	r3, fp, #30976	; 0x7900
 800ef2c:	3b18      	subs	r3, #24
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d81a      	bhi.n	800ef6e <acc_cpd_cbank_and_vana_calibration+0x2fe>
 800ef38:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
 800ef3c:	bf8c      	ite	hi
 800ef3e:	2400      	movhi	r4, #0
 800ef40:	2401      	movls	r4, #1
 800ef42:	f7f9 ffad 	bl	8008ea0 <acc_rss_integration_log_level>
 800ef46:	2803      	cmp	r0, #3
 800ef48:	d90a      	bls.n	800ef60 <acc_cpd_cbank_and_vana_calibration+0x2f0>
 800ef4a:	4b0e      	ldr	r3, [pc, #56]	; (800ef84 <acc_cpd_cbank_and_vana_calibration+0x314>)
 800ef4c:	9501      	str	r5, [sp, #4]
 800ef4e:	fa1f f28b 	uxth.w	r2, fp
 800ef52:	9200      	str	r2, [sp, #0]
 800ef54:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800ef56:	4a1a      	ldr	r2, [pc, #104]	; (800efc0 <acc_cpd_cbank_and_vana_calibration+0x350>)
 800ef58:	490c      	ldr	r1, [pc, #48]	; (800ef8c <acc_cpd_cbank_and_vana_calibration+0x31c>)
 800ef5a:	4633      	mov	r3, r6
 800ef5c:	2004      	movs	r0, #4
 800ef5e:	47a8      	blx	r5
 800ef60:	bb94      	cbnz	r4, 800efc8 <acc_cpd_cbank_and_vana_calibration+0x358>
 800ef62:	f1b9 0f00 	cmp.w	r9, #0
 800ef66:	d109      	bne.n	800ef7c <acc_cpd_cbank_and_vana_calibration+0x30c>
 800ef68:	f04f 0901 	mov.w	r9, #1
 800ef6c:	e773      	b.n	800ee56 <acc_cpd_cbank_and_vana_calibration+0x1e6>
 800ef6e:	f7f9 ff97 	bl	8008ea0 <acc_rss_integration_log_level>
 800ef72:	2803      	cmp	r0, #3
 800ef74:	bf88      	it	hi
 800ef76:	2400      	movhi	r4, #0
 800ef78:	d8e7      	bhi.n	800ef4a <acc_cpd_cbank_and_vana_calibration+0x2da>
 800ef7a:	e7f2      	b.n	800ef62 <acc_cpd_cbank_and_vana_calibration+0x2f2>
 800ef7c:	4c01      	ldr	r4, [pc, #4]	; (800ef84 <acc_cpd_cbank_and_vana_calibration+0x314>)
 800ef7e:	e749      	b.n	800ee14 <acc_cpd_cbank_and_vana_calibration+0x1a4>
 800ef80:	08014834 	.word	0x08014834
 800ef84:	20001628 	.word	0x20001628
 800ef88:	08019d88 	.word	0x08019d88
 800ef8c:	08019d68 	.word	0x08019d68
 800ef90:	08019d24 	.word	0x08019d24
 800ef94:	08019d6c 	.word	0x08019d6c
 800ef98:	08019dbc 	.word	0x08019dbc
 800ef9c:	08019dc8 	.word	0x08019dc8
 800efa0:	08019dd4 	.word	0x08019dd4
 800efa4:	08019dec 	.word	0x08019dec
 800efa8:	08019ed4 	.word	0x08019ed4
 800efac:	0801aec4 	.word	0x0801aec4
 800efb0:	08019ea8 	.word	0x08019ea8
 800efb4:	08019e20 	.word	0x08019e20
 800efb8:	08019e60 	.word	0x08019e60
 800efbc:	08019e78 	.word	0x08019e78
 800efc0:	08019e88 	.word	0x08019e88
 800efc4:	0800cb9d 	.word	0x0800cb9d
 800efc8:	9b06      	ldr	r3, [sp, #24]
 800efca:	711f      	strb	r7, [r3, #4]
 800efcc:	f7f9 ff68 	bl	8008ea0 <acc_rss_integration_log_level>
 800efd0:	2801      	cmp	r0, #1
 800efd2:	d909      	bls.n	800efe8 <acc_cpd_cbank_and_vana_calibration+0x378>
 800efd4:	9906      	ldr	r1, [sp, #24]
 800efd6:	4a09      	ldr	r2, [pc, #36]	; (800effc <acc_cpd_cbank_and_vana_calibration+0x38c>)
 800efd8:	790b      	ldrb	r3, [r1, #4]
 800efda:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	680b      	ldr	r3, [r1, #0]
 800efe0:	4a07      	ldr	r2, [pc, #28]	; (800f000 <acc_cpd_cbank_and_vana_calibration+0x390>)
 800efe2:	4908      	ldr	r1, [pc, #32]	; (800f004 <acc_cpd_cbank_and_vana_calibration+0x394>)
 800efe4:	2002      	movs	r0, #2
 800efe6:	47a8      	blx	r5
 800efe8:	9d06      	ldr	r5, [sp, #24]
 800efea:	4807      	ldr	r0, [pc, #28]	; (800f008 <acc_cpd_cbank_and_vana_calibration+0x398>)
 800efec:	6829      	ldr	r1, [r5, #0]
 800efee:	f7fe fefb 	bl	800dde8 <acc_diagnostic_log_scalar>
 800eff2:	7929      	ldrb	r1, [r5, #4]
 800eff4:	4805      	ldr	r0, [pc, #20]	; (800f00c <acc_cpd_cbank_and_vana_calibration+0x39c>)
 800eff6:	f7fe fef7 	bl	800dde8 <acc_diagnostic_log_scalar>
 800effa:	e6bc      	b.n	800ed76 <acc_cpd_cbank_and_vana_calibration+0x106>
 800effc:	20001628 	.word	0x20001628
 800f000:	08019eec 	.word	0x08019eec
 800f004:	08019d68 	.word	0x08019d68
 800f008:	08019f00 	.word	0x08019f00
 800f00c:	08019dc8 	.word	0x08019dc8

0800f010 <acc_cpd_dll_calibration>:
 800f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f014:	ed2d 8b06 	vpush	{d8-d10}
 800f018:	461d      	mov	r5, r3
 800f01a:	b0cd      	sub	sp, #308	; 0x134
 800f01c:	4b63      	ldr	r3, [pc, #396]	; (800f1ac <acc_cpd_dll_calibration+0x19c>)
 800f01e:	9009      	str	r0, [sp, #36]	; 0x24
 800f020:	2700      	movs	r7, #0
 800f022:	f5b1 7f45 	cmp.w	r1, #788	; 0x314
 800f026:	61eb      	str	r3, [r5, #28]
 800f028:	766f      	strb	r7, [r5, #25]
 800f02a:	d20b      	bcs.n	800f044 <acc_cpd_dll_calibration+0x34>
 800f02c:	4b60      	ldr	r3, [pc, #384]	; (800f1b0 <acc_cpd_dll_calibration+0x1a0>)
 800f02e:	4a61      	ldr	r2, [pc, #388]	; (800f1b4 <acc_cpd_dll_calibration+0x1a4>)
 800f030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f032:	4961      	ldr	r1, [pc, #388]	; (800f1b8 <acc_cpd_dll_calibration+0x1a8>)
 800f034:	4638      	mov	r0, r7
 800f036:	4798      	blx	r3
 800f038:	4638      	mov	r0, r7
 800f03a:	b04d      	add	sp, #308	; 0x134
 800f03c:	ecbd 8b06 	vpop	{d8-d10}
 800f040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f044:	f5a1 7316 	sub.w	r3, r1, #600	; 0x258
 800f048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f04a:	f5a1 7145 	sub.w	r1, r1, #788	; 0x314
 800f04e:	f023 0301 	bic.w	r3, r3, #1
 800f052:	4614      	mov	r4, r2
 800f054:	18c3      	adds	r3, r0, r3
 800f056:	f021 0201 	bic.w	r2, r1, #1
 800f05a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f05e:	9111      	str	r1, [sp, #68]	; 0x44
 800f060:	930e      	str	r3, [sp, #56]	; 0x38
 800f062:	eb00 0602 	add.w	r6, r0, r2
 800f066:	f0c0 8235 	bcc.w	800f4d4 <acc_cpd_dll_calibration+0x4c4>
 800f06a:	4854      	ldr	r0, [pc, #336]	; (800f1bc <acc_cpd_dll_calibration+0x1ac>)
 800f06c:	eddf 8a54 	vldr	s17, [pc, #336]	; 800f1c0 <acc_cpd_dll_calibration+0x1b0>
 800f070:	ed9f 8a54 	vldr	s16, [pc, #336]	; 800f1c4 <acc_cpd_dll_calibration+0x1b4>
 800f074:	f7fe fe98 	bl	800dda8 <acc_diagnostic_log_set_scope>
 800f078:	6821      	ldr	r1, [r4, #0]
 800f07a:	4853      	ldr	r0, [pc, #332]	; (800f1c8 <acc_cpd_dll_calibration+0x1b8>)
 800f07c:	f7fe feb4 	bl	800dde8 <acc_diagnostic_log_scalar>
 800f080:	2202      	movs	r2, #2
 800f082:	2101      	movs	r1, #1
 800f084:	4851      	ldr	r0, [pc, #324]	; (800f1cc <acc_cpd_dll_calibration+0x1bc>)
 800f086:	f7fe fe97 	bl	800ddb8 <acc_diagnostic_log_declare_parameter>
 800f08a:	221f      	movs	r2, #31
 800f08c:	2100      	movs	r1, #0
 800f08e:	4850      	ldr	r0, [pc, #320]	; (800f1d0 <acc_cpd_dll_calibration+0x1c0>)
 800f090:	f7fe fe92 	bl	800ddb8 <acc_diagnostic_log_declare_parameter>
 800f094:	227b      	movs	r2, #123	; 0x7b
 800f096:	2100      	movs	r1, #0
 800f098:	484e      	ldr	r0, [pc, #312]	; (800f1d4 <acc_cpd_dll_calibration+0x1c4>)
 800f09a:	f7fe fe8d 	bl	800ddb8 <acc_diagnostic_log_declare_parameter>
 800f09e:	2302      	movs	r3, #2
 800f0a0:	461f      	mov	r7, r3
 800f0a2:	220b      	movs	r2, #11
 800f0a4:	2100      	movs	r1, #0
 800f0a6:	484c      	ldr	r0, [pc, #304]	; (800f1d8 <acc_cpd_dll_calibration+0x1c8>)
 800f0a8:	931c      	str	r3, [sp, #112]	; 0x70
 800f0aa:	46b1      	mov	r9, r6
 800f0ac:	f7fe fe84 	bl	800ddb8 <acc_diagnostic_log_declare_parameter>
 800f0b0:	46b8      	mov	r8, r7
 800f0b2:	46a2      	mov	sl, r4
 800f0b4:	9517      	str	r5, [sp, #92]	; 0x5c
 800f0b6:	4641      	mov	r1, r8
 800f0b8:	4844      	ldr	r0, [pc, #272]	; (800f1cc <acc_cpd_dll_calibration+0x1bc>)
 800f0ba:	ed9f 9a48 	vldr	s18, [pc, #288]	; 800f1dc <acc_cpd_dll_calibration+0x1cc>
 800f0be:	f7fe fe83 	bl	800ddc8 <acc_diagnostic_log_set_parameter>
 800f0c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800f0c4:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800f0c8:	462b      	mov	r3, r5
 800f0ca:	464f      	mov	r7, r9
 800f0cc:	4645      	mov	r5, r8
 800f0ce:	2400      	movs	r4, #0
 800f0d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f0d4:	4698      	mov	r8, r3
 800f0d6:	e024      	b.n	800f122 <acc_cpd_dll_calibration+0x112>
 800f0d8:	f838 3b32 	ldrh.w	r3, [r8], #50
 800f0dc:	ee06 3a90 	vmov	s13, r3
 800f0e0:	4b3f      	ldr	r3, [pc, #252]	; (800f1e0 <acc_cpd_dll_calibration+0x1d0>)
 800f0e2:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 800f0e6:	4b3f      	ldr	r3, [pc, #252]	; (800f1e4 <acc_cpd_dll_calibration+0x1d4>)
 800f0e8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800f0ec:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800f0f0:	ee66 6aa8 	vmul.f32	s13, s13, s17
 800f0f4:	1ad3      	subs	r3, r2, r3
 800f0f6:	b21b      	sxth	r3, r3
 800f0f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f0fc:	ee07 3a90 	vmov	s15, r3
 800f100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f104:	ee66 7a88 	vmul.f32	s15, s13, s16
 800f108:	ee67 7a89 	vmul.f32	s15, s15, s18
 800f10c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f114:	ee17 3a90 	vmov	r3, s15
 800f118:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
 800f11c:	3401      	adds	r4, #1
 800f11e:	2c0c      	cmp	r4, #12
 800f120:	d029      	beq.n	800f176 <acc_cpd_dll_calibration+0x166>
 800f122:	482d      	ldr	r0, [pc, #180]	; (800f1d8 <acc_cpd_dll_calibration+0x1c8>)
 800f124:	4621      	mov	r1, r4
 800f126:	f7fe fe4f 	bl	800ddc8 <acc_diagnostic_log_set_parameter>
 800f12a:	e9da 2100 	ldrd	r2, r1, [sl]
 800f12e:	e9da 0302 	ldrd	r0, r3, [sl, #8]
 800f132:	923f      	str	r2, [sp, #252]	; 0xfc
 800f134:	9140      	str	r1, [sp, #256]	; 0x100
 800f136:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 800f13a:	f8da 1014 	ldr.w	r1, [sl, #20]
 800f13e:	9041      	str	r0, [sp, #260]	; 0x104
 800f140:	f8da 0018 	ldr.w	r0, [sl, #24]
 800f144:	9342      	str	r3, [sp, #264]	; 0x108
 800f146:	f8ad 210c 	strh.w	r2, [sp, #268]	; 0x10c
 800f14a:	9146      	str	r1, [sp, #280]	; 0x118
 800f14c:	9047      	str	r0, [sp, #284]	; 0x11c
 800f14e:	4643      	mov	r3, r8
 800f150:	aa3f      	add	r2, sp, #252	; 0xfc
 800f152:	4659      	mov	r1, fp
 800f154:	4648      	mov	r0, r9
 800f156:	9544      	str	r5, [sp, #272]	; 0x110
 800f158:	9445      	str	r4, [sp, #276]	; 0x114
 800f15a:	f001 fe17 	bl	8010d8c <acc_cpd_rx_fine_dip_calibration>
 800f15e:	ae26      	add	r6, sp, #152	; 0x98
 800f160:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f164:	2800      	cmp	r0, #0
 800f166:	d1b7      	bne.n	800f0d8 <acc_cpd_dll_calibration+0xc8>
 800f168:	4607      	mov	r7, r0
 800f16a:	4638      	mov	r0, r7
 800f16c:	b04d      	add	sp, #308	; 0x134
 800f16e:	ecbd 8b06 	vpop	{d8-d10}
 800f172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f176:	491c      	ldr	r1, [pc, #112]	; (800f1e8 <acc_cpd_dll_calibration+0x1d8>)
 800f178:	481c      	ldr	r0, [pc, #112]	; (800f1ec <acc_cpd_dll_calibration+0x1dc>)
 800f17a:	f7fe fe2d 	bl	800ddd8 <acc_diagnostic_log_array>
 800f17e:	4621      	mov	r1, r4
 800f180:	4630      	mov	r0, r6
 800f182:	f7fe fe39 	bl	800ddf8 <acc_diagnostic_log_data_u16>
 800f186:	aa23      	add	r2, sp, #140	; 0x8c
 800f188:	4631      	mov	r1, r6
 800f18a:	4620      	mov	r0, r4
 800f18c:	f000 fd56 	bl	800fc3c <acc_dll_dly_coarse_priority_sort>
 800f190:	4915      	ldr	r1, [pc, #84]	; (800f1e8 <acc_cpd_dll_calibration+0x1d8>)
 800f192:	4817      	ldr	r0, [pc, #92]	; (800f1f0 <acc_cpd_dll_calibration+0x1e0>)
 800f194:	f7fe fe20 	bl	800ddd8 <acc_diagnostic_log_array>
 800f198:	4621      	mov	r1, r4
 800f19a:	a823      	add	r0, sp, #140	; 0x8c
 800f19c:	f7fe fe3c 	bl	800de18 <acc_diagnostic_log_data_u8>
 800f1a0:	ab23      	add	r3, sp, #140	; 0x8c
 800f1a2:	46d0      	mov	r8, sl
 800f1a4:	930a      	str	r3, [sp, #40]	; 0x28
 800f1a6:	950d      	str	r5, [sp, #52]	; 0x34
 800f1a8:	46ba      	mov	sl, r7
 800f1aa:	e03e      	b.n	800f22a <acc_cpd_dll_calibration+0x21a>
 800f1ac:	ff800000 	.word	0xff800000
 800f1b0:	20001628 	.word	0x20001628
 800f1b4:	08018878 	.word	0x08018878
 800f1b8:	08019f1c 	.word	0x08019f1c
 800f1bc:	08019f58 	.word	0x08019f58
 800f1c0:	37800000 	.word	0x37800000
 800f1c4:	3f99999a 	.word	0x3f99999a
 800f1c8:	08019dbc 	.word	0x08019dbc
 800f1cc:	08019f68 	.word	0x08019f68
 800f1d0:	08019f74 	.word	0x08019f74
 800f1d4:	08019f80 	.word	0x08019f80
 800f1d8:	08019f8c 	.word	0x08019f8c
 800f1dc:	447a0000 	.word	0x447a0000
 800f1e0:	0801d3e4 	.word	0x0801d3e4
 800f1e4:	0801d3dc 	.word	0x0801d3dc
 800f1e8:	08019f98 	.word	0x08019f98
 800f1ec:	08019fb0 	.word	0x08019fb0
 800f1f0:	08019fc4 	.word	0x08019fc4
 800f1f4:	f7f9 fe54 	bl	8008ea0 <acc_rss_integration_log_level>
 800f1f8:	2803      	cmp	r0, #3
 800f1fa:	d905      	bls.n	800f208 <acc_cpd_dll_calibration+0x1f8>
 800f1fc:	4bc1      	ldr	r3, [pc, #772]	; (800f504 <acc_cpd_dll_calibration+0x4f4>)
 800f1fe:	4ac2      	ldr	r2, [pc, #776]	; (800f508 <acc_cpd_dll_calibration+0x4f8>)
 800f200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f202:	49c2      	ldr	r1, [pc, #776]	; (800f50c <acc_cpd_dll_calibration+0x4fc>)
 800f204:	2004      	movs	r0, #4
 800f206:	4798      	blx	r3
 800f208:	f7f9 fe4a 	bl	8008ea0 <acc_rss_integration_log_level>
 800f20c:	2803      	cmp	r0, #3
 800f20e:	d908      	bls.n	800f222 <acc_cpd_dll_calibration+0x212>
 800f210:	4bbc      	ldr	r3, [pc, #752]	; (800f504 <acc_cpd_dll_calibration+0x4f4>)
 800f212:	f8cd 9000 	str.w	r9, [sp]
 800f216:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800f218:	4abd      	ldr	r2, [pc, #756]	; (800f510 <acc_cpd_dll_calibration+0x500>)
 800f21a:	49bc      	ldr	r1, [pc, #752]	; (800f50c <acc_cpd_dll_calibration+0x4fc>)
 800f21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f21e:	2004      	movs	r0, #4
 800f220:	47a0      	blx	r4
 800f222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f224:	429e      	cmp	r6, r3
 800f226:	f000 8149 	beq.w	800f4bc <acc_cpd_dll_calibration+0x4ac>
 800f22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f22c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f22e:	f813 9b01 	ldrb.w	r9, [r3], #1
 800f232:	930a      	str	r3, [sp, #40]	; 0x28
 800f234:	eb09 0489 	add.w	r4, r9, r9, lsl #2
 800f238:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800f23c:	eb07 0544 	add.w	r5, r7, r4, lsl #1
 800f240:	4629      	mov	r1, r5
 800f242:	ab32      	add	r3, sp, #200	; 0xc8
 800f244:	aa3f      	add	r2, sp, #252	; 0xfc
 800f246:	2019      	movs	r0, #25
 800f248:	f000 fdae 	bl	800fda8 <acc_dll_plateau_finder>
 800f24c:	9015      	str	r0, [sp, #84]	; 0x54
 800f24e:	2800      	cmp	r0, #0
 800f250:	d0da      	beq.n	800f208 <acc_cpd_dll_calibration+0x1f8>
 800f252:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 800f256:	49af      	ldr	r1, [pc, #700]	; (800f514 <acc_cpd_dll_calibration+0x504>)
 800f258:	eddf 7abe 	vldr	s15, [pc, #760]	; 800f554 <acc_cpd_dll_calibration+0x544>
 800f25c:	ee06 3a10 	vmov	s12, r3
 800f260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f262:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800f266:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800f26a:	49ab      	ldr	r1, [pc, #684]	; (800f518 <acc_cpd_dll_calibration+0x508>)
 800f26c:	ee26 6a28 	vmul.f32	s12, s12, s17
 800f270:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f274:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f278:	1ad3      	subs	r3, r2, r3
 800f27a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f27e:	b21b      	sxth	r3, r3
 800f280:	ee06 3a90 	vmov	s13, r3
 800f284:	ee26 6a08 	vmul.f32	s12, s12, s16
 800f288:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f28c:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f290:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800f294:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800f298:	ee16 3a90 	vmov	r3, s13
 800f29c:	b21a      	sxth	r2, r3
 800f29e:	f5a2 7343 	sub.w	r3, r2, #780	; 0x30c
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800f2a8:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
 800f2ac:	d8a2      	bhi.n	800f1f4 <acc_cpd_dll_calibration+0x1e4>
 800f2ae:	f8bd 40fc 	ldrh.w	r4, [sp, #252]	; 0xfc
 800f2b2:	4b9a      	ldr	r3, [pc, #616]	; (800f51c <acc_cpd_dll_calibration+0x50c>)
 800f2b4:	a94c      	add	r1, sp, #304	; 0x130
 800f2b6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800f2ba:	ee06 2a90 	vmov	s13, r2
 800f2be:	f831 7c68 	ldrh.w	r7, [r1, #-104]
 800f2c2:	9716      	str	r7, [sp, #88]	; 0x58
 800f2c4:	fba3 3207 	umull	r3, r2, r3, r7
 800f2c8:	f3c2 0287 	ubfx	r2, r2, #2, #8
 800f2cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f2d0:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 800f2d4:	ee06 3a10 	vmov	s12, r3
 800f2d8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800f2dc:	ee26 6a28 	vmul.f32	s12, s12, s17
 800f2e0:	ee36 7a47 	vsub.f32	s14, s12, s14
 800f2e4:	ee27 7a08 	vmul.f32	s14, s14, s16
 800f2e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f2f4:	ee17 3a90 	vmov	r3, s15
 800f2f8:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
 800f2fc:	f7f9 fdd0 	bl	8008ea0 <acc_rss_integration_log_level>
 800f300:	2803      	cmp	r0, #3
 800f302:	d907      	bls.n	800f314 <acc_cpd_dll_calibration+0x304>
 800f304:	4a7f      	ldr	r2, [pc, #508]	; (800f504 <acc_cpd_dll_calibration+0x4f4>)
 800f306:	9700      	str	r7, [sp, #0]
 800f308:	4623      	mov	r3, r4
 800f30a:	4980      	ldr	r1, [pc, #512]	; (800f50c <acc_cpd_dll_calibration+0x4fc>)
 800f30c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800f30e:	4a84      	ldr	r2, [pc, #528]	; (800f520 <acc_cpd_dll_calibration+0x510>)
 800f310:	2004      	movs	r0, #4
 800f312:	47a0      	blx	r4
 800f314:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f316:	4883      	ldr	r0, [pc, #524]	; (800f524 <acc_cpd_dll_calibration+0x514>)
 800f318:	f7fe fd56 	bl	800ddc8 <acc_diagnostic_log_set_parameter>
 800f31c:	4982      	ldr	r1, [pc, #520]	; (800f528 <acc_cpd_dll_calibration+0x518>)
 800f31e:	4883      	ldr	r0, [pc, #524]	; (800f52c <acc_cpd_dll_calibration+0x51c>)
 800f320:	f7fe fd5a 	bl	800ddd8 <acc_diagnostic_log_array>
 800f324:	2101      	movs	r1, #1
 800f326:	f10d 0082 	add.w	r0, sp, #130	; 0x82
 800f32a:	f7fe fd6d 	bl	800de08 <acc_diagnostic_log_data_i16>
 800f32e:	497e      	ldr	r1, [pc, #504]	; (800f528 <acc_cpd_dll_calibration+0x518>)
 800f330:	487f      	ldr	r0, [pc, #508]	; (800f530 <acc_cpd_dll_calibration+0x520>)
 800f332:	f7fe fd51 	bl	800ddd8 <acc_diagnostic_log_array>
 800f336:	2101      	movs	r1, #1
 800f338:	a820      	add	r0, sp, #128	; 0x80
 800f33a:	f7fe fd65 	bl	800de08 <acc_diagnostic_log_data_i16>
 800f33e:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 800f342:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 800f346:	2bc8      	cmp	r3, #200	; 0xc8
 800f348:	f200 80d0 	bhi.w	800f4ec <acc_cpd_dll_calibration+0x4dc>
 800f34c:	2300      	movs	r3, #0
 800f34e:	e9cd 391a 	strd	r3, r9, [sp, #104]	; 0x68
 800f352:	211b      	movs	r1, #27
 800f354:	b28b      	uxth	r3, r1
 800f356:	461c      	mov	r4, r3
 800f358:	4876      	ldr	r0, [pc, #472]	; (800f534 <acc_cpd_dll_calibration+0x524>)
 800f35a:	931e      	str	r3, [sp, #120]	; 0x78
 800f35c:	f7fe fd34 	bl	800ddc8 <acc_diagnostic_log_set_parameter>
 800f360:	4620      	mov	r0, r4
 800f362:	aa2c      	add	r2, sp, #176	; 0xb0
 800f364:	217c      	movs	r1, #124	; 0x7c
 800f366:	f7ff fc57 	bl	800ec18 <acc_dll_calculate_area_settings>
 800f36a:	f898 301c 	ldrb.w	r3, [r8, #28]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f000 80ae 	beq.w	800f4d0 <acc_cpd_dll_calibration+0x4c0>
 800f374:	f898 201d 	ldrb.w	r2, [r8, #29]
 800f378:	f082 0201 	eor.w	r2, r2, #1
 800f37c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f380:	f8b8 e010 	ldrh.w	lr, [r8, #16]
 800f384:	f8bd c0b2 	ldrh.w	ip, [sp, #178]	; 0xb2
 800f388:	f8bd 70b6 	ldrh.w	r7, [sp, #182]	; 0xb6
 800f38c:	f8bd 50b8 	ldrh.w	r5, [sp, #184]	; 0xb8
 800f390:	f8bd 40bc 	ldrh.w	r4, [sp, #188]	; 0xbc
 800f394:	f8bd 90b0 	ldrh.w	r9, [sp, #176]	; 0xb0
 800f398:	e9d8 1001 	ldrd	r1, r0, [r8, #4]
 800f39c:	f8ca 3008 	str.w	r3, [sl, #8]
 800f3a0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800f3a4:	f8ca 3010 	str.w	r3, [sl, #16]
 800f3a8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f3ac:	f8ca 3014 	str.w	r3, [sl, #20]
 800f3b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f3b2:	f8ca 3018 	str.w	r3, [sl, #24]
 800f3b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3b8:	f8ca 1000 	str.w	r1, [sl]
 800f3bc:	f8ca 0004 	str.w	r0, [sl, #4]
 800f3c0:	f8aa e00c 	strh.w	lr, [sl, #12]
 800f3c4:	f8bd 00be 	ldrh.w	r0, [sp, #190]	; 0xbe
 800f3c8:	f8bd e0c4 	ldrh.w	lr, [sp, #196]	; 0xc4
 800f3cc:	f8bd 10c2 	ldrh.w	r1, [sp, #194]	; 0xc2
 800f3d0:	f8ca 301c 	str.w	r3, [sl, #28]
 800f3d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3d6:	f8ca 3020 	str.w	r3, [sl, #32]
 800f3da:	f04f 0b00 	mov.w	fp, #0
 800f3de:	2301      	movs	r3, #1
 800f3e0:	f8ca c02c 	str.w	ip, [sl, #44]	; 0x2c
 800f3e4:	f8ca 7030 	str.w	r7, [sl, #48]	; 0x30
 800f3e8:	f04f 0c16 	mov.w	ip, #22
 800f3ec:	270f      	movs	r7, #15
 800f3ee:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 800f3f2:	f8ca 4038 	str.w	r4, [sl, #56]	; 0x38
 800f3f6:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 800f3fa:	2406      	movs	r4, #6
 800f3fc:	2003      	movs	r0, #3
 800f3fe:	f8ca 9028 	str.w	r9, [sl, #40]	; 0x28
 800f402:	2507      	movs	r5, #7
 800f404:	f8ca 1040 	str.w	r1, [sl, #64]	; 0x40
 800f408:	f06f 0101 	mvn.w	r1, #1
 800f40c:	e9ca c71f 	strd	ip, r7, [sl, #124]	; 0x7c
 800f410:	e9ca 4024 	strd	r4, r0, [sl, #144]	; 0x90
 800f414:	e9ca eb11 	strd	lr, fp, [sl, #68]	; 0x44
 800f418:	e9ca 3b13 	strd	r3, fp, [sl, #76]	; 0x4c
 800f41c:	e9ca b315 	strd	fp, r3, [sl, #84]	; 0x54
 800f420:	e9ca 331c 	strd	r3, r3, [sl, #112]	; 0x70
 800f424:	e9ca 3b29 	strd	r3, fp, [sl, #164]	; 0xa4
 800f428:	f88a 30ad 	strb.w	r3, [sl, #173]	; 0xad
 800f42c:	f8ca 206c 	str.w	r2, [sl, #108]	; 0x6c
 800f430:	f8ca 1098 	str.w	r1, [sl, #152]	; 0x98
 800f434:	e9ca bb17 	strd	fp, fp, [sl, #92]	; 0x5c
 800f438:	e9ca bb19 	strd	fp, fp, [sl, #100]	; 0x64
 800f43c:	f8ca b078 	str.w	fp, [sl, #120]	; 0x78
 800f440:	f8ca b084 	str.w	fp, [sl, #132]	; 0x84
 800f444:	f88a b08c 	strb.w	fp, [sl, #140]	; 0x8c
 800f448:	e9ca bb27 	strd	fp, fp, [sl, #156]	; 0x9c
 800f44c:	f88a b08d 	strb.w	fp, [sl, #141]	; 0x8d
 800f450:	f8ca 5088 	str.w	r5, [sl, #136]	; 0x88
 800f454:	f7f9 fc7e 	bl	8008d54 <acc_rss_integration_get_sensor_reference_frequency>
 800f458:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800f45c:	f898 201c 	ldrb.w	r2, [r8, #28]
 800f460:	ed8a 0a2c 	vstr	s0, [sl, #176]	; 0xb0
 800f464:	3b01      	subs	r3, #1
 800f466:	e9ca 232d 	strd	r2, r3, [sl, #180]	; 0xb4
 800f46a:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
 800f46e:	9314      	str	r3, [sp, #80]	; 0x50
 800f470:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
 800f474:	931d      	str	r3, [sp, #116]	; 0x74
 800f476:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
 800f47a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f47c:	f88a b0ac 	strb.w	fp, [sl, #172]	; 0xac
 800f480:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 800f484:	930c      	str	r3, [sp, #48]	; 0x30
 800f486:	a92c      	add	r1, sp, #176	; 0xb0
 800f488:	4650      	mov	r0, sl
 800f48a:	f8d8 7000 	ldr.w	r7, [r8]
 800f48e:	f8da 4094 	ldr.w	r4, [sl, #148]	; 0x94
 800f492:	ed9a 9a29 	vldr	s18, [sl, #164]	; 0xa4
 800f496:	f001 fb89 	bl	8010bac <acc_cpd_linear_sweep_get_info>
 800f49a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f49c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d15a      	bne.n	800f558 <acc_cpd_dll_calibration+0x548>
 800f4a2:	4b18      	ldr	r3, [pc, #96]	; (800f504 <acc_cpd_dll_calibration+0x4f4>)
 800f4a4:	4a24      	ldr	r2, [pc, #144]	; (800f538 <acc_cpd_dll_calibration+0x528>)
 800f4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4a8:	4918      	ldr	r1, [pc, #96]	; (800f50c <acc_cpd_dll_calibration+0x4fc>)
 800f4aa:	4658      	mov	r0, fp
 800f4ac:	4798      	blx	r3
 800f4ae:	2700      	movs	r7, #0
 800f4b0:	4638      	mov	r0, r7
 800f4b2:	b04d      	add	sp, #308	; 0x134
 800f4b4:	ecbd 8b06 	vpop	{d8-d10}
 800f4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f4be:	46d1      	mov	r9, sl
 800f4c0:	46c2      	mov	sl, r8
 800f4c2:	f04f 0801 	mov.w	r8, #1
 800f4c6:	4543      	cmp	r3, r8
 800f4c8:	d0f1      	beq.n	800f4ae <acc_cpd_dll_calibration+0x49e>
 800f4ca:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
 800f4ce:	e5f2      	b.n	800f0b6 <acc_cpd_dll_calibration+0xa6>
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	e753      	b.n	800f37c <acc_cpd_dll_calibration+0x36c>
 800f4d4:	f7f9 fce4 	bl	8008ea0 <acc_rss_integration_log_level>
 800f4d8:	2801      	cmp	r0, #1
 800f4da:	f67f adc6 	bls.w	800f06a <acc_cpd_dll_calibration+0x5a>
 800f4de:	4b09      	ldr	r3, [pc, #36]	; (800f504 <acc_cpd_dll_calibration+0x4f4>)
 800f4e0:	4a16      	ldr	r2, [pc, #88]	; (800f53c <acc_cpd_dll_calibration+0x52c>)
 800f4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4e4:	4909      	ldr	r1, [pc, #36]	; (800f50c <acc_cpd_dll_calibration+0x4fc>)
 800f4e6:	2002      	movs	r0, #2
 800f4e8:	4798      	blx	r3
 800f4ea:	e5be      	b.n	800f06a <acc_cpd_dll_calibration+0x5a>
 800f4ec:	f7f9 fcd8 	bl	8008ea0 <acc_rss_integration_log_level>
 800f4f0:	2803      	cmp	r0, #3
 800f4f2:	f67f ae89 	bls.w	800f208 <acc_cpd_dll_calibration+0x1f8>
 800f4f6:	4b03      	ldr	r3, [pc, #12]	; (800f504 <acc_cpd_dll_calibration+0x4f4>)
 800f4f8:	4a11      	ldr	r2, [pc, #68]	; (800f540 <acc_cpd_dll_calibration+0x530>)
 800f4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4fc:	4903      	ldr	r1, [pc, #12]	; (800f50c <acc_cpd_dll_calibration+0x4fc>)
 800f4fe:	2004      	movs	r0, #4
 800f500:	4798      	blx	r3
 800f502:	e681      	b.n	800f208 <acc_cpd_dll_calibration+0x1f8>
 800f504:	20001628 	.word	0x20001628
 800f508:	08019fdc 	.word	0x08019fdc
 800f50c:	08019f1c 	.word	0x08019f1c
 800f510:	0801a284 	.word	0x0801a284
 800f514:	0801d3e4 	.word	0x0801d3e4
 800f518:	0801d3dc 	.word	0x0801d3dc
 800f51c:	cccccccd 	.word	0xcccccccd
 800f520:	0801a004 	.word	0x0801a004
 800f524:	08019f80 	.word	0x08019f80
 800f528:	0801a01c 	.word	0x0801a01c
 800f52c:	0801a040 	.word	0x0801a040
 800f530:	0801a048 	.word	0x0801a048
 800f534:	08019f74 	.word	0x08019f74
 800f538:	0801a078 	.word	0x0801a078
 800f53c:	08019f2c 	.word	0x08019f2c
 800f540:	0801a050 	.word	0x0801a050
 800f544:	42f80000 	.word	0x42f80000
 800f548:	42640000 	.word	0x42640000
 800f54c:	42172c98 	.word	0x42172c98
 800f550:	402ca8ad 	.word	0x402ca8ad
 800f554:	447a0000 	.word	0x447a0000
 800f558:	f898 301c 	ldrb.w	r3, [r8, #28]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	f000 81a1 	beq.w	800f8a4 <acc_cpd_dll_calibration+0x894>
 800f562:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800f566:	9312      	str	r3, [sp, #72]	; 0x48
 800f568:	4653      	mov	r3, sl
 800f56a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f56c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f56e:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800f570:	4638      	mov	r0, r7
 800f572:	f000 fe51 	bl	8010218 <acc_cpd_linear_sweep_load_program>
 800f576:	2800      	cmp	r0, #0
 800f578:	d099      	beq.n	800f4ae <acc_cpd_dll_calibration+0x49e>
 800f57a:	f898 301c 	ldrb.w	r3, [r8, #28]
 800f57e:	9318      	str	r3, [sp, #96]	; 0x60
 800f580:	b113      	cbz	r3, 800f588 <acc_cpd_dll_calibration+0x578>
 800f582:	f898 301d 	ldrb.w	r3, [r8, #29]
 800f586:	9318      	str	r3, [sp, #96]	; 0x60
 800f588:	ed5f 6a12 	vldr	s13, [pc, #-72]	; 800f544 <acc_cpd_dll_calibration+0x534>
 800f58c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f58e:	ed5f aa12 	vldr	s21, [pc, #-72]	; 800f548 <acc_cpd_dll_calibration+0x538>
 800f592:	ed1f aa12 	vldr	s20, [pc, #-72]	; 800f54c <acc_cpd_dll_calibration+0x53c>
 800f596:	eeb8 7a49 	vcvt.f32.u32	s14, s18
 800f59a:	3401      	adds	r4, #1
 800f59c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5a0:	b2a4      	uxth	r4, r4
 800f5a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5a6:	ee17 3a90 	vmov	r3, s15
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	fb04 f303 	mul.w	r3, r4, r3
 800f5b0:	441d      	add	r5, r3
 800f5b2:	931f      	str	r3, [sp, #124]	; 0x7c
 800f5b4:	18aa      	adds	r2, r5, r2
 800f5b6:	005b      	lsls	r3, r3, #1
 800f5b8:	9213      	str	r2, [sp, #76]	; 0x4c
 800f5ba:	9319      	str	r3, [sp, #100]	; 0x64
 800f5bc:	4638      	mov	r0, r7
 800f5be:	f001 fab7 	bl	8010b30 <acc_cpd_linear_sweep_run_program>
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	f43f af73 	beq.w	800f4ae <acc_cpd_dll_calibration+0x49e>
 800f5c8:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800f5cc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800f5d0:	ed5f 9a21 	vldr	s19, [pc, #-132]	; 800f550 <acc_cpd_dll_calibration+0x540>
 800f5d4:	ed1f 9a21 	vldr	s18, [pc, #-132]	; 800f554 <acc_cpd_dll_calibration+0x544>
 800f5d8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800f5dc:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f5e0:	f04f 0900 	mov.w	r9, #0
 800f5e4:	ab22      	add	r3, sp, #136	; 0x88
 800f5e6:	2264      	movs	r2, #100	; 0x64
 800f5e8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800f5ec:	4638      	mov	r0, r7
 800f5ee:	f7fe f8d1 	bl	800d794 <acc_sensor_protocol_r2_wait_for_event>
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	f43f af5b 	beq.w	800f4ae <acc_cpd_dll_calibration+0x49e>
 800f5f8:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 800f5fc:	2b06      	cmp	r3, #6
 800f5fe:	f47f af56 	bne.w	800f4ae <acc_cpd_dll_calibration+0x49e>
 800f602:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 800f606:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f608:	f7fd fb32 	bl	800cc70 <acc_sensor_r2_buffer_processed_verify_size>
 800f60c:	b950      	cbnz	r0, 800f624 <acc_cpd_dll_calibration+0x614>
 800f60e:	4ba9      	ldr	r3, [pc, #676]	; (800f8b4 <acc_cpd_dll_calibration+0x8a4>)
 800f610:	4aa9      	ldr	r2, [pc, #676]	; (800f8b8 <acc_cpd_dll_calibration+0x8a8>)
 800f612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f614:	49a9      	ldr	r1, [pc, #676]	; (800f8bc <acc_cpd_dll_calibration+0x8ac>)
 800f616:	4798      	blx	r3
 800f618:	4638      	mov	r0, r7
 800f61a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800f61e:	f7fe f94d 	bl	800d8bc <acc_sensor_protocol_r2_stop>
 800f622:	e744      	b.n	800f4ae <acc_cpd_dll_calibration+0x49e>
 800f624:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f626:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f628:	4638      	mov	r0, r7
 800f62a:	f7fe f9f5 	bl	800da18 <acc_sensor_protocol_r2_transfer_data>
 800f62e:	4605      	mov	r5, r0
 800f630:	2800      	cmp	r0, #0
 800f632:	f43f af3c 	beq.w	800f4ae <acc_cpd_dll_calibration+0x49e>
 800f636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f638:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800f63a:	7f1b      	ldrb	r3, [r3, #28]
 800f63c:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800f640:	b1e3      	cbz	r3, 800f67c <acc_cpd_dll_calibration+0x66c>
 800f642:	eb04 0b0a 	add.w	fp, r4, sl
 800f646:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f648:	465a      	mov	r2, fp
 800f64a:	4639      	mov	r1, r7
 800f64c:	2001      	movs	r0, #1
 800f64e:	f7fb f917 	bl	800a880 <acc_probes_execute_uint16>
 800f652:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f654:	4658      	mov	r0, fp
 800f656:	f7fe fb7b 	bl	800dd50 <acc_alg_cca_calculate>
 800f65a:	eeb4 0aea 	vcmpe.f32	s0, s21
 800f65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f662:	bfcc      	ite	gt
 800f664:	2301      	movgt	r3, #1
 800f666:	2300      	movle	r3, #0
 800f668:	ed88 0a07 	vstr	s0, [r8, #28]
 800f66c:	f888 3019 	strb.w	r3, [r8, #25]
 800f670:	f300 821d 	bgt.w	800faae <acc_cpd_dll_calibration+0xa9e>
 800f674:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f676:	2b00      	cmp	r3, #0
 800f678:	f040 81ff 	bne.w	800fa7a <acc_cpd_dll_calibration+0xa6a>
 800f67c:	eeb0 0a4a 	vmov.f32	s0, s20
 800f680:	4651      	mov	r1, sl
 800f682:	4620      	mov	r0, r4
 800f684:	f002 fb80 	bl	8011d88 <acc_alg_basic_saturation_check_u16>
 800f688:	4683      	mov	fp, r0
 800f68a:	2800      	cmp	r0, #0
 800f68c:	f040 80c5 	bne.w	800f81a <acc_cpd_dll_calibration+0x80a>
 800f690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f692:	2b00      	cmp	r3, #0
 800f694:	f040 8180 	bne.w	800f998 <acc_cpd_dll_calibration+0x988>
 800f698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	f040 81cb 	bne.w	800fa36 <acc_cpd_dll_calibration+0xa26>
 800f6a0:	f7f9 fbfe 	bl	8008ea0 <acc_rss_integration_log_level>
 800f6a4:	2803      	cmp	r0, #3
 800f6a6:	d905      	bls.n	800f6b4 <acc_cpd_dll_calibration+0x6a4>
 800f6a8:	4b82      	ldr	r3, [pc, #520]	; (800f8b4 <acc_cpd_dll_calibration+0x8a4>)
 800f6aa:	4a85      	ldr	r2, [pc, #532]	; (800f8c0 <acc_cpd_dll_calibration+0x8b0>)
 800f6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6ae:	4983      	ldr	r1, [pc, #524]	; (800f8bc <acc_cpd_dll_calibration+0x8ac>)
 800f6b0:	2004      	movs	r0, #4
 800f6b2:	4798      	blx	r3
 800f6b4:	eeb0 0a69 	vmov.f32	s0, s19
 800f6b8:	4651      	mov	r1, sl
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f002 fb64 	bl	8011d88 <acc_alg_basic_saturation_check_u16>
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	f040 81a8 	bne.w	800fa16 <acc_cpd_dll_calibration+0xa06>
 800f6c6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f6c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f6ca:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800f6ce:	6a1b      	ldr	r3, [r3, #32]
 800f6d0:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800f6d2:	487c      	ldr	r0, [pc, #496]	; (800f8c4 <acc_cpd_dll_calibration+0x8b4>)
 800f6d4:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
 800f6d8:	ee07 2a90 	vmov	s15, r2
 800f6dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f6de:	f8c8 2014 	str.w	r2, [r8, #20]
 800f6e2:	4a79      	ldr	r2, [pc, #484]	; (800f8c8 <acc_cpd_dll_calibration+0x8b8>)
 800f6e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6e8:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
 800f6ec:	4a77      	ldr	r2, [pc, #476]	; (800f8cc <acc_cpd_dll_calibration+0x8bc>)
 800f6ee:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800f6f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f6f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800f6f8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f6fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f700:	ebab 0b02 	sub.w	fp, fp, r2
 800f704:	fa0f fb8b 	sxth.w	fp, fp
 800f708:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f70c:	ee07 ba10 	vmov	s14, fp
 800f710:	ee67 7a89 	vmul.f32	s15, s15, s18
 800f714:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f718:	ee05 1a90 	vmov	s11, r1
 800f71c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f720:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800f724:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f726:	f888 1018 	strb.w	r1, [r8, #24]
 800f72a:	eef8 5a65 	vcvt.f32.u32	s11, s11
 800f72e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f732:	ee06 2a10 	vmov	s12, r2
 800f736:	ee65 5aa8 	vmul.f32	s11, s11, s17
 800f73a:	ee17 2a90 	vmov	r2, s15
 800f73e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800f742:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800f746:	b213      	sxth	r3, r2
 800f748:	ee07 3a90 	vmov	s15, r3
 800f74c:	ee26 7a28 	vmul.f32	s14, s12, s17
 800f750:	ee25 6a88 	vmul.f32	s12, s11, s16
 800f754:	ee77 6a66 	vsub.f32	s13, s14, s13
 800f758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f75c:	ee66 7a09 	vmul.f32	s15, s12, s18
 800f760:	ee66 6a88 	vmul.f32	s13, s13, s16
 800f764:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f768:	ee66 6a89 	vmul.f32	s13, s13, s18
 800f76c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f770:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800f774:	ee17 2a90 	vmov	r2, s15
 800f778:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 800f77c:	ee16 2a90 	vmov	r2, s13
 800f780:	4953      	ldr	r1, [pc, #332]	; (800f8d0 <acc_cpd_dll_calibration+0x8c0>)
 800f782:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 800f786:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 800f78a:	f7fe fb25 	bl	800ddd8 <acc_diagnostic_log_array>
 800f78e:	2101      	movs	r1, #1
 800f790:	a821      	add	r0, sp, #132	; 0x84
 800f792:	f7fe fb39 	bl	800de08 <acc_diagnostic_log_data_i16>
 800f796:	494e      	ldr	r1, [pc, #312]	; (800f8d0 <acc_cpd_dll_calibration+0x8c0>)
 800f798:	484a      	ldr	r0, [pc, #296]	; (800f8c4 <acc_cpd_dll_calibration+0x8b4>)
 800f79a:	f7fe fb1d 	bl	800ddd8 <acc_diagnostic_log_array>
 800f79e:	2101      	movs	r1, #1
 800f7a0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
 800f7a4:	f7fe fb30 	bl	800de08 <acc_diagnostic_log_data_i16>
 800f7a8:	4949      	ldr	r1, [pc, #292]	; (800f8d0 <acc_cpd_dll_calibration+0x8c0>)
 800f7aa:	484a      	ldr	r0, [pc, #296]	; (800f8d4 <acc_cpd_dll_calibration+0x8c4>)
 800f7ac:	f7fe fb14 	bl	800ddd8 <acc_diagnostic_log_array>
 800f7b0:	2101      	movs	r1, #1
 800f7b2:	a822      	add	r0, sp, #136	; 0x88
 800f7b4:	f7fe fb28 	bl	800de08 <acc_diagnostic_log_data_i16>
 800f7b8:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 800f7bc:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f7be:	1a8b      	subs	r3, r1, r2
 800f7c0:	b21b      	sxth	r3, r3
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	bfb8      	it	lt
 800f7c6:	425b      	neglt	r3, r3
 800f7c8:	b21b      	sxth	r3, r3
 800f7ca:	2b64      	cmp	r3, #100	; 0x64
 800f7cc:	dc11      	bgt.n	800f7f2 <acc_cpd_dll_calibration+0x7e2>
 800f7ce:	f5a2 7243 	sub.w	r2, r2, #780	; 0x30c
 800f7d2:	f5b2 7fe6 	cmp.w	r2, #460	; 0x1cc
 800f7d6:	d80c      	bhi.n	800f7f2 <acc_cpd_dll_calibration+0x7e2>
 800f7d8:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
 800f7dc:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f7de:	1a8b      	subs	r3, r1, r2
 800f7e0:	b21b      	sxth	r3, r3
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	bfb8      	it	lt
 800f7e6:	425b      	neglt	r3, r3
 800f7e8:	b21b      	sxth	r3, r3
 800f7ea:	2b64      	cmp	r3, #100	; 0x64
 800f7ec:	dc01      	bgt.n	800f7f2 <acc_cpd_dll_calibration+0x7e2>
 800f7ee:	4593      	cmp	fp, r2
 800f7f0:	da7a      	bge.n	800f8e8 <acc_cpd_dll_calibration+0x8d8>
 800f7f2:	f1b9 0f02 	cmp.w	r9, #2
 800f7f6:	d02d      	beq.n	800f854 <acc_cpd_dll_calibration+0x844>
 800f7f8:	f7f9 fb52 	bl	8008ea0 <acc_rss_integration_log_level>
 800f7fc:	2803      	cmp	r0, #3
 800f7fe:	d906      	bls.n	800f80e <acc_cpd_dll_calibration+0x7fe>
 800f800:	4b2c      	ldr	r3, [pc, #176]	; (800f8b4 <acc_cpd_dll_calibration+0x8a4>)
 800f802:	4a35      	ldr	r2, [pc, #212]	; (800f8d8 <acc_cpd_dll_calibration+0x8c8>)
 800f804:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800f806:	492d      	ldr	r1, [pc, #180]	; (800f8bc <acc_cpd_dll_calibration+0x8ac>)
 800f808:	464b      	mov	r3, r9
 800f80a:	2004      	movs	r0, #4
 800f80c:	47a0      	blx	r4
 800f80e:	4638      	mov	r0, r7
 800f810:	f109 0901 	add.w	r9, r9, #1
 800f814:	f7fd ff2e 	bl	800d674 <acc_sensor_protocol_r2_ack_event>
 800f818:	e6e4      	b.n	800f5e4 <acc_cpd_dll_calibration+0x5d4>
 800f81a:	eeb0 0a69 	vmov.f32	s0, s19
 800f81e:	4651      	mov	r1, sl
 800f820:	4620      	mov	r0, r4
 800f822:	f002 fab1 	bl	8011d88 <acc_alg_basic_saturation_check_u16>
 800f826:	2800      	cmp	r0, #0
 800f828:	f43f af4d 	beq.w	800f6c6 <acc_cpd_dll_calibration+0x6b6>
 800f82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f82e:	2b0f      	cmp	r3, #15
 800f830:	f040 80f1 	bne.w	800fa16 <acc_cpd_dll_calibration+0xa06>
 800f834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f836:	2b00      	cmp	r3, #0
 800f838:	f000 810e 	beq.w	800fa58 <acc_cpd_dll_calibration+0xa48>
 800f83c:	f7f9 fb30 	bl	8008ea0 <acc_rss_integration_log_level>
 800f840:	2803      	cmp	r0, #3
 800f842:	f67f af40 	bls.w	800f6c6 <acc_cpd_dll_calibration+0x6b6>
 800f846:	4b1b      	ldr	r3, [pc, #108]	; (800f8b4 <acc_cpd_dll_calibration+0x8a4>)
 800f848:	4a24      	ldr	r2, [pc, #144]	; (800f8dc <acc_cpd_dll_calibration+0x8cc>)
 800f84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f84c:	491b      	ldr	r1, [pc, #108]	; (800f8bc <acc_cpd_dll_calibration+0x8ac>)
 800f84e:	2004      	movs	r0, #4
 800f850:	4798      	blx	r3
 800f852:	e738      	b.n	800f6c6 <acc_cpd_dll_calibration+0x6b6>
 800f854:	e9dd 8a0f 	ldrd	r8, sl, [sp, #60]	; 0x3c
 800f858:	f7f9 fb22 	bl	8008ea0 <acc_rss_integration_log_level>
 800f85c:	2803      	cmp	r0, #3
 800f85e:	d923      	bls.n	800f8a8 <acc_cpd_dll_calibration+0x898>
 800f860:	4b14      	ldr	r3, [pc, #80]	; (800f8b4 <acc_cpd_dll_calibration+0x8a4>)
 800f862:	4916      	ldr	r1, [pc, #88]	; (800f8bc <acc_cpd_dll_calibration+0x8ac>)
 800f864:	4a1e      	ldr	r2, [pc, #120]	; (800f8e0 <acc_cpd_dll_calibration+0x8d0>)
 800f866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f868:	2004      	movs	r0, #4
 800f86a:	4798      	blx	r3
 800f86c:	4638      	mov	r0, r7
 800f86e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800f872:	f7fe f823 	bl	800d8bc <acc_sensor_protocol_r2_stop>
 800f876:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f878:	b183      	cbz	r3, 800f89c <acc_cpd_dll_calibration+0x88c>
 800f87a:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 800f87e:	f7f9 fb0f 	bl	8008ea0 <acc_rss_integration_log_level>
 800f882:	2803      	cmp	r0, #3
 800f884:	f67f acc0 	bls.w	800f208 <acc_cpd_dll_calibration+0x1f8>
 800f888:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f88a:	4b0a      	ldr	r3, [pc, #40]	; (800f8b4 <acc_cpd_dll_calibration+0x8a4>)
 800f88c:	9200      	str	r2, [sp, #0]
 800f88e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800f890:	4a14      	ldr	r2, [pc, #80]	; (800f8e4 <acc_cpd_dll_calibration+0x8d4>)
 800f892:	490a      	ldr	r1, [pc, #40]	; (800f8bc <acc_cpd_dll_calibration+0x8ac>)
 800f894:	464b      	mov	r3, r9
 800f896:	2004      	movs	r0, #4
 800f898:	47a0      	blx	r4
 800f89a:	e4b5      	b.n	800f208 <acc_cpd_dll_calibration+0x1f8>
 800f89c:	2301      	movs	r3, #1
 800f89e:	2100      	movs	r1, #0
 800f8a0:	931a      	str	r3, [sp, #104]	; 0x68
 800f8a2:	e557      	b.n	800f354 <acc_cpd_dll_calibration+0x344>
 800f8a4:	9312      	str	r3, [sp, #72]	; 0x48
 800f8a6:	e65f      	b.n	800f568 <acc_cpd_dll_calibration+0x558>
 800f8a8:	4638      	mov	r0, r7
 800f8aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800f8ae:	f7fe f805 	bl	800d8bc <acc_sensor_protocol_r2_stop>
 800f8b2:	e7e0      	b.n	800f876 <acc_cpd_dll_calibration+0x866>
 800f8b4:	20001628 	.word	0x20001628
 800f8b8:	08019e60 	.word	0x08019e60
 800f8bc:	08019f1c 	.word	0x08019f1c
 800f8c0:	0801a0c0 	.word	0x0801a0c0
 800f8c4:	0801a190 	.word	0x0801a190
 800f8c8:	0801d3e4 	.word	0x0801d3e4
 800f8cc:	0801d3dc 	.word	0x0801d3dc
 800f8d0:	0801a01c 	.word	0x0801a01c
 800f8d4:	0801a1a0 	.word	0x0801a1a0
 800f8d8:	0801a1b0 	.word	0x0801a1b0
 800f8dc:	0801a114 	.word	0x0801a114
 800f8e0:	0801a1d8 	.word	0x0801a1d8
 800f8e4:	0801a220 	.word	0x0801a220
 800f8e8:	4979      	ldr	r1, [pc, #484]	; (800fad0 <acc_cpd_dll_calibration+0xac0>)
 800f8ea:	487a      	ldr	r0, [pc, #488]	; (800fad4 <acc_cpd_dll_calibration+0xac4>)
 800f8ec:	e9dd 8a0f 	ldrd	r8, sl, [sp, #60]	; 0x3c
 800f8f0:	f7fe fa72 	bl	800ddd8 <acc_diagnostic_log_array>
 800f8f4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	f7fe fa7d 	bl	800ddf8 <acc_diagnostic_log_data_u16>
 800f8fe:	4629      	mov	r1, r5
 800f900:	4620      	mov	r0, r4
 800f902:	f000 f905 	bl	800fb10 <acc_dll_check_direct_leakage>
 800f906:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800f90a:	4604      	mov	r4, r0
 800f90c:	4638      	mov	r0, r7
 800f90e:	f7fd ffd5 	bl	800d8bc <acc_sensor_protocol_r2_stop>
 800f912:	2c00      	cmp	r4, #0
 800f914:	d0af      	beq.n	800f876 <acc_cpd_dll_calibration+0x866>
 800f916:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800f918:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f91a:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 800f91e:	602b      	str	r3, [r5, #0]
 800f920:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f922:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 800f926:	81a9      	strh	r1, [r5, #12]
 800f928:	81ea      	strh	r2, [r5, #14]
 800f92a:	822b      	strh	r3, [r5, #16]
 800f92c:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 800f930:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800f934:	f7f9 fab4 	bl	8008ea0 <acc_rss_integration_log_level>
 800f938:	2803      	cmp	r0, #3
 800f93a:	4627      	mov	r7, r4
 800f93c:	d908      	bls.n	800f950 <acc_cpd_dll_calibration+0x940>
 800f93e:	4a66      	ldr	r2, [pc, #408]	; (800fad8 <acc_cpd_dll_calibration+0xac8>)
 800f940:	682b      	ldr	r3, [r5, #0]
 800f942:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800f944:	4965      	ldr	r1, [pc, #404]	; (800fadc <acc_cpd_dll_calibration+0xacc>)
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	4a65      	ldr	r2, [pc, #404]	; (800fae0 <acc_cpd_dll_calibration+0xad0>)
 800f94a:	4643      	mov	r3, r8
 800f94c:	2004      	movs	r0, #4
 800f94e:	47a0      	blx	r4
 800f950:	f7f9 faa6 	bl	8008ea0 <acc_rss_integration_log_level>
 800f954:	2801      	cmp	r0, #1
 800f956:	d91b      	bls.n	800f990 <acc_cpd_dll_calibration+0x980>
 800f958:	7e29      	ldrb	r1, [r5, #24]
 800f95a:	4a62      	ldr	r2, [pc, #392]	; (800fae4 <acc_cpd_dll_calibration+0xad4>)
 800f95c:	4b62      	ldr	r3, [pc, #392]	; (800fae8 <acc_cpd_dll_calibration+0xad8>)
 800f95e:	89a8      	ldrh	r0, [r5, #12]
 800f960:	682e      	ldr	r6, [r5, #0]
 800f962:	f8cd 8000 	str.w	r8, [sp]
 800f966:	2900      	cmp	r1, #0
 800f968:	bf18      	it	ne
 800f96a:	4613      	movne	r3, r2
 800f96c:	4c5a      	ldr	r4, [pc, #360]	; (800fad8 <acc_cpd_dll_calibration+0xac8>)
 800f96e:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
 800f972:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 800f976:	9306      	str	r3, [sp, #24]
 800f978:	696b      	ldr	r3, [r5, #20]
 800f97a:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800f97c:	9305      	str	r3, [sp, #20]
 800f97e:	e9cd 1203 	strd	r1, r2, [sp, #12]
 800f982:	e9cd 6001 	strd	r6, r0, [sp, #4]
 800f986:	4653      	mov	r3, sl
 800f988:	4a58      	ldr	r2, [pc, #352]	; (800faec <acc_cpd_dll_calibration+0xadc>)
 800f98a:	4954      	ldr	r1, [pc, #336]	; (800fadc <acc_cpd_dll_calibration+0xacc>)
 800f98c:	2002      	movs	r0, #2
 800f98e:	47a0      	blx	r4
 800f990:	e9c5 8a01 	strd	r8, sl, [r5, #4]
 800f994:	f7ff bb50 	b.w	800f038 <acc_cpd_dll_calibration+0x28>
 800f998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f99a:	2b08      	cmp	r3, #8
 800f99c:	bf38      	it	cc
 800f99e:	2308      	movcc	r3, #8
 800f9a0:	f1a3 0508 	sub.w	r5, r3, #8
 800f9a4:	e9dd 8a0f 	ldrd	r8, sl, [sp, #60]	; 0x3c
 800f9a8:	950b      	str	r5, [sp, #44]	; 0x2c
 800f9aa:	f7f9 fa79 	bl	8008ea0 <acc_rss_integration_log_level>
 800f9ae:	2803      	cmp	r0, #3
 800f9b0:	d906      	bls.n	800f9c0 <acc_cpd_dll_calibration+0x9b0>
 800f9b2:	4b49      	ldr	r3, [pc, #292]	; (800fad8 <acc_cpd_dll_calibration+0xac8>)
 800f9b4:	4a4e      	ldr	r2, [pc, #312]	; (800faf0 <acc_cpd_dll_calibration+0xae0>)
 800f9b6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800f9b8:	4948      	ldr	r1, [pc, #288]	; (800fadc <acc_cpd_dll_calibration+0xacc>)
 800f9ba:	462b      	mov	r3, r5
 800f9bc:	2004      	movs	r0, #4
 800f9be:	47a0      	blx	r4
 800f9c0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800f9c4:	4638      	mov	r0, r7
 800f9c6:	f7fd ff79 	bl	800d8bc <acc_sensor_protocol_r2_stop>
 800f9ca:	4638      	mov	r0, r7
 800f9cc:	f7fd fe42 	bl	800d654 <acc_sensor_protocol_r2_is_sensor_running>
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	b9b8      	cbnz	r0, 800fa04 <acc_cpd_dll_calibration+0x9f4>
 800f9d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9d6:	4d47      	ldr	r5, [pc, #284]	; (800faf4 <acc_cpd_dll_calibration+0xae4>)
 800f9d8:	9301      	str	r3, [sp, #4]
 800f9da:	2344      	movs	r3, #68	; 0x44
 800f9dc:	9300      	str	r3, [sp, #0]
 800f9de:	4622      	mov	r2, r4
 800f9e0:	4638      	mov	r0, r7
 800f9e2:	9502      	str	r5, [sp, #8]
 800f9e4:	4b44      	ldr	r3, [pc, #272]	; (800faf8 <acc_cpd_dll_calibration+0xae8>)
 800f9e6:	4945      	ldr	r1, [pc, #276]	; (800fafc <acc_cpd_dll_calibration+0xaec>)
 800f9e8:	f002 fef4 	bl	80127d4 <acc_confprogram_live_patch>
 800f9ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f9ee:	9201      	str	r2, [sp, #4]
 800f9f0:	2342      	movs	r3, #66	; 0x42
 800f9f2:	9300      	str	r3, [sp, #0]
 800f9f4:	9502      	str	r5, [sp, #8]
 800f9f6:	4622      	mov	r2, r4
 800f9f8:	4b3f      	ldr	r3, [pc, #252]	; (800faf8 <acc_cpd_dll_calibration+0xae8>)
 800f9fa:	4940      	ldr	r1, [pc, #256]	; (800fafc <acc_cpd_dll_calibration+0xaec>)
 800f9fc:	4638      	mov	r0, r7
 800f9fe:	f002 fee9 	bl	80127d4 <acc_confprogram_live_patch>
 800fa02:	e5db      	b.n	800f5bc <acc_cpd_dll_calibration+0x5ac>
 800fa04:	4b34      	ldr	r3, [pc, #208]	; (800fad8 <acc_cpd_dll_calibration+0xac8>)
 800fa06:	4a3e      	ldr	r2, [pc, #248]	; (800fb00 <acc_cpd_dll_calibration+0xaf0>)
 800fa08:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800fa0a:	4934      	ldr	r1, [pc, #208]	; (800fadc <acc_cpd_dll_calibration+0xacc>)
 800fa0c:	4638      	mov	r0, r7
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2000      	movs	r0, #0
 800fa12:	47a0      	blx	r4
 800fa14:	e54b      	b.n	800f4ae <acc_cpd_dll_calibration+0x49e>
 800fa16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa18:	3308      	adds	r3, #8
 800fa1a:	2b0f      	cmp	r3, #15
 800fa1c:	bf28      	it	cs
 800fa1e:	230f      	movcs	r3, #15
 800fa20:	e9dd 8a0f 	ldrd	r8, sl, [sp, #60]	; 0x3c
 800fa24:	461d      	mov	r5, r3
 800fa26:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa28:	f7f9 fa3a 	bl	8008ea0 <acc_rss_integration_log_level>
 800fa2c:	2803      	cmp	r0, #3
 800fa2e:	d9c7      	bls.n	800f9c0 <acc_cpd_dll_calibration+0x9b0>
 800fa30:	4b29      	ldr	r3, [pc, #164]	; (800fad8 <acc_cpd_dll_calibration+0xac8>)
 800fa32:	4a34      	ldr	r2, [pc, #208]	; (800fb04 <acc_cpd_dll_calibration+0xaf4>)
 800fa34:	e7bf      	b.n	800f9b6 <acc_cpd_dll_calibration+0x9a6>
 800fa36:	e9dd 8a0f 	ldrd	r8, sl, [sp, #60]	; 0x3c
 800fa3a:	f7f9 fa31 	bl	8008ea0 <acc_rss_integration_log_level>
 800fa3e:	2803      	cmp	r0, #3
 800fa40:	d940      	bls.n	800fac4 <acc_cpd_dll_calibration+0xab4>
 800fa42:	4b25      	ldr	r3, [pc, #148]	; (800fad8 <acc_cpd_dll_calibration+0xac8>)
 800fa44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800fa46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa48:	4a2f      	ldr	r2, [pc, #188]	; (800fb08 <acc_cpd_dll_calibration+0xaf8>)
 800fa4a:	4924      	ldr	r1, [pc, #144]	; (800fadc <acc_cpd_dll_calibration+0xacc>)
 800fa4c:	940c      	str	r4, [sp, #48]	; 0x30
 800fa4e:	2004      	movs	r0, #4
 800fa50:	4798      	blx	r3
 800fa52:	230f      	movs	r3, #15
 800fa54:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa56:	e7b3      	b.n	800f9c0 <acc_cpd_dll_calibration+0x9b0>
 800fa58:	e9dd 8a0f 	ldrd	r8, sl, [sp, #60]	; 0x3c
 800fa5c:	f7f9 fa20 	bl	8008ea0 <acc_rss_integration_log_level>
 800fa60:	2803      	cmp	r0, #3
 800fa62:	d92a      	bls.n	800faba <acc_cpd_dll_calibration+0xaaa>
 800fa64:	4b1c      	ldr	r3, [pc, #112]	; (800fad8 <acc_cpd_dll_calibration+0xac8>)
 800fa66:	4a29      	ldr	r2, [pc, #164]	; (800fb0c <acc_cpd_dll_calibration+0xafc>)
 800fa68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa6a:	491c      	ldr	r1, [pc, #112]	; (800fadc <acc_cpd_dll_calibration+0xacc>)
 800fa6c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800fa70:	2004      	movs	r0, #4
 800fa72:	4798      	blx	r3
 800fa74:	2300      	movs	r3, #0
 800fa76:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa78:	e7a2      	b.n	800f9c0 <acc_cpd_dll_calibration+0x9b0>
 800fa7a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800fa7e:	4638      	mov	r0, r7
 800fa80:	e9dd 8a0f 	ldrd	r8, sl, [sp, #60]	; 0x3c
 800fa84:	f7fd ff1a 	bl	800d8bc <acc_sensor_protocol_r2_stop>
 800fa88:	4638      	mov	r0, r7
 800fa8a:	f7fd fde3 	bl	800d654 <acc_sensor_protocol_r2_is_sensor_running>
 800fa8e:	9018      	str	r0, [sp, #96]	; 0x60
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d1b7      	bne.n	800fa04 <acc_cpd_dll_calibration+0x9f4>
 800fa94:	4b17      	ldr	r3, [pc, #92]	; (800faf4 <acc_cpd_dll_calibration+0xae4>)
 800fa96:	9302      	str	r3, [sp, #8]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	2372      	movs	r3, #114	; 0x72
 800fa9c:	e9cd 3200 	strd	r3, r2, [sp]
 800faa0:	4916      	ldr	r1, [pc, #88]	; (800fafc <acc_cpd_dll_calibration+0xaec>)
 800faa2:	4b15      	ldr	r3, [pc, #84]	; (800faf8 <acc_cpd_dll_calibration+0xae8>)
 800faa4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800faa6:	4638      	mov	r0, r7
 800faa8:	f002 fe94 	bl	80127d4 <acc_confprogram_live_patch>
 800faac:	e586      	b.n	800f5bc <acc_cpd_dll_calibration+0x5ac>
 800faae:	4638      	mov	r0, r7
 800fab0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800fab4:	f7fd ff02 	bl	800d8bc <acc_sensor_protocol_r2_stop>
 800fab8:	e4f9      	b.n	800f4ae <acc_cpd_dll_calibration+0x49e>
 800faba:	2300      	movs	r3, #0
 800fabc:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800fac0:	930b      	str	r3, [sp, #44]	; 0x2c
 800fac2:	e77d      	b.n	800f9c0 <acc_cpd_dll_calibration+0x9b0>
 800fac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fac6:	930c      	str	r3, [sp, #48]	; 0x30
 800fac8:	230f      	movs	r3, #15
 800faca:	930b      	str	r3, [sp, #44]	; 0x2c
 800facc:	e778      	b.n	800f9c0 <acc_cpd_dll_calibration+0x9b0>
 800face:	bf00      	nop
 800fad0:	0801a2c0 	.word	0x0801a2c0
 800fad4:	0801a2f0 	.word	0x0801a2f0
 800fad8:	20001628 	.word	0x20001628
 800fadc:	08019f1c 	.word	0x08019f1c
 800fae0:	0801a1f0 	.word	0x0801a1f0
 800fae4:	08019f0c 	.word	0x08019f0c
 800fae8:	08019f14 	.word	0x08019f14
 800faec:	0801a254 	.word	0x0801a254
 800faf0:	0801a0e0 	.word	0x0801a0e0
 800faf4:	0800cb9d 	.word	0x0800cb9d
 800faf8:	0801bd58 	.word	0x0801bd58
 800fafc:	08016070 	.word	0x08016070
 800fb00:	08019dec 	.word	0x08019dec
 800fb04:	0801a15c 	.word	0x0801a15c
 800fb08:	0801a098 	.word	0x0801a098
 800fb0c:	0801a134 	.word	0x0801a134

0800fb10 <acc_dll_check_direct_leakage>:
 800fb10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb14:	4f42      	ldr	r7, [pc, #264]	; (800fc20 <acc_dll_check_direct_leakage+0x110>)
 800fb16:	fba7 3701 	umull	r3, r7, r7, r1
 800fb1a:	08bf      	lsrs	r7, r7, #2
 800fb1c:	b085      	sub	sp, #20
 800fb1e:	463b      	mov	r3, r7
 800fb20:	eb07 0187 	add.w	r1, r7, r7, lsl #2
 800fb24:	4602      	mov	r2, r0
 800fb26:	4680      	mov	r8, r0
 800fb28:	f002 fc9a 	bl	8012460 <acc_alg_power_bins>
 800fb2c:	b397      	cbz	r7, 800fb94 <acc_dll_check_direct_leakage+0x84>
 800fb2e:	f1a8 0c02 	sub.w	ip, r8, #2
 800fb32:	007d      	lsls	r5, r7, #1
 800fb34:	4662      	mov	r2, ip
 800fb36:	eb0c 0405 	add.w	r4, ip, r5
 800fb3a:	4663      	mov	r3, ip
 800fb3c:	2100      	movs	r1, #0
 800fb3e:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 800fb42:	4281      	cmp	r1, r0
 800fb44:	bf38      	it	cc
 800fb46:	4601      	movcc	r1, r0
 800fb48:	42a3      	cmp	r3, r4
 800fb4a:	d1f8      	bne.n	800fb3e <acc_dll_check_direct_leakage+0x2e>
 800fb4c:	4b35      	ldr	r3, [pc, #212]	; (800fc24 <acc_dll_check_direct_leakage+0x114>)
 800fb4e:	2f02      	cmp	r7, #2
 800fb50:	fba3 3101 	umull	r3, r1, r3, r1
 800fb54:	f3c1 094f 	ubfx	r9, r1, #1, #16
 800fb58:	d917      	bls.n	800fb8a <acc_dll_check_direct_leakage+0x7a>
 800fb5a:	f1a8 0306 	sub.w	r3, r8, #6
 800fb5e:	442b      	add	r3, r5
 800fb60:	f108 0102 	add.w	r1, r8, #2
 800fb64:	2602      	movs	r6, #2
 800fb66:	f832 5f02 	ldrh.w	r5, [r2, #2]!
 800fb6a:	f831 4f02 	ldrh.w	r4, [r1, #2]!
 800fb6e:	42a5      	cmp	r5, r4
 800fb70:	d902      	bls.n	800fb78 <acc_dll_check_direct_leakage+0x68>
 800fb72:	4620      	mov	r0, r4
 800fb74:	462c      	mov	r4, r5
 800fb76:	4605      	mov	r5, r0
 800fb78:	454c      	cmp	r4, r9
 800fb7a:	d902      	bls.n	800fb82 <acc_dll_check_direct_leakage+0x72>
 800fb7c:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 800fb80:	d812      	bhi.n	800fba8 <acc_dll_check_direct_leakage+0x98>
 800fb82:	429a      	cmp	r2, r3
 800fb84:	f106 0601 	add.w	r6, r6, #1
 800fb88:	d1ed      	bne.n	800fb66 <acc_dll_check_direct_leakage+0x56>
 800fb8a:	087a      	lsrs	r2, r7, #1
 800fb8c:	f102 0308 	add.w	r3, r2, #8
 800fb90:	42bb      	cmp	r3, r7
 800fb92:	d91b      	bls.n	800fbcc <acc_dll_check_direct_leakage+0xbc>
 800fb94:	4b24      	ldr	r3, [pc, #144]	; (800fc28 <acc_dll_check_direct_leakage+0x118>)
 800fb96:	4a25      	ldr	r2, [pc, #148]	; (800fc2c <acc_dll_check_direct_leakage+0x11c>)
 800fb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb9a:	4925      	ldr	r1, [pc, #148]	; (800fc30 <acc_dll_check_direct_leakage+0x120>)
 800fb9c:	2000      	movs	r0, #0
 800fb9e:	4798      	blx	r3
 800fba0:	2000      	movs	r0, #0
 800fba2:	b005      	add	sp, #20
 800fba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fba8:	f7f9 f97a 	bl	8008ea0 <acc_rss_integration_log_level>
 800fbac:	2803      	cmp	r0, #3
 800fbae:	d909      	bls.n	800fbc4 <acc_dll_check_direct_leakage+0xb4>
 800fbb0:	e9cd 5901 	strd	r5, r9, [sp, #4]
 800fbb4:	4a1c      	ldr	r2, [pc, #112]	; (800fc28 <acc_dll_check_direct_leakage+0x118>)
 800fbb6:	9400      	str	r4, [sp, #0]
 800fbb8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800fbba:	491d      	ldr	r1, [pc, #116]	; (800fc30 <acc_dll_check_direct_leakage+0x120>)
 800fbbc:	4a1d      	ldr	r2, [pc, #116]	; (800fc34 <acc_dll_check_direct_leakage+0x124>)
 800fbbe:	4633      	mov	r3, r6
 800fbc0:	2004      	movs	r0, #4
 800fbc2:	47a0      	blx	r4
 800fbc4:	2000      	movs	r0, #0
 800fbc6:	b005      	add	sp, #20
 800fbc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbcc:	f108 000e 	add.w	r0, r8, #14
 800fbd0:	2400      	movs	r4, #0
 800fbd2:	f83c 1f02 	ldrh.w	r1, [ip, #2]!
 800fbd6:	4560      	cmp	r0, ip
 800fbd8:	440c      	add	r4, r1
 800fbda:	d1fa      	bne.n	800fbd2 <acc_dll_check_direct_leakage+0xc2>
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d91c      	bls.n	800fc1a <acc_dll_check_direct_leakage+0x10a>
 800fbe0:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 800fbe4:	2500      	movs	r5, #0
 800fbe6:	f838 1b02 	ldrh.w	r1, [r8], #2
 800fbea:	3201      	adds	r2, #1
 800fbec:	4293      	cmp	r3, r2
 800fbee:	440d      	add	r5, r1
 800fbf0:	d8f9      	bhi.n	800fbe6 <acc_dll_check_direct_leakage+0xd6>
 800fbf2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800fbf6:	42ab      	cmp	r3, r5
 800fbf8:	d801      	bhi.n	800fbfe <acc_dll_check_direct_leakage+0xee>
 800fbfa:	2001      	movs	r0, #1
 800fbfc:	e7d1      	b.n	800fba2 <acc_dll_check_direct_leakage+0x92>
 800fbfe:	f7f9 f94f 	bl	8008ea0 <acc_rss_integration_log_level>
 800fc02:	2803      	cmp	r0, #3
 800fc04:	d9de      	bls.n	800fbc4 <acc_dll_check_direct_leakage+0xb4>
 800fc06:	4a08      	ldr	r2, [pc, #32]	; (800fc28 <acc_dll_check_direct_leakage+0x118>)
 800fc08:	9500      	str	r5, [sp, #0]
 800fc0a:	4623      	mov	r3, r4
 800fc0c:	2004      	movs	r0, #4
 800fc0e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800fc10:	4907      	ldr	r1, [pc, #28]	; (800fc30 <acc_dll_check_direct_leakage+0x120>)
 800fc12:	4a09      	ldr	r2, [pc, #36]	; (800fc38 <acc_dll_check_direct_leakage+0x128>)
 800fc14:	47a0      	blx	r4
 800fc16:	2000      	movs	r0, #0
 800fc18:	e7c3      	b.n	800fba2 <acc_dll_check_direct_leakage+0x92>
 800fc1a:	2500      	movs	r5, #0
 800fc1c:	e7e9      	b.n	800fbf2 <acc_dll_check_direct_leakage+0xe2>
 800fc1e:	bf00      	nop
 800fc20:	cccccccd 	.word	0xcccccccd
 800fc24:	aaaaaaab 	.word	0xaaaaaaab
 800fc28:	20001628 	.word	0x20001628
 800fc2c:	0801a380 	.word	0x0801a380
 800fc30:	0801a360 	.word	0x0801a360
 800fc34:	0801a304 	.word	0x0801a304
 800fc38:	0801a390 	.word	0x0801a390

0800fc3c <acc_dll_dly_coarse_priority_sort>:
 800fc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc40:	b084      	sub	sp, #16
 800fc42:	2800      	cmp	r0, #0
 800fc44:	f000 80a0 	beq.w	800fd88 <acc_dll_dly_coarse_priority_sort+0x14c>
 800fc48:	280c      	cmp	r0, #12
 800fc4a:	f200 8099 	bhi.w	800fd80 <acc_dll_dly_coarse_priority_sort+0x144>
 800fc4e:	2400      	movs	r4, #0
 800fc50:	ed9f 4a4f 	vldr	s8, [pc, #316]	; 800fd90 <acc_dll_dly_coarse_priority_sort+0x154>
 800fc54:	eddf 4a4f 	vldr	s9, [pc, #316]	; 800fd94 <acc_dll_dly_coarse_priority_sort+0x158>
 800fc58:	ed9f 5a4f 	vldr	s10, [pc, #316]	; 800fd98 <acc_dll_dly_coarse_priority_sort+0x15c>
 800fc5c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800fd9c <acc_dll_dly_coarse_priority_sort+0x160>
 800fc60:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 800fda0 <acc_dll_dly_coarse_priority_sort+0x164>
 800fc64:	4626      	mov	r6, r4
 800fc66:	1e8d      	subs	r5, r1, #2
 800fc68:	f10d 0e04 	add.w	lr, sp, #4
 800fc6c:	1e57      	subs	r7, r2, #1
 800fc6e:	f100 3cff 	add.w	ip, r0, #4294967295
 800fc72:	f240 5813 	movw	r8, #1299	; 0x513
 800fc76:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800fc7a:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 800fc7e:	2c00      	cmp	r4, #0
 800fc80:	d06f      	beq.n	800fd62 <acc_dll_dly_coarse_priority_sort+0x126>
 800fc82:	4564      	cmp	r4, ip
 800fc84:	f935 9c02 	ldrsh.w	r9, [r5, #-2]
 800fc88:	d012      	beq.n	800fcb0 <acc_dll_dly_coarse_priority_sort+0x74>
 800fc8a:	4599      	cmp	r9, r3
 800fc8c:	dd14      	ble.n	800fcb8 <acc_dll_dly_coarse_priority_sort+0x7c>
 800fc8e:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
 800fc92:	459a      	cmp	sl, r3
 800fc94:	da10      	bge.n	800fcb8 <acc_dll_dly_coarse_priority_sort+0x7c>
 800fc96:	45c1      	cmp	r9, r8
 800fc98:	dc0e      	bgt.n	800fcb8 <acc_dll_dly_coarse_priority_sort+0x7c>
 800fc9a:	4543      	cmp	r3, r8
 800fc9c:	dc0c      	bgt.n	800fcb8 <acc_dll_dly_coarse_priority_sort+0x7c>
 800fc9e:	ebaa 0909 	sub.w	r9, sl, r9
 800fca2:	ee07 9a90 	vmov	s15, r9
 800fca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcaa:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800fcae:	e04e      	b.n	800fd4e <acc_dll_dly_coarse_priority_sort+0x112>
 800fcb0:	4599      	cmp	r9, r3
 800fcb2:	dd01      	ble.n	800fcb8 <acc_dll_dly_coarse_priority_sort+0x7c>
 800fcb4:	45c1      	cmp	r9, r8
 800fcb6:	dd44      	ble.n	800fd42 <acc_dll_dly_coarse_priority_sort+0x106>
 800fcb8:	eef0 6a45 	vmov.f32	s13, s10
 800fcbc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	bfb8      	it	lt
 800fcc4:	425b      	neglt	r3, r3
 800fcc6:	ee07 3a90 	vmov	s15, r3
 800fcca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcce:	3401      	adds	r4, #1
 800fcd0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800fcd4:	f807 6f01 	strb.w	r6, [r7, #1]!
 800fcd8:	b2e6      	uxtb	r6, r4
 800fcda:	4286      	cmp	r6, r0
 800fcdc:	ee67 7a06 	vmul.f32	s15, s14, s12
 800fce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fce8:	ee17 3a90 	vmov	r3, s15
 800fcec:	f80e 3b01 	strb.w	r3, [lr], #1
 800fcf0:	d3c3      	bcc.n	800fc7a <acc_dll_dly_coarse_priority_sort+0x3e>
 800fcf2:	3802      	subs	r0, #2
 800fcf4:	f102 0e01 	add.w	lr, r2, #1
 800fcf8:	fa5f fc8c 	uxtb.w	ip, ip
 800fcfc:	fa5e f780 	uxtab	r7, lr, r0
 800fd00:	eba7 0c0c 	sub.w	ip, r7, ip
 800fd04:	45bc      	cmp	ip, r7
 800fd06:	d019      	beq.n	800fd3c <acc_dll_dly_coarse_priority_sort+0x100>
 800fd08:	4613      	mov	r3, r2
 800fd0a:	2400      	movs	r4, #0
 800fd0c:	7819      	ldrb	r1, [r3, #0]
 800fd0e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800fd12:	ad04      	add	r5, sp, #16
 800fd14:	186e      	adds	r6, r5, r1
 800fd16:	4405      	add	r5, r0
 800fd18:	f816 6c0c 	ldrb.w	r6, [r6, #-12]
 800fd1c:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
 800fd20:	42ae      	cmp	r6, r5
 800fd22:	d904      	bls.n	800fd2e <acc_dll_dly_coarse_priority_sort+0xf2>
 800fd24:	3401      	adds	r4, #1
 800fd26:	b2e4      	uxtb	r4, r4
 800fd28:	f803 0c01 	strb.w	r0, [r3, #-1]
 800fd2c:	7019      	strb	r1, [r3, #0]
 800fd2e:	429f      	cmp	r7, r3
 800fd30:	d1ec      	bne.n	800fd0c <acc_dll_dly_coarse_priority_sort+0xd0>
 800fd32:	4577      	cmp	r7, lr
 800fd34:	d002      	beq.n	800fd3c <acc_dll_dly_coarse_priority_sort+0x100>
 800fd36:	3f01      	subs	r7, #1
 800fd38:	2c00      	cmp	r4, #0
 800fd3a:	d1e3      	bne.n	800fd04 <acc_dll_dly_coarse_priority_sort+0xc8>
 800fd3c:	b004      	add	sp, #16
 800fd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd42:	eba3 0909 	sub.w	r9, r3, r9
 800fd46:	ee07 9a90 	vmov	s15, r9
 800fd4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd4e:	eef4 7ac4 	vcmpe.f32	s15, s8
 800fd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd56:	bf54      	ite	pl
 800fd58:	eef0 6a45 	vmovpl.f32	s13, s10
 800fd5c:	eef0 6a64 	vmovmi.f32	s13, s9
 800fd60:	e7ac      	b.n	800fcbc <acc_dll_dly_coarse_priority_sort+0x80>
 800fd62:	f9b1 a000 	ldrsh.w	sl, [r1]
 800fd66:	f9b1 9002 	ldrsh.w	r9, [r1, #2]
 800fd6a:	45ca      	cmp	sl, r9
 800fd6c:	dda4      	ble.n	800fcb8 <acc_dll_dly_coarse_priority_sort+0x7c>
 800fd6e:	45c2      	cmp	sl, r8
 800fd70:	dca2      	bgt.n	800fcb8 <acc_dll_dly_coarse_priority_sort+0x7c>
 800fd72:	eba9 090a 	sub.w	r9, r9, sl
 800fd76:	ee07 9a90 	vmov	s15, r9
 800fd7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd7e:	e7e6      	b.n	800fd4e <acc_dll_dly_coarse_priority_sort+0x112>
 800fd80:	211e      	movs	r1, #30
 800fd82:	4808      	ldr	r0, [pc, #32]	; (800fda4 <acc_dll_dly_coarse_priority_sort+0x168>)
 800fd84:	f7f8 fb1a 	bl	80083bc <acc_assert_fail>
 800fd88:	2119      	movs	r1, #25
 800fd8a:	4806      	ldr	r0, [pc, #24]	; (800fda4 <acc_dll_dly_coarse_priority_sort+0x168>)
 800fd8c:	f7f8 fb16 	bl	80083bc <acc_assert_fail>
 800fd90:	c2c80000 	.word	0xc2c80000
 800fd94:	00000000 	.word	0x00000000
 800fd98:	42480000 	.word	0x42480000
 800fd9c:	447a0000 	.word	0x447a0000
 800fda0:	42c80000 	.word	0x42c80000
 800fda4:	0801a3d0 	.word	0x0801a3d0

0800fda8 <acc_dll_plateau_finder>:
 800fda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdac:	b0af      	sub	sp, #188	; 0xbc
 800fdae:	2819      	cmp	r0, #25
 800fdb0:	9104      	str	r1, [sp, #16]
 800fdb2:	f200 8221 	bhi.w	80101f8 <acc_dll_plateau_finder+0x450>
 800fdb6:	2801      	cmp	r0, #1
 800fdb8:	4683      	mov	fp, r0
 800fdba:	4614      	mov	r4, r2
 800fdbc:	469a      	mov	sl, r3
 800fdbe:	f240 820b 	bls.w	80101d8 <acc_dll_plateau_finder+0x430>
 800fdc2:	1e83      	subs	r3, r0, #2
 800fdc4:	2100      	movs	r1, #0
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	eddf 6abf 	vldr	s13, [pc, #764]	; 80100c8 <acc_dll_plateau_finder+0x320>
 800fdcc:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800fdd0:	9205      	str	r2, [sp, #20]
 800fdd2:	1c9f      	adds	r7, r3, #2
 800fdd4:	460d      	mov	r5, r1
 800fdd6:	4688      	mov	r8, r1
 800fdd8:	2601      	movs	r6, #1
 800fdda:	e006      	b.n	800fdea <acc_dll_plateau_finder+0x42>
 800fddc:	f10b 33ff 	add.w	r3, fp, #4294967295
 800fde0:	42b3      	cmp	r3, r6
 800fde2:	d019      	beq.n	800fe18 <acc_dll_plateau_finder+0x70>
 800fde4:	3601      	adds	r6, #1
 800fde6:	42b7      	cmp	r7, r6
 800fde8:	d04a      	beq.n	800fe80 <acc_dll_plateau_finder+0xd8>
 800fdea:	f8b9 3000 	ldrh.w	r3, [r9]
 800fdee:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 800fdf2:	ee07 3a90 	vmov	s15, r3
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	bf34      	ite	cc
 800fdfa:	1ad3      	subcc	r3, r2, r3
 800fdfc:	1a9b      	subcs	r3, r3, r2
 800fdfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe02:	b2b0      	uxth	r0, r6
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	3501      	adds	r5, #1
 800fe08:	4401      	add	r1, r0
 800fe0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fe0e:	b2ad      	uxth	r5, r5
 800fe10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fe14:	b289      	uxth	r1, r1
 800fe16:	d9e1      	bls.n	800fddc <acc_dll_plateau_finder+0x34>
 800fe18:	2d02      	cmp	r5, #2
 800fe1a:	d97e      	bls.n	800ff1a <acc_dll_plateau_finder+0x172>
 800fe1c:	ee07 1a90 	vmov	s15, r1
 800fe20:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800fe24:	ee07 5a90 	vmov	s15, r5
 800fe28:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800fe2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe30:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800fe34:	ab2e      	add	r3, sp, #184	; 0xb8
 800fe36:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 800fe3a:	3601      	adds	r6, #1
 800fe3c:	f108 0401 	add.w	r4, r8, #1
 800fe40:	2100      	movs	r1, #0
 800fe42:	42b7      	cmp	r7, r6
 800fe44:	f822 5c34 	strh.w	r5, [r2, #-52]
 800fe48:	f822 0c9c 	strh.w	r0, [r2, #-156]
 800fe4c:	460d      	mov	r5, r1
 800fe4e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800fe52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fe56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe5a:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800fe5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe62:	eddf 6a99 	vldr	s13, [pc, #612]	; 80100c8 <acc_dll_plateau_finder+0x320>
 800fe66:	ee17 3a90 	vmov	r3, s15
 800fe6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800fe6e:	f82a 3018 	strh.w	r3, [sl, r8, lsl #1]
 800fe72:	ee16 3a10 	vmov	r3, s12
 800fe76:	fa1f f884 	uxth.w	r8, r4
 800fe7a:	f822 3c68 	strh.w	r3, [r2, #-104]
 800fe7e:	d1b4      	bne.n	800fdea <acc_dll_plateau_finder+0x42>
 800fe80:	9c05      	ldr	r4, [sp, #20]
 800fe82:	f7f9 f80d 	bl	8008ea0 <acc_rss_integration_log_level>
 800fe86:	2803      	cmp	r0, #3
 800fe88:	d906      	bls.n	800fe98 <acc_dll_plateau_finder+0xf0>
 800fe8a:	4643      	mov	r3, r8
 800fe8c:	498f      	ldr	r1, [pc, #572]	; (80100cc <acc_dll_plateau_finder+0x324>)
 800fe8e:	4a90      	ldr	r2, [pc, #576]	; (80100d0 <acc_dll_plateau_finder+0x328>)
 800fe90:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800fe92:	4990      	ldr	r1, [pc, #576]	; (80100d4 <acc_dll_plateau_finder+0x32c>)
 800fe94:	2004      	movs	r0, #4
 800fe96:	47a8      	blx	r5
 800fe98:	f1b8 0f00 	cmp.w	r8, #0
 800fe9c:	d024      	beq.n	800fee8 <acc_dll_plateau_finder+0x140>
 800fe9e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80100cc <acc_dll_plateau_finder+0x324>
 800fea2:	4d8d      	ldr	r5, [pc, #564]	; (80100d8 <acc_dll_plateau_finder+0x330>)
 800fea4:	4f8b      	ldr	r7, [pc, #556]	; (80100d4 <acc_dll_plateau_finder+0x32c>)
 800fea6:	2600      	movs	r6, #0
 800fea8:	46a1      	mov	r9, r4
 800feaa:	f7f8 fff9 	bl	8008ea0 <acc_rss_integration_log_level>
 800feae:	2803      	cmp	r0, #3
 800feb0:	d915      	bls.n	800fede <acc_dll_plateau_finder+0x136>
 800feb2:	a914      	add	r1, sp, #80	; 0x50
 800feb4:	aa21      	add	r2, sp, #132	; 0x84
 800feb6:	ab07      	add	r3, sp, #28
 800feb8:	f831 0016 	ldrh.w	r0, [r1, r6, lsl #1]
 800febc:	f832 1016 	ldrh.w	r1, [r2, r6, lsl #1]
 800fec0:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 800fec4:	f83a 3016 	ldrh.w	r3, [sl, r6, lsl #1]
 800fec8:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800fecc:	e9cd 2300 	strd	r2, r3, [sp]
 800fed0:	4639      	mov	r1, r7
 800fed2:	4633      	mov	r3, r6
 800fed4:	462a      	mov	r2, r5
 800fed6:	2004      	movs	r0, #4
 800fed8:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 800fedc:	47a0      	blx	r4
 800fede:	3601      	adds	r6, #1
 800fee0:	b2b3      	uxth	r3, r6
 800fee2:	4598      	cmp	r8, r3
 800fee4:	d8e1      	bhi.n	800feaa <acc_dll_plateau_finder+0x102>
 800fee6:	464c      	mov	r4, r9
 800fee8:	9b04      	ldr	r3, [sp, #16]
 800feea:	f8b3 a000 	ldrh.w	sl, [r3]
 800feee:	f248 73cf 	movw	r3, #34767	; 0x87cf
 800fef2:	459a      	cmp	sl, r3
 800fef4:	d826      	bhi.n	800ff44 <acc_dll_plateau_finder+0x19c>
 800fef6:	f7f8 ffd3 	bl	8008ea0 <acc_rss_integration_log_level>
 800fefa:	2803      	cmp	r0, #3
 800fefc:	f240 8161 	bls.w	80101c2 <acc_dll_plateau_finder+0x41a>
 800ff00:	4b72      	ldr	r3, [pc, #456]	; (80100cc <acc_dll_plateau_finder+0x324>)
 800ff02:	4a76      	ldr	r2, [pc, #472]	; (80100dc <acc_dll_plateau_finder+0x334>)
 800ff04:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800ff06:	4973      	ldr	r1, [pc, #460]	; (80100d4 <acc_dll_plateau_finder+0x32c>)
 800ff08:	4653      	mov	r3, sl
 800ff0a:	2004      	movs	r0, #4
 800ff0c:	47a0      	blx	r4
 800ff0e:	f04f 0900 	mov.w	r9, #0
 800ff12:	4648      	mov	r0, r9
 800ff14:	b02f      	add	sp, #188	; 0xbc
 800ff16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff1a:	f7f8 ffc1 	bl	8008ea0 <acc_rss_integration_log_level>
 800ff1e:	2803      	cmp	r0, #3
 800ff20:	f240 8155 	bls.w	80101ce <acc_dll_plateau_finder+0x426>
 800ff24:	9501      	str	r5, [sp, #4]
 800ff26:	f839 3c02 	ldrh.w	r3, [r9, #-2]
 800ff2a:	9300      	str	r3, [sp, #0]
 800ff2c:	4b67      	ldr	r3, [pc, #412]	; (80100cc <acc_dll_plateau_finder+0x324>)
 800ff2e:	4969      	ldr	r1, [pc, #420]	; (80100d4 <acc_dll_plateau_finder+0x32c>)
 800ff30:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800ff32:	4a6b      	ldr	r2, [pc, #428]	; (80100e0 <acc_dll_plateau_finder+0x338>)
 800ff34:	4633      	mov	r3, r6
 800ff36:	2004      	movs	r0, #4
 800ff38:	2500      	movs	r5, #0
 800ff3a:	47a0      	blx	r4
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	eddf 6a62 	vldr	s13, [pc, #392]	; 80100c8 <acc_dll_plateau_finder+0x320>
 800ff42:	e74f      	b.n	800fde4 <acc_dll_plateau_finder+0x3c>
 800ff44:	f5aa 4300 	sub.w	r3, sl, #32768	; 0x8000
 800ff48:	ee07 3a90 	vmov	s15, r3
 800ff4c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80100e4 <acc_dll_plateau_finder+0x33c>
 800ff50:	ed9f 5a65 	vldr	s10, [pc, #404]	; 80100e8 <acc_dll_plateau_finder+0x340>
 800ff54:	eddf 6a65 	vldr	s13, [pc, #404]	; 80100ec <acc_dll_plateau_finder+0x344>
 800ff58:	eddf 5a65 	vldr	s11, [pc, #404]	; 80100f0 <acc_dll_plateau_finder+0x348>
 800ff5c:	ed9f 6a65 	vldr	s12, [pc, #404]	; 80100f4 <acc_dll_plateau_finder+0x34c>
 800ff60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff68:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ff6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ff74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff78:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ff7c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ff80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff84:	ee17 3a90 	vmov	r3, s15
 800ff88:	b29d      	uxth	r5, r3
 800ff8a:	f7f8 ff89 	bl	8008ea0 <acc_rss_integration_log_level>
 800ff8e:	2803      	cmp	r0, #3
 800ff90:	d906      	bls.n	800ffa0 <acc_dll_plateau_finder+0x1f8>
 800ff92:	4b4e      	ldr	r3, [pc, #312]	; (80100cc <acc_dll_plateau_finder+0x324>)
 800ff94:	4a58      	ldr	r2, [pc, #352]	; (80100f8 <acc_dll_plateau_finder+0x350>)
 800ff96:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800ff98:	494e      	ldr	r1, [pc, #312]	; (80100d4 <acc_dll_plateau_finder+0x32c>)
 800ff9a:	462b      	mov	r3, r5
 800ff9c:	2004      	movs	r0, #4
 800ff9e:	47b0      	blx	r6
 800ffa0:	f1b8 0f00 	cmp.w	r8, #0
 800ffa4:	f000 810d 	beq.w	80101c2 <acc_dll_plateau_finder+0x41a>
 800ffa8:	2700      	movs	r7, #0
 800ffaa:	46b9      	mov	r9, r7
 800ffac:	463b      	mov	r3, r7
 800ffae:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800ffb2:	462e      	mov	r6, r5
 800ffb4:	e00e      	b.n	800ffd4 <acc_dll_plateau_finder+0x22c>
 800ffb6:	f5aa 62fa 	sub.w	r2, sl, #2000	; 0x7d0
 800ffba:	4295      	cmp	r5, r2
 800ffbc:	f200 80f1 	bhi.w	80101a2 <acc_dll_plateau_finder+0x3fa>
 800ffc0:	f109 0201 	add.w	r2, r9, #1
 800ffc4:	f824 3019 	strh.w	r3, [r4, r9, lsl #1]
 800ffc8:	fa1f f982 	uxth.w	r9, r2
 800ffcc:	3701      	adds	r7, #1
 800ffce:	b2bb      	uxth	r3, r7
 800ffd0:	4598      	cmp	r8, r3
 800ffd2:	d914      	bls.n	800fffe <acc_dll_plateau_finder+0x256>
 800ffd4:	f83b 5017 	ldrh.w	r5, [fp, r7, lsl #1]
 800ffd8:	f241 3287 	movw	r2, #4999	; 0x1387
 800ffdc:	4295      	cmp	r5, r2
 800ffde:	d8ea      	bhi.n	800ffb6 <acc_dll_plateau_finder+0x20e>
 800ffe0:	f7f8 ff5e 	bl	8008ea0 <acc_rss_integration_log_level>
 800ffe4:	2803      	cmp	r0, #3
 800ffe6:	d9f1      	bls.n	800ffcc <acc_dll_plateau_finder+0x224>
 800ffe8:	4a38      	ldr	r2, [pc, #224]	; (80100cc <acc_dll_plateau_finder+0x324>)
 800ffea:	493a      	ldr	r1, [pc, #232]	; (80100d4 <acc_dll_plateau_finder+0x32c>)
 800ffec:	462b      	mov	r3, r5
 800ffee:	2004      	movs	r0, #4
 800fff0:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800fff2:	4a42      	ldr	r2, [pc, #264]	; (80100fc <acc_dll_plateau_finder+0x354>)
 800fff4:	3701      	adds	r7, #1
 800fff6:	47a8      	blx	r5
 800fff8:	b2bb      	uxth	r3, r7
 800fffa:	4598      	cmp	r8, r3
 800fffc:	d8ea      	bhi.n	800ffd4 <acc_dll_plateau_finder+0x22c>
 800fffe:	f1b9 0f01 	cmp.w	r9, #1
 8010002:	4635      	mov	r5, r6
 8010004:	f240 80ef 	bls.w	80101e6 <acc_dll_plateau_finder+0x43e>
 8010008:	f1a9 0802 	sub.w	r8, r9, #2
 801000c:	fa1f f888 	uxth.w	r8, r8
 8010010:	fa0f fe88 	sxth.w	lr, r8
 8010014:	f10e 0a01 	add.w	sl, lr, #1
 8010018:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
 801001c:	46a4      	mov	ip, r4
 801001e:	f1be 0f00 	cmp.w	lr, #0
 8010022:	db23      	blt.n	801006c <acc_dll_plateau_finder+0x2c4>
 8010024:	4651      	mov	r1, sl
 8010026:	4670      	mov	r0, lr
 8010028:	2400      	movs	r4, #0
 801002a:	f831 6d02 	ldrh.w	r6, [r1, #-2]!
 801002e:	ab2e      	add	r3, sp, #184	; 0xb8
 8010030:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8010034:	884f      	ldrh	r7, [r1, #2]
 8010036:	f833 2c68 	ldrh.w	r2, [r3, #-104]
 801003a:	ab2e      	add	r3, sp, #184	; 0xb8
 801003c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8010040:	42aa      	cmp	r2, r5
 8010042:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8010046:	bf8c      	ite	hi
 8010048:	1b52      	subhi	r2, r2, r5
 801004a:	1aaa      	subls	r2, r5, r2
 801004c:	42ab      	cmp	r3, r5
 801004e:	bf8c      	ite	hi
 8010050:	1b5b      	subhi	r3, r3, r5
 8010052:	1aeb      	subls	r3, r5, r3
 8010054:	b292      	uxth	r2, r2
 8010056:	b29b      	uxth	r3, r3
 8010058:	429a      	cmp	r2, r3
 801005a:	d902      	bls.n	8010062 <acc_dll_plateau_finder+0x2ba>
 801005c:	800f      	strh	r7, [r1, #0]
 801005e:	804e      	strh	r6, [r1, #2]
 8010060:	2401      	movs	r4, #1
 8010062:	3801      	subs	r0, #1
 8010064:	0403      	lsls	r3, r0, #16
 8010066:	d5e0      	bpl.n	801002a <acc_dll_plateau_finder+0x282>
 8010068:	2c00      	cmp	r4, #0
 801006a:	d1d8      	bne.n	801001e <acc_dll_plateau_finder+0x276>
 801006c:	f8bc 3000 	ldrh.w	r3, [ip]
 8010070:	aa2e      	add	r2, sp, #184	; 0xb8
 8010072:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8010076:	4664      	mov	r4, ip
 8010078:	1ca2      	adds	r2, r4, #2
 801007a:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 801007e:	9204      	str	r2, [sp, #16]
 8010080:	eb02 0848 	add.w	r8, r2, r8, lsl #1
 8010084:	2601      	movs	r6, #1
 8010086:	4662      	mov	r2, ip
 8010088:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801008c:	a82e      	add	r0, sp, #184	; 0xb8
 801008e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010092:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8010096:	428b      	cmp	r3, r1
 8010098:	bf8c      	ite	hi
 801009a:	1a5b      	subhi	r3, r3, r1
 801009c:	1acb      	subls	r3, r1, r3
 801009e:	b29b      	uxth	r3, r3
 80100a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80100a4:	bf3c      	itt	cc
 80100a6:	3601      	addcc	r6, #1
 80100a8:	b2b6      	uxthcc	r6, r6
 80100aa:	4590      	cmp	r8, r2
 80100ac:	d1ec      	bne.n	8010088 <acc_dll_plateau_finder+0x2e0>
 80100ae:	f8df a01c 	ldr.w	sl, [pc, #28]	; 80100cc <acc_dll_plateau_finder+0x324>
 80100b2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8010100 <acc_dll_plateau_finder+0x358>
 80100b6:	3e01      	subs	r6, #1
 80100b8:	2e00      	cmp	r6, #0
 80100ba:	d050      	beq.n	801015e <acc_dll_plateau_finder+0x3b6>
 80100bc:	2500      	movs	r5, #0
 80100be:	4f05      	ldr	r7, [pc, #20]	; (80100d4 <acc_dll_plateau_finder+0x32c>)
 80100c0:	46ae      	mov	lr, r5
 80100c2:	462a      	mov	r2, r5
 80100c4:	e023      	b.n	801010e <acc_dll_plateau_finder+0x366>
 80100c6:	bf00      	nop
 80100c8:	00000000 	.word	0x00000000
 80100cc:	20001628 	.word	0x20001628
 80100d0:	0801a4d8 	.word	0x0801a4d8
 80100d4:	0801a4c0 	.word	0x0801a4c0
 80100d8:	0801a4ec 	.word	0x0801a4ec
 80100dc:	0801a530 	.word	0x0801a530
 80100e0:	0801a46c 	.word	0x0801a46c
 80100e4:	3f99999a 	.word	0x3f99999a
 80100e8:	37800000 	.word	0x37800000
 80100ec:	3f866666 	.word	0x3f866666
 80100f0:	47800000 	.word	0x47800000
 80100f4:	47000000 	.word	0x47000000
 80100f8:	0801a558 	.word	0x0801a558
 80100fc:	0801a568 	.word	0x0801a568
 8010100:	0801a5c8 	.word	0x0801a5c8
 8010104:	3501      	adds	r5, #1
 8010106:	b2ad      	uxth	r5, r5
 8010108:	42b5      	cmp	r5, r6
 801010a:	462a      	mov	r2, r5
 801010c:	d224      	bcs.n	8010158 <acc_dll_plateau_finder+0x3b0>
 801010e:	0053      	lsls	r3, r2, #1
 8010110:	3302      	adds	r3, #2
 8010112:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 8010116:	5ae0      	ldrh	r0, [r4, r3]
 8010118:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 801011c:	eb0c 0b41 	add.w	fp, ip, r1, lsl #1
 8010120:	eb0c 0c40 	add.w	ip, ip, r0, lsl #1
 8010124:	f83b bc34 	ldrh.w	fp, [fp, #-52]
 8010128:	f83c cc34 	ldrh.w	ip, [ip, #-52]
 801012c:	45e3      	cmp	fp, ip
 801012e:	d2e9      	bcs.n	8010104 <acc_dll_plateau_finder+0x35c>
 8010130:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 8010134:	52e1      	strh	r1, [r4, r3]
 8010136:	f7f8 feb3 	bl	8008ea0 <acc_rss_integration_log_level>
 801013a:	2803      	cmp	r0, #3
 801013c:	d93e      	bls.n	80101bc <acc_dll_plateau_finder+0x414>
 801013e:	3501      	adds	r5, #1
 8010140:	4642      	mov	r2, r8
 8010142:	b2ad      	uxth	r5, r5
 8010144:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 8010148:	4639      	mov	r1, r7
 801014a:	2004      	movs	r0, #4
 801014c:	4798      	blx	r3
 801014e:	42b5      	cmp	r5, r6
 8010150:	f04f 0e01 	mov.w	lr, #1
 8010154:	462a      	mov	r2, r5
 8010156:	d3da      	bcc.n	801010e <acc_dll_plateau_finder+0x366>
 8010158:	f1be 0f00 	cmp.w	lr, #0
 801015c:	d1ac      	bne.n	80100b8 <acc_dll_plateau_finder+0x310>
 801015e:	f109 3aff 	add.w	sl, r9, #4294967295
 8010162:	9b04      	ldr	r3, [sp, #16]
 8010164:	4d26      	ldr	r5, [pc, #152]	; (8010200 <acc_dll_plateau_finder+0x458>)
 8010166:	4f27      	ldr	r7, [pc, #156]	; (8010204 <acc_dll_plateau_finder+0x45c>)
 8010168:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8010208 <acc_dll_plateau_finder+0x460>
 801016c:	fa1f fa8a 	uxth.w	sl, sl
 8010170:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
 8010174:	f7f8 fe94 	bl	8008ea0 <acc_rss_integration_log_level>
 8010178:	2803      	cmp	r0, #3
 801017a:	d90b      	bls.n	8010194 <acc_dll_plateau_finder+0x3ec>
 801017c:	8823      	ldrh	r3, [r4, #0]
 801017e:	aa2e      	add	r2, sp, #184	; 0xb8
 8010180:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8010184:	4641      	mov	r1, r8
 8010186:	f832 2c68 	ldrh.w	r2, [r2, #-104]
 801018a:	9200      	str	r2, [sp, #0]
 801018c:	2004      	movs	r0, #4
 801018e:	463a      	mov	r2, r7
 8010190:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8010192:	47b0      	blx	r6
 8010194:	3402      	adds	r4, #2
 8010196:	45a2      	cmp	sl, r4
 8010198:	d1ec      	bne.n	8010174 <acc_dll_plateau_finder+0x3cc>
 801019a:	4648      	mov	r0, r9
 801019c:	b02f      	add	sp, #188	; 0xbc
 801019e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a2:	f7f8 fe7d 	bl	8008ea0 <acc_rss_integration_log_level>
 80101a6:	2803      	cmp	r0, #3
 80101a8:	f67f af10 	bls.w	800ffcc <acc_dll_plateau_finder+0x224>
 80101ac:	4a14      	ldr	r2, [pc, #80]	; (8010200 <acc_dll_plateau_finder+0x458>)
 80101ae:	4916      	ldr	r1, [pc, #88]	; (8010208 <acc_dll_plateau_finder+0x460>)
 80101b0:	462b      	mov	r3, r5
 80101b2:	2004      	movs	r0, #4
 80101b4:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80101b6:	4a15      	ldr	r2, [pc, #84]	; (801020c <acc_dll_plateau_finder+0x464>)
 80101b8:	47a8      	blx	r5
 80101ba:	e707      	b.n	800ffcc <acc_dll_plateau_finder+0x224>
 80101bc:	f04f 0e01 	mov.w	lr, #1
 80101c0:	e7a0      	b.n	8010104 <acc_dll_plateau_finder+0x35c>
 80101c2:	f04f 0900 	mov.w	r9, #0
 80101c6:	4648      	mov	r0, r9
 80101c8:	b02f      	add	sp, #188	; 0xbc
 80101ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ce:	2100      	movs	r1, #0
 80101d0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8010210 <acc_dll_plateau_finder+0x468>
 80101d4:	460d      	mov	r5, r1
 80101d6:	e605      	b.n	800fde4 <acc_dll_plateau_finder+0x3c>
 80101d8:	f7f8 fe62 	bl	8008ea0 <acc_rss_integration_log_level>
 80101dc:	2803      	cmp	r0, #3
 80101de:	d908      	bls.n	80101f2 <acc_dll_plateau_finder+0x44a>
 80101e0:	2300      	movs	r3, #0
 80101e2:	4698      	mov	r8, r3
 80101e4:	e652      	b.n	800fe8c <acc_dll_plateau_finder+0xe4>
 80101e6:	f1b9 0f00 	cmp.w	r9, #0
 80101ea:	d0ea      	beq.n	80101c2 <acc_dll_plateau_finder+0x41a>
 80101ec:	1ca3      	adds	r3, r4, #2
 80101ee:	9304      	str	r3, [sp, #16]
 80101f0:	e7b5      	b.n	801015e <acc_dll_plateau_finder+0x3b6>
 80101f2:	f04f 0800 	mov.w	r8, #0
 80101f6:	e677      	b.n	800fee8 <acc_dll_plateau_finder+0x140>
 80101f8:	2128      	movs	r1, #40	; 0x28
 80101fa:	4806      	ldr	r0, [pc, #24]	; (8010214 <acc_dll_plateau_finder+0x46c>)
 80101fc:	f7f8 f8de 	bl	80083bc <acc_assert_fail>
 8010200:	20001628 	.word	0x20001628
 8010204:	0801a5fc 	.word	0x0801a5fc
 8010208:	0801a4c0 	.word	0x0801a4c0
 801020c:	0801a598 	.word	0x0801a598
 8010210:	00000000 	.word	0x00000000
 8010214:	0801a424 	.word	0x0801a424

08010218 <acc_cpd_linear_sweep_load_program>:
 8010218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801021c:	ed2d 8b02 	vpush	{d8}
 8010220:	b093      	sub	sp, #76	; 0x4c
 8010222:	4614      	mov	r4, r2
 8010224:	4605      	mov	r5, r0
 8010226:	461a      	mov	r2, r3
 8010228:	900d      	str	r0, [sp, #52]	; 0x34
 801022a:	460e      	mov	r6, r1
 801022c:	910e      	str	r1, [sp, #56]	; 0x38
 801022e:	469b      	mov	fp, r3
 8010230:	4601      	mov	r1, r0
 8010232:	23bc      	movs	r3, #188	; 0xbc
 8010234:	2016      	movs	r0, #22
 8010236:	f7fa fb3b 	bl	800a8b0 <acc_probes_execute_struct>
 801023a:	ab11      	add	r3, sp, #68	; 0x44
 801023c:	4622      	mov	r2, r4
 801023e:	9300      	str	r3, [sp, #0]
 8010240:	4631      	mov	r1, r6
 8010242:	4628      	mov	r0, r5
 8010244:	2400      	movs	r4, #0
 8010246:	ab10      	add	r3, sp, #64	; 0x40
 8010248:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 801024c:	f7fd f92a 	bl	800d4a4 <acc_sensor_protocol_r2_prepare_load>
 8010250:	900f      	str	r0, [sp, #60]	; 0x3c
 8010252:	b928      	cbnz	r0, 8010260 <acc_cpd_linear_sweep_load_program+0x48>
 8010254:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010256:	b013      	add	sp, #76	; 0x4c
 8010258:	ecbd 8b02 	vpop	{d8}
 801025c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010260:	f7f8 fe1e 	bl	8008ea0 <acc_rss_integration_log_level>
 8010264:	2803      	cmp	r0, #3
 8010266:	d905      	bls.n	8010274 <acc_cpd_linear_sweep_load_program+0x5c>
 8010268:	4b06      	ldr	r3, [pc, #24]	; (8010284 <acc_cpd_linear_sweep_load_program+0x6c>)
 801026a:	4a07      	ldr	r2, [pc, #28]	; (8010288 <acc_cpd_linear_sweep_load_program+0x70>)
 801026c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801026e:	4907      	ldr	r1, [pc, #28]	; (801028c <acc_cpd_linear_sweep_load_program+0x74>)
 8010270:	2004      	movs	r0, #4
 8010272:	4798      	blx	r3
 8010274:	2200      	movs	r2, #0
 8010276:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010278:	f8df a018 	ldr.w	sl, [pc, #24]	; 8010294 <acc_cpd_linear_sweep_load_program+0x7c>
 801027c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8010290 <acc_cpd_linear_sweep_load_program+0x78>
 8010280:	4691      	mov	r9, r2
 8010282:	e075      	b.n	8010370 <acc_cpd_linear_sweep_load_program+0x158>
 8010284:	20001628 	.word	0x20001628
 8010288:	0801a674 	.word	0x0801a674
 801028c:	0801a69c 	.word	0x0801a69c
 8010290:	3751b717 	.word	0x3751b717
 8010294:	0801bd58 	.word	0x0801bd58
 8010298:	2323      	movs	r3, #35	; 0x23
 801029a:	2203      	movs	r2, #3
 801029c:	e9cd 3200 	strd	r3, r2, [sp]
 80102a0:	4629      	mov	r1, r5
 80102a2:	4653      	mov	r3, sl
 80102a4:	4632      	mov	r2, r6
 80102a6:	4620      	mov	r0, r4
 80102a8:	f002 fa10 	bl	80126cc <acc_confprogram_patch_offset>
 80102ac:	237d      	movs	r3, #125	; 0x7d
 80102ae:	2200      	movs	r2, #0
 80102b0:	e9cd 3200 	strd	r3, r2, [sp]
 80102b4:	4629      	mov	r1, r5
 80102b6:	4653      	mov	r3, sl
 80102b8:	4632      	mov	r2, r6
 80102ba:	4620      	mov	r0, r4
 80102bc:	f002 fa06 	bl	80126cc <acc_confprogram_patch_offset>
 80102c0:	2381      	movs	r3, #129	; 0x81
 80102c2:	2201      	movs	r2, #1
 80102c4:	e9cd 3200 	strd	r3, r2, [sp]
 80102c8:	4629      	mov	r1, r5
 80102ca:	4653      	mov	r3, sl
 80102cc:	4632      	mov	r2, r6
 80102ce:	4620      	mov	r0, r4
 80102d0:	f002 f9fc 	bl	80126cc <acc_confprogram_patch_offset>
 80102d4:	2375      	movs	r3, #117	; 0x75
 80102d6:	2202      	movs	r2, #2
 80102d8:	e9cd 3200 	strd	r3, r2, [sp]
 80102dc:	4653      	mov	r3, sl
 80102de:	4632      	mov	r2, r6
 80102e0:	4629      	mov	r1, r5
 80102e2:	4620      	mov	r0, r4
 80102e4:	f002 f9f2 	bl	80126cc <acc_confprogram_patch_offset>
 80102e8:	f89b 30ac 	ldrb.w	r3, [fp, #172]	; 0xac
 80102ec:	9301      	str	r3, [sp, #4]
 80102ee:	2352      	movs	r3, #82	; 0x52
 80102f0:	9300      	str	r3, [sp, #0]
 80102f2:	4632      	mov	r2, r6
 80102f4:	4653      	mov	r3, sl
 80102f6:	4629      	mov	r1, r5
 80102f8:	4620      	mov	r0, r4
 80102fa:	f002 f9e7 	bl	80126cc <acc_confprogram_patch_offset>
 80102fe:	eddb 7a2c 	vldr	s15, [fp, #176]	; 0xb0
 8010302:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010306:	2268      	movs	r2, #104	; 0x68
 8010308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801030c:	9200      	str	r2, [sp, #0]
 801030e:	ee17 3a90 	vmov	r3, s15
 8010312:	3b01      	subs	r3, #1
 8010314:	b29b      	uxth	r3, r3
 8010316:	9301      	str	r3, [sp, #4]
 8010318:	4632      	mov	r2, r6
 801031a:	4653      	mov	r3, sl
 801031c:	4629      	mov	r1, r5
 801031e:	4620      	mov	r0, r4
 8010320:	f002 f9d4 	bl	80126cc <acc_confprogram_patch_offset>
 8010324:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 8010328:	9301      	str	r3, [sp, #4]
 801032a:	2353      	movs	r3, #83	; 0x53
 801032c:	9300      	str	r3, [sp, #0]
 801032e:	4632      	mov	r2, r6
 8010330:	4653      	mov	r3, sl
 8010332:	4629      	mov	r1, r5
 8010334:	4620      	mov	r0, r4
 8010336:	f002 f9c9 	bl	80126cc <acc_confprogram_patch_offset>
 801033a:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 801033e:	b153      	cbz	r3, 8010356 <acc_cpd_linear_sweep_load_program+0x13e>
 8010340:	f8db 30b8 	ldr.w	r3, [fp, #184]	; 0xb8
 8010344:	9301      	str	r3, [sp, #4]
 8010346:	2332      	movs	r3, #50	; 0x32
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	4632      	mov	r2, r6
 801034c:	4629      	mov	r1, r5
 801034e:	4620      	mov	r0, r4
 8010350:	4653      	mov	r3, sl
 8010352:	f002 f9bb 	bl	80126cc <acc_confprogram_patch_offset>
 8010356:	9b03      	ldr	r3, [sp, #12]
 8010358:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801035c:	e9dd 020d 	ldrd	r0, r2, [sp, #52]	; 0x34
 8010360:	f7fc fc4c 	bl	800cbfc <acc_sensor_r2_load_confmem>
 8010364:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010366:	4499      	add	r9, r3
 8010368:	f5b9 6fe2 	cmp.w	r9, #1808	; 0x710
 801036c:	f080 83be 	bcs.w	8010aec <acc_cpd_linear_sweep_load_program+0x8d4>
 8010370:	f5c9 62e2 	rsb	r2, r9, #1808	; 0x710
 8010374:	429a      	cmp	r2, r3
 8010376:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8010378:	48aa      	ldr	r0, [pc, #680]	; (8010624 <acc_cpd_linear_sweep_load_program+0x40c>)
 801037a:	4615      	mov	r5, r2
 801037c:	bf28      	it	cs
 801037e:	461d      	movcs	r5, r3
 8010380:	ea4f 0359 	mov.w	r3, r9, lsr #1
 8010384:	086a      	lsrs	r2, r5, #1
 8010386:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801038a:	4621      	mov	r1, r4
 801038c:	9503      	str	r5, [sp, #12]
 801038e:	9304      	str	r3, [sp, #16]
 8010390:	f002 fa90 	bl	80128b4 <acc_confprogram_copy>
 8010394:	f8db 3000 	ldr.w	r3, [fp]
 8010398:	9301      	str	r3, [sp, #4]
 801039a:	b2ae      	uxth	r6, r5
 801039c:	2350      	movs	r3, #80	; 0x50
 801039e:	fa1f f589 	uxth.w	r5, r9
 80103a2:	4632      	mov	r2, r6
 80103a4:	4620      	mov	r0, r4
 80103a6:	4629      	mov	r1, r5
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	4653      	mov	r3, sl
 80103ac:	f002 f98e 	bl	80126cc <acc_confprogram_patch_offset>
 80103b0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80103b4:	9301      	str	r3, [sp, #4]
 80103b6:	234e      	movs	r3, #78	; 0x4e
 80103b8:	4632      	mov	r2, r6
 80103ba:	4629      	mov	r1, r5
 80103bc:	4620      	mov	r0, r4
 80103be:	9300      	str	r3, [sp, #0]
 80103c0:	4653      	mov	r3, sl
 80103c2:	f002 f983 	bl	80126cc <acc_confprogram_patch_offset>
 80103c6:	f8db 3008 	ldr.w	r3, [fp, #8]
 80103ca:	9301      	str	r3, [sp, #4]
 80103cc:	234f      	movs	r3, #79	; 0x4f
 80103ce:	4632      	mov	r2, r6
 80103d0:	4629      	mov	r1, r5
 80103d2:	4620      	mov	r0, r4
 80103d4:	9300      	str	r3, [sp, #0]
 80103d6:	4653      	mov	r3, sl
 80103d8:	f002 f978 	bl	80126cc <acc_confprogram_patch_offset>
 80103dc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80103e0:	9301      	str	r3, [sp, #4]
 80103e2:	234c      	movs	r3, #76	; 0x4c
 80103e4:	4632      	mov	r2, r6
 80103e6:	4629      	mov	r1, r5
 80103e8:	4620      	mov	r0, r4
 80103ea:	9300      	str	r3, [sp, #0]
 80103ec:	4653      	mov	r3, sl
 80103ee:	f002 f96d 	bl	80126cc <acc_confprogram_patch_offset>
 80103f2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80103f6:	9301      	str	r3, [sp, #4]
 80103f8:	2326      	movs	r3, #38	; 0x26
 80103fa:	4632      	mov	r2, r6
 80103fc:	4629      	mov	r1, r5
 80103fe:	4620      	mov	r0, r4
 8010400:	9300      	str	r3, [sp, #0]
 8010402:	4653      	mov	r3, sl
 8010404:	f002 f962 	bl	80126cc <acc_confprogram_patch_offset>
 8010408:	f8db 3014 	ldr.w	r3, [fp, #20]
 801040c:	9301      	str	r3, [sp, #4]
 801040e:	2373      	movs	r3, #115	; 0x73
 8010410:	4632      	mov	r2, r6
 8010412:	4629      	mov	r1, r5
 8010414:	4620      	mov	r0, r4
 8010416:	9300      	str	r3, [sp, #0]
 8010418:	4653      	mov	r3, sl
 801041a:	f002 f957 	bl	80126cc <acc_confprogram_patch_offset>
 801041e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8010422:	9301      	str	r3, [sp, #4]
 8010424:	2362      	movs	r3, #98	; 0x62
 8010426:	4632      	mov	r2, r6
 8010428:	4629      	mov	r1, r5
 801042a:	4620      	mov	r0, r4
 801042c:	9300      	str	r3, [sp, #0]
 801042e:	4653      	mov	r3, sl
 8010430:	f002 f94c 	bl	80126cc <acc_confprogram_patch_offset>
 8010434:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010438:	9301      	str	r3, [sp, #4]
 801043a:	2337      	movs	r3, #55	; 0x37
 801043c:	4632      	mov	r2, r6
 801043e:	4629      	mov	r1, r5
 8010440:	4620      	mov	r0, r4
 8010442:	9300      	str	r3, [sp, #0]
 8010444:	4653      	mov	r3, sl
 8010446:	f002 f941 	bl	80126cc <acc_confprogram_patch_offset>
 801044a:	f8db 3020 	ldr.w	r3, [fp, #32]
 801044e:	9301      	str	r3, [sp, #4]
 8010450:	2376      	movs	r3, #118	; 0x76
 8010452:	4632      	mov	r2, r6
 8010454:	4629      	mov	r1, r5
 8010456:	4620      	mov	r0, r4
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	4653      	mov	r3, sl
 801045c:	f002 f936 	bl	80126cc <acc_confprogram_patch_offset>
 8010460:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8010464:	9301      	str	r3, [sp, #4]
 8010466:	2369      	movs	r3, #105	; 0x69
 8010468:	4632      	mov	r2, r6
 801046a:	4629      	mov	r1, r5
 801046c:	4620      	mov	r0, r4
 801046e:	9300      	str	r3, [sp, #0]
 8010470:	4653      	mov	r3, sl
 8010472:	f002 f92b 	bl	80126cc <acc_confprogram_patch_offset>
 8010476:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 801047a:	9301      	str	r3, [sp, #4]
 801047c:	236a      	movs	r3, #106	; 0x6a
 801047e:	4632      	mov	r2, r6
 8010480:	4629      	mov	r1, r5
 8010482:	4620      	mov	r0, r4
 8010484:	9300      	str	r3, [sp, #0]
 8010486:	4653      	mov	r3, sl
 8010488:	f002 f920 	bl	80126cc <acc_confprogram_patch_offset>
 801048c:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8010490:	9301      	str	r3, [sp, #4]
 8010492:	2319      	movs	r3, #25
 8010494:	4632      	mov	r2, r6
 8010496:	4629      	mov	r1, r5
 8010498:	4620      	mov	r0, r4
 801049a:	9300      	str	r3, [sp, #0]
 801049c:	4653      	mov	r3, sl
 801049e:	f002 f915 	bl	80126cc <acc_confprogram_patch_offset>
 80104a2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 80104a6:	9301      	str	r3, [sp, #4]
 80104a8:	231a      	movs	r3, #26
 80104aa:	4632      	mov	r2, r6
 80104ac:	4629      	mov	r1, r5
 80104ae:	4620      	mov	r0, r4
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	4653      	mov	r3, sl
 80104b4:	f002 f90a 	bl	80126cc <acc_confprogram_patch_offset>
 80104b8:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 80104bc:	9301      	str	r3, [sp, #4]
 80104be:	231b      	movs	r3, #27
 80104c0:	4632      	mov	r2, r6
 80104c2:	4629      	mov	r1, r5
 80104c4:	4620      	mov	r0, r4
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	4653      	mov	r3, sl
 80104ca:	f002 f8ff 	bl	80126cc <acc_confprogram_patch_offset>
 80104ce:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80104d2:	9301      	str	r3, [sp, #4]
 80104d4:	231c      	movs	r3, #28
 80104d6:	4632      	mov	r2, r6
 80104d8:	4629      	mov	r1, r5
 80104da:	4620      	mov	r0, r4
 80104dc:	9300      	str	r3, [sp, #0]
 80104de:	4653      	mov	r3, sl
 80104e0:	f002 f8f4 	bl	80126cc <acc_confprogram_patch_offset>
 80104e4:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 80104e8:	9301      	str	r3, [sp, #4]
 80104ea:	231d      	movs	r3, #29
 80104ec:	4632      	mov	r2, r6
 80104ee:	4629      	mov	r1, r5
 80104f0:	4620      	mov	r0, r4
 80104f2:	9300      	str	r3, [sp, #0]
 80104f4:	4653      	mov	r3, sl
 80104f6:	f002 f8e9 	bl	80126cc <acc_confprogram_patch_offset>
 80104fa:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 80104fe:	9301      	str	r3, [sp, #4]
 8010500:	231e      	movs	r3, #30
 8010502:	4632      	mov	r2, r6
 8010504:	4629      	mov	r1, r5
 8010506:	4620      	mov	r0, r4
 8010508:	9300      	str	r3, [sp, #0]
 801050a:	4653      	mov	r3, sl
 801050c:	f002 f8de 	bl	80126cc <acc_confprogram_patch_offset>
 8010510:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
 8010514:	9301      	str	r3, [sp, #4]
 8010516:	2355      	movs	r3, #85	; 0x55
 8010518:	4632      	mov	r2, r6
 801051a:	4629      	mov	r1, r5
 801051c:	4620      	mov	r0, r4
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	4653      	mov	r3, sl
 8010522:	f002 f8d3 	bl	80126cc <acc_confprogram_patch_offset>
 8010526:	f8db 304c 	ldr.w	r3, [fp, #76]	; 0x4c
 801052a:	9301      	str	r3, [sp, #4]
 801052c:	2356      	movs	r3, #86	; 0x56
 801052e:	4632      	mov	r2, r6
 8010530:	4629      	mov	r1, r5
 8010532:	4620      	mov	r0, r4
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	4653      	mov	r3, sl
 8010538:	f002 f8c8 	bl	80126cc <acc_confprogram_patch_offset>
 801053c:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
 8010540:	9301      	str	r3, [sp, #4]
 8010542:	2358      	movs	r3, #88	; 0x58
 8010544:	4632      	mov	r2, r6
 8010546:	4629      	mov	r1, r5
 8010548:	4620      	mov	r0, r4
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	4653      	mov	r3, sl
 801054e:	f002 f8bd 	bl	80126cc <acc_confprogram_patch_offset>
 8010552:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 8010556:	9301      	str	r3, [sp, #4]
 8010558:	236b      	movs	r3, #107	; 0x6b
 801055a:	4632      	mov	r2, r6
 801055c:	4629      	mov	r1, r5
 801055e:	4620      	mov	r0, r4
 8010560:	9300      	str	r3, [sp, #0]
 8010562:	4653      	mov	r3, sl
 8010564:	f002 f8b2 	bl	80126cc <acc_confprogram_patch_offset>
 8010568:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 801056c:	9301      	str	r3, [sp, #4]
 801056e:	2386      	movs	r3, #134	; 0x86
 8010570:	4632      	mov	r2, r6
 8010572:	4629      	mov	r1, r5
 8010574:	4620      	mov	r0, r4
 8010576:	9300      	str	r3, [sp, #0]
 8010578:	4653      	mov	r3, sl
 801057a:	f002 f8a7 	bl	80126cc <acc_confprogram_patch_offset>
 801057e:	f8db 305c 	ldr.w	r3, [fp, #92]	; 0x5c
 8010582:	9301      	str	r3, [sp, #4]
 8010584:	2364      	movs	r3, #100	; 0x64
 8010586:	4632      	mov	r2, r6
 8010588:	4629      	mov	r1, r5
 801058a:	4620      	mov	r0, r4
 801058c:	9300      	str	r3, [sp, #0]
 801058e:	4653      	mov	r3, sl
 8010590:	f002 f89c 	bl	80126cc <acc_confprogram_patch_offset>
 8010594:	f8db 3060 	ldr.w	r3, [fp, #96]	; 0x60
 8010598:	9301      	str	r3, [sp, #4]
 801059a:	2365      	movs	r3, #101	; 0x65
 801059c:	4632      	mov	r2, r6
 801059e:	4629      	mov	r1, r5
 80105a0:	4620      	mov	r0, r4
 80105a2:	9300      	str	r3, [sp, #0]
 80105a4:	4653      	mov	r3, sl
 80105a6:	f002 f891 	bl	80126cc <acc_confprogram_patch_offset>
 80105aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 80105ae:	9301      	str	r3, [sp, #4]
 80105b0:	2340      	movs	r3, #64	; 0x40
 80105b2:	4632      	mov	r2, r6
 80105b4:	4629      	mov	r1, r5
 80105b6:	4620      	mov	r0, r4
 80105b8:	9300      	str	r3, [sp, #0]
 80105ba:	4653      	mov	r3, sl
 80105bc:	f002 f886 	bl	80126cc <acc_confprogram_patch_offset>
 80105c0:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 80105c4:	9301      	str	r3, [sp, #4]
 80105c6:	2341      	movs	r3, #65	; 0x41
 80105c8:	4632      	mov	r2, r6
 80105ca:	4629      	mov	r1, r5
 80105cc:	4620      	mov	r0, r4
 80105ce:	9300      	str	r3, [sp, #0]
 80105d0:	4653      	mov	r3, sl
 80105d2:	f002 f87b 	bl	80126cc <acc_confprogram_patch_offset>
 80105d6:	f8db 306c 	ldr.w	r3, [fp, #108]	; 0x6c
 80105da:	9301      	str	r3, [sp, #4]
 80105dc:	2372      	movs	r3, #114	; 0x72
 80105de:	4632      	mov	r2, r6
 80105e0:	4629      	mov	r1, r5
 80105e2:	4620      	mov	r0, r4
 80105e4:	9300      	str	r3, [sp, #0]
 80105e6:	4653      	mov	r3, sl
 80105e8:	f002 f870 	bl	80126cc <acc_confprogram_patch_offset>
 80105ec:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 80105f0:	9301      	str	r3, [sp, #4]
 80105f2:	2354      	movs	r3, #84	; 0x54
 80105f4:	4632      	mov	r2, r6
 80105f6:	4629      	mov	r1, r5
 80105f8:	4620      	mov	r0, r4
 80105fa:	9300      	str	r3, [sp, #0]
 80105fc:	4653      	mov	r3, sl
 80105fe:	f002 f865 	bl	80126cc <acc_confprogram_patch_offset>
 8010602:	f8db 3074 	ldr.w	r3, [fp, #116]	; 0x74
 8010606:	9301      	str	r3, [sp, #4]
 8010608:	2339      	movs	r3, #57	; 0x39
 801060a:	9300      	str	r3, [sp, #0]
 801060c:	4632      	mov	r2, r6
 801060e:	4653      	mov	r3, sl
 8010610:	4629      	mov	r1, r5
 8010612:	4620      	mov	r0, r4
 8010614:	f002 f85a 	bl	80126cc <acc_confprogram_patch_offset>
 8010618:	f8db 3074 	ldr.w	r3, [fp, #116]	; 0x74
 801061c:	2b00      	cmp	r3, #0
 801061e:	f040 81f6 	bne.w	8010a0e <acc_cpd_linear_sweep_load_program+0x7f6>
 8010622:	e001      	b.n	8010628 <acc_cpd_linear_sweep_load_program+0x410>
 8010624:	08016070 	.word	0x08016070
 8010628:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
 801062c:	9301      	str	r3, [sp, #4]
 801062e:	2351      	movs	r3, #81	; 0x51
 8010630:	9300      	str	r3, [sp, #0]
 8010632:	4632      	mov	r2, r6
 8010634:	4653      	mov	r3, sl
 8010636:	4629      	mov	r1, r5
 8010638:	4620      	mov	r0, r4
 801063a:	f002 f847 	bl	80126cc <acc_confprogram_patch_offset>
 801063e:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
 8010642:	9301      	str	r3, [sp, #4]
 8010644:	2377      	movs	r3, #119	; 0x77
 8010646:	9300      	str	r3, [sp, #0]
 8010648:	4632      	mov	r2, r6
 801064a:	4653      	mov	r3, sl
 801064c:	4629      	mov	r1, r5
 801064e:	4620      	mov	r0, r4
 8010650:	f002 f83c 	bl	80126cc <acc_confprogram_patch_offset>
 8010654:	f8db 3080 	ldr.w	r3, [fp, #128]	; 0x80
 8010658:	9301      	str	r3, [sp, #4]
 801065a:	2344      	movs	r3, #68	; 0x44
 801065c:	9300      	str	r3, [sp, #0]
 801065e:	4632      	mov	r2, r6
 8010660:	4653      	mov	r3, sl
 8010662:	4629      	mov	r1, r5
 8010664:	4620      	mov	r0, r4
 8010666:	f002 f831 	bl	80126cc <acc_confprogram_patch_offset>
 801066a:	f8db 3084 	ldr.w	r3, [fp, #132]	; 0x84
 801066e:	9301      	str	r3, [sp, #4]
 8010670:	2343      	movs	r3, #67	; 0x43
 8010672:	9300      	str	r3, [sp, #0]
 8010674:	4632      	mov	r2, r6
 8010676:	4653      	mov	r3, sl
 8010678:	4629      	mov	r1, r5
 801067a:	4620      	mov	r0, r4
 801067c:	f002 f826 	bl	80126cc <acc_confprogram_patch_offset>
 8010680:	f8db 7088 	ldr.w	r7, [fp, #136]	; 0x88
 8010684:	b2bb      	uxth	r3, r7
 8010686:	2b08      	cmp	r3, #8
 8010688:	f200 81ab 	bhi.w	80109e2 <acc_cpd_linear_sweep_load_program+0x7ca>
 801068c:	4698      	mov	r8, r3
 801068e:	2700      	movs	r7, #0
 8010690:	236c      	movs	r3, #108	; 0x6c
 8010692:	e9cd 3800 	strd	r3, r8, [sp]
 8010696:	4632      	mov	r2, r6
 8010698:	4653      	mov	r3, sl
 801069a:	4629      	mov	r1, r5
 801069c:	4620      	mov	r0, r4
 801069e:	f002 f815 	bl	80126cc <acc_confprogram_patch_offset>
 80106a2:	2359      	movs	r3, #89	; 0x59
 80106a4:	4632      	mov	r2, r6
 80106a6:	e9cd 3800 	strd	r3, r8, [sp]
 80106aa:	4629      	mov	r1, r5
 80106ac:	4653      	mov	r3, sl
 80106ae:	4620      	mov	r0, r4
 80106b0:	f002 f80c 	bl	80126cc <acc_confprogram_patch_offset>
 80106b4:	216e      	movs	r1, #110	; 0x6e
 80106b6:	4650      	mov	r0, sl
 80106b8:	f002 f8f8 	bl	80128ac <acc_confprogram_get_default_value>
 80106bc:	2170      	movs	r1, #112	; 0x70
 80106be:	900c      	str	r0, [sp, #48]	; 0x30
 80106c0:	4650      	mov	r0, sl
 80106c2:	f002 f8f3 	bl	80128ac <acc_confprogram_get_default_value>
 80106c6:	216f      	movs	r1, #111	; 0x6f
 80106c8:	9005      	str	r0, [sp, #20]
 80106ca:	4650      	mov	r0, sl
 80106cc:	f002 f8ee 	bl	80128ac <acc_confprogram_get_default_value>
 80106d0:	215b      	movs	r1, #91	; 0x5b
 80106d2:	4680      	mov	r8, r0
 80106d4:	4650      	mov	r0, sl
 80106d6:	f002 f8e9 	bl	80128ac <acc_confprogram_get_default_value>
 80106da:	215d      	movs	r1, #93	; 0x5d
 80106dc:	9006      	str	r0, [sp, #24]
 80106de:	4650      	mov	r0, sl
 80106e0:	f002 f8e4 	bl	80128ac <acc_confprogram_get_default_value>
 80106e4:	215c      	movs	r1, #92	; 0x5c
 80106e6:	9007      	str	r0, [sp, #28]
 80106e8:	4650      	mov	r0, sl
 80106ea:	f002 f8df 	bl	80128ac <acc_confprogram_get_default_value>
 80106ee:	214a      	movs	r1, #74	; 0x4a
 80106f0:	9008      	str	r0, [sp, #32]
 80106f2:	4650      	mov	r0, sl
 80106f4:	f002 f8da 	bl	80128ac <acc_confprogram_get_default_value>
 80106f8:	2145      	movs	r1, #69	; 0x45
 80106fa:	9009      	str	r0, [sp, #36]	; 0x24
 80106fc:	4650      	mov	r0, sl
 80106fe:	f002 f8d5 	bl	80128ac <acc_confprogram_get_default_value>
 8010702:	2122      	movs	r1, #34	; 0x22
 8010704:	900a      	str	r0, [sp, #40]	; 0x28
 8010706:	4650      	mov	r0, sl
 8010708:	f002 f8d0 	bl	80128ac <acc_confprogram_get_default_value>
 801070c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801070e:	900b      	str	r0, [sp, #44]	; 0x2c
 8010710:	433b      	orrs	r3, r7
 8010712:	226e      	movs	r2, #110	; 0x6e
 8010714:	9301      	str	r3, [sp, #4]
 8010716:	9200      	str	r2, [sp, #0]
 8010718:	4653      	mov	r3, sl
 801071a:	4632      	mov	r2, r6
 801071c:	4629      	mov	r1, r5
 801071e:	4620      	mov	r0, r4
 8010720:	f001 ffd4 	bl	80126cc <acc_confprogram_patch_offset>
 8010724:	9b05      	ldr	r3, [sp, #20]
 8010726:	2270      	movs	r2, #112	; 0x70
 8010728:	433b      	orrs	r3, r7
 801072a:	e9cd 2300 	strd	r2, r3, [sp]
 801072e:	4629      	mov	r1, r5
 8010730:	4653      	mov	r3, sl
 8010732:	4632      	mov	r2, r6
 8010734:	4620      	mov	r0, r4
 8010736:	f001 ffc9 	bl	80126cc <acc_confprogram_patch_offset>
 801073a:	ea48 0307 	orr.w	r3, r8, r7
 801073e:	226f      	movs	r2, #111	; 0x6f
 8010740:	e9cd 2300 	strd	r2, r3, [sp]
 8010744:	4629      	mov	r1, r5
 8010746:	4653      	mov	r3, sl
 8010748:	4632      	mov	r2, r6
 801074a:	4620      	mov	r0, r4
 801074c:	f001 ffbe 	bl	80126cc <acc_confprogram_patch_offset>
 8010750:	9b06      	ldr	r3, [sp, #24]
 8010752:	225b      	movs	r2, #91	; 0x5b
 8010754:	433b      	orrs	r3, r7
 8010756:	e9cd 2300 	strd	r2, r3, [sp]
 801075a:	4629      	mov	r1, r5
 801075c:	4653      	mov	r3, sl
 801075e:	4632      	mov	r2, r6
 8010760:	4620      	mov	r0, r4
 8010762:	f001 ffb3 	bl	80126cc <acc_confprogram_patch_offset>
 8010766:	9b07      	ldr	r3, [sp, #28]
 8010768:	225d      	movs	r2, #93	; 0x5d
 801076a:	433b      	orrs	r3, r7
 801076c:	e9cd 2300 	strd	r2, r3, [sp]
 8010770:	4629      	mov	r1, r5
 8010772:	4653      	mov	r3, sl
 8010774:	4632      	mov	r2, r6
 8010776:	4620      	mov	r0, r4
 8010778:	f001 ffa8 	bl	80126cc <acc_confprogram_patch_offset>
 801077c:	9b08      	ldr	r3, [sp, #32]
 801077e:	225c      	movs	r2, #92	; 0x5c
 8010780:	433b      	orrs	r3, r7
 8010782:	e9cd 2300 	strd	r2, r3, [sp]
 8010786:	4629      	mov	r1, r5
 8010788:	4653      	mov	r3, sl
 801078a:	4632      	mov	r2, r6
 801078c:	4620      	mov	r0, r4
 801078e:	f001 ff9d 	bl	80126cc <acc_confprogram_patch_offset>
 8010792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010794:	224a      	movs	r2, #74	; 0x4a
 8010796:	433b      	orrs	r3, r7
 8010798:	e9cd 2300 	strd	r2, r3, [sp]
 801079c:	4629      	mov	r1, r5
 801079e:	4653      	mov	r3, sl
 80107a0:	4632      	mov	r2, r6
 80107a2:	4620      	mov	r0, r4
 80107a4:	f001 ff92 	bl	80126cc <acc_confprogram_patch_offset>
 80107a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107aa:	2245      	movs	r2, #69	; 0x45
 80107ac:	433b      	orrs	r3, r7
 80107ae:	e9cd 2300 	strd	r2, r3, [sp]
 80107b2:	4629      	mov	r1, r5
 80107b4:	4653      	mov	r3, sl
 80107b6:	4632      	mov	r2, r6
 80107b8:	4620      	mov	r0, r4
 80107ba:	f001 ff87 	bl	80126cc <acc_confprogram_patch_offset>
 80107be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107c0:	433b      	orrs	r3, r7
 80107c2:	461f      	mov	r7, r3
 80107c4:	2322      	movs	r3, #34	; 0x22
 80107c6:	4632      	mov	r2, r6
 80107c8:	e9cd 3700 	strd	r3, r7, [sp]
 80107cc:	4629      	mov	r1, r5
 80107ce:	4653      	mov	r3, sl
 80107d0:	4620      	mov	r0, r4
 80107d2:	f001 ff7b 	bl	80126cc <acc_confprogram_patch_offset>
 80107d6:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 80107da:	2b06      	cmp	r3, #6
 80107dc:	bf34      	ite	cc
 80107de:	2244      	movcc	r2, #68	; 0x44
 80107e0:	2264      	movcs	r2, #100	; 0x64
 80107e2:	2305      	movs	r3, #5
 80107e4:	e9cd 3200 	strd	r3, r2, [sp]
 80107e8:	4629      	mov	r1, r5
 80107ea:	4653      	mov	r3, sl
 80107ec:	4632      	mov	r2, r6
 80107ee:	4620      	mov	r0, r4
 80107f0:	f001 ff6c 	bl	80126cc <acc_confprogram_patch_offset>
 80107f4:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 80107f8:	015b      	lsls	r3, r3, #5
 80107fa:	3b03      	subs	r3, #3
 80107fc:	2224      	movs	r2, #36	; 0x24
 80107fe:	e9cd 2300 	strd	r2, r3, [sp]
 8010802:	4629      	mov	r1, r5
 8010804:	4653      	mov	r3, sl
 8010806:	4632      	mov	r2, r6
 8010808:	4620      	mov	r0, r4
 801080a:	f001 ff5f 	bl	80126cc <acc_confprogram_patch_offset>
 801080e:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 8010812:	015b      	lsls	r3, r3, #5
 8010814:	085b      	lsrs	r3, r3, #1
 8010816:	3b03      	subs	r3, #3
 8010818:	2225      	movs	r2, #37	; 0x25
 801081a:	e9cd 2300 	strd	r2, r3, [sp]
 801081e:	4629      	mov	r1, r5
 8010820:	4653      	mov	r3, sl
 8010822:	4632      	mov	r2, r6
 8010824:	4620      	mov	r0, r4
 8010826:	f001 ff51 	bl	80126cc <acc_confprogram_patch_offset>
 801082a:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
 801082e:	9301      	str	r3, [sp, #4]
 8010830:	2336      	movs	r3, #54	; 0x36
 8010832:	9300      	str	r3, [sp, #0]
 8010834:	4632      	mov	r2, r6
 8010836:	4653      	mov	r3, sl
 8010838:	4629      	mov	r1, r5
 801083a:	4620      	mov	r0, r4
 801083c:	f001 ff46 	bl	80126cc <acc_confprogram_patch_offset>
 8010840:	f8db 3098 	ldr.w	r3, [fp, #152]	; 0x98
 8010844:	225e      	movs	r2, #94	; 0x5e
 8010846:	330e      	adds	r3, #14
 8010848:	e9cd 2300 	strd	r2, r3, [sp]
 801084c:	4629      	mov	r1, r5
 801084e:	4653      	mov	r3, sl
 8010850:	4632      	mov	r2, r6
 8010852:	4620      	mov	r0, r4
 8010854:	f001 ff3a 	bl	80126cc <acc_confprogram_patch_offset>
 8010858:	2120      	movs	r1, #32
 801085a:	4650      	mov	r0, sl
 801085c:	f002 f826 	bl	80128ac <acc_confprogram_get_default_value>
 8010860:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 8010864:	2b05      	cmp	r3, #5
 8010866:	bf98      	it	ls
 8010868:	3002      	addls	r0, #2
 801086a:	fbb0 f7f3 	udiv	r7, r0, r3
 801086e:	fb03 0717 	mls	r7, r3, r7, r0
 8010872:	b107      	cbz	r7, 8010876 <acc_cpd_linear_sweep_load_program+0x65e>
 8010874:	1bdf      	subs	r7, r3, r7
 8010876:	f8db 209c 	ldr.w	r2, [fp, #156]	; 0x9c
 801087a:	231f      	movs	r3, #31
 801087c:	eb07 0802 	add.w	r8, r7, r2
 8010880:	e9cd 3800 	strd	r3, r8, [sp]
 8010884:	4632      	mov	r2, r6
 8010886:	4653      	mov	r3, sl
 8010888:	4629      	mov	r1, r5
 801088a:	4620      	mov	r0, r4
 801088c:	f001 ff1e 	bl	80126cc <acc_confprogram_patch_offset>
 8010890:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 8010894:	2b00      	cmp	r3, #0
 8010896:	f040 808a 	bne.w	80109ae <acc_cpd_linear_sweep_load_program+0x796>
 801089a:	213a      	movs	r1, #58	; 0x3a
 801089c:	4650      	mov	r0, sl
 801089e:	f002 f805 	bl	80128ac <acc_confprogram_get_default_value>
 80108a2:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 80108a6:	2b05      	cmp	r3, #5
 80108a8:	bf8c      	ite	hi
 80108aa:	3007      	addhi	r0, #7
 80108ac:	3009      	addls	r0, #9
 80108ae:	fbb0 f7f3 	udiv	r7, r0, r3
 80108b2:	fb03 0717 	mls	r7, r3, r7, r0
 80108b6:	b107      	cbz	r7, 80108ba <acc_cpd_linear_sweep_load_program+0x6a2>
 80108b8:	1bdf      	subs	r7, r3, r7
 80108ba:	f8db 20a0 	ldr.w	r2, [fp, #160]	; 0xa0
 80108be:	2366      	movs	r3, #102	; 0x66
 80108c0:	eb07 0802 	add.w	r8, r7, r2
 80108c4:	e9cd 3800 	strd	r3, r8, [sp]
 80108c8:	4632      	mov	r2, r6
 80108ca:	4653      	mov	r3, sl
 80108cc:	4629      	mov	r1, r5
 80108ce:	4620      	mov	r0, r4
 80108d0:	f001 fefc 	bl	80126cc <acc_confprogram_patch_offset>
 80108d4:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d14f      	bne.n	801097c <acc_cpd_linear_sweep_load_program+0x764>
 80108dc:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 80108e0:	bbbb      	cbnz	r3, 8010952 <acc_cpd_linear_sweep_load_program+0x73a>
 80108e2:	f8db 70a4 	ldr.w	r7, [fp, #164]	; 0xa4
 80108e6:	2306      	movs	r3, #6
 80108e8:	1e7a      	subs	r2, r7, #1
 80108ea:	e9cd 3200 	strd	r3, r2, [sp]
 80108ee:	4629      	mov	r1, r5
 80108f0:	4653      	mov	r3, sl
 80108f2:	4632      	mov	r2, r6
 80108f4:	4620      	mov	r0, r4
 80108f6:	f001 fee9 	bl	80126cc <acc_confprogram_patch_offset>
 80108fa:	2304      	movs	r3, #4
 80108fc:	2263      	movs	r2, #99	; 0x63
 80108fe:	fbb3 f7f7 	udiv	r7, r3, r7
 8010902:	3f01      	subs	r7, #1
 8010904:	e9cd 2700 	strd	r2, r7, [sp]
 8010908:	4653      	mov	r3, sl
 801090a:	4632      	mov	r2, r6
 801090c:	4629      	mov	r1, r5
 801090e:	4620      	mov	r0, r4
 8010910:	f001 fedc 	bl	80126cc <acc_confprogram_patch_offset>
 8010914:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 8010918:	9301      	str	r3, [sp, #4]
 801091a:	2361      	movs	r3, #97	; 0x61
 801091c:	9300      	str	r3, [sp, #0]
 801091e:	4632      	mov	r2, r6
 8010920:	4653      	mov	r3, sl
 8010922:	4629      	mov	r1, r5
 8010924:	4620      	mov	r0, r4
 8010926:	f001 fed1 	bl	80126cc <acc_confprogram_patch_offset>
 801092a:	f89b 30ad 	ldrb.w	r3, [fp, #173]	; 0xad
 801092e:	9301      	str	r3, [sp, #4]
 8010930:	2346      	movs	r3, #70	; 0x46
 8010932:	9300      	str	r3, [sp, #0]
 8010934:	4632      	mov	r2, r6
 8010936:	4653      	mov	r3, sl
 8010938:	4629      	mov	r1, r5
 801093a:	4620      	mov	r0, r4
 801093c:	f001 fec6 	bl	80126cc <acc_confprogram_patch_offset>
 8010940:	f89b 30ad 	ldrb.w	r3, [fp, #173]	; 0xad
 8010944:	2b00      	cmp	r3, #0
 8010946:	f47f aca7 	bne.w	8010298 <acc_cpd_linear_sweep_load_program+0x80>
 801094a:	2223      	movs	r2, #35	; 0x23
 801094c:	e9cd 2300 	strd	r2, r3, [sp]
 8010950:	e4c4      	b.n	80102dc <acc_cpd_linear_sweep_load_program+0xc4>
 8010952:	233b      	movs	r3, #59	; 0x3b
 8010954:	2200      	movs	r2, #0
 8010956:	e9cd 3200 	strd	r3, r2, [sp]
 801095a:	4629      	mov	r1, r5
 801095c:	4653      	mov	r3, sl
 801095e:	4632      	mov	r2, r6
 8010960:	4620      	mov	r0, r4
 8010962:	f001 feb3 	bl	80126cc <acc_confprogram_patch_offset>
 8010966:	f7f8 fa9b 	bl	8008ea0 <acc_rss_integration_log_level>
 801096a:	2801      	cmp	r0, #1
 801096c:	d9b9      	bls.n	80108e2 <acc_cpd_linear_sweep_load_program+0x6ca>
 801096e:	4b68      	ldr	r3, [pc, #416]	; (8010b10 <acc_cpd_linear_sweep_load_program+0x8f8>)
 8010970:	4a68      	ldr	r2, [pc, #416]	; (8010b14 <acc_cpd_linear_sweep_load_program+0x8fc>)
 8010972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010974:	4968      	ldr	r1, [pc, #416]	; (8010b18 <acc_cpd_linear_sweep_load_program+0x900>)
 8010976:	2002      	movs	r0, #2
 8010978:	4798      	blx	r3
 801097a:	e7b2      	b.n	80108e2 <acc_cpd_linear_sweep_load_program+0x6ca>
 801097c:	f7f8 fa90 	bl	8008ea0 <acc_rss_integration_log_level>
 8010980:	2801      	cmp	r0, #1
 8010982:	d908      	bls.n	8010996 <acc_cpd_linear_sweep_load_program+0x77e>
 8010984:	4b62      	ldr	r3, [pc, #392]	; (8010b10 <acc_cpd_linear_sweep_load_program+0x8f8>)
 8010986:	4a65      	ldr	r2, [pc, #404]	; (8010b1c <acc_cpd_linear_sweep_load_program+0x904>)
 8010988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801098a:	9305      	str	r3, [sp, #20]
 801098c:	4962      	ldr	r1, [pc, #392]	; (8010b18 <acc_cpd_linear_sweep_load_program+0x900>)
 801098e:	463b      	mov	r3, r7
 8010990:	2002      	movs	r0, #2
 8010992:	9f05      	ldr	r7, [sp, #20]
 8010994:	47b8      	blx	r7
 8010996:	f7f8 fa83 	bl	8008ea0 <acc_rss_integration_log_level>
 801099a:	2801      	cmp	r0, #1
 801099c:	d99e      	bls.n	80108dc <acc_cpd_linear_sweep_load_program+0x6c4>
 801099e:	4b5c      	ldr	r3, [pc, #368]	; (8010b10 <acc_cpd_linear_sweep_load_program+0x8f8>)
 80109a0:	4a5f      	ldr	r2, [pc, #380]	; (8010b20 <acc_cpd_linear_sweep_load_program+0x908>)
 80109a2:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80109a4:	495c      	ldr	r1, [pc, #368]	; (8010b18 <acc_cpd_linear_sweep_load_program+0x900>)
 80109a6:	4643      	mov	r3, r8
 80109a8:	2002      	movs	r0, #2
 80109aa:	47b8      	blx	r7
 80109ac:	e796      	b.n	80108dc <acc_cpd_linear_sweep_load_program+0x6c4>
 80109ae:	f7f8 fa77 	bl	8008ea0 <acc_rss_integration_log_level>
 80109b2:	2801      	cmp	r0, #1
 80109b4:	d908      	bls.n	80109c8 <acc_cpd_linear_sweep_load_program+0x7b0>
 80109b6:	4b56      	ldr	r3, [pc, #344]	; (8010b10 <acc_cpd_linear_sweep_load_program+0x8f8>)
 80109b8:	4a5a      	ldr	r2, [pc, #360]	; (8010b24 <acc_cpd_linear_sweep_load_program+0x90c>)
 80109ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109bc:	9305      	str	r3, [sp, #20]
 80109be:	4956      	ldr	r1, [pc, #344]	; (8010b18 <acc_cpd_linear_sweep_load_program+0x900>)
 80109c0:	463b      	mov	r3, r7
 80109c2:	2002      	movs	r0, #2
 80109c4:	9f05      	ldr	r7, [sp, #20]
 80109c6:	47b8      	blx	r7
 80109c8:	f7f8 fa6a 	bl	8008ea0 <acc_rss_integration_log_level>
 80109cc:	2801      	cmp	r0, #1
 80109ce:	f67f af64 	bls.w	801089a <acc_cpd_linear_sweep_load_program+0x682>
 80109d2:	4b4f      	ldr	r3, [pc, #316]	; (8010b10 <acc_cpd_linear_sweep_load_program+0x8f8>)
 80109d4:	4a54      	ldr	r2, [pc, #336]	; (8010b28 <acc_cpd_linear_sweep_load_program+0x910>)
 80109d6:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80109d8:	494f      	ldr	r1, [pc, #316]	; (8010b18 <acc_cpd_linear_sweep_load_program+0x900>)
 80109da:	4643      	mov	r3, r8
 80109dc:	2002      	movs	r0, #2
 80109de:	47b8      	blx	r7
 80109e0:	e75b      	b.n	801089a <acc_cpd_linear_sweep_load_program+0x682>
 80109e2:	fa1f f887 	uxth.w	r8, r7
 80109e6:	2367      	movs	r3, #103	; 0x67
 80109e8:	2202      	movs	r2, #2
 80109ea:	f1a8 0808 	sub.w	r8, r8, #8
 80109ee:	27ff      	movs	r7, #255	; 0xff
 80109f0:	e9cd 3200 	strd	r3, r2, [sp]
 80109f4:	fa07 f708 	lsl.w	r7, r7, r8
 80109f8:	4653      	mov	r3, sl
 80109fa:	4632      	mov	r2, r6
 80109fc:	4629      	mov	r1, r5
 80109fe:	4620      	mov	r0, r4
 8010a00:	f001 fe64 	bl	80126cc <acc_confprogram_patch_offset>
 8010a04:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8010a08:	f04f 0808 	mov.w	r8, #8
 8010a0c:	e640      	b.n	8010690 <acc_cpd_linear_sweep_load_program+0x478>
 8010a0e:	2310      	movs	r3, #16
 8010a10:	2201      	movs	r2, #1
 8010a12:	e9cd 3200 	strd	r3, r2, [sp]
 8010a16:	4629      	mov	r1, r5
 8010a18:	4653      	mov	r3, sl
 8010a1a:	4632      	mov	r2, r6
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f001 fe55 	bl	80126cc <acc_confprogram_patch_offset>
 8010a22:	f64f 7880 	movw	r8, #65408	; 0xff80
 8010a26:	2312      	movs	r3, #18
 8010a28:	e9cd 3800 	strd	r3, r8, [sp]
 8010a2c:	4632      	mov	r2, r6
 8010a2e:	4653      	mov	r3, sl
 8010a30:	4629      	mov	r1, r5
 8010a32:	4620      	mov	r0, r4
 8010a34:	f001 fe4a 	bl	80126cc <acc_confprogram_patch_offset>
 8010a38:	2707      	movs	r7, #7
 8010a3a:	2314      	movs	r3, #20
 8010a3c:	e9cd 3700 	strd	r3, r7, [sp]
 8010a40:	4632      	mov	r2, r6
 8010a42:	4653      	mov	r3, sl
 8010a44:	4629      	mov	r1, r5
 8010a46:	4620      	mov	r0, r4
 8010a48:	f001 fe40 	bl	80126cc <acc_confprogram_patch_offset>
 8010a4c:	2311      	movs	r3, #17
 8010a4e:	e9cd 3800 	strd	r3, r8, [sp]
 8010a52:	4632      	mov	r2, r6
 8010a54:	4653      	mov	r3, sl
 8010a56:	4629      	mov	r1, r5
 8010a58:	4620      	mov	r0, r4
 8010a5a:	f001 fe37 	bl	80126cc <acc_confprogram_patch_offset>
 8010a5e:	2313      	movs	r3, #19
 8010a60:	2200      	movs	r2, #0
 8010a62:	e9cd 3200 	strd	r3, r2, [sp]
 8010a66:	4629      	mov	r1, r5
 8010a68:	4653      	mov	r3, sl
 8010a6a:	4632      	mov	r2, r6
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	f001 fe2d 	bl	80126cc <acc_confprogram_patch_offset>
 8010a72:	2315      	movs	r3, #21
 8010a74:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8010a78:	e9cd 3200 	strd	r3, r2, [sp]
 8010a7c:	4629      	mov	r1, r5
 8010a7e:	4653      	mov	r3, sl
 8010a80:	4632      	mov	r2, r6
 8010a82:	4620      	mov	r0, r4
 8010a84:	f001 fe22 	bl	80126cc <acc_confprogram_patch_offset>
 8010a88:	2316      	movs	r3, #22
 8010a8a:	e9cd 3700 	strd	r3, r7, [sp]
 8010a8e:	4632      	mov	r2, r6
 8010a90:	4653      	mov	r3, sl
 8010a92:	4629      	mov	r1, r5
 8010a94:	4620      	mov	r0, r4
 8010a96:	f001 fe19 	bl	80126cc <acc_confprogram_patch_offset>
 8010a9a:	230e      	movs	r3, #14
 8010a9c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8010aa0:	e9cd 3200 	strd	r3, r2, [sp]
 8010aa4:	4629      	mov	r1, r5
 8010aa6:	4653      	mov	r3, sl
 8010aa8:	4632      	mov	r2, r6
 8010aaa:	4620      	mov	r0, r4
 8010aac:	f001 fe0e 	bl	80126cc <acc_confprogram_patch_offset>
 8010ab0:	230f      	movs	r3, #15
 8010ab2:	e9cd 3700 	strd	r3, r7, [sp]
 8010ab6:	4632      	mov	r2, r6
 8010ab8:	4653      	mov	r3, sl
 8010aba:	4629      	mov	r1, r5
 8010abc:	4620      	mov	r0, r4
 8010abe:	f001 fe05 	bl	80126cc <acc_confprogram_patch_offset>
 8010ac2:	2317      	movs	r3, #23
 8010ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ac8:	e9cd 3200 	strd	r3, r2, [sp]
 8010acc:	4629      	mov	r1, r5
 8010ace:	4653      	mov	r3, sl
 8010ad0:	4632      	mov	r2, r6
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	f001 fdfa 	bl	80126cc <acc_confprogram_patch_offset>
 8010ad8:	2318      	movs	r3, #24
 8010ada:	e9cd 3700 	strd	r3, r7, [sp]
 8010ade:	4632      	mov	r2, r6
 8010ae0:	4653      	mov	r3, sl
 8010ae2:	4629      	mov	r1, r5
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f001 fdf1 	bl	80126cc <acc_confprogram_patch_offset>
 8010aea:	e59d      	b.n	8010628 <acc_cpd_linear_sweep_load_program+0x410>
 8010aec:	f7f8 f9d8 	bl	8008ea0 <acc_rss_integration_log_level>
 8010af0:	2803      	cmp	r0, #3
 8010af2:	f67f abaf 	bls.w	8010254 <acc_cpd_linear_sweep_load_program+0x3c>
 8010af6:	4b06      	ldr	r3, [pc, #24]	; (8010b10 <acc_cpd_linear_sweep_load_program+0x8f8>)
 8010af8:	4a0c      	ldr	r2, [pc, #48]	; (8010b2c <acc_cpd_linear_sweep_load_program+0x914>)
 8010afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010afc:	4906      	ldr	r1, [pc, #24]	; (8010b18 <acc_cpd_linear_sweep_load_program+0x900>)
 8010afe:	2004      	movs	r0, #4
 8010b00:	4798      	blx	r3
 8010b02:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010b04:	b013      	add	sp, #76	; 0x4c
 8010b06:	ecbd 8b02 	vpop	{d8}
 8010b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b0e:	bf00      	nop
 8010b10:	20001628 	.word	0x20001628
 8010b14:	0801a770 	.word	0x0801a770
 8010b18:	0801a69c 	.word	0x0801a69c
 8010b1c:	0801a720 	.word	0x0801a720
 8010b20:	0801a748 	.word	0x0801a748
 8010b24:	0801a6b0 	.word	0x0801a6b0
 8010b28:	0801a6e8 	.word	0x0801a6e8
 8010b2c:	0801a78c 	.word	0x0801a78c

08010b30 <acc_cpd_linear_sweep_run_program>:
 8010b30:	f240 213a 	movw	r1, #570	; 0x23a
 8010b34:	f7fc bd18 	b.w	800d568 <acc_sensor_protocol_r2_run_program>

08010b38 <acc_cpd_linear_sweep_update_program>:
 8010b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b3a:	784b      	ldrb	r3, [r1, #1]
 8010b3c:	684f      	ldr	r7, [r1, #4]
 8010b3e:	68ce      	ldr	r6, [r1, #12]
 8010b40:	b085      	sub	sp, #20
 8010b42:	460c      	mov	r4, r1
 8010b44:	4605      	mov	r5, r0
 8010b46:	b9eb      	cbnz	r3, 8010b84 <acc_cpd_linear_sweep_update_program+0x4c>
 8010b48:	7823      	ldrb	r3, [r4, #0]
 8010b4a:	b97b      	cbnz	r3, 8010b6c <acc_cpd_linear_sweep_update_program+0x34>
 8010b4c:	78a3      	ldrb	r3, [r4, #2]
 8010b4e:	b153      	cbz	r3, 8010b66 <acc_cpd_linear_sweep_update_program+0x2e>
 8010b50:	4a13      	ldr	r2, [pc, #76]	; (8010ba0 <acc_cpd_linear_sweep_update_program+0x68>)
 8010b52:	9202      	str	r2, [sp, #8]
 8010b54:	2372      	movs	r3, #114	; 0x72
 8010b56:	9300      	str	r3, [sp, #0]
 8010b58:	9601      	str	r6, [sp, #4]
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	4b11      	ldr	r3, [pc, #68]	; (8010ba4 <acc_cpd_linear_sweep_update_program+0x6c>)
 8010b5e:	4912      	ldr	r1, [pc, #72]	; (8010ba8 <acc_cpd_linear_sweep_update_program+0x70>)
 8010b60:	2200      	movs	r2, #0
 8010b62:	f001 fe37 	bl	80127d4 <acc_confprogram_live_patch>
 8010b66:	2001      	movs	r0, #1
 8010b68:	b005      	add	sp, #20
 8010b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b6c:	4a0c      	ldr	r2, [pc, #48]	; (8010ba0 <acc_cpd_linear_sweep_update_program+0x68>)
 8010b6e:	9202      	str	r2, [sp, #8]
 8010b70:	2336      	movs	r3, #54	; 0x36
 8010b72:	9300      	str	r3, [sp, #0]
 8010b74:	9701      	str	r7, [sp, #4]
 8010b76:	4b0b      	ldr	r3, [pc, #44]	; (8010ba4 <acc_cpd_linear_sweep_update_program+0x6c>)
 8010b78:	490b      	ldr	r1, [pc, #44]	; (8010ba8 <acc_cpd_linear_sweep_update_program+0x70>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	f001 fe29 	bl	80127d4 <acc_confprogram_live_patch>
 8010b82:	e7e3      	b.n	8010b4c <acc_cpd_linear_sweep_update_program+0x14>
 8010b84:	688b      	ldr	r3, [r1, #8]
 8010b86:	4a06      	ldr	r2, [pc, #24]	; (8010ba0 <acc_cpd_linear_sweep_update_program+0x68>)
 8010b88:	9202      	str	r2, [sp, #8]
 8010b8a:	330e      	adds	r3, #14
 8010b8c:	225e      	movs	r2, #94	; 0x5e
 8010b8e:	e9cd 2300 	strd	r2, r3, [sp]
 8010b92:	4905      	ldr	r1, [pc, #20]	; (8010ba8 <acc_cpd_linear_sweep_update_program+0x70>)
 8010b94:	4b03      	ldr	r3, [pc, #12]	; (8010ba4 <acc_cpd_linear_sweep_update_program+0x6c>)
 8010b96:	2200      	movs	r2, #0
 8010b98:	f001 fe1c 	bl	80127d4 <acc_confprogram_live_patch>
 8010b9c:	e7d4      	b.n	8010b48 <acc_cpd_linear_sweep_update_program+0x10>
 8010b9e:	bf00      	nop
 8010ba0:	0800cb9d 	.word	0x0800cb9d
 8010ba4:	0801bd58 	.word	0x0801bd58
 8010ba8:	08016070 	.word	0x08016070

08010bac <acc_cpd_linear_sweep_get_info>:
 8010bac:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 8010bb0:	b933      	cbnz	r3, 8010bc0 <acc_cpd_linear_sweep_get_info+0x14>
 8010bb2:	e9c1 3300 	strd	r3, r3, [r1]
 8010bb6:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8010bba:	e9c1 3304 	strd	r3, r3, [r1, #16]
 8010bbe:	4770      	bx	lr
 8010bc0:	b410      	push	{r4}
 8010bc2:	2203      	movs	r2, #3
 8010bc4:	2401      	movs	r4, #1
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	2002      	movs	r0, #2
 8010bca:	e9c1 4003 	strd	r4, r0, [r1, #12]
 8010bce:	600a      	str	r2, [r1, #0]
 8010bd0:	614a      	str	r2, [r1, #20]
 8010bd2:	e9c1 3301 	strd	r3, r3, [r1, #4]
 8010bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bda:	4770      	bx	lr

08010bdc <acc_cpd_linear_sweep_check>:
 8010bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010be0:	f891 40ad 	ldrb.w	r4, [r1, #173]	; 0xad
 8010be4:	2600      	movs	r6, #0
 8010be6:	b082      	sub	sp, #8
 8010be8:	701e      	strb	r6, [r3, #0]
 8010bea:	b914      	cbnz	r4, 8010bf2 <acc_cpd_linear_sweep_check+0x16>
 8010bec:	b002      	add	sp, #8
 8010bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bf2:	461e      	mov	r6, r3
 8010bf4:	6813      	ldr	r3, [r2, #0]
 8010bf6:	005b      	lsls	r3, r3, #1
 8010bf8:	f003 031f 	and.w	r3, r3, #31
 8010bfc:	6013      	str	r3, [r2, #0]
 8010bfe:	4615      	mov	r5, r2
 8010c00:	4607      	mov	r7, r0
 8010c02:	460c      	mov	r4, r1
 8010c04:	f7f8 f94c 	bl	8008ea0 <acc_rss_integration_log_level>
 8010c08:	2803      	cmp	r0, #3
 8010c0a:	d907      	bls.n	8010c1c <acc_cpd_linear_sweep_check+0x40>
 8010c0c:	4a16      	ldr	r2, [pc, #88]	; (8010c68 <acc_cpd_linear_sweep_check+0x8c>)
 8010c0e:	682b      	ldr	r3, [r5, #0]
 8010c10:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
 8010c14:	4915      	ldr	r1, [pc, #84]	; (8010c6c <acc_cpd_linear_sweep_check+0x90>)
 8010c16:	4a16      	ldr	r2, [pc, #88]	; (8010c70 <acc_cpd_linear_sweep_check+0x94>)
 8010c18:	2004      	movs	r0, #4
 8010c1a:	47c0      	blx	r8
 8010c1c:	4638      	mov	r0, r7
 8010c1e:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 8010c22:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 8010c26:	8c21      	ldrh	r1, [r4, #32]
 8010c28:	f000 fd9a 	bl	8011760 <acc_cpd_sweep_check_voffset_vslope>
 8010c2c:	b1b0      	cbz	r0, 8010c5c <acc_cpd_linear_sweep_check+0x80>
 8010c2e:	6828      	ldr	r0, [r5, #0]
 8010c30:	f000 fdf2 	bl	8011818 <acc_cpd_sweep_check_count_bad_sweeps>
 8010c34:	2802      	cmp	r0, #2
 8010c36:	4604      	mov	r4, r0
 8010c38:	d9d8      	bls.n	8010bec <acc_cpd_linear_sweep_check+0x10>
 8010c3a:	f7f8 f931 	bl	8008ea0 <acc_rss_integration_log_level>
 8010c3e:	b140      	cbz	r0, 8010c52 <acc_cpd_linear_sweep_check+0x76>
 8010c40:	4b09      	ldr	r3, [pc, #36]	; (8010c68 <acc_cpd_linear_sweep_check+0x8c>)
 8010c42:	4a0c      	ldr	r2, [pc, #48]	; (8010c74 <acc_cpd_linear_sweep_check+0x98>)
 8010c44:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8010c46:	4909      	ldr	r1, [pc, #36]	; (8010c6c <acc_cpd_linear_sweep_check+0x90>)
 8010c48:	2005      	movs	r0, #5
 8010c4a:	9000      	str	r0, [sp, #0]
 8010c4c:	4623      	mov	r3, r4
 8010c4e:	2001      	movs	r0, #1
 8010c50:	47a8      	blx	r5
 8010c52:	2301      	movs	r3, #1
 8010c54:	7033      	strb	r3, [r6, #0]
 8010c56:	b002      	add	sp, #8
 8010c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c5c:	6828      	ldr	r0, [r5, #0]
 8010c5e:	f040 0001 	orr.w	r0, r0, #1
 8010c62:	6028      	str	r0, [r5, #0]
 8010c64:	e7e4      	b.n	8010c30 <acc_cpd_linear_sweep_check+0x54>
 8010c66:	bf00      	nop
 8010c68:	20001628 	.word	0x20001628
 8010c6c:	0801a69c 	.word	0x0801a69c
 8010c70:	0801a620 	.word	0x0801a620
 8010c74:	0801a638 	.word	0x0801a638

08010c78 <acc_cpd_pll_divisors_calculate>:
 8010c78:	edd0 6a00 	vldr	s13, [r0]
 8010c7c:	ed9f 5a34 	vldr	s10, [pc, #208]	; 8010d50 <acc_cpd_pll_divisors_calculate+0xd8>
 8010c80:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010d54 <acc_cpd_pll_divisors_calculate+0xdc>
 8010c84:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010d58 <acc_cpd_pll_divisors_calculate+0xe0>
 8010c88:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8010d5c <acc_cpd_pll_divisors_calculate+0xe4>
 8010c8c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8010c90:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8010c94:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010c98:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010c9c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ca4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010ca8:	ee17 3a90 	vmov	r3, s15
 8010cac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	f1a3 0210 	sub.w	r2, r3, #16
 8010cb6:	b292      	uxth	r2, r2
 8010cb8:	ee17 0a10 	vmov	r0, s14
 8010cbc:	2aef      	cmp	r2, #239	; 0xef
 8010cbe:	8108      	strh	r0, [r1, #8]
 8010cc0:	d928      	bls.n	8010d14 <acc_cpd_pll_divisors_calculate+0x9c>
 8010cc2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cca:	eddf 7a25 	vldr	s15, [pc, #148]	; 8010d60 <acc_cpd_pll_divisors_calculate+0xe8>
 8010cce:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8010d64 <acc_cpd_pll_divisors_calculate+0xec>
 8010cd2:	4b25      	ldr	r3, [pc, #148]	; (8010d68 <acc_cpd_pll_divisors_calculate+0xf0>)
 8010cd4:	4a25      	ldr	r2, [pc, #148]	; (8010d6c <acc_cpd_pll_divisors_calculate+0xf4>)
 8010cd6:	4926      	ldr	r1, [pc, #152]	; (8010d70 <acc_cpd_pll_divisors_calculate+0xf8>)
 8010cd8:	bf48      	it	mi
 8010cda:	eef1 6a66 	vnegmi.f32	s13, s13
 8010cde:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010ce2:	b510      	push	{r4, lr}
 8010ce4:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8010ce8:	b082      	sub	sp, #8
 8010cea:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8010cee:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8010cf0:	bf4c      	ite	mi
 8010cf2:	4b20      	ldrmi	r3, [pc, #128]	; (8010d74 <acc_cpd_pll_divisors_calculate+0xfc>)
 8010cf4:	4b20      	ldrpl	r3, [pc, #128]	; (8010d78 <acc_cpd_pll_divisors_calculate+0x100>)
 8010cf6:	edcd 7a00 	vstr	s15, [sp]
 8010cfa:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8010cfe:	2000      	movs	r0, #0
 8010d00:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010d04:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8010d08:	edcd 6a01 	vstr	s13, [sp, #4]
 8010d0c:	47a0      	blx	r4
 8010d0e:	2000      	movs	r0, #0
 8010d10:	b002      	add	sp, #8
 8010d12:	bd10      	pop	{r4, pc}
 8010d14:	2b3f      	cmp	r3, #63	; 0x3f
 8010d16:	d911      	bls.n	8010d3c <acc_cpd_pll_divisors_calculate+0xc4>
 8010d18:	2bbf      	cmp	r3, #191	; 0xbf
 8010d1a:	bf98      	it	ls
 8010d1c:	f1a3 0040 	subls.w	r0, r3, #64	; 0x40
 8010d20:	f04f 0201 	mov.w	r2, #1
 8010d24:	bf8c      	ite	hi
 8010d26:	08d8      	lsrhi	r0, r3, #3
 8010d28:	f3c0 00cf 	ubfxls	r0, r0, #3, #16
 8010d2c:	804a      	strh	r2, [r1, #2]
 8010d2e:	f003 0207 	and.w	r2, r3, #7
 8010d32:	8088      	strh	r0, [r1, #4]
 8010d34:	80ca      	strh	r2, [r1, #6]
 8010d36:	800b      	strh	r3, [r1, #0]
 8010d38:	2001      	movs	r0, #1
 8010d3a:	4770      	bx	lr
 8010d3c:	2000      	movs	r0, #0
 8010d3e:	2b2f      	cmp	r3, #47	; 0x2f
 8010d40:	bf88      	it	hi
 8010d42:	461a      	movhi	r2, r3
 8010d44:	8048      	strh	r0, [r1, #2]
 8010d46:	80c8      	strh	r0, [r1, #6]
 8010d48:	808a      	strh	r2, [r1, #4]
 8010d4a:	800b      	strh	r3, [r1, #0]
 8010d4c:	2001      	movs	r0, #1
 8010d4e:	4770      	bx	lr
 8010d50:	4f1502f9 	.word	0x4f1502f9
 8010d54:	4b989680 	.word	0x4b989680
 8010d58:	b55b38e8 	.word	0xb55b38e8
 8010d5c:	427c0000 	.word	0x427c0000
 8010d60:	350637bd 	.word	0x350637bd
 8010d64:	49742400 	.word	0x49742400
 8010d68:	20001628 	.word	0x20001628
 8010d6c:	0801a7b0 	.word	0x0801a7b0
 8010d70:	0801a7dc 	.word	0x0801a7dc
 8010d74:	0801901c 	.word	0x0801901c
 8010d78:	0801d5bc 	.word	0x0801d5bc

08010d7c <acc_cpd_pll_divisors_ref_divisor>:
 8010d7c:	eddf 7a02 	vldr	s15, [pc, #8]	; 8010d88 <acc_cpd_pll_divisors_ref_divisor+0xc>
 8010d80:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8010d84:	f003 b844 	b.w	8013e10 <roundf>
 8010d88:	4f1502f9 	.word	0x4f1502f9

08010d8c <acc_cpd_rx_fine_dip_calibration>:
 8010d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d90:	4615      	mov	r5, r2
 8010d92:	b089      	sub	sp, #36	; 0x24
 8010d94:	6812      	ldr	r2, [r2, #0]
 8010d96:	9002      	str	r0, [sp, #8]
 8010d98:	4606      	mov	r6, r0
 8010d9a:	ac07      	add	r4, sp, #28
 8010d9c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8010da0:	9305      	str	r3, [sp, #20]
 8010da2:	4610      	mov	r0, r2
 8010da4:	9400      	str	r4, [sp, #0]
 8010da6:	460a      	mov	r2, r1
 8010da8:	2400      	movs	r4, #0
 8010daa:	4631      	mov	r1, r6
 8010dac:	ab06      	add	r3, sp, #24
 8010dae:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8010db2:	f7fc fb77 	bl	800d4a4 <acc_sensor_protocol_r2_prepare_load>
 8010db6:	2800      	cmp	r0, #0
 8010db8:	f000 8083 	beq.w	8010ec2 <acc_cpd_rx_fine_dip_calibration+0x136>
 8010dbc:	9b07      	ldr	r3, [sp, #28]
 8010dbe:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8010f84 <acc_cpd_rx_fine_dip_calibration+0x1f8>
 8010dc2:	46a2      	mov	sl, r4
 8010dc4:	f5ca 68d5 	rsb	r8, sl, #1704	; 0x6a8
 8010dc8:	f108 0804 	add.w	r8, r8, #4
 8010dcc:	4598      	cmp	r8, r3
 8010dce:	bf28      	it	cs
 8010dd0:	4698      	movcs	r8, r3
 8010dd2:	9c06      	ldr	r4, [sp, #24]
 8010dd4:	4b63      	ldr	r3, [pc, #396]	; (8010f64 <acc_cpd_rx_fine_dip_calibration+0x1d8>)
 8010dd6:	ea4f 0b5a 	mov.w	fp, sl, lsr #1
 8010dda:	eb03 008b 	add.w	r0, r3, fp, lsl #2
 8010dde:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8010de2:	4621      	mov	r1, r4
 8010de4:	fa1f f68a 	uxth.w	r6, sl
 8010de8:	f001 fd64 	bl	80128b4 <acc_confprogram_copy>
 8010dec:	fa1f f788 	uxth.w	r7, r8
 8010df0:	686b      	ldr	r3, [r5, #4]
 8010df2:	9301      	str	r3, [sp, #4]
 8010df4:	221b      	movs	r2, #27
 8010df6:	9200      	str	r2, [sp, #0]
 8010df8:	4620      	mov	r0, r4
 8010dfa:	463a      	mov	r2, r7
 8010dfc:	4631      	mov	r1, r6
 8010dfe:	464b      	mov	r3, r9
 8010e00:	f001 fc64 	bl	80126cc <acc_confprogram_patch_offset>
 8010e04:	68ab      	ldr	r3, [r5, #8]
 8010e06:	9301      	str	r3, [sp, #4]
 8010e08:	2319      	movs	r3, #25
 8010e0a:	463a      	mov	r2, r7
 8010e0c:	4631      	mov	r1, r6
 8010e0e:	4620      	mov	r0, r4
 8010e10:	9300      	str	r3, [sp, #0]
 8010e12:	464b      	mov	r3, r9
 8010e14:	f001 fc5a 	bl	80126cc <acc_confprogram_patch_offset>
 8010e18:	68eb      	ldr	r3, [r5, #12]
 8010e1a:	9301      	str	r3, [sp, #4]
 8010e1c:	231a      	movs	r3, #26
 8010e1e:	463a      	mov	r2, r7
 8010e20:	4631      	mov	r1, r6
 8010e22:	4620      	mov	r0, r4
 8010e24:	9300      	str	r3, [sp, #0]
 8010e26:	464b      	mov	r3, r9
 8010e28:	f001 fc50 	bl	80126cc <acc_confprogram_patch_offset>
 8010e2c:	8a2b      	ldrh	r3, [r5, #16]
 8010e2e:	9301      	str	r3, [sp, #4]
 8010e30:	2317      	movs	r3, #23
 8010e32:	463a      	mov	r2, r7
 8010e34:	4631      	mov	r1, r6
 8010e36:	4620      	mov	r0, r4
 8010e38:	9300      	str	r3, [sp, #0]
 8010e3a:	464b      	mov	r3, r9
 8010e3c:	f001 fc46 	bl	80126cc <acc_confprogram_patch_offset>
 8010e40:	69eb      	ldr	r3, [r5, #28]
 8010e42:	9301      	str	r3, [sp, #4]
 8010e44:	230d      	movs	r3, #13
 8010e46:	463a      	mov	r2, r7
 8010e48:	4631      	mov	r1, r6
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	9300      	str	r3, [sp, #0]
 8010e4e:	464b      	mov	r3, r9
 8010e50:	f001 fc3c 	bl	80126cc <acc_confprogram_patch_offset>
 8010e54:	6a2b      	ldr	r3, [r5, #32]
 8010e56:	9301      	str	r3, [sp, #4]
 8010e58:	232a      	movs	r3, #42	; 0x2a
 8010e5a:	463a      	mov	r2, r7
 8010e5c:	4631      	mov	r1, r6
 8010e5e:	4620      	mov	r0, r4
 8010e60:	9300      	str	r3, [sp, #0]
 8010e62:	464b      	mov	r3, r9
 8010e64:	f001 fc32 	bl	80126cc <acc_confprogram_patch_offset>
 8010e68:	69ab      	ldr	r3, [r5, #24]
 8010e6a:	9301      	str	r3, [sp, #4]
 8010e6c:	230f      	movs	r3, #15
 8010e6e:	463a      	mov	r2, r7
 8010e70:	4631      	mov	r1, r6
 8010e72:	4620      	mov	r0, r4
 8010e74:	9300      	str	r3, [sp, #0]
 8010e76:	464b      	mov	r3, r9
 8010e78:	f001 fc28 	bl	80126cc <acc_confprogram_patch_offset>
 8010e7c:	696b      	ldr	r3, [r5, #20]
 8010e7e:	9301      	str	r3, [sp, #4]
 8010e80:	232c      	movs	r3, #44	; 0x2c
 8010e82:	463a      	mov	r2, r7
 8010e84:	4631      	mov	r1, r6
 8010e86:	4620      	mov	r0, r4
 8010e88:	9300      	str	r3, [sp, #0]
 8010e8a:	464b      	mov	r3, r9
 8010e8c:	f001 fc1e 	bl	80126cc <acc_confprogram_patch_offset>
 8010e90:	4643      	mov	r3, r8
 8010e92:	9a02      	ldr	r2, [sp, #8]
 8010e94:	6828      	ldr	r0, [r5, #0]
 8010e96:	fa1f f18b 	uxth.w	r1, fp
 8010e9a:	f7fb feaf 	bl	800cbfc <acc_sensor_r2_load_confmem>
 8010e9e:	9b07      	ldr	r3, [sp, #28]
 8010ea0:	f240 62ab 	movw	r2, #1707	; 0x6ab
 8010ea4:	449a      	add	sl, r3
 8010ea6:	4592      	cmp	sl, r2
 8010ea8:	d98c      	bls.n	8010dc4 <acc_cpd_rx_fine_dip_calibration+0x38>
 8010eaa:	2118      	movs	r1, #24
 8010eac:	9803      	ldr	r0, [sp, #12]
 8010eae:	f7fc fb5b 	bl	800d568 <acc_sensor_protocol_r2_run_program>
 8010eb2:	4606      	mov	r6, r0
 8010eb4:	b978      	cbnz	r0, 8010ed6 <acc_cpd_rx_fine_dip_calibration+0x14a>
 8010eb6:	4b2c      	ldr	r3, [pc, #176]	; (8010f68 <acc_cpd_rx_fine_dip_calibration+0x1dc>)
 8010eb8:	4a2c      	ldr	r2, [pc, #176]	; (8010f6c <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 8010eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ebc:	492c      	ldr	r1, [pc, #176]	; (8010f70 <acc_cpd_rx_fine_dip_calibration+0x1e4>)
 8010ebe:	4798      	blx	r3
 8010ec0:	e005      	b.n	8010ece <acc_cpd_rx_fine_dip_calibration+0x142>
 8010ec2:	4b29      	ldr	r3, [pc, #164]	; (8010f68 <acc_cpd_rx_fine_dip_calibration+0x1dc>)
 8010ec4:	4a2b      	ldr	r2, [pc, #172]	; (8010f74 <acc_cpd_rx_fine_dip_calibration+0x1e8>)
 8010ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ec8:	4929      	ldr	r1, [pc, #164]	; (8010f70 <acc_cpd_rx_fine_dip_calibration+0x1e4>)
 8010eca:	4606      	mov	r6, r0
 8010ecc:	4798      	blx	r3
 8010ece:	4630      	mov	r0, r6
 8010ed0:	b009      	add	sp, #36	; 0x24
 8010ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	2208      	movs	r2, #8
 8010eda:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8010ede:	9803      	ldr	r0, [sp, #12]
 8010ee0:	f7fc fcc0 	bl	800d864 <acc_sensor_protocol_r2_wait_for_specific_event>
 8010ee4:	b908      	cbnz	r0, 8010eea <acc_cpd_rx_fine_dip_calibration+0x15e>
 8010ee6:	2600      	movs	r6, #0
 8010ee8:	e7f1      	b.n	8010ece <acc_cpd_rx_fine_dip_calibration+0x142>
 8010eea:	9804      	ldr	r0, [sp, #16]
 8010eec:	2119      	movs	r1, #25
 8010eee:	f7fb febf 	bl	800cc70 <acc_sensor_r2_buffer_processed_verify_size>
 8010ef2:	4606      	mov	r6, r0
 8010ef4:	b928      	cbnz	r0, 8010f02 <acc_cpd_rx_fine_dip_calibration+0x176>
 8010ef6:	4b1c      	ldr	r3, [pc, #112]	; (8010f68 <acc_cpd_rx_fine_dip_calibration+0x1dc>)
 8010ef8:	4a1f      	ldr	r2, [pc, #124]	; (8010f78 <acc_cpd_rx_fine_dip_calibration+0x1ec>)
 8010efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010efc:	491c      	ldr	r1, [pc, #112]	; (8010f70 <acc_cpd_rx_fine_dip_calibration+0x1e4>)
 8010efe:	4798      	blx	r3
 8010f00:	e7e5      	b.n	8010ece <acc_cpd_rx_fine_dip_calibration+0x142>
 8010f02:	9d03      	ldr	r5, [sp, #12]
 8010f04:	9902      	ldr	r1, [sp, #8]
 8010f06:	2319      	movs	r3, #25
 8010f08:	2200      	movs	r2, #0
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	f7fb feb8 	bl	800cc80 <acc_sensor_r2_buffer_processed_read>
 8010f10:	2319      	movs	r3, #25
 8010f12:	4604      	mov	r4, r0
 8010f14:	4602      	mov	r2, r0
 8010f16:	4629      	mov	r1, r5
 8010f18:	200a      	movs	r0, #10
 8010f1a:	f7f9 fcb1 	bl	800a880 <acc_probes_execute_uint16>
 8010f1e:	9a05      	ldr	r2, [sp, #20]
 8010f20:	4623      	mov	r3, r4
 8010f22:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8010f26:	681d      	ldr	r5, [r3, #0]
 8010f28:	685c      	ldr	r4, [r3, #4]
 8010f2a:	6898      	ldr	r0, [r3, #8]
 8010f2c:	68de      	ldr	r6, [r3, #12]
 8010f2e:	60d6      	str	r6, [r2, #12]
 8010f30:	3310      	adds	r3, #16
 8010f32:	428b      	cmp	r3, r1
 8010f34:	6015      	str	r5, [r2, #0]
 8010f36:	6054      	str	r4, [r2, #4]
 8010f38:	6090      	str	r0, [r2, #8]
 8010f3a:	f102 0210 	add.w	r2, r2, #16
 8010f3e:	d1f2      	bne.n	8010f26 <acc_cpd_rx_fine_dip_calibration+0x19a>
 8010f40:	881b      	ldrh	r3, [r3, #0]
 8010f42:	8013      	strh	r3, [r2, #0]
 8010f44:	9803      	ldr	r0, [sp, #12]
 8010f46:	f7fc fb95 	bl	800d674 <acc_sensor_protocol_r2_ack_event>
 8010f4a:	4606      	mov	r6, r0
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	d0ca      	beq.n	8010ee6 <acc_cpd_rx_fine_dip_calibration+0x15a>
 8010f50:	490a      	ldr	r1, [pc, #40]	; (8010f7c <acc_cpd_rx_fine_dip_calibration+0x1f0>)
 8010f52:	480b      	ldr	r0, [pc, #44]	; (8010f80 <acc_cpd_rx_fine_dip_calibration+0x1f4>)
 8010f54:	f7fc ff40 	bl	800ddd8 <acc_diagnostic_log_array>
 8010f58:	9805      	ldr	r0, [sp, #20]
 8010f5a:	2119      	movs	r1, #25
 8010f5c:	f7fc ff4c 	bl	800ddf8 <acc_diagnostic_log_data_u16>
 8010f60:	e7b5      	b.n	8010ece <acc_cpd_rx_fine_dip_calibration+0x142>
 8010f62:	bf00      	nop
 8010f64:	08015318 	.word	0x08015318
 8010f68:	20001628 	.word	0x20001628
 8010f6c:	0801a830 	.word	0x0801a830
 8010f70:	0801a818 	.word	0x0801a818
 8010f74:	0801a7f0 	.word	0x0801a7f0
 8010f78:	08019e60 	.word	0x08019e60
 8010f7c:	08019f98 	.word	0x08019f98
 8010f80:	0801a864 	.word	0x0801a864
 8010f84:	0801b410 	.word	0x0801b410

08010f88 <acc_cpd_sparse_sweep_load_program>:
 8010f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f8c:	ed2d 8b02 	vpush	{d8}
 8010f90:	b093      	sub	sp, #76	; 0x4c
 8010f92:	4614      	mov	r4, r2
 8010f94:	4605      	mov	r5, r0
 8010f96:	461a      	mov	r2, r3
 8010f98:	900d      	str	r0, [sp, #52]	; 0x34
 8010f9a:	460e      	mov	r6, r1
 8010f9c:	910e      	str	r1, [sp, #56]	; 0x38
 8010f9e:	469b      	mov	fp, r3
 8010fa0:	4601      	mov	r1, r0
 8010fa2:	23b4      	movs	r3, #180	; 0xb4
 8010fa4:	2015      	movs	r0, #21
 8010fa6:	f7f9 fc83 	bl	800a8b0 <acc_probes_execute_struct>
 8010faa:	ab11      	add	r3, sp, #68	; 0x44
 8010fac:	4622      	mov	r2, r4
 8010fae:	9300      	str	r3, [sp, #0]
 8010fb0:	4631      	mov	r1, r6
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	2400      	movs	r4, #0
 8010fb6:	ab10      	add	r3, sp, #64	; 0x40
 8010fb8:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8010fbc:	f7fc fa72 	bl	800d4a4 <acc_sensor_protocol_r2_prepare_load>
 8010fc0:	900f      	str	r0, [sp, #60]	; 0x3c
 8010fc2:	2800      	cmp	r0, #0
 8010fc4:	f000 83a2 	beq.w	801170c <acc_cpd_sparse_sweep_load_program+0x784>
 8010fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010fca:	4f02      	ldr	r7, [pc, #8]	; (8010fd4 <acc_cpd_sparse_sweep_load_program+0x4c>)
 8010fcc:	ed9f 8a02 	vldr	s16, [pc, #8]	; 8010fd8 <acc_cpd_sparse_sweep_load_program+0x50>
 8010fd0:	9404      	str	r4, [sp, #16]
 8010fd2:	e074      	b.n	80110be <acc_cpd_sparse_sweep_load_program+0x136>
 8010fd4:	0801cbc4 	.word	0x0801cbc4
 8010fd8:	3751b717 	.word	0x3751b717
 8010fdc:	23d7      	movs	r3, #215	; 0xd7
 8010fde:	2201      	movs	r2, #1
 8010fe0:	e9cd 3200 	strd	r3, r2, [sp]
 8010fe4:	4631      	mov	r1, r6
 8010fe6:	463b      	mov	r3, r7
 8010fe8:	4642      	mov	r2, r8
 8010fea:	4628      	mov	r0, r5
 8010fec:	f001 fb6e 	bl	80126cc <acc_confprogram_patch_offset>
 8010ff0:	23d8      	movs	r3, #216	; 0xd8
 8010ff2:	e9cd 3400 	strd	r3, r4, [sp]
 8010ff6:	4642      	mov	r2, r8
 8010ff8:	463b      	mov	r3, r7
 8010ffa:	4631      	mov	r1, r6
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	f001 fb65 	bl	80126cc <acc_confprogram_patch_offset>
 8011002:	f8db 3060 	ldr.w	r3, [fp, #96]	; 0x60
 8011006:	22e3      	movs	r2, #227	; 0xe3
 8011008:	3b01      	subs	r3, #1
 801100a:	e9cd 2300 	strd	r2, r3, [sp]
 801100e:	4631      	mov	r1, r6
 8011010:	463b      	mov	r3, r7
 8011012:	4642      	mov	r2, r8
 8011014:	4628      	mov	r0, r5
 8011016:	f001 fb59 	bl	80126cc <acc_confprogram_patch_offset>
 801101a:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
 801101e:	9301      	str	r3, [sp, #4]
 8011020:	23d4      	movs	r3, #212	; 0xd4
 8011022:	9300      	str	r3, [sp, #0]
 8011024:	4642      	mov	r2, r8
 8011026:	463b      	mov	r3, r7
 8011028:	4631      	mov	r1, r6
 801102a:	4628      	mov	r0, r5
 801102c:	f001 fb4e 	bl	80126cc <acc_confprogram_patch_offset>
 8011030:	f8db 3074 	ldr.w	r3, [fp, #116]	; 0x74
 8011034:	9301      	str	r3, [sp, #4]
 8011036:	2375      	movs	r3, #117	; 0x75
 8011038:	9300      	str	r3, [sp, #0]
 801103a:	4642      	mov	r2, r8
 801103c:	463b      	mov	r3, r7
 801103e:	4631      	mov	r1, r6
 8011040:	4628      	mov	r0, r5
 8011042:	f001 fb43 	bl	80126cc <acc_confprogram_patch_offset>
 8011046:	eddb 7a20 	vldr	s15, [fp, #128]	; 0x80
 801104a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801104e:	22e5      	movs	r2, #229	; 0xe5
 8011050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011054:	9200      	str	r2, [sp, #0]
 8011056:	ee17 3a90 	vmov	r3, s15
 801105a:	3b01      	subs	r3, #1
 801105c:	b29b      	uxth	r3, r3
 801105e:	9301      	str	r3, [sp, #4]
 8011060:	4642      	mov	r2, r8
 8011062:	463b      	mov	r3, r7
 8011064:	4631      	mov	r1, r6
 8011066:	4628      	mov	r0, r5
 8011068:	f001 fb30 	bl	80126cc <acc_confprogram_patch_offset>
 801106c:	f8db 3084 	ldr.w	r3, [fp, #132]	; 0x84
 8011070:	9301      	str	r3, [sp, #4]
 8011072:	23d5      	movs	r3, #213	; 0xd5
 8011074:	9300      	str	r3, [sp, #0]
 8011076:	4642      	mov	r2, r8
 8011078:	463b      	mov	r3, r7
 801107a:	4631      	mov	r1, r6
 801107c:	4628      	mov	r0, r5
 801107e:	f001 fb25 	bl	80126cc <acc_confprogram_patch_offset>
 8011082:	f8db 3084 	ldr.w	r3, [fp, #132]	; 0x84
 8011086:	b153      	cbz	r3, 801109e <acc_cpd_sparse_sweep_load_program+0x116>
 8011088:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 801108c:	9301      	str	r3, [sp, #4]
 801108e:	2371      	movs	r3, #113	; 0x71
 8011090:	9300      	str	r3, [sp, #0]
 8011092:	4642      	mov	r2, r8
 8011094:	4631      	mov	r1, r6
 8011096:	4628      	mov	r0, r5
 8011098:	463b      	mov	r3, r7
 801109a:	f001 fb17 	bl	80126cc <acc_confprogram_patch_offset>
 801109e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110a0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80110a4:	e9dd 020d 	ldrd	r0, r2, [sp, #52]	; 0x34
 80110a8:	f7fb fda8 	bl	800cbfc <acc_sensor_r2_load_confmem>
 80110ac:	9904      	ldr	r1, [sp, #16]
 80110ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110b0:	f240 7269 	movw	r2, #1897	; 0x769
 80110b4:	4419      	add	r1, r3
 80110b6:	4291      	cmp	r1, r2
 80110b8:	9104      	str	r1, [sp, #16]
 80110ba:	f200 8327 	bhi.w	801170c <acc_cpd_sparse_sweep_load_program+0x784>
 80110be:	9c04      	ldr	r4, [sp, #16]
 80110c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80110c2:	4869      	ldr	r0, [pc, #420]	; (8011268 <acc_cpd_sparse_sweep_load_program+0x2e0>)
 80110c4:	f5c4 62ed 	rsb	r2, r4, #1896	; 0x768
 80110c8:	3202      	adds	r2, #2
 80110ca:	429a      	cmp	r2, r3
 80110cc:	4616      	mov	r6, r2
 80110ce:	bf28      	it	cs
 80110d0:	461e      	movcs	r6, r3
 80110d2:	0863      	lsrs	r3, r4, #1
 80110d4:	0872      	lsrs	r2, r6, #1
 80110d6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80110da:	4629      	mov	r1, r5
 80110dc:	960b      	str	r6, [sp, #44]	; 0x2c
 80110de:	9305      	str	r3, [sp, #20]
 80110e0:	f001 fbe8 	bl	80128b4 <acc_confprogram_copy>
 80110e4:	f8db 3000 	ldr.w	r3, [fp]
 80110e8:	9301      	str	r3, [sp, #4]
 80110ea:	fa1f f886 	uxth.w	r8, r6
 80110ee:	23d2      	movs	r3, #210	; 0xd2
 80110f0:	b2a6      	uxth	r6, r4
 80110f2:	4642      	mov	r2, r8
 80110f4:	4628      	mov	r0, r5
 80110f6:	4631      	mov	r1, r6
 80110f8:	9300      	str	r3, [sp, #0]
 80110fa:	463b      	mov	r3, r7
 80110fc:	f001 fae6 	bl	80126cc <acc_confprogram_patch_offset>
 8011100:	f8db 3004 	ldr.w	r3, [fp, #4]
 8011104:	9301      	str	r3, [sp, #4]
 8011106:	23d0      	movs	r3, #208	; 0xd0
 8011108:	4642      	mov	r2, r8
 801110a:	4631      	mov	r1, r6
 801110c:	4628      	mov	r0, r5
 801110e:	9300      	str	r3, [sp, #0]
 8011110:	463b      	mov	r3, r7
 8011112:	f001 fadb 	bl	80126cc <acc_confprogram_patch_offset>
 8011116:	f8db 3008 	ldr.w	r3, [fp, #8]
 801111a:	9301      	str	r3, [sp, #4]
 801111c:	23d1      	movs	r3, #209	; 0xd1
 801111e:	4642      	mov	r2, r8
 8011120:	4631      	mov	r1, r6
 8011122:	4628      	mov	r0, r5
 8011124:	9300      	str	r3, [sp, #0]
 8011126:	463b      	mov	r3, r7
 8011128:	f001 fad0 	bl	80126cc <acc_confprogram_patch_offset>
 801112c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8011130:	9301      	str	r3, [sp, #4]
 8011132:	23ce      	movs	r3, #206	; 0xce
 8011134:	4642      	mov	r2, r8
 8011136:	4631      	mov	r1, r6
 8011138:	4628      	mov	r0, r5
 801113a:	9300      	str	r3, [sp, #0]
 801113c:	463b      	mov	r3, r7
 801113e:	f001 fac5 	bl	80126cc <acc_confprogram_patch_offset>
 8011142:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011146:	9301      	str	r3, [sp, #4]
 8011148:	2365      	movs	r3, #101	; 0x65
 801114a:	4642      	mov	r2, r8
 801114c:	4631      	mov	r1, r6
 801114e:	4628      	mov	r0, r5
 8011150:	9300      	str	r3, [sp, #0]
 8011152:	463b      	mov	r3, r7
 8011154:	f001 faba 	bl	80126cc <acc_confprogram_patch_offset>
 8011158:	f8db 3014 	ldr.w	r3, [fp, #20]
 801115c:	9301      	str	r3, [sp, #4]
 801115e:	23f0      	movs	r3, #240	; 0xf0
 8011160:	4642      	mov	r2, r8
 8011162:	4631      	mov	r1, r6
 8011164:	4628      	mov	r0, r5
 8011166:	9300      	str	r3, [sp, #0]
 8011168:	463b      	mov	r3, r7
 801116a:	f001 faaf 	bl	80126cc <acc_confprogram_patch_offset>
 801116e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8011172:	9301      	str	r3, [sp, #4]
 8011174:	23e8      	movs	r3, #232	; 0xe8
 8011176:	4642      	mov	r2, r8
 8011178:	4631      	mov	r1, r6
 801117a:	4628      	mov	r0, r5
 801117c:	9300      	str	r3, [sp, #0]
 801117e:	463b      	mov	r3, r7
 8011180:	f001 faa4 	bl	80126cc <acc_confprogram_patch_offset>
 8011184:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8011188:	9301      	str	r3, [sp, #4]
 801118a:	23fc      	movs	r3, #252	; 0xfc
 801118c:	4642      	mov	r2, r8
 801118e:	4631      	mov	r1, r6
 8011190:	4628      	mov	r0, r5
 8011192:	9300      	str	r3, [sp, #0]
 8011194:	463b      	mov	r3, r7
 8011196:	f001 fa99 	bl	80126cc <acc_confprogram_patch_offset>
 801119a:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 801119e:	9301      	str	r3, [sp, #4]
 80111a0:	23e0      	movs	r3, #224	; 0xe0
 80111a2:	4642      	mov	r2, r8
 80111a4:	4631      	mov	r1, r6
 80111a6:	4628      	mov	r0, r5
 80111a8:	9300      	str	r3, [sp, #0]
 80111aa:	463b      	mov	r3, r7
 80111ac:	f001 fa8e 	bl	80126cc <acc_confprogram_patch_offset>
 80111b0:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 80111b4:	9301      	str	r3, [sp, #4]
 80111b6:	23e1      	movs	r3, #225	; 0xe1
 80111b8:	4642      	mov	r2, r8
 80111ba:	4631      	mov	r1, r6
 80111bc:	4628      	mov	r0, r5
 80111be:	9300      	str	r3, [sp, #0]
 80111c0:	463b      	mov	r3, r7
 80111c2:	f001 fa83 	bl	80126cc <acc_confprogram_patch_offset>
 80111c6:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 80111ca:	9301      	str	r3, [sp, #4]
 80111cc:	2380      	movs	r3, #128	; 0x80
 80111ce:	4642      	mov	r2, r8
 80111d0:	4631      	mov	r1, r6
 80111d2:	4628      	mov	r0, r5
 80111d4:	9300      	str	r3, [sp, #0]
 80111d6:	463b      	mov	r3, r7
 80111d8:	f001 fa78 	bl	80126cc <acc_confprogram_patch_offset>
 80111dc:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 80111e0:	9301      	str	r3, [sp, #4]
 80111e2:	2381      	movs	r3, #129	; 0x81
 80111e4:	4642      	mov	r2, r8
 80111e6:	4631      	mov	r1, r6
 80111e8:	4628      	mov	r0, r5
 80111ea:	9300      	str	r3, [sp, #0]
 80111ec:	463b      	mov	r3, r7
 80111ee:	f001 fa6d 	bl	80126cc <acc_confprogram_patch_offset>
 80111f2:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80111f6:	9301      	str	r3, [sp, #4]
 80111f8:	237f      	movs	r3, #127	; 0x7f
 80111fa:	4642      	mov	r2, r8
 80111fc:	4631      	mov	r1, r6
 80111fe:	4628      	mov	r0, r5
 8011200:	9300      	str	r3, [sp, #0]
 8011202:	2400      	movs	r4, #0
 8011204:	463b      	mov	r3, r7
 8011206:	f001 fa61 	bl	80126cc <acc_confprogram_patch_offset>
 801120a:	4642      	mov	r2, r8
 801120c:	4631      	mov	r1, r6
 801120e:	4628      	mov	r0, r5
 8011210:	463b      	mov	r3, r7
 8011212:	e9cd 4400 	strd	r4, r4, [sp]
 8011216:	f001 fa59 	bl	80126cc <acc_confprogram_patch_offset>
 801121a:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 801121e:	9301      	str	r3, [sp, #4]
 8011220:	23ef      	movs	r3, #239	; 0xef
 8011222:	4642      	mov	r2, r8
 8011224:	4631      	mov	r1, r6
 8011226:	4628      	mov	r0, r5
 8011228:	9300      	str	r3, [sp, #0]
 801122a:	463b      	mov	r3, r7
 801122c:	f001 fa4e 	bl	80126cc <acc_confprogram_patch_offset>
 8011230:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 8011234:	9301      	str	r3, [sp, #4]
 8011236:	23d6      	movs	r3, #214	; 0xd6
 8011238:	4642      	mov	r2, r8
 801123a:	4631      	mov	r1, r6
 801123c:	4628      	mov	r0, r5
 801123e:	9300      	str	r3, [sp, #0]
 8011240:	463b      	mov	r3, r7
 8011242:	f001 fa43 	bl	80126cc <acc_confprogram_patch_offset>
 8011246:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
 801124a:	9301      	str	r3, [sp, #4]
 801124c:	2378      	movs	r3, #120	; 0x78
 801124e:	9300      	str	r3, [sp, #0]
 8011250:	4642      	mov	r2, r8
 8011252:	463b      	mov	r3, r7
 8011254:	4631      	mov	r1, r6
 8011256:	4628      	mov	r0, r5
 8011258:	f001 fa38 	bl	80126cc <acc_confprogram_patch_offset>
 801125c:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
 8011260:	2b00      	cmp	r3, #0
 8011262:	f040 81e4 	bne.w	801162e <acc_cpd_sparse_sweep_load_program+0x6a6>
 8011266:	e001      	b.n	801126c <acc_cpd_sparse_sweep_load_program+0x2e4>
 8011268:	08016e90 	.word	0x08016e90
 801126c:	f8db 304c 	ldr.w	r3, [fp, #76]	; 0x4c
 8011270:	9301      	str	r3, [sp, #4]
 8011272:	2386      	movs	r3, #134	; 0x86
 8011274:	9300      	str	r3, [sp, #0]
 8011276:	4642      	mov	r2, r8
 8011278:	463b      	mov	r3, r7
 801127a:	4631      	mov	r1, r6
 801127c:	4628      	mov	r0, r5
 801127e:	f001 fa25 	bl	80126cc <acc_confprogram_patch_offset>
 8011282:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
 8011286:	9301      	str	r3, [sp, #4]
 8011288:	23d3      	movs	r3, #211	; 0xd3
 801128a:	9300      	str	r3, [sp, #0]
 801128c:	4642      	mov	r2, r8
 801128e:	463b      	mov	r3, r7
 8011290:	4631      	mov	r1, r6
 8011292:	4628      	mov	r0, r5
 8011294:	f001 fa1a 	bl	80126cc <acc_confprogram_patch_offset>
 8011298:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 801129c:	9301      	str	r3, [sp, #4]
 801129e:	23f3      	movs	r3, #243	; 0xf3
 80112a0:	9300      	str	r3, [sp, #0]
 80112a2:	4642      	mov	r2, r8
 80112a4:	463b      	mov	r3, r7
 80112a6:	4631      	mov	r1, r6
 80112a8:	4628      	mov	r0, r5
 80112aa:	f001 fa0f 	bl	80126cc <acc_confprogram_patch_offset>
 80112ae:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 80112b2:	9301      	str	r3, [sp, #4]
 80112b4:	2382      	movs	r3, #130	; 0x82
 80112b6:	9300      	str	r3, [sp, #0]
 80112b8:	4642      	mov	r2, r8
 80112ba:	463b      	mov	r3, r7
 80112bc:	4631      	mov	r1, r6
 80112be:	4628      	mov	r0, r5
 80112c0:	f001 fa04 	bl	80126cc <acc_confprogram_patch_offset>
 80112c4:	f8db 405c 	ldr.w	r4, [fp, #92]	; 0x5c
 80112c8:	b2a3      	uxth	r3, r4
 80112ca:	2b08      	cmp	r3, #8
 80112cc:	f200 819b 	bhi.w	8011606 <acc_cpd_sparse_sweep_load_program+0x67e>
 80112d0:	4699      	mov	r9, r3
 80112d2:	2400      	movs	r4, #0
 80112d4:	23e9      	movs	r3, #233	; 0xe9
 80112d6:	e9cd 3900 	strd	r3, r9, [sp]
 80112da:	4642      	mov	r2, r8
 80112dc:	463b      	mov	r3, r7
 80112de:	4631      	mov	r1, r6
 80112e0:	4628      	mov	r0, r5
 80112e2:	f001 f9f3 	bl	80126cc <acc_confprogram_patch_offset>
 80112e6:	23d9      	movs	r3, #217	; 0xd9
 80112e8:	4642      	mov	r2, r8
 80112ea:	e9cd 3900 	strd	r3, r9, [sp]
 80112ee:	4631      	mov	r1, r6
 80112f0:	463b      	mov	r3, r7
 80112f2:	4628      	mov	r0, r5
 80112f4:	f001 f9ea 	bl	80126cc <acc_confprogram_patch_offset>
 80112f8:	21eb      	movs	r1, #235	; 0xeb
 80112fa:	4638      	mov	r0, r7
 80112fc:	f001 fad6 	bl	80128ac <acc_confprogram_get_default_value>
 8011300:	21ed      	movs	r1, #237	; 0xed
 8011302:	900c      	str	r0, [sp, #48]	; 0x30
 8011304:	4638      	mov	r0, r7
 8011306:	f001 fad1 	bl	80128ac <acc_confprogram_get_default_value>
 801130a:	21ec      	movs	r1, #236	; 0xec
 801130c:	4681      	mov	r9, r0
 801130e:	4638      	mov	r0, r7
 8011310:	f001 facc 	bl	80128ac <acc_confprogram_get_default_value>
 8011314:	21db      	movs	r1, #219	; 0xdb
 8011316:	9003      	str	r0, [sp, #12]
 8011318:	4638      	mov	r0, r7
 801131a:	f001 fac7 	bl	80128ac <acc_confprogram_get_default_value>
 801131e:	21dd      	movs	r1, #221	; 0xdd
 8011320:	4682      	mov	sl, r0
 8011322:	4638      	mov	r0, r7
 8011324:	f001 fac2 	bl	80128ac <acc_confprogram_get_default_value>
 8011328:	21dc      	movs	r1, #220	; 0xdc
 801132a:	9006      	str	r0, [sp, #24]
 801132c:	4638      	mov	r0, r7
 801132e:	f001 fabd 	bl	80128ac <acc_confprogram_get_default_value>
 8011332:	21cd      	movs	r1, #205	; 0xcd
 8011334:	9007      	str	r0, [sp, #28]
 8011336:	4638      	mov	r0, r7
 8011338:	f001 fab8 	bl	80128ac <acc_confprogram_get_default_value>
 801133c:	2185      	movs	r1, #133	; 0x85
 801133e:	9008      	str	r0, [sp, #32]
 8011340:	4638      	mov	r0, r7
 8011342:	f001 fab3 	bl	80128ac <acc_confprogram_get_default_value>
 8011346:	2121      	movs	r1, #33	; 0x21
 8011348:	9009      	str	r0, [sp, #36]	; 0x24
 801134a:	4638      	mov	r0, r7
 801134c:	f001 faae 	bl	80128ac <acc_confprogram_get_default_value>
 8011350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011352:	900a      	str	r0, [sp, #40]	; 0x28
 8011354:	4323      	orrs	r3, r4
 8011356:	22eb      	movs	r2, #235	; 0xeb
 8011358:	e9cd 2300 	strd	r2, r3, [sp]
 801135c:	4631      	mov	r1, r6
 801135e:	463b      	mov	r3, r7
 8011360:	4642      	mov	r2, r8
 8011362:	4628      	mov	r0, r5
 8011364:	f001 f9b2 	bl	80126cc <acc_confprogram_patch_offset>
 8011368:	ea49 0304 	orr.w	r3, r9, r4
 801136c:	22ed      	movs	r2, #237	; 0xed
 801136e:	e9cd 2300 	strd	r2, r3, [sp]
 8011372:	4631      	mov	r1, r6
 8011374:	463b      	mov	r3, r7
 8011376:	4642      	mov	r2, r8
 8011378:	4628      	mov	r0, r5
 801137a:	f001 f9a7 	bl	80126cc <acc_confprogram_patch_offset>
 801137e:	9a03      	ldr	r2, [sp, #12]
 8011380:	23ec      	movs	r3, #236	; 0xec
 8011382:	4322      	orrs	r2, r4
 8011384:	e9cd 3200 	strd	r3, r2, [sp]
 8011388:	4631      	mov	r1, r6
 801138a:	463b      	mov	r3, r7
 801138c:	4642      	mov	r2, r8
 801138e:	4628      	mov	r0, r5
 8011390:	f001 f99c 	bl	80126cc <acc_confprogram_patch_offset>
 8011394:	ea4a 0304 	orr.w	r3, sl, r4
 8011398:	22db      	movs	r2, #219	; 0xdb
 801139a:	e9cd 2300 	strd	r2, r3, [sp]
 801139e:	4631      	mov	r1, r6
 80113a0:	463b      	mov	r3, r7
 80113a2:	4642      	mov	r2, r8
 80113a4:	4628      	mov	r0, r5
 80113a6:	f001 f991 	bl	80126cc <acc_confprogram_patch_offset>
 80113aa:	9b06      	ldr	r3, [sp, #24]
 80113ac:	22dd      	movs	r2, #221	; 0xdd
 80113ae:	4323      	orrs	r3, r4
 80113b0:	e9cd 2300 	strd	r2, r3, [sp]
 80113b4:	4631      	mov	r1, r6
 80113b6:	463b      	mov	r3, r7
 80113b8:	4642      	mov	r2, r8
 80113ba:	4628      	mov	r0, r5
 80113bc:	f001 f986 	bl	80126cc <acc_confprogram_patch_offset>
 80113c0:	9b07      	ldr	r3, [sp, #28]
 80113c2:	22dc      	movs	r2, #220	; 0xdc
 80113c4:	4323      	orrs	r3, r4
 80113c6:	e9cd 2300 	strd	r2, r3, [sp]
 80113ca:	4631      	mov	r1, r6
 80113cc:	463b      	mov	r3, r7
 80113ce:	4642      	mov	r2, r8
 80113d0:	4628      	mov	r0, r5
 80113d2:	f001 f97b 	bl	80126cc <acc_confprogram_patch_offset>
 80113d6:	9b08      	ldr	r3, [sp, #32]
 80113d8:	22cd      	movs	r2, #205	; 0xcd
 80113da:	4323      	orrs	r3, r4
 80113dc:	e9cd 2300 	strd	r2, r3, [sp]
 80113e0:	4631      	mov	r1, r6
 80113e2:	463b      	mov	r3, r7
 80113e4:	4642      	mov	r2, r8
 80113e6:	4628      	mov	r0, r5
 80113e8:	f001 f970 	bl	80126cc <acc_confprogram_patch_offset>
 80113ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113ee:	2285      	movs	r2, #133	; 0x85
 80113f0:	4323      	orrs	r3, r4
 80113f2:	e9cd 2300 	strd	r2, r3, [sp]
 80113f6:	4631      	mov	r1, r6
 80113f8:	463b      	mov	r3, r7
 80113fa:	4642      	mov	r2, r8
 80113fc:	4628      	mov	r0, r5
 80113fe:	f001 f965 	bl	80126cc <acc_confprogram_patch_offset>
 8011402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011404:	4323      	orrs	r3, r4
 8011406:	461c      	mov	r4, r3
 8011408:	2321      	movs	r3, #33	; 0x21
 801140a:	e9cd 3400 	strd	r3, r4, [sp]
 801140e:	4642      	mov	r2, r8
 8011410:	463b      	mov	r3, r7
 8011412:	4631      	mov	r1, r6
 8011414:	4628      	mov	r0, r5
 8011416:	f001 f959 	bl	80126cc <acc_confprogram_patch_offset>
 801141a:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
 801141e:	2274      	movs	r2, #116	; 0x74
 8011420:	3b01      	subs	r3, #1
 8011422:	e9cd 2300 	strd	r2, r3, [sp]
 8011426:	4631      	mov	r1, r6
 8011428:	463b      	mov	r3, r7
 801142a:	4642      	mov	r2, r8
 801142c:	4628      	mov	r0, r5
 801142e:	f001 f94d 	bl	80126cc <acc_confprogram_patch_offset>
 8011432:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 8011436:	9301      	str	r3, [sp, #4]
 8011438:	2305      	movs	r3, #5
 801143a:	9300      	str	r3, [sp, #0]
 801143c:	4642      	mov	r2, r8
 801143e:	463b      	mov	r3, r7
 8011440:	4631      	mov	r1, r6
 8011442:	4628      	mov	r0, r5
 8011444:	f001 f942 	bl	80126cc <acc_confprogram_patch_offset>
 8011448:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 801144c:	015b      	lsls	r3, r3, #5
 801144e:	3b03      	subs	r3, #3
 8011450:	2263      	movs	r2, #99	; 0x63
 8011452:	e9cd 2300 	strd	r2, r3, [sp]
 8011456:	4631      	mov	r1, r6
 8011458:	463b      	mov	r3, r7
 801145a:	4642      	mov	r2, r8
 801145c:	4628      	mov	r0, r5
 801145e:	f001 f935 	bl	80126cc <acc_confprogram_patch_offset>
 8011462:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8011466:	015b      	lsls	r3, r3, #5
 8011468:	085b      	lsrs	r3, r3, #1
 801146a:	3b03      	subs	r3, #3
 801146c:	2264      	movs	r2, #100	; 0x64
 801146e:	e9cd 2300 	strd	r2, r3, [sp]
 8011472:	4631      	mov	r1, r6
 8011474:	463b      	mov	r3, r7
 8011476:	4642      	mov	r2, r8
 8011478:	4628      	mov	r0, r5
 801147a:	f001 f927 	bl	80126cc <acc_confprogram_patch_offset>
 801147e:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 8011482:	9301      	str	r3, [sp, #4]
 8011484:	23de      	movs	r3, #222	; 0xde
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	4642      	mov	r2, r8
 801148a:	463b      	mov	r3, r7
 801148c:	4631      	mov	r1, r6
 801148e:	4628      	mov	r0, r5
 8011490:	f001 f91c 	bl	80126cc <acc_confprogram_patch_offset>
 8011494:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8011498:	9301      	str	r3, [sp, #4]
 801149a:	23ee      	movs	r3, #238	; 0xee
 801149c:	9300      	str	r3, [sp, #0]
 801149e:	4642      	mov	r2, r8
 80114a0:	463b      	mov	r3, r7
 80114a2:	4631      	mov	r1, r6
 80114a4:	4628      	mov	r0, r5
 80114a6:	f001 f911 	bl	80126cc <acc_confprogram_patch_offset>
 80114aa:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 80114ae:	9301      	str	r3, [sp, #4]
 80114b0:	237e      	movs	r3, #126	; 0x7e
 80114b2:	9300      	str	r3, [sp, #0]
 80114b4:	4642      	mov	r2, r8
 80114b6:	463b      	mov	r3, r7
 80114b8:	4631      	mov	r1, r6
 80114ba:	4628      	mov	r0, r5
 80114bc:	f001 f906 	bl	80126cc <acc_confprogram_patch_offset>
 80114c0:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
 80114c4:	9301      	str	r3, [sp, #4]
 80114c6:	23e4      	movs	r3, #228	; 0xe4
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	4642      	mov	r2, r8
 80114cc:	463b      	mov	r3, r7
 80114ce:	4631      	mov	r1, r6
 80114d0:	4628      	mov	r0, r5
 80114d2:	f001 f8fb 	bl	80126cc <acc_confprogram_patch_offset>
 80114d6:	f8db 3098 	ldr.w	r3, [fp, #152]	; 0x98
 80114da:	9301      	str	r3, [sp, #4]
 80114dc:	237c      	movs	r3, #124	; 0x7c
 80114de:	9300      	str	r3, [sp, #0]
 80114e0:	4642      	mov	r2, r8
 80114e2:	463b      	mov	r3, r7
 80114e4:	4631      	mov	r1, r6
 80114e6:	4628      	mov	r0, r5
 80114e8:	f001 f8f0 	bl	80126cc <acc_confprogram_patch_offset>
 80114ec:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 80114f0:	9301      	str	r3, [sp, #4]
 80114f2:	23c9      	movs	r3, #201	; 0xc9
 80114f4:	9300      	str	r3, [sp, #0]
 80114f6:	4642      	mov	r2, r8
 80114f8:	463b      	mov	r3, r7
 80114fa:	4631      	mov	r1, r6
 80114fc:	4628      	mov	r0, r5
 80114fe:	f001 f8e5 	bl	80126cc <acc_confprogram_patch_offset>
 8011502:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 8011506:	9301      	str	r3, [sp, #4]
 8011508:	2384      	movs	r3, #132	; 0x84
 801150a:	9300      	str	r3, [sp, #0]
 801150c:	4642      	mov	r2, r8
 801150e:	463b      	mov	r3, r7
 8011510:	4631      	mov	r1, r6
 8011512:	4628      	mov	r0, r5
 8011514:	f001 f8da 	bl	80126cc <acc_confprogram_patch_offset>
 8011518:	f8db 30a4 	ldr.w	r3, [fp, #164]	; 0xa4
 801151c:	9301      	str	r3, [sp, #4]
 801151e:	237b      	movs	r3, #123	; 0x7b
 8011520:	9300      	str	r3, [sp, #0]
 8011522:	4642      	mov	r2, r8
 8011524:	463b      	mov	r3, r7
 8011526:	4631      	mov	r1, r6
 8011528:	4628      	mov	r0, r5
 801152a:	f001 f8cf 	bl	80126cc <acc_confprogram_patch_offset>
 801152e:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 8011532:	9301      	str	r3, [sp, #4]
 8011534:	23c7      	movs	r3, #199	; 0xc7
 8011536:	9300      	str	r3, [sp, #0]
 8011538:	4642      	mov	r2, r8
 801153a:	463b      	mov	r3, r7
 801153c:	4631      	mov	r1, r6
 801153e:	4628      	mov	r0, r5
 8011540:	f001 f8c4 	bl	80126cc <acc_confprogram_patch_offset>
 8011544:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
 8011548:	9301      	str	r3, [sp, #4]
 801154a:	2383      	movs	r3, #131	; 0x83
 801154c:	9300      	str	r3, [sp, #0]
 801154e:	4642      	mov	r2, r8
 8011550:	463b      	mov	r3, r7
 8011552:	4631      	mov	r1, r6
 8011554:	4628      	mov	r0, r5
 8011556:	f001 f8b9 	bl	80126cc <acc_confprogram_patch_offset>
 801155a:	f8db 30b0 	ldr.w	r3, [fp, #176]	; 0xb0
 801155e:	9301      	str	r3, [sp, #4]
 8011560:	23c8      	movs	r3, #200	; 0xc8
 8011562:	9300      	str	r3, [sp, #0]
 8011564:	4642      	mov	r2, r8
 8011566:	463b      	mov	r3, r7
 8011568:	4631      	mov	r1, r6
 801156a:	4628      	mov	r0, r5
 801156c:	f001 f8ae 	bl	80126cc <acc_confprogram_patch_offset>
 8011570:	f89b 4070 	ldrb.w	r4, [fp, #112]	; 0x70
 8011574:	2c00      	cmp	r4, #0
 8011576:	f43f ad31 	beq.w	8010fdc <acc_cpd_sparse_sweep_load_program+0x54>
 801157a:	23d7      	movs	r3, #215	; 0xd7
 801157c:	2400      	movs	r4, #0
 801157e:	e9cd 3400 	strd	r3, r4, [sp]
 8011582:	4642      	mov	r2, r8
 8011584:	463b      	mov	r3, r7
 8011586:	4631      	mov	r1, r6
 8011588:	4628      	mov	r0, r5
 801158a:	f001 f89f 	bl	80126cc <acc_confprogram_patch_offset>
 801158e:	23d8      	movs	r3, #216	; 0xd8
 8011590:	2201      	movs	r2, #1
 8011592:	e9cd 3200 	strd	r3, r2, [sp]
 8011596:	4631      	mov	r1, r6
 8011598:	463b      	mov	r3, r7
 801159a:	4642      	mov	r2, r8
 801159c:	4628      	mov	r0, r5
 801159e:	f001 f895 	bl	80126cc <acc_confprogram_patch_offset>
 80115a2:	f8db 306c 	ldr.w	r3, [fp, #108]	; 0x6c
 80115a6:	9403      	str	r4, [sp, #12]
 80115a8:	f103 0a01 	add.w	sl, r3, #1
 80115ac:	f04f 0c87 	mov.w	ip, #135	; 0x87
 80115b0:	46a9      	mov	r9, r5
 80115b2:	e018      	b.n	80115e6 <acc_cpd_sparse_sweep_load_program+0x65e>
 80115b4:	e9cd ce00 	strd	ip, lr, [sp]
 80115b8:	f001 f888 	bl	80126cc <acc_confprogram_patch_offset>
 80115bc:	4b56      	ldr	r3, [pc, #344]	; (8011718 <acc_cpd_sparse_sweep_load_program+0x790>)
 80115be:	9a03      	ldr	r2, [sp, #12]
 80115c0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80115c4:	e9cd 3200 	strd	r3, r2, [sp]
 80115c8:	463b      	mov	r3, r7
 80115ca:	4642      	mov	r2, r8
 80115cc:	4631      	mov	r1, r6
 80115ce:	4648      	mov	r0, r9
 80115d0:	f001 f87c 	bl	80126cc <acc_confprogram_patch_offset>
 80115d4:	9b03      	ldr	r3, [sp, #12]
 80115d6:	3401      	adds	r4, #1
 80115d8:	4453      	add	r3, sl
 80115da:	2c40      	cmp	r4, #64	; 0x40
 80115dc:	9303      	str	r3, [sp, #12]
 80115de:	d010      	beq.n	8011602 <acc_cpd_sparse_sweep_load_program+0x67a>
 80115e0:	4b4e      	ldr	r3, [pc, #312]	; (801171c <acc_cpd_sparse_sweep_load_program+0x794>)
 80115e2:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
 80115e6:	f8db 5060 	ldr.w	r5, [fp, #96]	; 0x60
 80115ea:	42a5      	cmp	r5, r4
 80115ec:	f04f 0e01 	mov.w	lr, #1
 80115f0:	463b      	mov	r3, r7
 80115f2:	4642      	mov	r2, r8
 80115f4:	4631      	mov	r1, r6
 80115f6:	4648      	mov	r0, r9
 80115f8:	d8dc      	bhi.n	80115b4 <acc_cpd_sparse_sweep_load_program+0x62c>
 80115fa:	2300      	movs	r3, #0
 80115fc:	e9cd c300 	strd	ip, r3, [sp]
 8011600:	e7e2      	b.n	80115c8 <acc_cpd_sparse_sweep_load_program+0x640>
 8011602:	464d      	mov	r5, r9
 8011604:	e509      	b.n	801101a <acc_cpd_sparse_sweep_load_program+0x92>
 8011606:	23e2      	movs	r3, #226	; 0xe2
 8011608:	2202      	movs	r2, #2
 801160a:	e9cd 3200 	strd	r3, r2, [sp]
 801160e:	4631      	mov	r1, r6
 8011610:	463b      	mov	r3, r7
 8011612:	4642      	mov	r2, r8
 8011614:	4628      	mov	r0, r5
 8011616:	f001 f859 	bl	80126cc <acc_confprogram_patch_offset>
 801161a:	b2a3      	uxth	r3, r4
 801161c:	3b08      	subs	r3, #8
 801161e:	24ff      	movs	r4, #255	; 0xff
 8011620:	fa04 f303 	lsl.w	r3, r4, r3
 8011624:	f403 447f 	and.w	r4, r3, #65280	; 0xff00
 8011628:	f04f 0908 	mov.w	r9, #8
 801162c:	e652      	b.n	80112d4 <acc_cpd_sparse_sweep_load_program+0x34c>
 801162e:	230f      	movs	r3, #15
 8011630:	2201      	movs	r2, #1
 8011632:	e9cd 3200 	strd	r3, r2, [sp]
 8011636:	4631      	mov	r1, r6
 8011638:	463b      	mov	r3, r7
 801163a:	4642      	mov	r2, r8
 801163c:	4628      	mov	r0, r5
 801163e:	f001 f845 	bl	80126cc <acc_confprogram_patch_offset>
 8011642:	f64f 7980 	movw	r9, #65408	; 0xff80
 8011646:	2311      	movs	r3, #17
 8011648:	e9cd 3900 	strd	r3, r9, [sp]
 801164c:	4642      	mov	r2, r8
 801164e:	463b      	mov	r3, r7
 8011650:	4631      	mov	r1, r6
 8011652:	4628      	mov	r0, r5
 8011654:	f001 f83a 	bl	80126cc <acc_confprogram_patch_offset>
 8011658:	f04f 0a07 	mov.w	sl, #7
 801165c:	2313      	movs	r3, #19
 801165e:	e9cd 3a00 	strd	r3, sl, [sp]
 8011662:	4642      	mov	r2, r8
 8011664:	463b      	mov	r3, r7
 8011666:	4631      	mov	r1, r6
 8011668:	4628      	mov	r0, r5
 801166a:	f001 f82f 	bl	80126cc <acc_confprogram_patch_offset>
 801166e:	2310      	movs	r3, #16
 8011670:	e9cd 3900 	strd	r3, r9, [sp]
 8011674:	4642      	mov	r2, r8
 8011676:	463b      	mov	r3, r7
 8011678:	4631      	mov	r1, r6
 801167a:	4628      	mov	r0, r5
 801167c:	f001 f826 	bl	80126cc <acc_confprogram_patch_offset>
 8011680:	2312      	movs	r3, #18
 8011682:	e9cd 3400 	strd	r3, r4, [sp]
 8011686:	4642      	mov	r2, r8
 8011688:	463b      	mov	r3, r7
 801168a:	4631      	mov	r1, r6
 801168c:	4628      	mov	r0, r5
 801168e:	f001 f81d 	bl	80126cc <acc_confprogram_patch_offset>
 8011692:	2314      	movs	r3, #20
 8011694:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8011698:	e9cd 3200 	strd	r3, r2, [sp]
 801169c:	4631      	mov	r1, r6
 801169e:	463b      	mov	r3, r7
 80116a0:	4642      	mov	r2, r8
 80116a2:	4628      	mov	r0, r5
 80116a4:	f001 f812 	bl	80126cc <acc_confprogram_patch_offset>
 80116a8:	2315      	movs	r3, #21
 80116aa:	e9cd 3a00 	strd	r3, sl, [sp]
 80116ae:	4642      	mov	r2, r8
 80116b0:	463b      	mov	r3, r7
 80116b2:	4631      	mov	r1, r6
 80116b4:	4628      	mov	r0, r5
 80116b6:	f001 f809 	bl	80126cc <acc_confprogram_patch_offset>
 80116ba:	230d      	movs	r3, #13
 80116bc:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80116c0:	e9cd 3200 	strd	r3, r2, [sp]
 80116c4:	4631      	mov	r1, r6
 80116c6:	463b      	mov	r3, r7
 80116c8:	4642      	mov	r2, r8
 80116ca:	4628      	mov	r0, r5
 80116cc:	f000 fffe 	bl	80126cc <acc_confprogram_patch_offset>
 80116d0:	230e      	movs	r3, #14
 80116d2:	e9cd 3a00 	strd	r3, sl, [sp]
 80116d6:	4642      	mov	r2, r8
 80116d8:	463b      	mov	r3, r7
 80116da:	4631      	mov	r1, r6
 80116dc:	4628      	mov	r0, r5
 80116de:	f000 fff5 	bl	80126cc <acc_confprogram_patch_offset>
 80116e2:	2316      	movs	r3, #22
 80116e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116e8:	e9cd 3200 	strd	r3, r2, [sp]
 80116ec:	4631      	mov	r1, r6
 80116ee:	463b      	mov	r3, r7
 80116f0:	4642      	mov	r2, r8
 80116f2:	4628      	mov	r0, r5
 80116f4:	f000 ffea 	bl	80126cc <acc_confprogram_patch_offset>
 80116f8:	2317      	movs	r3, #23
 80116fa:	e9cd 3a00 	strd	r3, sl, [sp]
 80116fe:	4642      	mov	r2, r8
 8011700:	463b      	mov	r3, r7
 8011702:	4631      	mov	r1, r6
 8011704:	4628      	mov	r0, r5
 8011706:	f000 ffe1 	bl	80126cc <acc_confprogram_patch_offset>
 801170a:	e5af      	b.n	801126c <acc_cpd_sparse_sweep_load_program+0x2e4>
 801170c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801170e:	b013      	add	sp, #76	; 0x4c
 8011710:	ecbd 8b02 	vpop	{d8}
 8011714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011718:	0801a874 	.word	0x0801a874
 801171c:	0801a8f4 	.word	0x0801a8f4

08011720 <acc_cpd_sparse_sweep_run_program>:
 8011720:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8011724:	f7fb bf20 	b.w	800d568 <acc_sensor_protocol_r2_run_program>

08011728 <acc_cpd_sparse_sweep_update_program>:
 8011728:	780b      	ldrb	r3, [r1, #0]
 801172a:	b90b      	cbnz	r3, 8011730 <acc_cpd_sparse_sweep_update_program+0x8>
 801172c:	2001      	movs	r0, #1
 801172e:	4770      	bx	lr
 8011730:	b500      	push	{lr}
 8011732:	b085      	sub	sp, #20
 8011734:	684b      	ldr	r3, [r1, #4]
 8011736:	9301      	str	r3, [sp, #4]
 8011738:	4a06      	ldr	r2, [pc, #24]	; (8011754 <acc_cpd_sparse_sweep_update_program+0x2c>)
 801173a:	9202      	str	r2, [sp, #8]
 801173c:	23ef      	movs	r3, #239	; 0xef
 801173e:	9300      	str	r3, [sp, #0]
 8011740:	4905      	ldr	r1, [pc, #20]	; (8011758 <acc_cpd_sparse_sweep_update_program+0x30>)
 8011742:	4b06      	ldr	r3, [pc, #24]	; (801175c <acc_cpd_sparse_sweep_update_program+0x34>)
 8011744:	2200      	movs	r2, #0
 8011746:	f001 f845 	bl	80127d4 <acc_confprogram_live_patch>
 801174a:	2001      	movs	r0, #1
 801174c:	b005      	add	sp, #20
 801174e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011752:	bf00      	nop
 8011754:	0800cb9d 	.word	0x0800cb9d
 8011758:	08016e90 	.word	0x08016e90
 801175c:	0801cbc4 	.word	0x0801cbc4

08011760 <acc_cpd_sweep_check_voffset_vslope>:
 8011760:	8802      	ldrh	r2, [r0, #0]
 8011762:	ed9f 5a29 	vldr	s10, [pc, #164]	; 8011808 <acc_cpd_sweep_check_voffset_vslope+0xa8>
 8011766:	ed9f 6a29 	vldr	s12, [pc, #164]	; 801180c <acc_cpd_sweep_check_voffset_vslope+0xac>
 801176a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8011810 <acc_cpd_sweep_check_voffset_vslope+0xb0>
 801176e:	ee07 2a90 	vmov	s15, r2
 8011772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011776:	4a27      	ldr	r2, [pc, #156]	; (8011814 <acc_cpd_sweep_check_voffset_vslope+0xb4>)
 8011778:	ee67 7a85 	vmul.f32	s15, s15, s10
 801177c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8011780:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011784:	8841      	ldrh	r1, [r0, #2]
 8011786:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801178a:	ee07 2a10 	vmov	s14, r2
 801178e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011792:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011796:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801179a:	b430      	push	{r4, r5}
 801179c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117a4:	ee17 2a90 	vmov	r2, s15
 80117a8:	b212      	sxth	r2, r2
 80117aa:	b294      	uxth	r4, r2
 80117ac:	f2a4 25ee 	subw	r5, r4, #750	; 0x2ee
 80117b0:	f5b5 7f06 	cmp.w	r5, #536	; 0x218
 80117b4:	d225      	bcs.n	8011802 <acc_cpd_sweep_check_voffset_vslope+0xa2>
 80117b6:	f5a4 7443 	sub.w	r4, r4, #780	; 0x30c
 80117ba:	f5b4 7fe6 	cmp.w	r4, #460	; 0x1cc
 80117be:	d802      	bhi.n	80117c6 <acc_cpd_sweep_check_voffset_vslope+0x66>
 80117c0:	2001      	movs	r0, #1
 80117c2:	bc30      	pop	{r4, r5}
 80117c4:	4770      	bx	lr
 80117c6:	ee07 1a90 	vmov	s15, r1
 80117ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80117ce:	ee07 2a90 	vmov	s15, r2
 80117d2:	ee27 7a05 	vmul.f32	s14, s14, s10
 80117d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117da:	ee37 7a65 	vsub.f32	s14, s14, s11
 80117de:	3364      	adds	r3, #100	; 0x64
 80117e0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80117e4:	bc30      	pop	{r4, r5}
 80117e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80117ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117f2:	ee17 2a90 	vmov	r2, s15
 80117f6:	b210      	sxth	r0, r2
 80117f8:	4298      	cmp	r0, r3
 80117fa:	bfcc      	ite	gt
 80117fc:	2000      	movgt	r0, #0
 80117fe:	2001      	movle	r0, #1
 8011800:	4770      	bx	lr
 8011802:	2000      	movs	r0, #0
 8011804:	bc30      	pop	{r4, r5}
 8011806:	4770      	bx	lr
 8011808:	37800000 	.word	0x37800000
 801180c:	3f99999a 	.word	0x3f99999a
 8011810:	447a0000 	.word	0x447a0000
 8011814:	0801d3e4 	.word	0x0801d3e4

08011818 <acc_cpd_sweep_check_count_bad_sweeps>:
 8011818:	4603      	mov	r3, r0
 801181a:	b130      	cbz	r0, 801182a <acc_cpd_sweep_check_count_bad_sweeps+0x12>
 801181c:	2000      	movs	r0, #0
 801181e:	1e5a      	subs	r2, r3, #1
 8011820:	4013      	ands	r3, r2
 8011822:	f100 0001 	add.w	r0, r0, #1
 8011826:	d1fa      	bne.n	801181e <acc_cpd_sweep_check_count_bad_sweeps+0x6>
 8011828:	4770      	bx	lr
 801182a:	4770      	bx	lr

0801182c <acc_sensor_reg_read>:
 801182c:	b530      	push	{r4, r5, lr}
 801182e:	b083      	sub	sp, #12
 8011830:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8011834:	4615      	mov	r5, r2
 8011836:	2400      	movs	r4, #0
 8011838:	f8ad 1000 	strh.w	r1, [sp]
 801183c:	2301      	movs	r3, #1
 801183e:	2203      	movs	r2, #3
 8011840:	4669      	mov	r1, sp
 8011842:	f8ad 4002 	strh.w	r4, [sp, #2]
 8011846:	f8ad 4004 	strh.w	r4, [sp, #4]
 801184a:	f7f7 fab9 	bl	8008dc0 <acc_rss_integration_sensor_device_transfer>
 801184e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011852:	802b      	strh	r3, [r5, #0]
 8011854:	b003      	add	sp, #12
 8011856:	bd30      	pop	{r4, r5, pc}

08011858 <acc_sensor_reg_write>:
 8011858:	b510      	push	{r4, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	f441 5480 	orr.w	r4, r1, #4096	; 0x1000
 8011860:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011864:	2300      	movs	r3, #0
 8011866:	2202      	movs	r2, #2
 8011868:	a901      	add	r1, sp, #4
 801186a:	f8ad 4004 	strh.w	r4, [sp, #4]
 801186e:	f7f7 faa7 	bl	8008dc0 <acc_rss_integration_sensor_device_transfer>
 8011872:	b002      	add	sp, #8
 8011874:	bd10      	pop	{r4, pc}
 8011876:	bf00      	nop

08011878 <acc_sensor_reg_field_write>:
 8011878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801187c:	b082      	sub	sp, #8
 801187e:	461e      	mov	r6, r3
 8011880:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8011884:	2700      	movs	r7, #0
 8011886:	468a      	mov	sl, r1
 8011888:	4691      	mov	r9, r2
 801188a:	4669      	mov	r1, sp
 801188c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8011890:	f8ad 3000 	strh.w	r3, [sp]
 8011894:	2203      	movs	r2, #3
 8011896:	2301      	movs	r3, #1
 8011898:	4680      	mov	r8, r0
 801189a:	f8ad 7002 	strh.w	r7, [sp, #2]
 801189e:	f8ad 7004 	strh.w	r7, [sp, #4]
 80118a2:	f7f7 fa8d 	bl	8008dc0 <acc_rss_integration_sensor_device_transfer>
 80118a6:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 80118aa:	fa04 f20a 	lsl.w	r2, r4, sl
 80118ae:	406a      	eors	r2, r5
 80118b0:	ea02 0209 	and.w	r2, r2, r9
 80118b4:	4055      	eors	r5, r2
 80118b6:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 80118ba:	463b      	mov	r3, r7
 80118bc:	4669      	mov	r1, sp
 80118be:	4640      	mov	r0, r8
 80118c0:	2202      	movs	r2, #2
 80118c2:	f8ad 6000 	strh.w	r6, [sp]
 80118c6:	f8ad 5002 	strh.w	r5, [sp, #2]
 80118ca:	f7f7 fa79 	bl	8008dc0 <acc_rss_integration_sensor_device_transfer>
 80118ce:	b002      	add	sp, #8
 80118d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080118d4 <acc_sensor_conf_read_instr>:
 80118d4:	b530      	push	{r4, r5, lr}
 80118d6:	b085      	sub	sp, #20
 80118d8:	2401      	movs	r4, #1
 80118da:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 80118de:	4623      	mov	r3, r4
 80118e0:	2500      	movs	r5, #0
 80118e2:	f8ad 1004 	strh.w	r1, [sp, #4]
 80118e6:	2205      	movs	r2, #5
 80118e8:	a901      	add	r1, sp, #4
 80118ea:	f8ad 4006 	strh.w	r4, [sp, #6]
 80118ee:	f8ad 5008 	strh.w	r5, [sp, #8]
 80118f2:	f8cd 500a 	str.w	r5, [sp, #10]
 80118f6:	f7f7 fa63 	bl	8008dc0 <acc_rss_integration_sensor_device_transfer>
 80118fa:	f10d 000a 	add.w	r0, sp, #10
 80118fe:	4622      	mov	r2, r4
 8011900:	4669      	mov	r1, sp
 8011902:	f7f8 fb7b 	bl	8009ffc <acc_utils_transfer_buffer_to_uint32>
 8011906:	9800      	ldr	r0, [sp, #0]
 8011908:	b005      	add	sp, #20
 801190a:	bd30      	pop	{r4, r5, pc}

0801190c <acc_sensor_diagnostics_r2_sensor_status>:
 801190c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011910:	b095      	sub	sp, #84	; 0x54
 8011912:	4604      	mov	r4, r0
 8011914:	f7f7 fac4 	bl	8008ea0 <acc_rss_integration_log_level>
 8011918:	2801      	cmp	r0, #1
 801191a:	d905      	bls.n	8011928 <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 801191c:	4b9c      	ldr	r3, [pc, #624]	; (8011b90 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 801191e:	4a9d      	ldr	r2, [pc, #628]	; (8011b94 <acc_sensor_diagnostics_r2_sensor_status+0x288>)
 8011920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011922:	499d      	ldr	r1, [pc, #628]	; (8011b98 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8011924:	2002      	movs	r0, #2
 8011926:	4798      	blx	r3
 8011928:	2201      	movs	r2, #1
 801192a:	21b2      	movs	r1, #178	; 0xb2
 801192c:	4620      	mov	r0, r4
 801192e:	af14      	add	r7, sp, #80	; 0x50
 8011930:	f7ff ff92 	bl	8011858 <acc_sensor_reg_write>
 8011934:	2300      	movs	r3, #0
 8011936:	f827 3d20 	strh.w	r3, [r7, #-32]!
 801193a:	f8df a254 	ldr.w	sl, [pc, #596]	; 8011b90 <acc_sensor_diagnostics_r2_sensor_status+0x284>
 801193e:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8011bc4 <acc_sensor_diagnostics_r2_sensor_status+0x2b8>
 8011942:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8011b98 <acc_sensor_diagnostics_r2_sensor_status+0x28c>
 8011946:	2564      	movs	r5, #100	; 0x64
 8011948:	e014      	b.n	8011974 <acc_sensor_diagnostics_r2_sensor_status+0x68>
 801194a:	f7f7 faa9 	bl	8008ea0 <acc_rss_integration_log_level>
 801194e:	2801      	cmp	r0, #1
 8011950:	4623      	mov	r3, r4
 8011952:	464a      	mov	r2, r9
 8011954:	4641      	mov	r1, r8
 8011956:	f04f 0002 	mov.w	r0, #2
 801195a:	d908      	bls.n	801196e <acc_sensor_diagnostics_r2_sensor_status+0x62>
 801195c:	f8bd c030 	ldrh.w	ip, [sp, #48]	; 0x30
 8011960:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8011964:	f8cd c000 	str.w	ip, [sp]
 8011968:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 801196c:	47b0      	blx	r6
 801196e:	3d01      	subs	r5, #1
 8011970:	b2ad      	uxth	r5, r5
 8011972:	b1c5      	cbz	r5, 80119a6 <acc_sensor_diagnostics_r2_sensor_status+0x9a>
 8011974:	463a      	mov	r2, r7
 8011976:	2111      	movs	r1, #17
 8011978:	4620      	mov	r0, r4
 801197a:	f7ff ff57 	bl	801182c <acc_sensor_reg_read>
 801197e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011982:	055b      	lsls	r3, r3, #21
 8011984:	d4e1      	bmi.n	801194a <acc_sensor_diagnostics_r2_sensor_status+0x3e>
 8011986:	f7f7 fa8b 	bl	8008ea0 <acc_rss_integration_log_level>
 801198a:	2801      	cmp	r0, #1
 801198c:	d90b      	bls.n	80119a6 <acc_sensor_diagnostics_r2_sensor_status+0x9a>
 801198e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011992:	497f      	ldr	r1, [pc, #508]	; (8011b90 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8011994:	4a81      	ldr	r2, [pc, #516]	; (8011b9c <acc_sensor_diagnostics_r2_sensor_status+0x290>)
 8011996:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8011998:	497f      	ldr	r1, [pc, #508]	; (8011b98 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 801199a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801199e:	9300      	str	r3, [sp, #0]
 80119a0:	2002      	movs	r0, #2
 80119a2:	4623      	mov	r3, r4
 80119a4:	47a8      	blx	r5
 80119a6:	aa14      	add	r2, sp, #80	; 0x50
 80119a8:	2500      	movs	r5, #0
 80119aa:	f822 5d2c 	strh.w	r5, [r2, #-44]!
 80119ae:	4629      	mov	r1, r5
 80119b0:	4620      	mov	r0, r4
 80119b2:	f7ff ff3b 	bl	801182c <acc_sensor_reg_read>
 80119b6:	aa14      	add	r2, sp, #80	; 0x50
 80119b8:	212a      	movs	r1, #42	; 0x2a
 80119ba:	f822 5d2a 	strh.w	r5, [r2, #-42]!
 80119be:	4620      	mov	r0, r4
 80119c0:	f7ff ff34 	bl	801182c <acc_sensor_reg_read>
 80119c4:	aa14      	add	r2, sp, #80	; 0x50
 80119c6:	4e76      	ldr	r6, [pc, #472]	; (8011ba0 <acc_sensor_diagnostics_r2_sensor_status+0x294>)
 80119c8:	f822 5d28 	strh.w	r5, [r2, #-40]!
 80119cc:	2128      	movs	r1, #40	; 0x28
 80119ce:	4620      	mov	r0, r4
 80119d0:	f7ff ff2c 	bl	801182c <acc_sensor_reg_read>
 80119d4:	f106 081e 	add.w	r8, r6, #30
 80119d8:	463d      	mov	r5, r7
 80119da:	2163      	movs	r1, #99	; 0x63
 80119dc:	e001      	b.n	80119e2 <acc_sensor_diagnostics_r2_sensor_status+0xd6>
 80119de:	f836 1f02 	ldrh.w	r1, [r6, #2]!
 80119e2:	462a      	mov	r2, r5
 80119e4:	4620      	mov	r0, r4
 80119e6:	f7ff ff21 	bl	801182c <acc_sensor_reg_read>
 80119ea:	45b0      	cmp	r8, r6
 80119ec:	f105 0502 	add.w	r5, r5, #2
 80119f0:	d1f5      	bne.n	80119de <acc_sensor_diagnostics_r2_sensor_status+0xd2>
 80119f2:	f7f7 fa55 	bl	8008ea0 <acc_rss_integration_log_level>
 80119f6:	2801      	cmp	r0, #1
 80119f8:	d91e      	bls.n	8011a38 <acc_sensor_diagnostics_r2_sensor_status+0x12c>
 80119fa:	4d65      	ldr	r5, [pc, #404]	; (8011b90 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 80119fc:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 8011a00:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8011a04:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8011a06:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8011a0a:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8011a0e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8011a12:	9107      	str	r1, [sp, #28]
 8011a14:	9206      	str	r2, [sp, #24]
 8011a16:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8011a1a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8011a1e:	9305      	str	r3, [sp, #20]
 8011a20:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011a24:	9300      	str	r3, [sp, #0]
 8011a26:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011a2a:	e9cd 0603 	strd	r0, r6, [sp, #12]
 8011a2e:	4623      	mov	r3, r4
 8011a30:	4a5c      	ldr	r2, [pc, #368]	; (8011ba4 <acc_sensor_diagnostics_r2_sensor_status+0x298>)
 8011a32:	4959      	ldr	r1, [pc, #356]	; (8011b98 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8011a34:	2002      	movs	r0, #2
 8011a36:	47a8      	blx	r5
 8011a38:	f7f7 fa32 	bl	8008ea0 <acc_rss_integration_log_level>
 8011a3c:	2801      	cmp	r0, #1
 8011a3e:	d91e      	bls.n	8011a7e <acc_sensor_diagnostics_r2_sensor_status+0x172>
 8011a40:	4d53      	ldr	r5, [pc, #332]	; (8011b90 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8011a42:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 8011a46:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8011a4a:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8011a4c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8011a50:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 8011a54:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 8011a58:	9107      	str	r1, [sp, #28]
 8011a5a:	9206      	str	r2, [sp, #24]
 8011a5c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8011a60:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8011a64:	9305      	str	r3, [sp, #20]
 8011a66:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011a6a:	9300      	str	r3, [sp, #0]
 8011a6c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011a70:	e9cd 0603 	strd	r0, r6, [sp, #12]
 8011a74:	4623      	mov	r3, r4
 8011a76:	4a4c      	ldr	r2, [pc, #304]	; (8011ba8 <acc_sensor_diagnostics_r2_sensor_status+0x29c>)
 8011a78:	4947      	ldr	r1, [pc, #284]	; (8011b98 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8011a7a:	2002      	movs	r0, #2
 8011a7c:	47a8      	blx	r5
 8011a7e:	463a      	mov	r2, r7
 8011a80:	2168      	movs	r1, #104	; 0x68
 8011a82:	4620      	mov	r0, r4
 8011a84:	f7ff fed2 	bl	801182c <acc_sensor_reg_read>
 8011a88:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8011a8c:	2167      	movs	r1, #103	; 0x67
 8011a8e:	4620      	mov	r0, r4
 8011a90:	f7ff fecc 	bl	801182c <acc_sensor_reg_read>
 8011a94:	aa0d      	add	r2, sp, #52	; 0x34
 8011a96:	2166      	movs	r1, #102	; 0x66
 8011a98:	4620      	mov	r0, r4
 8011a9a:	f7ff fec7 	bl	801182c <acc_sensor_reg_read>
 8011a9e:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 8011aa2:	2165      	movs	r1, #101	; 0x65
 8011aa4:	4620      	mov	r0, r4
 8011aa6:	f7ff fec1 	bl	801182c <acc_sensor_reg_read>
 8011aaa:	f7f7 f9f9 	bl	8008ea0 <acc_rss_integration_log_level>
 8011aae:	2801      	cmp	r0, #1
 8011ab0:	d912      	bls.n	8011ad8 <acc_sensor_diagnostics_r2_sensor_status+0x1cc>
 8011ab2:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8011ab6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8011aba:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8011abe:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011ac2:	4d33      	ldr	r5, [pc, #204]	; (8011b90 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8011ac4:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8011ac6:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8011aca:	e9cd 3200 	strd	r3, r2, [sp]
 8011ace:	4932      	ldr	r1, [pc, #200]	; (8011b98 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8011ad0:	4a36      	ldr	r2, [pc, #216]	; (8011bac <acc_sensor_diagnostics_r2_sensor_status+0x2a0>)
 8011ad2:	4623      	mov	r3, r4
 8011ad4:	2002      	movs	r0, #2
 8011ad6:	47a8      	blx	r5
 8011ad8:	aa14      	add	r2, sp, #80	; 0x50
 8011ada:	2500      	movs	r5, #0
 8011adc:	f822 5d26 	strh.w	r5, [r2, #-38]!
 8011ae0:	2153      	movs	r1, #83	; 0x53
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	f7ff fea2 	bl	801182c <acc_sensor_reg_read>
 8011ae8:	463a      	mov	r2, r7
 8011aea:	2140      	movs	r1, #64	; 0x40
 8011aec:	4620      	mov	r0, r4
 8011aee:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 8011af2:	f7ff fe9b 	bl	801182c <acc_sensor_reg_read>
 8011af6:	f7f7 f9d3 	bl	8008ea0 <acc_rss_integration_log_level>
 8011afa:	2801      	cmp	r0, #1
 8011afc:	d909      	bls.n	8011b12 <acc_sensor_diagnostics_r2_sensor_status+0x206>
 8011afe:	4a24      	ldr	r2, [pc, #144]	; (8011b90 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8011b00:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011b04:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8011b06:	4924      	ldr	r1, [pc, #144]	; (8011b98 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8011b08:	9300      	str	r3, [sp, #0]
 8011b0a:	4a29      	ldr	r2, [pc, #164]	; (8011bb0 <acc_sensor_diagnostics_r2_sensor_status+0x2a4>)
 8011b0c:	4623      	mov	r3, r4
 8011b0e:	2002      	movs	r0, #2
 8011b10:	47a8      	blx	r5
 8011b12:	f7f7 f9c5 	bl	8008ea0 <acc_rss_integration_log_level>
 8011b16:	2801      	cmp	r0, #1
 8011b18:	d90e      	bls.n	8011b38 <acc_sensor_diagnostics_r2_sensor_status+0x22c>
 8011b1a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011b1e:	491c      	ldr	r1, [pc, #112]	; (8011b90 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8011b20:	4a24      	ldr	r2, [pc, #144]	; (8011bb4 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>)
 8011b22:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8011b24:	491c      	ldr	r1, [pc, #112]	; (8011b98 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8011b26:	f003 0040 	and.w	r0, r3, #64	; 0x40
 8011b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b2e:	e9cd 3000 	strd	r3, r0, [sp]
 8011b32:	4623      	mov	r3, r4
 8011b34:	2002      	movs	r0, #2
 8011b36:	47a8      	blx	r5
 8011b38:	f7f7 f9b2 	bl	8008ea0 <acc_rss_integration_log_level>
 8011b3c:	2801      	cmp	r0, #1
 8011b3e:	d90e      	bls.n	8011b5e <acc_sensor_diagnostics_r2_sensor_status+0x252>
 8011b40:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011b44:	4912      	ldr	r1, [pc, #72]	; (8011b90 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8011b46:	4a1c      	ldr	r2, [pc, #112]	; (8011bb8 <acc_sensor_diagnostics_r2_sensor_status+0x2ac>)
 8011b48:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8011b4a:	4913      	ldr	r1, [pc, #76]	; (8011b98 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8011b4c:	f003 0010 	and.w	r0, r3, #16
 8011b50:	f003 0320 	and.w	r3, r3, #32
 8011b54:	e9cd 3000 	strd	r3, r0, [sp]
 8011b58:	4623      	mov	r3, r4
 8011b5a:	2002      	movs	r0, #2
 8011b5c:	47a8      	blx	r5
 8011b5e:	f7f7 f99f 	bl	8008ea0 <acc_rss_integration_log_level>
 8011b62:	2801      	cmp	r0, #1
 8011b64:	d90e      	bls.n	8011b84 <acc_sensor_diagnostics_r2_sensor_status+0x278>
 8011b66:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011b6a:	4909      	ldr	r1, [pc, #36]	; (8011b90 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8011b6c:	4a13      	ldr	r2, [pc, #76]	; (8011bbc <acc_sensor_diagnostics_r2_sensor_status+0x2b0>)
 8011b6e:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8011b70:	4909      	ldr	r1, [pc, #36]	; (8011b98 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8011b72:	f003 0004 	and.w	r0, r3, #4
 8011b76:	f003 0308 	and.w	r3, r3, #8
 8011b7a:	e9cd 3000 	strd	r3, r0, [sp]
 8011b7e:	4623      	mov	r3, r4
 8011b80:	2002      	movs	r0, #2
 8011b82:	47a8      	blx	r5
 8011b84:	4e0e      	ldr	r6, [pc, #56]	; (8011bc0 <acc_sensor_diagnostics_r2_sensor_status+0x2b4>)
 8011b86:	463d      	mov	r5, r7
 8011b88:	f106 081e 	add.w	r8, r6, #30
 8011b8c:	21f0      	movs	r1, #240	; 0xf0
 8011b8e:	e01d      	b.n	8011bcc <acc_sensor_diagnostics_r2_sensor_status+0x2c0>
 8011b90:	20001628 	.word	0x20001628
 8011b94:	0801a974 	.word	0x0801a974
 8011b98:	0801a9b4 	.word	0x0801a9b4
 8011b9c:	0801a9e8 	.word	0x0801a9e8
 8011ba0:	0801acf8 	.word	0x0801acf8
 8011ba4:	0801aa08 	.word	0x0801aa08
 8011ba8:	0801aa50 	.word	0x0801aa50
 8011bac:	0801aa9c 	.word	0x0801aa9c
 8011bb0:	0801aad0 	.word	0x0801aad0
 8011bb4:	0801aaf0 	.word	0x0801aaf0
 8011bb8:	0801ab1c 	.word	0x0801ab1c
 8011bbc:	0801ab50 	.word	0x0801ab50
 8011bc0:	0801ad18 	.word	0x0801ad18
 8011bc4:	0801a9c8 	.word	0x0801a9c8
 8011bc8:	f836 1f02 	ldrh.w	r1, [r6, #2]!
 8011bcc:	462a      	mov	r2, r5
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f7ff fe2c 	bl	801182c <acc_sensor_reg_read>
 8011bd4:	4546      	cmp	r6, r8
 8011bd6:	f105 0502 	add.w	r5, r5, #2
 8011bda:	d1f5      	bne.n	8011bc8 <acc_sensor_diagnostics_r2_sensor_status+0x2bc>
 8011bdc:	f7f7 f960 	bl	8008ea0 <acc_rss_integration_log_level>
 8011be0:	2801      	cmp	r0, #1
 8011be2:	f240 80b8 	bls.w	8011d56 <acc_sensor_diagnostics_r2_sensor_status+0x44a>
 8011be6:	4a5d      	ldr	r2, [pc, #372]	; (8011d5c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8011be8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011bec:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8011bee:	495c      	ldr	r1, [pc, #368]	; (8011d60 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 8011bf0:	9300      	str	r3, [sp, #0]
 8011bf2:	4a5c      	ldr	r2, [pc, #368]	; (8011d64 <acc_sensor_diagnostics_r2_sensor_status+0x458>)
 8011bf4:	4623      	mov	r3, r4
 8011bf6:	2002      	movs	r0, #2
 8011bf8:	47a8      	blx	r5
 8011bfa:	2501      	movs	r5, #1
 8011bfc:	f7f7 f950 	bl	8008ea0 <acc_rss_integration_log_level>
 8011c00:	2801      	cmp	r0, #1
 8011c02:	d90d      	bls.n	8011c20 <acc_sensor_diagnostics_r2_sensor_status+0x314>
 8011c04:	ab14      	add	r3, sp, #80	; 0x50
 8011c06:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 8011c0a:	4b54      	ldr	r3, [pc, #336]	; (8011d5c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8011c0c:	f832 2c20 	ldrh.w	r2, [r2, #-32]
 8011c10:	9200      	str	r2, [sp, #0]
 8011c12:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8011c14:	4a54      	ldr	r2, [pc, #336]	; (8011d68 <acc_sensor_diagnostics_r2_sensor_status+0x45c>)
 8011c16:	4952      	ldr	r1, [pc, #328]	; (8011d60 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 8011c18:	4623      	mov	r3, r4
 8011c1a:	2002      	movs	r0, #2
 8011c1c:	3501      	adds	r5, #1
 8011c1e:	47b0      	blx	r6
 8011c20:	f8df b138 	ldr.w	fp, [pc, #312]	; 8011d5c <acc_sensor_diagnostics_r2_sensor_status+0x450>
 8011c24:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8011d84 <acc_sensor_diagnostics_r2_sensor_status+0x478>
 8011c28:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8011d60 <acc_sensor_diagnostics_r2_sensor_status+0x454>
 8011c2c:	f04f 0801 	mov.w	r8, #1
 8011c30:	f7f7 f936 	bl	8008ea0 <acc_rss_integration_log_level>
 8011c34:	ab14      	add	r3, sp, #80	; 0x50
 8011c36:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 8011c3a:	2801      	cmp	r0, #1
 8011c3c:	4666      	mov	r6, ip
 8011c3e:	4623      	mov	r3, r4
 8011c40:	4652      	mov	r2, sl
 8011c42:	4649      	mov	r1, r9
 8011c44:	f04f 0002 	mov.w	r0, #2
 8011c48:	d90a      	bls.n	8011c60 <acc_sensor_diagnostics_r2_sensor_status+0x354>
 8011c4a:	f836 6c20 	ldrh.w	r6, [r6, #-32]
 8011c4e:	f83c cc1e 	ldrh.w	ip, [ip, #-30]
 8011c52:	f8cd 8000 	str.w	r8, [sp]
 8011c56:	e9cd 6c01 	strd	r6, ip, [sp, #4]
 8011c5a:	f8db 6034 	ldr.w	r6, [fp, #52]	; 0x34
 8011c5e:	47b0      	blx	r6
 8011c60:	f108 0801 	add.w	r8, r8, #1
 8011c64:	3502      	adds	r5, #2
 8011c66:	f1b8 0f08 	cmp.w	r8, #8
 8011c6a:	b2ed      	uxtb	r5, r5
 8011c6c:	d1e0      	bne.n	8011c30 <acc_sensor_diagnostics_r2_sensor_status+0x324>
 8011c6e:	aa14      	add	r2, sp, #80	; 0x50
 8011c70:	2500      	movs	r5, #0
 8011c72:	f822 5d24 	strh.w	r5, [r2, #-36]!
 8011c76:	219d      	movs	r1, #157	; 0x9d
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f7ff fdd7 	bl	801182c <acc_sensor_reg_read>
 8011c7e:	aa14      	add	r2, sp, #80	; 0x50
 8011c80:	2199      	movs	r1, #153	; 0x99
 8011c82:	f822 5d22 	strh.w	r5, [r2, #-34]!
 8011c86:	4620      	mov	r0, r4
 8011c88:	f7ff fdd0 	bl	801182c <acc_sensor_reg_read>
 8011c8c:	463a      	mov	r2, r7
 8011c8e:	2196      	movs	r1, #150	; 0x96
 8011c90:	4620      	mov	r0, r4
 8011c92:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 8011c96:	f7ff fdc9 	bl	801182c <acc_sensor_reg_read>
 8011c9a:	462a      	mov	r2, r5
 8011c9c:	21b2      	movs	r1, #178	; 0xb2
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	f7ff fdda 	bl	8011858 <acc_sensor_reg_write>
 8011ca4:	f7f7 f8fc 	bl	8008ea0 <acc_rss_integration_log_level>
 8011ca8:	2801      	cmp	r0, #1
 8011caa:	d90f      	bls.n	8011ccc <acc_sensor_diagnostics_r2_sensor_status+0x3c0>
 8011cac:	482b      	ldr	r0, [pc, #172]	; (8011d5c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8011cae:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8011cb2:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8011cb6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8011cba:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8011cbc:	9300      	str	r3, [sp, #0]
 8011cbe:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011cc2:	4623      	mov	r3, r4
 8011cc4:	4a29      	ldr	r2, [pc, #164]	; (8011d6c <acc_sensor_diagnostics_r2_sensor_status+0x460>)
 8011cc6:	4926      	ldr	r1, [pc, #152]	; (8011d60 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 8011cc8:	2002      	movs	r0, #2
 8011cca:	47a8      	blx	r5
 8011ccc:	f7f7 f8e8 	bl	8008ea0 <acc_rss_integration_log_level>
 8011cd0:	2801      	cmp	r0, #1
 8011cd2:	d909      	bls.n	8011ce8 <acc_sensor_diagnostics_r2_sensor_status+0x3dc>
 8011cd4:	4a21      	ldr	r2, [pc, #132]	; (8011d5c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8011cd6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8011cda:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8011cdc:	4920      	ldr	r1, [pc, #128]	; (8011d60 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	4a23      	ldr	r2, [pc, #140]	; (8011d70 <acc_sensor_diagnostics_r2_sensor_status+0x464>)
 8011ce2:	4623      	mov	r3, r4
 8011ce4:	2002      	movs	r0, #2
 8011ce6:	47a8      	blx	r5
 8011ce8:	f7f7 f8da 	bl	8008ea0 <acc_rss_integration_log_level>
 8011cec:	2801      	cmp	r0, #1
 8011cee:	d909      	bls.n	8011d04 <acc_sensor_diagnostics_r2_sensor_status+0x3f8>
 8011cf0:	4a1a      	ldr	r2, [pc, #104]	; (8011d5c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8011cf2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8011cf6:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8011cf8:	4919      	ldr	r1, [pc, #100]	; (8011d60 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 8011cfa:	9300      	str	r3, [sp, #0]
 8011cfc:	4a1d      	ldr	r2, [pc, #116]	; (8011d74 <acc_sensor_diagnostics_r2_sensor_status+0x468>)
 8011cfe:	4623      	mov	r3, r4
 8011d00:	2002      	movs	r0, #2
 8011d02:	47a8      	blx	r5
 8011d04:	f7f7 f8cc 	bl	8008ea0 <acc_rss_integration_log_level>
 8011d08:	2801      	cmp	r0, #1
 8011d0a:	d909      	bls.n	8011d20 <acc_sensor_diagnostics_r2_sensor_status+0x414>
 8011d0c:	4a13      	ldr	r2, [pc, #76]	; (8011d5c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8011d0e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8011d12:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8011d14:	4912      	ldr	r1, [pc, #72]	; (8011d60 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 8011d16:	9300      	str	r3, [sp, #0]
 8011d18:	4a17      	ldr	r2, [pc, #92]	; (8011d78 <acc_sensor_diagnostics_r2_sensor_status+0x46c>)
 8011d1a:	4623      	mov	r3, r4
 8011d1c:	2002      	movs	r0, #2
 8011d1e:	47a8      	blx	r5
 8011d20:	f7f7 f8be 	bl	8008ea0 <acc_rss_integration_log_level>
 8011d24:	2801      	cmp	r0, #1
 8011d26:	d909      	bls.n	8011d3c <acc_sensor_diagnostics_r2_sensor_status+0x430>
 8011d28:	4a0c      	ldr	r2, [pc, #48]	; (8011d5c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8011d2a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011d2e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8011d30:	490b      	ldr	r1, [pc, #44]	; (8011d60 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 8011d32:	9300      	str	r3, [sp, #0]
 8011d34:	4a11      	ldr	r2, [pc, #68]	; (8011d7c <acc_sensor_diagnostics_r2_sensor_status+0x470>)
 8011d36:	4623      	mov	r3, r4
 8011d38:	2002      	movs	r0, #2
 8011d3a:	47a8      	blx	r5
 8011d3c:	f7f7 f8b0 	bl	8008ea0 <acc_rss_integration_log_level>
 8011d40:	2801      	cmp	r0, #1
 8011d42:	d905      	bls.n	8011d50 <acc_sensor_diagnostics_r2_sensor_status+0x444>
 8011d44:	4b05      	ldr	r3, [pc, #20]	; (8011d5c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8011d46:	4a0e      	ldr	r2, [pc, #56]	; (8011d80 <acc_sensor_diagnostics_r2_sensor_status+0x474>)
 8011d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d4a:	4905      	ldr	r1, [pc, #20]	; (8011d60 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 8011d4c:	2002      	movs	r0, #2
 8011d4e:	4798      	blx	r3
 8011d50:	b015      	add	sp, #84	; 0x54
 8011d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d56:	2500      	movs	r5, #0
 8011d58:	e750      	b.n	8011bfc <acc_sensor_diagnostics_r2_sensor_status+0x2f0>
 8011d5a:	bf00      	nop
 8011d5c:	20001628 	.word	0x20001628
 8011d60:	0801a9b4 	.word	0x0801a9b4
 8011d64:	0801ab80 	.word	0x0801ab80
 8011d68:	0801aba8 	.word	0x0801aba8
 8011d6c:	0801abf0 	.word	0x0801abf0
 8011d70:	0801ac44 	.word	0x0801ac44
 8011d74:	0801ac68 	.word	0x0801ac68
 8011d78:	0801ac84 	.word	0x0801ac84
 8011d7c:	0801ac9c 	.word	0x0801ac9c
 8011d80:	0801acb8 	.word	0x0801acb8
 8011d84:	0801abc8 	.word	0x0801abc8

08011d88 <acc_alg_basic_saturation_check_u16>:
 8011d88:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8011df4 <acc_alg_basic_saturation_check_u16+0x6c>
 8011d8c:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8011df8 <acc_alg_basic_saturation_check_u16+0x70>
 8011d90:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8011d94:	ee80 7a26 	vdiv.f32	s14, s0, s13
 8011d98:	0849      	lsrs	r1, r1, #1
 8011d9a:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 8011d9e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011da2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011da6:	d023      	beq.n	8011df0 <acc_alg_basic_saturation_check_u16+0x68>
 8011da8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8011dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011db0:	ee17 3a10 	vmov	r3, s14
 8011db4:	b410      	push	{r4}
 8011db6:	b29c      	uxth	r4, r3
 8011db8:	ee17 3a90 	vmov	r3, s15
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	8803      	ldrh	r3, [r0, #0]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d911      	bls.n	8011de8 <acc_alg_basic_saturation_check_u16+0x60>
 8011dc4:	429c      	cmp	r4, r3
 8011dc6:	d20f      	bcs.n	8011de8 <acc_alg_basic_saturation_check_u16+0x60>
 8011dc8:	1e83      	subs	r3, r0, #2
 8011dca:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8011dce:	e005      	b.n	8011ddc <acc_alg_basic_saturation_check_u16+0x54>
 8011dd0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d207      	bcs.n	8011de8 <acc_alg_basic_saturation_check_u16+0x60>
 8011dd8:	42a3      	cmp	r3, r4
 8011dda:	d905      	bls.n	8011de8 <acc_alg_basic_saturation_check_u16+0x60>
 8011ddc:	4288      	cmp	r0, r1
 8011dde:	d1f7      	bne.n	8011dd0 <acc_alg_basic_saturation_check_u16+0x48>
 8011de0:	2000      	movs	r0, #0
 8011de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011de6:	4770      	bx	lr
 8011de8:	2001      	movs	r0, #1
 8011dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dee:	4770      	bx	lr
 8011df0:	4608      	mov	r0, r1
 8011df2:	4770      	bx	lr
 8011df4:	42c80000 	.word	0x42c80000
 8011df8:	477fff00 	.word	0x477fff00

08011dfc <acc_alg_basic_saturation_check_i16>:
 8011dfc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8011e6c <acc_alg_basic_saturation_check_i16+0x70>
 8011e00:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8011e70 <acc_alg_basic_saturation_check_i16+0x74>
 8011e04:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8011e74 <acc_alg_basic_saturation_check_i16+0x78>
 8011e08:	ee36 0ac0 	vsub.f32	s0, s13, s0
 8011e0c:	0849      	lsrs	r1, r1, #1
 8011e0e:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8011e12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011e16:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011e1a:	d024      	beq.n	8011e66 <acc_alg_basic_saturation_check_i16+0x6a>
 8011e1c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e24:	ee17 3a10 	vmov	r3, s14
 8011e28:	b410      	push	{r4}
 8011e2a:	b21c      	sxth	r4, r3
 8011e2c:	ee17 3a90 	vmov	r3, s15
 8011e30:	b21a      	sxth	r2, r3
 8011e32:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011e36:	429a      	cmp	r2, r3
 8011e38:	dd11      	ble.n	8011e5e <acc_alg_basic_saturation_check_i16+0x62>
 8011e3a:	429c      	cmp	r4, r3
 8011e3c:	da0f      	bge.n	8011e5e <acc_alg_basic_saturation_check_i16+0x62>
 8011e3e:	1e83      	subs	r3, r0, #2
 8011e40:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8011e44:	e005      	b.n	8011e52 <acc_alg_basic_saturation_check_i16+0x56>
 8011e46:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
 8011e4a:	4293      	cmp	r3, r2
 8011e4c:	da07      	bge.n	8011e5e <acc_alg_basic_saturation_check_i16+0x62>
 8011e4e:	42a3      	cmp	r3, r4
 8011e50:	dd05      	ble.n	8011e5e <acc_alg_basic_saturation_check_i16+0x62>
 8011e52:	4288      	cmp	r0, r1
 8011e54:	d1f7      	bne.n	8011e46 <acc_alg_basic_saturation_check_i16+0x4a>
 8011e56:	2000      	movs	r0, #0
 8011e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e5c:	4770      	bx	lr
 8011e5e:	2001      	movs	r0, #1
 8011e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e64:	4770      	bx	lr
 8011e66:	4608      	mov	r0, r1
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop
 8011e6c:	42c80000 	.word	0x42c80000
 8011e70:	c7000000 	.word	0xc7000000
 8011e74:	46fffe00 	.word	0x46fffe00

08011e78 <acc_alg_basic_exponential_smoothing_q3_12_complex>:
 8011e78:	b353      	cbz	r3, 8011ed0 <acc_alg_basic_exponential_smoothing_q3_12_complex+0x58>
 8011e7a:	b470      	push	{r4, r5, r6}
 8011e7c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011e80:	3002      	adds	r0, #2
 8011e82:	1c8e      	adds	r6, r1, #2
 8011e84:	f936 5c02 	ldrsh.w	r5, [r6, #-2]
 8011e88:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 8011e8c:	1b64      	subs	r4, r4, r5
 8011e8e:	fb02 f404 	mul.w	r4, r2, r4
 8011e92:	2c00      	cmp	r4, #0
 8011e94:	bfb8      	it	lt
 8011e96:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 8011e9a:	eb05 3424 	add.w	r4, r5, r4, asr #12
 8011e9e:	f826 4c02 	strh.w	r4, [r6, #-2]
 8011ea2:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011ea6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011eaa:	1b64      	subs	r4, r4, r5
 8011eac:	fb02 f404 	mul.w	r4, r2, r4
 8011eb0:	2c00      	cmp	r4, #0
 8011eb2:	bfb8      	it	lt
 8011eb4:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 8011eb8:	eb05 3424 	add.w	r4, r5, r4, asr #12
 8011ebc:	804c      	strh	r4, [r1, #2]
 8011ebe:	3104      	adds	r1, #4
 8011ec0:	428b      	cmp	r3, r1
 8011ec2:	f106 0604 	add.w	r6, r6, #4
 8011ec6:	f100 0004 	add.w	r0, r0, #4
 8011eca:	d1db      	bne.n	8011e84 <acc_alg_basic_exponential_smoothing_q3_12_complex+0xc>
 8011ecc:	bc70      	pop	{r4, r5, r6}
 8011ece:	4770      	bx	lr
 8011ed0:	4770      	bx	lr
 8011ed2:	bf00      	nop

08011ed4 <acc_alg_biquad_q3_12_lowpass_coeffs>:
 8011ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ed6:	eddf 7aad 	vldr	s15, [pc, #692]	; 801218c <acc_alg_biquad_q3_12_lowpass_coeffs+0x2b8>
 8011eda:	eeb0 0ac0 	vabs.f32	s0, s0
 8011ede:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee6:	ed2d 8b02 	vpush	{d8}
 8011eea:	4605      	mov	r5, r0
 8011eec:	460f      	mov	r7, r1
 8011eee:	4614      	mov	r4, r2
 8011ef0:	461e      	mov	r6, r3
 8011ef2:	f300 80bb 	bgt.w	801206c <acc_alg_biquad_q3_12_lowpass_coeffs+0x198>
 8011ef6:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8012190 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2bc>
 8011efa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011efe:	f001 ff87 	bl	8013e10 <roundf>
 8011f02:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8012194 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c0>
 8011f06:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8012198 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c4>
 8011f0a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011f0e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011f12:	b3b5      	cbz	r5, 8011f82 <acc_alg_biquad_q3_12_lowpass_coeffs+0xae>
 8011f14:	f7f5 fd18 	bl	8007948 <acc_alg_basic_math_restricted_tan_f32>
 8011f18:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 801219c <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c8>
 8011f1c:	eddf 7aa0 	vldr	s15, [pc, #640]	; 80121a0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2cc>
 8011f20:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011f28:	ee30 7a27 	vadd.f32	s14, s0, s15
 8011f2c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011f30:	ee27 0a00 	vmul.f32	s0, s14, s0
 8011f34:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011f38:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8011f3c:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8011f40:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8011f44:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011f48:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f50:	eef1 5ac7 	vsqrt.f32	s11, s14
 8011f54:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 8011f58:	d532      	bpl.n	8011fc0 <acc_alg_biquad_q3_12_lowpass_coeffs+0xec>
 8011f5a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f62:	f340 8086 	ble.w	8012072 <acc_alg_biquad_q3_12_lowpass_coeffs+0x19e>
 8011f66:	eddf 7a8f 	vldr	s15, [pc, #572]	; 80121a4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2d0>
 8011f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f7a:	ee17 3a90 	vmov	r3, s15
 8011f7e:	005a      	lsls	r2, r3, #1
 8011f80:	e083      	b.n	801208a <acc_alg_biquad_q3_12_lowpass_coeffs+0x1b6>
 8011f82:	f7f5 fce1 	bl	8007948 <acc_alg_basic_math_restricted_tan_f32>
 8011f86:	eddf 7a86 	vldr	s15, [pc, #536]	; 80121a0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2cc>
 8011f8a:	ee30 7a27 	vadd.f32	s14, s0, s15
 8011f8e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011f96:	ee27 0a00 	vmul.f32	s0, s14, s0
 8011f9a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011f9e:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8011fa2:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8011fa6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8011faa:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011fae:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fb6:	eef1 5ac7 	vsqrt.f32	s11, s14
 8011fba:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 8011fbe:	d458      	bmi.n	8012072 <acc_alg_biquad_q3_12_lowpass_coeffs+0x19e>
 8011fc0:	eddf 6a79 	vldr	s13, [pc, #484]	; 80121a8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2d4>
 8011fc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011fc8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fd8:	ee17 3a90 	vmov	r3, s15
 8011fdc:	fb03 f203 	mul.w	r2, r3, r3
 8011fe0:	f1c2 6280 	rsb	r2, r2, #67108864	; 0x4000000
 8011fe4:	ee07 2a90 	vmov	s15, r2
 8011fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011fec:	eef1 7ac7 	vsqrt.f32	s15, s14
 8011ff0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ffc:	ee17 2a90 	vmov	r2, s15
 8012000:	b99a      	cbnz	r2, 801202a <acc_alg_biquad_q3_12_lowpass_coeffs+0x156>
 8012002:	b137      	cbz	r7, 8012012 <acc_alg_biquad_q3_12_lowpass_coeffs+0x13e>
 8012004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012008:	807a      	strh	r2, [r7, #2]
 801200a:	80ba      	strh	r2, [r7, #4]
 801200c:	80fa      	strh	r2, [r7, #6]
 801200e:	813a      	strh	r2, [r7, #8]
 8012010:	803b      	strh	r3, [r7, #0]
 8012012:	b114      	cbz	r4, 801201a <acc_alg_biquad_q3_12_lowpass_coeffs+0x146>
 8012014:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8012018:	6023      	str	r3, [r4, #0]
 801201a:	4630      	mov	r0, r6
 801201c:	b116      	cbz	r6, 8012024 <acc_alg_biquad_q3_12_lowpass_coeffs+0x150>
 801201e:	2300      	movs	r3, #0
 8012020:	2000      	movs	r0, #0
 8012022:	6033      	str	r3, [r6, #0]
 8012024:	ecbd 8b02 	vpop	{d8}
 8012028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801202a:	b1cf      	cbz	r7, 8012060 <acc_alg_biquad_q3_12_lowpass_coeffs+0x18c>
 801202c:	b291      	uxth	r1, r2
 801202e:	f5c1 5c80 	rsb	ip, r1, #4096	; 0x1000
 8012032:	fa1f fc8c 	uxth.w	ip, ip
 8012036:	fa0f fe8c 	sxth.w	lr, ip
 801203a:	b298      	uxth	r0, r3
 801203c:	ebc1 31c1 	rsb	r1, r1, r1, lsl #15
 8012040:	f8a7 e000 	strh.w	lr, [r7]
 8012044:	f8a7 e004 	strh.w	lr, [r7, #4]
 8012048:	f5c2 5ec0 	rsb	lr, r2, #6144	; 0x1800
 801204c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8012050:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8012054:	ebc0 004e 	rsb	r0, r0, lr, lsl #1
 8012058:	f8a7 c002 	strh.w	ip, [r7, #2]
 801205c:	80f9      	strh	r1, [r7, #6]
 801205e:	8138      	strh	r0, [r7, #8]
 8012060:	bb3b      	cbnz	r3, 80120b2 <acc_alg_biquad_q3_12_lowpass_coeffs+0x1de>
 8012062:	2c00      	cmp	r4, #0
 8012064:	d0d9      	beq.n	801201a <acc_alg_biquad_q3_12_lowpass_coeffs+0x146>
 8012066:	2300      	movs	r3, #0
 8012068:	6023      	str	r3, [r4, #0]
 801206a:	e7d6      	b.n	801201a <acc_alg_biquad_q3_12_lowpass_coeffs+0x146>
 801206c:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80121ac <acc_alg_biquad_q3_12_lowpass_coeffs+0x2d8>
 8012070:	e74f      	b.n	8011f12 <acc_alg_biquad_q3_12_lowpass_coeffs+0x3e>
 8012072:	eddf 7a4f 	vldr	s15, [pc, #316]	; 80121b0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2dc>
 8012076:	ee67 7a27 	vmul.f32	s15, s14, s15
 801207a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801207e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012086:	ee17 2a90 	vmov	r2, s15
 801208a:	0090      	lsls	r0, r2, #2
 801208c:	fb02 f000 	mul.w	r0, r2, r0
 8012090:	f1c0 6080 	rsb	r0, r0, #67108864	; 0x4000000
 8012094:	ee07 0a90 	vmov	s15, r0
 8012098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801209c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80120a0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80120a4:	ee77 7a26 	vadd.f32	s15, s14, s13
 80120a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120ac:	ee17 3a90 	vmov	r3, s15
 80120b0:	e7a6      	b.n	8012000 <acc_alg_biquad_q3_12_lowpass_coeffs+0x12c>
 80120b2:	2c00      	cmp	r4, #0
 80120b4:	d059      	beq.n	801216a <acc_alg_biquad_q3_12_lowpass_coeffs+0x296>
 80120b6:	0091      	lsls	r1, r2, #2
 80120b8:	fb03 f003 	mul.w	r0, r3, r3
 80120bc:	fb02 0101 	mla	r1, r2, r1, r0
 80120c0:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80120c4:	f101 417c 	add.w	r1, r1, #4227858432	; 0xfc000000
 80120c8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80120cc:	0049      	lsls	r1, r1, #1
 80120ce:	fb02 f202 	mul.w	r2, r2, r2
 80120d2:	1a52      	subs	r2, r2, r1
 80120d4:	ee07 2a90 	vmov	s15, r2
 80120d8:	ee07 1a10 	vmov	s14, r1
 80120dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80120e4:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80120e8:	b354      	cbz	r4, 8012140 <acc_alg_biquad_q3_12_lowpass_coeffs+0x26c>
 80120ea:	2d00      	cmp	r5, #0
 80120ec:	d041      	beq.n	8012172 <acc_alg_biquad_q3_12_lowpass_coeffs+0x29e>
 80120ee:	eddf 6a31 	vldr	s13, [pc, #196]	; 80121b4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2e0>
 80120f2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80121a0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2cc>
 80120f6:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80121b8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2e4>
 80120fa:	ee78 6a26 	vadd.f32	s13, s16, s13
 80120fe:	ee26 7a87 	vmul.f32	s14, s13, s14
 8012102:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012106:	ee37 7a06 	vadd.f32	s14, s14, s12
 801210a:	eef1 6ac7 	vsqrt.f32	s13, s14
 801210e:	f5c3 5200 	rsb	r2, r3, #8192	; 0x2000
 8012112:	0052      	lsls	r2, r2, #1
 8012114:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8012118:	ee07 2a90 	vmov	s15, r2
 801211c:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8012120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012124:	eef1 6ac7 	vsqrt.f32	s13, s14
 8012128:	ee86 0a27 	vdiv.f32	s0, s12, s15
 801212c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012130:	f7f5 fc1a 	bl	8007968 <acc_alg_basic_math_restricted_atan_f32>
 8012134:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012198 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c4>
 8012138:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801213c:	ed84 0a00 	vstr	s0, [r4]
 8012140:	b1ae      	cbz	r6, 801216e <acc_alg_biquad_q3_12_lowpass_coeffs+0x29a>
 8012142:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80121bc <acc_alg_biquad_q3_12_lowpass_coeffs+0x2e8>
 8012146:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80121c0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ec>
 801214a:	ee28 7a27 	vmul.f32	s14, s16, s15
 801214e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8012152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012156:	2001      	movs	r0, #1
 8012158:	ee28 8a67 	vnmul.f32	s16, s16, s15
 801215c:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8012160:	ecbd 8b02 	vpop	{d8}
 8012164:	edc6 7a00 	vstr	s15, [r6]
 8012168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801216a:	2e00      	cmp	r6, #0
 801216c:	d1a3      	bne.n	80120b6 <acc_alg_biquad_q3_12_lowpass_coeffs+0x1e2>
 801216e:	2001      	movs	r0, #1
 8012170:	e758      	b.n	8012024 <acc_alg_biquad_q3_12_lowpass_coeffs+0x150>
 8012172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012176:	ee78 6a07 	vadd.f32	s13, s16, s14
 801217a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801217e:	ee36 7aa6 	vadd.f32	s14, s13, s13
 8012182:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012186:	ee37 7a06 	vadd.f32	s14, s14, s12
 801218a:	e7be      	b.n	801210a <acc_alg_biquad_q3_12_lowpass_coeffs+0x236>
 801218c:	3effffde 	.word	0x3effffde
 8012190:	48800000 	.word	0x48800000
 8012194:	36800000 	.word	0x36800000
 8012198:	40490fdb 	.word	0x40490fdb
 801219c:	3f9f8d77 	.word	0x3f9f8d77
 80121a0:	3fb504f3 	.word	0x3fb504f3
 80121a4:	45000000 	.word	0x45000000
 80121a8:	46000000 	.word	0x46000000
 80121ac:	3fc90fdb 	.word	0x3fc90fdb
 80121b0:	45800000 	.word	0x45800000
 80121b4:	3f15f61a 	.word	0x3f15f61a
 80121b8:	3f95f61a 	.word	0x3f95f61a
 80121bc:	4113c6ef 	.word	0x4113c6ef
 80121c0:	42a646e1 	.word	0x42a646e1

080121c4 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>:
 80121c4:	b570      	push	{r4, r5, r6, lr}
 80121c6:	2300      	movs	r3, #0
 80121c8:	b082      	sub	sp, #8
 80121ca:	4615      	mov	r5, r2
 80121cc:	460c      	mov	r4, r1
 80121ce:	4606      	mov	r6, r0
 80121d0:	f7ee f802 	bl	80001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>
 80121d4:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 80121d8:	3b01      	subs	r3, #1
 80121da:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80121de:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
 80121e2:	8852      	ldrh	r2, [r2, #2]
 80121e4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80121e8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80121ec:	9b01      	ldr	r3, [sp, #4]
 80121ee:	4630      	mov	r0, r6
 80121f0:	462a      	mov	r2, r5
 80121f2:	4621      	mov	r1, r4
 80121f4:	b002      	add	sp, #8
 80121f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121fa:	f7ed bfe9 	b.w	80001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>
 80121fe:	bf00      	nop

08012200 <acc_alg_iq_demodulation_q3_12_real>:
 8012200:	ee20 1a01 	vmul.f32	s2, s0, s2
 8012204:	ee60 0a20 	vmul.f32	s1, s0, s1
 8012208:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 801220c:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 8012210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012214:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012218:	ee31 1a67 	vsub.f32	s2, s2, s15
 801221c:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8012220:	eddf 7a26 	vldr	s15, [pc, #152]	; 80122bc <acc_alg_iq_demodulation_q3_12_real+0xbc>
 8012224:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80122c0 <acc_alg_iq_demodulation_q3_12_real+0xc0>
 8012228:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 801222c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012234:	eef4 0ae7 	vcmpe.f32	s1, s15
 8012238:	bfb4      	ite	lt
 801223a:	eeb0 6a66 	vmovlt.f32	s12, s13
 801223e:	eeb0 6a67 	vmovge.f32	s12, s15
 8012242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012246:	bfb8      	it	lt
 8012248:	eef0 7a66 	vmovlt.f32	s15, s13
 801224c:	ee31 1a06 	vadd.f32	s2, s2, s12
 8012250:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8012254:	ee21 1a07 	vmul.f32	s2, s2, s14
 8012258:	ee60 0a87 	vmul.f32	s1, s1, s14
 801225c:	b362      	cbz	r2, 80122b8 <acc_alg_iq_demodulation_q3_12_real+0xb8>
 801225e:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 8012262:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012266:	ee17 5a90 	vmov	r5, s15
 801226a:	eefc 7ae0 	vcvt.u32.f32	s15, s1
 801226e:	1e86      	subs	r6, r0, #2
 8012270:	ee17 8a90 	vmov	r8, s15
 8012274:	eb06 0942 	add.w	r9, r6, r2, lsl #1
 8012278:	1c8f      	adds	r7, r1, #2
 801227a:	4628      	mov	r0, r5
 801227c:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
 8012280:	f7f5 fb48 	bl	8007914 <acc_alg_basic_math_q3_12_cos>
 8012284:	fb04 f300 	mul.w	r3, r4, r0
 8012288:	2b00      	cmp	r3, #0
 801228a:	bfb8      	it	lt
 801228c:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 8012290:	131b      	asrs	r3, r3, #12
 8012292:	4628      	mov	r0, r5
 8012294:	f827 3c02 	strh.w	r3, [r7, #-2]
 8012298:	f7f5 fb28 	bl	80078ec <acc_alg_basic_math_q3_12_sin>
 801229c:	fb04 f000 	mul.w	r0, r4, r0
 80122a0:	2800      	cmp	r0, #0
 80122a2:	bfb8      	it	lt
 80122a4:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 80122a8:	1300      	asrs	r0, r0, #12
 80122aa:	45b1      	cmp	r9, r6
 80122ac:	4445      	add	r5, r8
 80122ae:	f827 0b04 	strh.w	r0, [r7], #4
 80122b2:	d1e2      	bne.n	801227a <acc_alg_iq_demodulation_q3_12_real+0x7a>
 80122b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122b8:	4770      	bx	lr
 80122ba:	bf00      	nop
 80122bc:	00000000 	.word	0x00000000
 80122c0:	4f800000 	.word	0x4f800000

080122c4 <acc_alg_iq_demodulation_q3_12_complex>:
 80122c4:	ee20 1a01 	vmul.f32	s2, s0, s2
 80122c8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80122cc:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 80122d0:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 80122d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122d8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80122dc:	ee31 1a67 	vsub.f32	s2, s2, s15
 80122e0:	ee70 0ac0 	vsub.f32	s1, s1, s0
 80122e4:	eddf 7a32 	vldr	s15, [pc, #200]	; 80123b0 <acc_alg_iq_demodulation_q3_12_complex+0xec>
 80122e8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80123b4 <acc_alg_iq_demodulation_q3_12_complex+0xf0>
 80122ec:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 80122f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80122f8:	eef4 0ae7 	vcmpe.f32	s1, s15
 80122fc:	bfb4      	ite	lt
 80122fe:	eeb0 6a66 	vmovlt.f32	s12, s13
 8012302:	eeb0 6a67 	vmovge.f32	s12, s15
 8012306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801230a:	bfb8      	it	lt
 801230c:	eef0 7a66 	vmovlt.f32	s15, s13
 8012310:	ee31 1a06 	vadd.f32	s2, s2, s12
 8012314:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8012318:	ee21 1a07 	vmul.f32	s2, s2, s14
 801231c:	ee60 0a87 	vmul.f32	s1, s1, s14
 8012320:	2900      	cmp	r1, #0
 8012322:	d043      	beq.n	80123ac <acc_alg_iq_demodulation_q3_12_complex+0xe8>
 8012324:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 8012328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801232c:	ee17 8a90 	vmov	r8, s15
 8012330:	eefc 7ae0 	vcvt.u32.f32	s15, s1
 8012334:	4607      	mov	r7, r0
 8012336:	ee17 5a90 	vmov	r5, s15
 801233a:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 801233e:	f100 0902 	add.w	r9, r0, #2
 8012342:	4640      	mov	r0, r8
 8012344:	f9b7 b002 	ldrsh.w	fp, [r7, #2]
 8012348:	f939 ac02 	ldrsh.w	sl, [r9, #-2]
 801234c:	f7f5 fae2 	bl	8007914 <acc_alg_basic_math_q3_12_cos>
 8012350:	4604      	mov	r4, r0
 8012352:	4640      	mov	r0, r8
 8012354:	f7f5 faca 	bl	80078ec <acc_alg_basic_math_q3_12_sin>
 8012358:	fb0a f204 	mul.w	r2, sl, r4
 801235c:	fb0b f100 	mul.w	r1, fp, r0
 8012360:	2a00      	cmp	r2, #0
 8012362:	fb04 f30b 	mul.w	r3, r4, fp
 8012366:	bfb8      	it	lt
 8012368:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 801236c:	2900      	cmp	r1, #0
 801236e:	fb0a f000 	mul.w	r0, sl, r0
 8012372:	bfb8      	it	lt
 8012374:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 8012378:	2b00      	cmp	r3, #0
 801237a:	bfb8      	it	lt
 801237c:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 8012380:	2800      	cmp	r0, #0
 8012382:	bfb8      	it	lt
 8012384:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 8012388:	1312      	asrs	r2, r2, #12
 801238a:	131b      	asrs	r3, r3, #12
 801238c:	eba2 3221 	sub.w	r2, r2, r1, asr #12
 8012390:	eb03 3320 	add.w	r3, r3, r0, asr #12
 8012394:	f829 2c02 	strh.w	r2, [r9, #-2]
 8012398:	3704      	adds	r7, #4
 801239a:	f827 3c02 	strh.w	r3, [r7, #-2]
 801239e:	42be      	cmp	r6, r7
 80123a0:	44a8      	add	r8, r5
 80123a2:	f109 0904 	add.w	r9, r9, #4
 80123a6:	d1cc      	bne.n	8012342 <acc_alg_iq_demodulation_q3_12_complex+0x7e>
 80123a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ac:	4770      	bx	lr
 80123ae:	bf00      	nop
 80123b0:	00000000 	.word	0x00000000
 80123b4:	4f800000 	.word	0x4f800000

080123b8 <acc_alg_phase_estimation_q3_12>:
 80123b8:	2a01      	cmp	r2, #1
 80123ba:	b4f0      	push	{r4, r5, r6, r7}
 80123bc:	d923      	bls.n	8012406 <acc_alg_phase_estimation_q3_12+0x4e>
 80123be:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 80123c2:	f1ac 0c04 	sub.w	ip, ip, #4
 80123c6:	4603      	mov	r3, r0
 80123c8:	f9b3 7000 	ldrsh.w	r7, [r3]
 80123cc:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80123d0:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80123d4:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 80123d8:	1bed      	subs	r5, r5, r7
 80123da:	fb01 f505 	mul.w	r5, r1, r5
 80123de:	1ba4      	subs	r4, r4, r6
 80123e0:	2d00      	cmp	r5, #0
 80123e2:	fb01 f404 	mul.w	r4, r1, r4
 80123e6:	bfb8      	it	lt
 80123e8:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 80123ec:	2c00      	cmp	r4, #0
 80123ee:	bfb8      	it	lt
 80123f0:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 80123f4:	eb07 3525 	add.w	r5, r7, r5, asr #12
 80123f8:	eb06 3424 	add.w	r4, r6, r4, asr #12
 80123fc:	809d      	strh	r5, [r3, #4]
 80123fe:	80dc      	strh	r4, [r3, #6]
 8012400:	3304      	adds	r3, #4
 8012402:	459c      	cmp	ip, r3
 8012404:	d1e0      	bne.n	80123c8 <acc_alg_phase_estimation_q3_12+0x10>
 8012406:	1e53      	subs	r3, r2, #1
 8012408:	d027      	beq.n	801245a <acc_alg_phase_estimation_q3_12+0xa2>
 801240a:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 801240e:	f930 6023 	ldrsh.w	r6, [r0, r3, lsl #2]
 8012412:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 8012416:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801241a:	3004      	adds	r0, #4
 801241c:	f932 4c08 	ldrsh.w	r4, [r2, #-8]
 8012420:	1ba4      	subs	r4, r4, r6
 8012422:	fb01 f304 	mul.w	r3, r1, r4
 8012426:	f932 4c06 	ldrsh.w	r4, [r2, #-6]
 801242a:	1b64      	subs	r4, r4, r5
 801242c:	2b00      	cmp	r3, #0
 801242e:	fb01 f404 	mul.w	r4, r1, r4
 8012432:	bfb8      	it	lt
 8012434:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 8012438:	2c00      	cmp	r4, #0
 801243a:	bfb8      	it	lt
 801243c:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 8012440:	eb06 3323 	add.w	r3, r6, r3, asr #12
 8012444:	eb05 3524 	add.w	r5, r5, r4, asr #12
 8012448:	b21e      	sxth	r6, r3
 801244a:	b22d      	sxth	r5, r5
 801244c:	f822 6c08 	strh.w	r6, [r2, #-8]
 8012450:	f822 5c06 	strh.w	r5, [r2, #-6]
 8012454:	3a04      	subs	r2, #4
 8012456:	4282      	cmp	r2, r0
 8012458:	d1e0      	bne.n	801241c <acc_alg_phase_estimation_q3_12+0x64>
 801245a:	bcf0      	pop	{r4, r5, r6, r7}
 801245c:	4770      	bx	lr
 801245e:	bf00      	nop

08012460 <acc_alg_power_bins>:
 8012460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012464:	2900      	cmp	r1, #0
 8012466:	d03d      	beq.n	80124e4 <acc_alg_power_bins+0x84>
 8012468:	1e87      	subs	r7, r0, #2
 801246a:	004c      	lsls	r4, r1, #1
 801246c:	eb04 0e07 	add.w	lr, r4, r7
 8012470:	46bc      	mov	ip, r7
 8012472:	2500      	movs	r5, #0
 8012474:	f83c 6f02 	ldrh.w	r6, [ip, #2]!
 8012478:	45f4      	cmp	ip, lr
 801247a:	4435      	add	r5, r6
 801247c:	d1fa      	bne.n	8012474 <acc_alg_power_bins+0x14>
 801247e:	fbb5 f5f1 	udiv	r5, r5, r1
 8012482:	b2ae      	uxth	r6, r5
 8012484:	f837 5f02 	ldrh.w	r5, [r7, #2]!
 8012488:	42b5      	cmp	r5, r6
 801248a:	bf8c      	ite	hi
 801248c:	1bad      	subhi	r5, r5, r6
 801248e:	1b75      	subls	r5, r6, r5
 8012490:	b2ad      	uxth	r5, r5
 8012492:	45bc      	cmp	ip, r7
 8012494:	803d      	strh	r5, [r7, #0]
 8012496:	d1f5      	bne.n	8012484 <acc_alg_power_bins+0x24>
 8012498:	b313      	cbz	r3, 80124e0 <acc_alg_power_bins+0x80>
 801249a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 801249e:	e00b      	b.n	80124b8 <acc_alg_power_bins+0x58>
 80124a0:	8014      	strh	r4, [r2, #0]
 80124a2:	46a6      	mov	lr, r4
 80124a4:	3b01      	subs	r3, #1
 80124a6:	4470      	add	r0, lr
 80124a8:	eba1 0104 	sub.w	r1, r1, r4
 80124ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80124b0:	f102 0202 	add.w	r2, r2, #2
 80124b4:	d014      	beq.n	80124e0 <acc_alg_power_bins+0x80>
 80124b6:	004c      	lsls	r4, r1, #1
 80124b8:	441c      	add	r4, r3
 80124ba:	fbb4 f4fc 	udiv	r4, r4, ip
 80124be:	2c00      	cmp	r4, #0
 80124c0:	d0ee      	beq.n	80124a0 <acc_alg_power_bins+0x40>
 80124c2:	1e85      	subs	r5, r0, #2
 80124c4:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 80124c8:	eb05 080e 	add.w	r8, r5, lr
 80124cc:	2600      	movs	r6, #0
 80124ce:	f835 7f02 	ldrh.w	r7, [r5, #2]!
 80124d2:	45a8      	cmp	r8, r5
 80124d4:	443e      	add	r6, r7
 80124d6:	d1fa      	bne.n	80124ce <acc_alg_power_bins+0x6e>
 80124d8:	fbb6 f6f4 	udiv	r6, r6, r4
 80124dc:	8016      	strh	r6, [r2, #0]
 80124de:	e7e1      	b.n	80124a4 <acc_alg_power_bins+0x44>
 80124e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124e4:	2124      	movs	r1, #36	; 0x24
 80124e6:	4801      	ldr	r0, [pc, #4]	; (80124ec <acc_alg_power_bins+0x8c>)
 80124e8:	f7f5 ff68 	bl	80083bc <acc_assert_fail>
 80124ec:	0801d3ac 	.word	0x0801d3ac

080124f0 <acc_confprogram_modify_bin_sensor>:
 80124f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124f4:	b083      	sub	sp, #12
 80124f6:	e9dd 460a 	ldrd	r4, r6, [sp, #40]	; 0x28
 80124fa:	461d      	mov	r5, r3
 80124fc:	2301      	movs	r3, #1
 80124fe:	40ab      	lsls	r3, r5
 8012500:	42a3      	cmp	r3, r4
 8012502:	4688      	mov	r8, r1
 8012504:	d916      	bls.n	8012534 <acc_confprogram_modify_bin_sensor+0x44>
 8012506:	4691      	mov	r9, r2
 8012508:	4607      	mov	r7, r0
 801250a:	f1c5 0520 	rsb	r5, r5, #32
 801250e:	f7ff f9e1 	bl	80118d4 <acc_sensor_conf_read_instr>
 8012512:	f04f 31ff 	mov.w	r1, #4294967295
 8012516:	40e9      	lsrs	r1, r5
 8012518:	fa01 f109 	lsl.w	r1, r1, r9
 801251c:	ea20 0001 	bic.w	r0, r0, r1
 8012520:	fa04 f209 	lsl.w	r2, r4, r9
 8012524:	4302      	orrs	r2, r0
 8012526:	4641      	mov	r1, r8
 8012528:	4638      	mov	r0, r7
 801252a:	4633      	mov	r3, r6
 801252c:	b003      	add	sp, #12
 801252e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012532:	4718      	bx	r3
 8012534:	4a06      	ldr	r2, [pc, #24]	; (8012550 <acc_confprogram_modify_bin_sensor+0x60>)
 8012536:	9400      	str	r4, [sp, #0]
 8012538:	3b01      	subs	r3, #1
 801253a:	9301      	str	r3, [sp, #4]
 801253c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 801253e:	4a05      	ldr	r2, [pc, #20]	; (8012554 <acc_confprogram_modify_bin_sensor+0x64>)
 8012540:	460b      	mov	r3, r1
 8012542:	2000      	movs	r0, #0
 8012544:	4904      	ldr	r1, [pc, #16]	; (8012558 <acc_confprogram_modify_bin_sensor+0x68>)
 8012546:	47a0      	blx	r4
 8012548:	2129      	movs	r1, #41	; 0x29
 801254a:	4804      	ldr	r0, [pc, #16]	; (801255c <acc_confprogram_modify_bin_sensor+0x6c>)
 801254c:	f7f5 ff36 	bl	80083bc <acc_assert_fail>
 8012550:	20001628 	.word	0x20001628
 8012554:	0801d47c 	.word	0x0801d47c
 8012558:	0801d4b4 	.word	0x0801d4b4
 801255c:	0801d4c0 	.word	0x0801d4c0

08012560 <acc_confprogram_modify_bin>:
 8012560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012564:	b085      	sub	sp, #20
 8012566:	f04f 0801 	mov.w	r8, #1
 801256a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801256c:	fa08 f403 	lsl.w	r4, r8, r3
 8012570:	42b4      	cmp	r4, r6
 8012572:	d91f      	bls.n	80125b4 <acc_confprogram_modify_bin+0x54>
 8012574:	461d      	mov	r5, r3
 8012576:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 801257a:	4691      	mov	r9, r2
 801257c:	4638      	mov	r0, r7
 801257e:	4642      	mov	r2, r8
 8012580:	a902      	add	r1, sp, #8
 8012582:	f1c5 0420 	rsb	r4, r5, #32
 8012586:	f04f 35ff 	mov.w	r5, #4294967295
 801258a:	f7f7 fd37 	bl	8009ffc <acc_utils_transfer_buffer_to_uint32>
 801258e:	40e5      	lsrs	r5, r4
 8012590:	9c02      	ldr	r4, [sp, #8]
 8012592:	fa05 f509 	lsl.w	r5, r5, r9
 8012596:	a804      	add	r0, sp, #16
 8012598:	fa06 f609 	lsl.w	r6, r6, r9
 801259c:	ea24 0405 	bic.w	r4, r4, r5
 80125a0:	4334      	orrs	r4, r6
 80125a2:	f840 4d04 	str.w	r4, [r0, #-4]!
 80125a6:	4639      	mov	r1, r7
 80125a8:	4642      	mov	r2, r8
 80125aa:	f7f7 fd19 	bl	8009fe0 <acc_utils_uint32_to_transfer_buffer>
 80125ae:	b005      	add	sp, #20
 80125b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125b4:	4a06      	ldr	r2, [pc, #24]	; (80125d0 <acc_confprogram_modify_bin+0x70>)
 80125b6:	9600      	str	r6, [sp, #0]
 80125b8:	3c01      	subs	r4, #1
 80125ba:	9401      	str	r4, [sp, #4]
 80125bc:	460b      	mov	r3, r1
 80125be:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80125c0:	4904      	ldr	r1, [pc, #16]	; (80125d4 <acc_confprogram_modify_bin+0x74>)
 80125c2:	4a05      	ldr	r2, [pc, #20]	; (80125d8 <acc_confprogram_modify_bin+0x78>)
 80125c4:	2000      	movs	r0, #0
 80125c6:	47a0      	blx	r4
 80125c8:	2139      	movs	r1, #57	; 0x39
 80125ca:	4804      	ldr	r0, [pc, #16]	; (80125dc <acc_confprogram_modify_bin+0x7c>)
 80125cc:	f7f5 fef6 	bl	80083bc <acc_assert_fail>
 80125d0:	20001628 	.word	0x20001628
 80125d4:	0801d4b4 	.word	0x0801d4b4
 80125d8:	0801d444 	.word	0x0801d444
 80125dc:	0801d4c0 	.word	0x0801d4c0

080125e0 <acc_confprogram_modify_runif_sensor>:
 80125e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125e4:	4616      	mov	r6, r2
 80125e6:	b082      	sub	sp, #8
 80125e8:	f851 4026 	ldr.w	r4, [r1, r6, lsl #2]
 80125ec:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80125f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80125f2:	f024 040f 	bic.w	r4, r4, #15
 80125f6:	4605      	mov	r5, r0
 80125f8:	b1ba      	cbz	r2, 801262a <acc_confprogram_modify_runif_sensor+0x4a>
 80125fa:	4698      	mov	r8, r3
 80125fc:	431c      	orrs	r4, r3
 80125fe:	f7f6 fc4f 	bl	8008ea0 <acc_rss_integration_log_level>
 8012602:	2803      	cmp	r0, #3
 8012604:	d909      	bls.n	801261a <acc_confprogram_modify_runif_sensor+0x3a>
 8012606:	4b0f      	ldr	r3, [pc, #60]	; (8012644 <acc_confprogram_modify_runif_sensor+0x64>)
 8012608:	f8cd 8000 	str.w	r8, [sp]
 801260c:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8012610:	4a0d      	ldr	r2, [pc, #52]	; (8012648 <acc_confprogram_modify_runif_sensor+0x68>)
 8012612:	490e      	ldr	r1, [pc, #56]	; (801264c <acc_confprogram_modify_runif_sensor+0x6c>)
 8012614:	4633      	mov	r3, r6
 8012616:	2004      	movs	r0, #4
 8012618:	47c0      	blx	r8
 801261a:	4622      	mov	r2, r4
 801261c:	4631      	mov	r1, r6
 801261e:	4628      	mov	r0, r5
 8012620:	463b      	mov	r3, r7
 8012622:	b002      	add	sp, #8
 8012624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012628:	4718      	bx	r3
 801262a:	f7f6 fc39 	bl	8008ea0 <acc_rss_integration_log_level>
 801262e:	2803      	cmp	r0, #3
 8012630:	d9f3      	bls.n	801261a <acc_confprogram_modify_runif_sensor+0x3a>
 8012632:	4b04      	ldr	r3, [pc, #16]	; (8012644 <acc_confprogram_modify_runif_sensor+0x64>)
 8012634:	4a06      	ldr	r2, [pc, #24]	; (8012650 <acc_confprogram_modify_runif_sensor+0x70>)
 8012636:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801263a:	4904      	ldr	r1, [pc, #16]	; (801264c <acc_confprogram_modify_runif_sensor+0x6c>)
 801263c:	4633      	mov	r3, r6
 801263e:	2004      	movs	r0, #4
 8012640:	47c0      	blx	r8
 8012642:	e7ea      	b.n	801261a <acc_confprogram_modify_runif_sensor+0x3a>
 8012644:	20001628 	.word	0x20001628
 8012648:	0801d528 	.word	0x0801d528
 801264c:	0801d4b4 	.word	0x0801d4b4
 8012650:	0801d560 	.word	0x0801d560

08012654 <acc_confprogram_modify_runif>:
 8012654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012656:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 801265a:	b085      	sub	sp, #20
 801265c:	4615      	mov	r5, r2
 801265e:	460e      	mov	r6, r1
 8012660:	2201      	movs	r2, #1
 8012662:	4620      	mov	r0, r4
 8012664:	a902      	add	r1, sp, #8
 8012666:	461f      	mov	r7, r3
 8012668:	f7f7 fcc8 	bl	8009ffc <acc_utils_transfer_buffer_to_uint32>
 801266c:	9a02      	ldr	r2, [sp, #8]
 801266e:	f022 020f 	bic.w	r2, r2, #15
 8012672:	9203      	str	r2, [sp, #12]
 8012674:	b1a7      	cbz	r7, 80126a0 <acc_confprogram_modify_runif+0x4c>
 8012676:	4332      	orrs	r2, r6
 8012678:	9203      	str	r2, [sp, #12]
 801267a:	f7f6 fc11 	bl	8008ea0 <acc_rss_integration_log_level>
 801267e:	2803      	cmp	r0, #3
 8012680:	d907      	bls.n	8012692 <acc_confprogram_modify_runif+0x3e>
 8012682:	4a0e      	ldr	r2, [pc, #56]	; (80126bc <acc_confprogram_modify_runif+0x68>)
 8012684:	9600      	str	r6, [sp, #0]
 8012686:	086b      	lsrs	r3, r5, #1
 8012688:	490d      	ldr	r1, [pc, #52]	; (80126c0 <acc_confprogram_modify_runif+0x6c>)
 801268a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 801268c:	4a0d      	ldr	r2, [pc, #52]	; (80126c4 <acc_confprogram_modify_runif+0x70>)
 801268e:	2004      	movs	r0, #4
 8012690:	47a8      	blx	r5
 8012692:	4621      	mov	r1, r4
 8012694:	2201      	movs	r2, #1
 8012696:	a803      	add	r0, sp, #12
 8012698:	f7f7 fca2 	bl	8009fe0 <acc_utils_uint32_to_transfer_buffer>
 801269c:	b005      	add	sp, #20
 801269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126a0:	f7f6 fbfe 	bl	8008ea0 <acc_rss_integration_log_level>
 80126a4:	2803      	cmp	r0, #3
 80126a6:	d9f4      	bls.n	8012692 <acc_confprogram_modify_runif+0x3e>
 80126a8:	4a04      	ldr	r2, [pc, #16]	; (80126bc <acc_confprogram_modify_runif+0x68>)
 80126aa:	9600      	str	r6, [sp, #0]
 80126ac:	086b      	lsrs	r3, r5, #1
 80126ae:	4904      	ldr	r1, [pc, #16]	; (80126c0 <acc_confprogram_modify_runif+0x6c>)
 80126b0:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80126b2:	4a05      	ldr	r2, [pc, #20]	; (80126c8 <acc_confprogram_modify_runif+0x74>)
 80126b4:	2004      	movs	r0, #4
 80126b6:	47a8      	blx	r5
 80126b8:	e7eb      	b.n	8012692 <acc_confprogram_modify_runif+0x3e>
 80126ba:	bf00      	nop
 80126bc:	20001628 	.word	0x20001628
 80126c0:	0801d4b4 	.word	0x0801d4b4
 80126c4:	0801d528 	.word	0x0801d528
 80126c8:	0801d4f4 	.word	0x0801d4f4

080126cc <acc_confprogram_patch_offset>:
 80126cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d0:	b083      	sub	sp, #12
 80126d2:	4683      	mov	fp, r0
 80126d4:	460e      	mov	r6, r1
 80126d6:	4617      	mov	r7, r2
 80126d8:	461d      	mov	r5, r3
 80126da:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80126de:	f7f6 fbdf 	bl	8008ea0 <acc_rss_integration_log_level>
 80126e2:	2803      	cmp	r0, #3
 80126e4:	d909      	bls.n	80126fa <acc_confprogram_patch_offset+0x2e>
 80126e6:	4b37      	ldr	r3, [pc, #220]	; (80127c4 <acc_confprogram_patch_offset+0xf8>)
 80126e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80126ea:	9200      	str	r2, [sp, #0]
 80126ec:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80126f0:	4a35      	ldr	r2, [pc, #212]	; (80127c8 <acc_confprogram_patch_offset+0xfc>)
 80126f2:	4936      	ldr	r1, [pc, #216]	; (80127cc <acc_confprogram_patch_offset+0x100>)
 80126f4:	4623      	mov	r3, r4
 80126f6:	2004      	movs	r0, #4
 80126f8:	47c0      	blx	r8
 80126fa:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80126fe:	8869      	ldrh	r1, [r5, #2]
 8012700:	2900      	cmp	r1, #0
 8012702:	d041      	beq.n	8012788 <acc_confprogram_patch_offset+0xbc>
 8012704:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80127c4 <acc_confprogram_patch_offset+0xf8>
 8012708:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80127d0 <acc_confprogram_patch_offset+0x104>
 801270c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80127cc <acc_confprogram_patch_offset+0x100>
 8012710:	2400      	movs	r4, #0
 8012712:	e009      	b.n	8012728 <acc_confprogram_patch_offset+0x5c>
 8012714:	4641      	mov	r1, r8
 8012716:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 801271a:	464a      	mov	r2, r9
 801271c:	2000      	movs	r0, #0
 801271e:	4798      	blx	r3
 8012720:	8869      	ldrh	r1, [r5, #2]
 8012722:	3401      	adds	r4, #1
 8012724:	42a1      	cmp	r1, r4
 8012726:	d92f      	bls.n	8012788 <acc_confprogram_patch_offset+0xbc>
 8012728:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801272c:	6868      	ldr	r0, [r5, #4]
 801272e:	f810 c013 	ldrb.w	ip, [r0, r3, lsl #1]
 8012732:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012736:	f1bc 0f00 	cmp.w	ip, #0
 801273a:	d028      	beq.n	801278e <acc_confprogram_patch_offset+0xc2>
 801273c:	f1bc 0f02 	cmp.w	ip, #2
 8012740:	d8e8      	bhi.n	8012714 <acc_confprogram_patch_offset+0x48>
 8012742:	8882      	ldrh	r2, [r0, #4]
 8012744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012748:	429a      	cmp	r2, r3
 801274a:	d0ea      	beq.n	8012722 <acc_confprogram_patch_offset+0x56>
 801274c:	0052      	lsls	r2, r2, #1
 801274e:	fa1f fe82 	uxth.w	lr, r2
 8012752:	45b6      	cmp	lr, r6
 8012754:	d3e5      	bcc.n	8012722 <acc_confprogram_patch_offset+0x56>
 8012756:	19f3      	adds	r3, r6, r7
 8012758:	459e      	cmp	lr, r3
 801275a:	dae2      	bge.n	8012722 <acc_confprogram_patch_offset+0x56>
 801275c:	f1bc 0f01 	cmp.w	ip, #1
 8012760:	d023      	beq.n	80127aa <acc_confprogram_patch_offset+0xde>
 8012762:	d316      	bcc.n	8012792 <acc_confprogram_patch_offset+0xc6>
 8012764:	f1bc 0f02 	cmp.w	ip, #2
 8012768:	d1db      	bne.n	8012722 <acc_confprogram_patch_offset+0x56>
 801276a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801276c:	8841      	ldrh	r1, [r0, #2]
 801276e:	ebae 0206 	sub.w	r2, lr, r6
 8012772:	fab3 f383 	clz	r3, r3
 8012776:	b292      	uxth	r2, r2
 8012778:	095b      	lsrs	r3, r3, #5
 801277a:	4658      	mov	r0, fp
 801277c:	f7ff ff6a 	bl	8012654 <acc_confprogram_modify_runif>
 8012780:	8869      	ldrh	r1, [r5, #2]
 8012782:	3401      	adds	r4, #1
 8012784:	42a1      	cmp	r1, r4
 8012786:	d8cf      	bhi.n	8012728 <acc_confprogram_patch_offset+0x5c>
 8012788:	b003      	add	sp, #12
 801278a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801278e:	8842      	ldrh	r2, [r0, #2]
 8012790:	e7d8      	b.n	8012744 <acc_confprogram_patch_offset+0x78>
 8012792:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012794:	7943      	ldrb	r3, [r0, #5]
 8012796:	7902      	ldrb	r2, [r0, #4]
 8012798:	9100      	str	r1, [sp, #0]
 801279a:	ebae 0106 	sub.w	r1, lr, r6
 801279e:	b289      	uxth	r1, r1
 80127a0:	4658      	mov	r0, fp
 80127a2:	f7ff fedd 	bl	8012560 <acc_confprogram_modify_bin>
 80127a6:	8869      	ldrh	r1, [r5, #2]
 80127a8:	e7bb      	b.n	8012722 <acc_confprogram_patch_offset+0x56>
 80127aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127ac:	8841      	ldrh	r1, [r0, #2]
 80127ae:	ebae 0206 	sub.w	r2, lr, r6
 80127b2:	3300      	adds	r3, #0
 80127b4:	b292      	uxth	r2, r2
 80127b6:	bf18      	it	ne
 80127b8:	2301      	movne	r3, #1
 80127ba:	4658      	mov	r0, fp
 80127bc:	f7ff ff4a 	bl	8012654 <acc_confprogram_modify_runif>
 80127c0:	8869      	ldrh	r1, [r5, #2]
 80127c2:	e7ae      	b.n	8012722 <acc_confprogram_patch_offset+0x56>
 80127c4:	20001628 	.word	0x20001628
 80127c8:	0801d3f0 	.word	0x0801d3f0
 80127cc:	0801d4b4 	.word	0x0801d4b4
 80127d0:	0801d590 	.word	0x0801d590

080127d4 <acc_confprogram_live_patch>:
 80127d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d8:	b083      	sub	sp, #12
 80127da:	4607      	mov	r7, r0
 80127dc:	468a      	mov	sl, r1
 80127de:	4690      	mov	r8, r2
 80127e0:	461d      	mov	r5, r3
 80127e2:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80127e6:	e9dd 690d 	ldrd	r6, r9, [sp, #52]	; 0x34
 80127ea:	f7f6 fb59 	bl	8008ea0 <acc_rss_integration_log_level>
 80127ee:	2803      	cmp	r0, #3
 80127f0:	d908      	bls.n	8012804 <acc_confprogram_live_patch+0x30>
 80127f2:	4b29      	ldr	r3, [pc, #164]	; (8012898 <acc_confprogram_live_patch+0xc4>)
 80127f4:	9600      	str	r6, [sp, #0]
 80127f6:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 80127fa:	4a28      	ldr	r2, [pc, #160]	; (801289c <acc_confprogram_live_patch+0xc8>)
 80127fc:	4928      	ldr	r1, [pc, #160]	; (80128a0 <acc_confprogram_live_patch+0xcc>)
 80127fe:	4623      	mov	r3, r4
 8012800:	2004      	movs	r0, #4
 8012802:	47d8      	blx	fp
 8012804:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012808:	886b      	ldrh	r3, [r5, #2]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d037      	beq.n	801287e <acc_confprogram_live_patch+0xaa>
 801280e:	2400      	movs	r4, #0
 8012810:	e014      	b.n	801283c <acc_confprogram_live_patch+0x68>
 8012812:	d325      	bcc.n	8012860 <acc_confprogram_live_patch+0x8c>
 8012814:	2a02      	cmp	r2, #2
 8012816:	d135      	bne.n	8012884 <acc_confprogram_live_patch+0xb0>
 8012818:	8882      	ldrh	r2, [r0, #4]
 801281a:	8843      	ldrh	r3, [r0, #2]
 801281c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012820:	fab6 f186 	clz	r1, r6
 8012824:	4442      	add	r2, r8
 8012826:	0949      	lsrs	r1, r1, #5
 8012828:	9100      	str	r1, [sp, #0]
 801282a:	b292      	uxth	r2, r2
 801282c:	4651      	mov	r1, sl
 801282e:	4638      	mov	r0, r7
 8012830:	f7ff fed6 	bl	80125e0 <acc_confprogram_modify_runif_sensor>
 8012834:	886b      	ldrh	r3, [r5, #2]
 8012836:	3401      	adds	r4, #1
 8012838:	42a3      	cmp	r3, r4
 801283a:	d920      	bls.n	801287e <acc_confprogram_live_patch+0xaa>
 801283c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8012840:	686b      	ldr	r3, [r5, #4]
 8012842:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
 8012846:	2a01      	cmp	r2, #1
 8012848:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801284c:	d1e1      	bne.n	8012812 <acc_confprogram_live_patch+0x3e>
 801284e:	8882      	ldrh	r2, [r0, #4]
 8012850:	8843      	ldrh	r3, [r0, #2]
 8012852:	f8cd 9004 	str.w	r9, [sp, #4]
 8012856:	1c31      	adds	r1, r6, #0
 8012858:	4442      	add	r2, r8
 801285a:	bf18      	it	ne
 801285c:	2101      	movne	r1, #1
 801285e:	e7e3      	b.n	8012828 <acc_confprogram_live_patch+0x54>
 8012860:	8841      	ldrh	r1, [r0, #2]
 8012862:	7943      	ldrb	r3, [r0, #5]
 8012864:	7902      	ldrb	r2, [r0, #4]
 8012866:	f8cd 9004 	str.w	r9, [sp, #4]
 801286a:	4441      	add	r1, r8
 801286c:	b289      	uxth	r1, r1
 801286e:	9600      	str	r6, [sp, #0]
 8012870:	4638      	mov	r0, r7
 8012872:	f7ff fe3d 	bl	80124f0 <acc_confprogram_modify_bin_sensor>
 8012876:	886b      	ldrh	r3, [r5, #2]
 8012878:	3401      	adds	r4, #1
 801287a:	42a3      	cmp	r3, r4
 801287c:	d8de      	bhi.n	801283c <acc_confprogram_live_patch+0x68>
 801287e:	b003      	add	sp, #12
 8012880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012884:	4b04      	ldr	r3, [pc, #16]	; (8012898 <acc_confprogram_live_patch+0xc4>)
 8012886:	4906      	ldr	r1, [pc, #24]	; (80128a0 <acc_confprogram_live_patch+0xcc>)
 8012888:	4a06      	ldr	r2, [pc, #24]	; (80128a4 <acc_confprogram_live_patch+0xd0>)
 801288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801288c:	2000      	movs	r0, #0
 801288e:	4798      	blx	r3
 8012890:	21e7      	movs	r1, #231	; 0xe7
 8012892:	4805      	ldr	r0, [pc, #20]	; (80128a8 <acc_confprogram_live_patch+0xd4>)
 8012894:	f7f5 fd92 	bl	80083bc <acc_assert_fail>
 8012898:	20001628 	.word	0x20001628
 801289c:	0801d3ec 	.word	0x0801d3ec
 80128a0:	0801d4b4 	.word	0x0801d4b4
 80128a4:	0801d410 	.word	0x0801d410
 80128a8:	0801d4c0 	.word	0x0801d4c0

080128ac <acc_confprogram_get_default_value>:
 80128ac:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
 80128b0:	4770      	bx	lr
 80128b2:	bf00      	nop

080128b4 <acc_confprogram_copy>:
 80128b4:	b152      	cbz	r2, 80128cc <acc_confprogram_copy+0x18>
 80128b6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80128ba:	3804      	subs	r0, #4
 80128bc:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80128c0:	804b      	strh	r3, [r1, #2]
 80128c2:	0c1b      	lsrs	r3, r3, #16
 80128c4:	800b      	strh	r3, [r1, #0]
 80128c6:	3104      	adds	r1, #4
 80128c8:	4291      	cmp	r1, r2
 80128ca:	d1f7      	bne.n	80128bc <acc_confprogram_copy+0x8>
 80128cc:	4770      	bx	lr
 80128ce:	bf00      	nop

080128d0 <__errno>:
 80128d0:	4b01      	ldr	r3, [pc, #4]	; (80128d8 <__errno+0x8>)
 80128d2:	6818      	ldr	r0, [r3, #0]
 80128d4:	4770      	bx	lr
 80128d6:	bf00      	nop
 80128d8:	20000134 	.word	0x20000134

080128dc <__sflush_r>:
 80128dc:	898a      	ldrh	r2, [r1, #12]
 80128de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e2:	4605      	mov	r5, r0
 80128e4:	0710      	lsls	r0, r2, #28
 80128e6:	460c      	mov	r4, r1
 80128e8:	d458      	bmi.n	801299c <__sflush_r+0xc0>
 80128ea:	684b      	ldr	r3, [r1, #4]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	dc05      	bgt.n	80128fc <__sflush_r+0x20>
 80128f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	dc02      	bgt.n	80128fc <__sflush_r+0x20>
 80128f6:	2000      	movs	r0, #0
 80128f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128fe:	2e00      	cmp	r6, #0
 8012900:	d0f9      	beq.n	80128f6 <__sflush_r+0x1a>
 8012902:	2300      	movs	r3, #0
 8012904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012908:	682f      	ldr	r7, [r5, #0]
 801290a:	602b      	str	r3, [r5, #0]
 801290c:	d032      	beq.n	8012974 <__sflush_r+0x98>
 801290e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012910:	89a3      	ldrh	r3, [r4, #12]
 8012912:	075a      	lsls	r2, r3, #29
 8012914:	d505      	bpl.n	8012922 <__sflush_r+0x46>
 8012916:	6863      	ldr	r3, [r4, #4]
 8012918:	1ac0      	subs	r0, r0, r3
 801291a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801291c:	b10b      	cbz	r3, 8012922 <__sflush_r+0x46>
 801291e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012920:	1ac0      	subs	r0, r0, r3
 8012922:	2300      	movs	r3, #0
 8012924:	4602      	mov	r2, r0
 8012926:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012928:	6a21      	ldr	r1, [r4, #32]
 801292a:	4628      	mov	r0, r5
 801292c:	47b0      	blx	r6
 801292e:	1c43      	adds	r3, r0, #1
 8012930:	89a3      	ldrh	r3, [r4, #12]
 8012932:	d106      	bne.n	8012942 <__sflush_r+0x66>
 8012934:	6829      	ldr	r1, [r5, #0]
 8012936:	291d      	cmp	r1, #29
 8012938:	d82c      	bhi.n	8012994 <__sflush_r+0xb8>
 801293a:	4a2a      	ldr	r2, [pc, #168]	; (80129e4 <__sflush_r+0x108>)
 801293c:	40ca      	lsrs	r2, r1
 801293e:	07d6      	lsls	r6, r2, #31
 8012940:	d528      	bpl.n	8012994 <__sflush_r+0xb8>
 8012942:	2200      	movs	r2, #0
 8012944:	6062      	str	r2, [r4, #4]
 8012946:	04d9      	lsls	r1, r3, #19
 8012948:	6922      	ldr	r2, [r4, #16]
 801294a:	6022      	str	r2, [r4, #0]
 801294c:	d504      	bpl.n	8012958 <__sflush_r+0x7c>
 801294e:	1c42      	adds	r2, r0, #1
 8012950:	d101      	bne.n	8012956 <__sflush_r+0x7a>
 8012952:	682b      	ldr	r3, [r5, #0]
 8012954:	b903      	cbnz	r3, 8012958 <__sflush_r+0x7c>
 8012956:	6560      	str	r0, [r4, #84]	; 0x54
 8012958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801295a:	602f      	str	r7, [r5, #0]
 801295c:	2900      	cmp	r1, #0
 801295e:	d0ca      	beq.n	80128f6 <__sflush_r+0x1a>
 8012960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012964:	4299      	cmp	r1, r3
 8012966:	d002      	beq.n	801296e <__sflush_r+0x92>
 8012968:	4628      	mov	r0, r5
 801296a:	f000 f9e9 	bl	8012d40 <_free_r>
 801296e:	2000      	movs	r0, #0
 8012970:	6360      	str	r0, [r4, #52]	; 0x34
 8012972:	e7c1      	b.n	80128f8 <__sflush_r+0x1c>
 8012974:	6a21      	ldr	r1, [r4, #32]
 8012976:	2301      	movs	r3, #1
 8012978:	4628      	mov	r0, r5
 801297a:	47b0      	blx	r6
 801297c:	1c41      	adds	r1, r0, #1
 801297e:	d1c7      	bne.n	8012910 <__sflush_r+0x34>
 8012980:	682b      	ldr	r3, [r5, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d0c4      	beq.n	8012910 <__sflush_r+0x34>
 8012986:	2b1d      	cmp	r3, #29
 8012988:	d001      	beq.n	801298e <__sflush_r+0xb2>
 801298a:	2b16      	cmp	r3, #22
 801298c:	d101      	bne.n	8012992 <__sflush_r+0xb6>
 801298e:	602f      	str	r7, [r5, #0]
 8012990:	e7b1      	b.n	80128f6 <__sflush_r+0x1a>
 8012992:	89a3      	ldrh	r3, [r4, #12]
 8012994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012998:	81a3      	strh	r3, [r4, #12]
 801299a:	e7ad      	b.n	80128f8 <__sflush_r+0x1c>
 801299c:	690f      	ldr	r7, [r1, #16]
 801299e:	2f00      	cmp	r7, #0
 80129a0:	d0a9      	beq.n	80128f6 <__sflush_r+0x1a>
 80129a2:	0793      	lsls	r3, r2, #30
 80129a4:	680e      	ldr	r6, [r1, #0]
 80129a6:	bf08      	it	eq
 80129a8:	694b      	ldreq	r3, [r1, #20]
 80129aa:	600f      	str	r7, [r1, #0]
 80129ac:	bf18      	it	ne
 80129ae:	2300      	movne	r3, #0
 80129b0:	eba6 0807 	sub.w	r8, r6, r7
 80129b4:	608b      	str	r3, [r1, #8]
 80129b6:	f1b8 0f00 	cmp.w	r8, #0
 80129ba:	dd9c      	ble.n	80128f6 <__sflush_r+0x1a>
 80129bc:	6a21      	ldr	r1, [r4, #32]
 80129be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80129c0:	4643      	mov	r3, r8
 80129c2:	463a      	mov	r2, r7
 80129c4:	4628      	mov	r0, r5
 80129c6:	47b0      	blx	r6
 80129c8:	2800      	cmp	r0, #0
 80129ca:	dc06      	bgt.n	80129da <__sflush_r+0xfe>
 80129cc:	89a3      	ldrh	r3, [r4, #12]
 80129ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129d2:	81a3      	strh	r3, [r4, #12]
 80129d4:	f04f 30ff 	mov.w	r0, #4294967295
 80129d8:	e78e      	b.n	80128f8 <__sflush_r+0x1c>
 80129da:	4407      	add	r7, r0
 80129dc:	eba8 0800 	sub.w	r8, r8, r0
 80129e0:	e7e9      	b.n	80129b6 <__sflush_r+0xda>
 80129e2:	bf00      	nop
 80129e4:	20400001 	.word	0x20400001

080129e8 <_fflush_r>:
 80129e8:	b538      	push	{r3, r4, r5, lr}
 80129ea:	690b      	ldr	r3, [r1, #16]
 80129ec:	4605      	mov	r5, r0
 80129ee:	460c      	mov	r4, r1
 80129f0:	b913      	cbnz	r3, 80129f8 <_fflush_r+0x10>
 80129f2:	2500      	movs	r5, #0
 80129f4:	4628      	mov	r0, r5
 80129f6:	bd38      	pop	{r3, r4, r5, pc}
 80129f8:	b118      	cbz	r0, 8012a02 <_fflush_r+0x1a>
 80129fa:	6983      	ldr	r3, [r0, #24]
 80129fc:	b90b      	cbnz	r3, 8012a02 <_fflush_r+0x1a>
 80129fe:	f000 f899 	bl	8012b34 <__sinit>
 8012a02:	4b14      	ldr	r3, [pc, #80]	; (8012a54 <_fflush_r+0x6c>)
 8012a04:	429c      	cmp	r4, r3
 8012a06:	d11b      	bne.n	8012a40 <_fflush_r+0x58>
 8012a08:	686c      	ldr	r4, [r5, #4]
 8012a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d0ef      	beq.n	80129f2 <_fflush_r+0xa>
 8012a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012a14:	07d0      	lsls	r0, r2, #31
 8012a16:	d404      	bmi.n	8012a22 <_fflush_r+0x3a>
 8012a18:	0599      	lsls	r1, r3, #22
 8012a1a:	d402      	bmi.n	8012a22 <_fflush_r+0x3a>
 8012a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a1e:	f000 f94c 	bl	8012cba <__retarget_lock_acquire_recursive>
 8012a22:	4628      	mov	r0, r5
 8012a24:	4621      	mov	r1, r4
 8012a26:	f7ff ff59 	bl	80128dc <__sflush_r>
 8012a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a2c:	07da      	lsls	r2, r3, #31
 8012a2e:	4605      	mov	r5, r0
 8012a30:	d4e0      	bmi.n	80129f4 <_fflush_r+0xc>
 8012a32:	89a3      	ldrh	r3, [r4, #12]
 8012a34:	059b      	lsls	r3, r3, #22
 8012a36:	d4dd      	bmi.n	80129f4 <_fflush_r+0xc>
 8012a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a3a:	f000 f93f 	bl	8012cbc <__retarget_lock_release_recursive>
 8012a3e:	e7d9      	b.n	80129f4 <_fflush_r+0xc>
 8012a40:	4b05      	ldr	r3, [pc, #20]	; (8012a58 <_fflush_r+0x70>)
 8012a42:	429c      	cmp	r4, r3
 8012a44:	d101      	bne.n	8012a4a <_fflush_r+0x62>
 8012a46:	68ac      	ldr	r4, [r5, #8]
 8012a48:	e7df      	b.n	8012a0a <_fflush_r+0x22>
 8012a4a:	4b04      	ldr	r3, [pc, #16]	; (8012a5c <_fflush_r+0x74>)
 8012a4c:	429c      	cmp	r4, r3
 8012a4e:	bf08      	it	eq
 8012a50:	68ec      	ldreq	r4, [r5, #12]
 8012a52:	e7da      	b.n	8012a0a <_fflush_r+0x22>
 8012a54:	0801d5e0 	.word	0x0801d5e0
 8012a58:	0801d600 	.word	0x0801d600
 8012a5c:	0801d5c0 	.word	0x0801d5c0

08012a60 <fflush>:
 8012a60:	4601      	mov	r1, r0
 8012a62:	b920      	cbnz	r0, 8012a6e <fflush+0xe>
 8012a64:	4b04      	ldr	r3, [pc, #16]	; (8012a78 <fflush+0x18>)
 8012a66:	4905      	ldr	r1, [pc, #20]	; (8012a7c <fflush+0x1c>)
 8012a68:	6818      	ldr	r0, [r3, #0]
 8012a6a:	f000 b8e1 	b.w	8012c30 <_fwalk_reent>
 8012a6e:	4b04      	ldr	r3, [pc, #16]	; (8012a80 <fflush+0x20>)
 8012a70:	6818      	ldr	r0, [r3, #0]
 8012a72:	f7ff bfb9 	b.w	80129e8 <_fflush_r>
 8012a76:	bf00      	nop
 8012a78:	0801d620 	.word	0x0801d620
 8012a7c:	080129e9 	.word	0x080129e9
 8012a80:	20000134 	.word	0x20000134

08012a84 <std>:
 8012a84:	2300      	movs	r3, #0
 8012a86:	b510      	push	{r4, lr}
 8012a88:	4604      	mov	r4, r0
 8012a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8012a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012a92:	6083      	str	r3, [r0, #8]
 8012a94:	8181      	strh	r1, [r0, #12]
 8012a96:	6643      	str	r3, [r0, #100]	; 0x64
 8012a98:	81c2      	strh	r2, [r0, #14]
 8012a9a:	6183      	str	r3, [r0, #24]
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	2208      	movs	r2, #8
 8012aa0:	305c      	adds	r0, #92	; 0x5c
 8012aa2:	f000 f945 	bl	8012d30 <memset>
 8012aa6:	4b05      	ldr	r3, [pc, #20]	; (8012abc <std+0x38>)
 8012aa8:	6263      	str	r3, [r4, #36]	; 0x24
 8012aaa:	4b05      	ldr	r3, [pc, #20]	; (8012ac0 <std+0x3c>)
 8012aac:	62a3      	str	r3, [r4, #40]	; 0x28
 8012aae:	4b05      	ldr	r3, [pc, #20]	; (8012ac4 <std+0x40>)
 8012ab0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ab2:	4b05      	ldr	r3, [pc, #20]	; (8012ac8 <std+0x44>)
 8012ab4:	6224      	str	r4, [r4, #32]
 8012ab6:	6323      	str	r3, [r4, #48]	; 0x30
 8012ab8:	bd10      	pop	{r4, pc}
 8012aba:	bf00      	nop
 8012abc:	0801303d 	.word	0x0801303d
 8012ac0:	0801305f 	.word	0x0801305f
 8012ac4:	08013097 	.word	0x08013097
 8012ac8:	080130bb 	.word	0x080130bb

08012acc <_cleanup_r>:
 8012acc:	4901      	ldr	r1, [pc, #4]	; (8012ad4 <_cleanup_r+0x8>)
 8012ace:	f000 b8af 	b.w	8012c30 <_fwalk_reent>
 8012ad2:	bf00      	nop
 8012ad4:	080129e9 	.word	0x080129e9

08012ad8 <__sfmoreglue>:
 8012ad8:	b570      	push	{r4, r5, r6, lr}
 8012ada:	2268      	movs	r2, #104	; 0x68
 8012adc:	1e4d      	subs	r5, r1, #1
 8012ade:	4355      	muls	r5, r2
 8012ae0:	460e      	mov	r6, r1
 8012ae2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012ae6:	f000 f997 	bl	8012e18 <_malloc_r>
 8012aea:	4604      	mov	r4, r0
 8012aec:	b140      	cbz	r0, 8012b00 <__sfmoreglue+0x28>
 8012aee:	2100      	movs	r1, #0
 8012af0:	e9c0 1600 	strd	r1, r6, [r0]
 8012af4:	300c      	adds	r0, #12
 8012af6:	60a0      	str	r0, [r4, #8]
 8012af8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012afc:	f000 f918 	bl	8012d30 <memset>
 8012b00:	4620      	mov	r0, r4
 8012b02:	bd70      	pop	{r4, r5, r6, pc}

08012b04 <__sfp_lock_acquire>:
 8012b04:	4801      	ldr	r0, [pc, #4]	; (8012b0c <__sfp_lock_acquire+0x8>)
 8012b06:	f000 b8d8 	b.w	8012cba <__retarget_lock_acquire_recursive>
 8012b0a:	bf00      	nop
 8012b0c:	20001619 	.word	0x20001619

08012b10 <__sfp_lock_release>:
 8012b10:	4801      	ldr	r0, [pc, #4]	; (8012b18 <__sfp_lock_release+0x8>)
 8012b12:	f000 b8d3 	b.w	8012cbc <__retarget_lock_release_recursive>
 8012b16:	bf00      	nop
 8012b18:	20001619 	.word	0x20001619

08012b1c <__sinit_lock_acquire>:
 8012b1c:	4801      	ldr	r0, [pc, #4]	; (8012b24 <__sinit_lock_acquire+0x8>)
 8012b1e:	f000 b8cc 	b.w	8012cba <__retarget_lock_acquire_recursive>
 8012b22:	bf00      	nop
 8012b24:	2000161a 	.word	0x2000161a

08012b28 <__sinit_lock_release>:
 8012b28:	4801      	ldr	r0, [pc, #4]	; (8012b30 <__sinit_lock_release+0x8>)
 8012b2a:	f000 b8c7 	b.w	8012cbc <__retarget_lock_release_recursive>
 8012b2e:	bf00      	nop
 8012b30:	2000161a 	.word	0x2000161a

08012b34 <__sinit>:
 8012b34:	b510      	push	{r4, lr}
 8012b36:	4604      	mov	r4, r0
 8012b38:	f7ff fff0 	bl	8012b1c <__sinit_lock_acquire>
 8012b3c:	69a3      	ldr	r3, [r4, #24]
 8012b3e:	b11b      	cbz	r3, 8012b48 <__sinit+0x14>
 8012b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b44:	f7ff bff0 	b.w	8012b28 <__sinit_lock_release>
 8012b48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012b4c:	6523      	str	r3, [r4, #80]	; 0x50
 8012b4e:	4b13      	ldr	r3, [pc, #76]	; (8012b9c <__sinit+0x68>)
 8012b50:	4a13      	ldr	r2, [pc, #76]	; (8012ba0 <__sinit+0x6c>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	62a2      	str	r2, [r4, #40]	; 0x28
 8012b56:	42a3      	cmp	r3, r4
 8012b58:	bf04      	itt	eq
 8012b5a:	2301      	moveq	r3, #1
 8012b5c:	61a3      	streq	r3, [r4, #24]
 8012b5e:	4620      	mov	r0, r4
 8012b60:	f000 f820 	bl	8012ba4 <__sfp>
 8012b64:	6060      	str	r0, [r4, #4]
 8012b66:	4620      	mov	r0, r4
 8012b68:	f000 f81c 	bl	8012ba4 <__sfp>
 8012b6c:	60a0      	str	r0, [r4, #8]
 8012b6e:	4620      	mov	r0, r4
 8012b70:	f000 f818 	bl	8012ba4 <__sfp>
 8012b74:	2200      	movs	r2, #0
 8012b76:	60e0      	str	r0, [r4, #12]
 8012b78:	2104      	movs	r1, #4
 8012b7a:	6860      	ldr	r0, [r4, #4]
 8012b7c:	f7ff ff82 	bl	8012a84 <std>
 8012b80:	68a0      	ldr	r0, [r4, #8]
 8012b82:	2201      	movs	r2, #1
 8012b84:	2109      	movs	r1, #9
 8012b86:	f7ff ff7d 	bl	8012a84 <std>
 8012b8a:	68e0      	ldr	r0, [r4, #12]
 8012b8c:	2202      	movs	r2, #2
 8012b8e:	2112      	movs	r1, #18
 8012b90:	f7ff ff78 	bl	8012a84 <std>
 8012b94:	2301      	movs	r3, #1
 8012b96:	61a3      	str	r3, [r4, #24]
 8012b98:	e7d2      	b.n	8012b40 <__sinit+0xc>
 8012b9a:	bf00      	nop
 8012b9c:	0801d620 	.word	0x0801d620
 8012ba0:	08012acd 	.word	0x08012acd

08012ba4 <__sfp>:
 8012ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ba6:	4607      	mov	r7, r0
 8012ba8:	f7ff ffac 	bl	8012b04 <__sfp_lock_acquire>
 8012bac:	4b1e      	ldr	r3, [pc, #120]	; (8012c28 <__sfp+0x84>)
 8012bae:	681e      	ldr	r6, [r3, #0]
 8012bb0:	69b3      	ldr	r3, [r6, #24]
 8012bb2:	b913      	cbnz	r3, 8012bba <__sfp+0x16>
 8012bb4:	4630      	mov	r0, r6
 8012bb6:	f7ff ffbd 	bl	8012b34 <__sinit>
 8012bba:	3648      	adds	r6, #72	; 0x48
 8012bbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012bc0:	3b01      	subs	r3, #1
 8012bc2:	d503      	bpl.n	8012bcc <__sfp+0x28>
 8012bc4:	6833      	ldr	r3, [r6, #0]
 8012bc6:	b30b      	cbz	r3, 8012c0c <__sfp+0x68>
 8012bc8:	6836      	ldr	r6, [r6, #0]
 8012bca:	e7f7      	b.n	8012bbc <__sfp+0x18>
 8012bcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012bd0:	b9d5      	cbnz	r5, 8012c08 <__sfp+0x64>
 8012bd2:	4b16      	ldr	r3, [pc, #88]	; (8012c2c <__sfp+0x88>)
 8012bd4:	60e3      	str	r3, [r4, #12]
 8012bd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012bda:	6665      	str	r5, [r4, #100]	; 0x64
 8012bdc:	f000 f86c 	bl	8012cb8 <__retarget_lock_init_recursive>
 8012be0:	f7ff ff96 	bl	8012b10 <__sfp_lock_release>
 8012be4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012be8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012bec:	6025      	str	r5, [r4, #0]
 8012bee:	61a5      	str	r5, [r4, #24]
 8012bf0:	2208      	movs	r2, #8
 8012bf2:	4629      	mov	r1, r5
 8012bf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012bf8:	f000 f89a 	bl	8012d30 <memset>
 8012bfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012c00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012c04:	4620      	mov	r0, r4
 8012c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c08:	3468      	adds	r4, #104	; 0x68
 8012c0a:	e7d9      	b.n	8012bc0 <__sfp+0x1c>
 8012c0c:	2104      	movs	r1, #4
 8012c0e:	4638      	mov	r0, r7
 8012c10:	f7ff ff62 	bl	8012ad8 <__sfmoreglue>
 8012c14:	4604      	mov	r4, r0
 8012c16:	6030      	str	r0, [r6, #0]
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	d1d5      	bne.n	8012bc8 <__sfp+0x24>
 8012c1c:	f7ff ff78 	bl	8012b10 <__sfp_lock_release>
 8012c20:	230c      	movs	r3, #12
 8012c22:	603b      	str	r3, [r7, #0]
 8012c24:	e7ee      	b.n	8012c04 <__sfp+0x60>
 8012c26:	bf00      	nop
 8012c28:	0801d620 	.word	0x0801d620
 8012c2c:	ffff0001 	.word	0xffff0001

08012c30 <_fwalk_reent>:
 8012c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c34:	4606      	mov	r6, r0
 8012c36:	4688      	mov	r8, r1
 8012c38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012c3c:	2700      	movs	r7, #0
 8012c3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012c42:	f1b9 0901 	subs.w	r9, r9, #1
 8012c46:	d505      	bpl.n	8012c54 <_fwalk_reent+0x24>
 8012c48:	6824      	ldr	r4, [r4, #0]
 8012c4a:	2c00      	cmp	r4, #0
 8012c4c:	d1f7      	bne.n	8012c3e <_fwalk_reent+0xe>
 8012c4e:	4638      	mov	r0, r7
 8012c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c54:	89ab      	ldrh	r3, [r5, #12]
 8012c56:	2b01      	cmp	r3, #1
 8012c58:	d907      	bls.n	8012c6a <_fwalk_reent+0x3a>
 8012c5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c5e:	3301      	adds	r3, #1
 8012c60:	d003      	beq.n	8012c6a <_fwalk_reent+0x3a>
 8012c62:	4629      	mov	r1, r5
 8012c64:	4630      	mov	r0, r6
 8012c66:	47c0      	blx	r8
 8012c68:	4307      	orrs	r7, r0
 8012c6a:	3568      	adds	r5, #104	; 0x68
 8012c6c:	e7e9      	b.n	8012c42 <_fwalk_reent+0x12>
	...

08012c70 <__libc_init_array>:
 8012c70:	b570      	push	{r4, r5, r6, lr}
 8012c72:	4d0d      	ldr	r5, [pc, #52]	; (8012ca8 <__libc_init_array+0x38>)
 8012c74:	4c0d      	ldr	r4, [pc, #52]	; (8012cac <__libc_init_array+0x3c>)
 8012c76:	1b64      	subs	r4, r4, r5
 8012c78:	10a4      	asrs	r4, r4, #2
 8012c7a:	2600      	movs	r6, #0
 8012c7c:	42a6      	cmp	r6, r4
 8012c7e:	d109      	bne.n	8012c94 <__libc_init_array+0x24>
 8012c80:	4d0b      	ldr	r5, [pc, #44]	; (8012cb0 <__libc_init_array+0x40>)
 8012c82:	4c0c      	ldr	r4, [pc, #48]	; (8012cb4 <__libc_init_array+0x44>)
 8012c84:	f001 fb98 	bl	80143b8 <_init>
 8012c88:	1b64      	subs	r4, r4, r5
 8012c8a:	10a4      	asrs	r4, r4, #2
 8012c8c:	2600      	movs	r6, #0
 8012c8e:	42a6      	cmp	r6, r4
 8012c90:	d105      	bne.n	8012c9e <__libc_init_array+0x2e>
 8012c92:	bd70      	pop	{r4, r5, r6, pc}
 8012c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c98:	4798      	blx	r3
 8012c9a:	3601      	adds	r6, #1
 8012c9c:	e7ee      	b.n	8012c7c <__libc_init_array+0xc>
 8012c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ca2:	4798      	blx	r3
 8012ca4:	3601      	adds	r6, #1
 8012ca6:	e7f2      	b.n	8012c8e <__libc_init_array+0x1e>
 8012ca8:	0801d678 	.word	0x0801d678
 8012cac:	0801d678 	.word	0x0801d678
 8012cb0:	0801d678 	.word	0x0801d678
 8012cb4:	0801d67c 	.word	0x0801d67c

08012cb8 <__retarget_lock_init_recursive>:
 8012cb8:	4770      	bx	lr

08012cba <__retarget_lock_acquire_recursive>:
 8012cba:	4770      	bx	lr

08012cbc <__retarget_lock_release_recursive>:
 8012cbc:	4770      	bx	lr
	...

08012cc0 <malloc>:
 8012cc0:	4b02      	ldr	r3, [pc, #8]	; (8012ccc <malloc+0xc>)
 8012cc2:	4601      	mov	r1, r0
 8012cc4:	6818      	ldr	r0, [r3, #0]
 8012cc6:	f000 b8a7 	b.w	8012e18 <_malloc_r>
 8012cca:	bf00      	nop
 8012ccc:	20000134 	.word	0x20000134

08012cd0 <free>:
 8012cd0:	4b02      	ldr	r3, [pc, #8]	; (8012cdc <free+0xc>)
 8012cd2:	4601      	mov	r1, r0
 8012cd4:	6818      	ldr	r0, [r3, #0]
 8012cd6:	f000 b833 	b.w	8012d40 <_free_r>
 8012cda:	bf00      	nop
 8012cdc:	20000134 	.word	0x20000134

08012ce0 <memcpy>:
 8012ce0:	440a      	add	r2, r1
 8012ce2:	4291      	cmp	r1, r2
 8012ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ce8:	d100      	bne.n	8012cec <memcpy+0xc>
 8012cea:	4770      	bx	lr
 8012cec:	b510      	push	{r4, lr}
 8012cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012cf6:	4291      	cmp	r1, r2
 8012cf8:	d1f9      	bne.n	8012cee <memcpy+0xe>
 8012cfa:	bd10      	pop	{r4, pc}

08012cfc <memmove>:
 8012cfc:	4288      	cmp	r0, r1
 8012cfe:	b510      	push	{r4, lr}
 8012d00:	eb01 0402 	add.w	r4, r1, r2
 8012d04:	d902      	bls.n	8012d0c <memmove+0x10>
 8012d06:	4284      	cmp	r4, r0
 8012d08:	4623      	mov	r3, r4
 8012d0a:	d807      	bhi.n	8012d1c <memmove+0x20>
 8012d0c:	1e43      	subs	r3, r0, #1
 8012d0e:	42a1      	cmp	r1, r4
 8012d10:	d008      	beq.n	8012d24 <memmove+0x28>
 8012d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012d1a:	e7f8      	b.n	8012d0e <memmove+0x12>
 8012d1c:	4402      	add	r2, r0
 8012d1e:	4601      	mov	r1, r0
 8012d20:	428a      	cmp	r2, r1
 8012d22:	d100      	bne.n	8012d26 <memmove+0x2a>
 8012d24:	bd10      	pop	{r4, pc}
 8012d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012d2e:	e7f7      	b.n	8012d20 <memmove+0x24>

08012d30 <memset>:
 8012d30:	4402      	add	r2, r0
 8012d32:	4603      	mov	r3, r0
 8012d34:	4293      	cmp	r3, r2
 8012d36:	d100      	bne.n	8012d3a <memset+0xa>
 8012d38:	4770      	bx	lr
 8012d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8012d3e:	e7f9      	b.n	8012d34 <memset+0x4>

08012d40 <_free_r>:
 8012d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d42:	2900      	cmp	r1, #0
 8012d44:	d044      	beq.n	8012dd0 <_free_r+0x90>
 8012d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d4a:	9001      	str	r0, [sp, #4]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8012d52:	bfb8      	it	lt
 8012d54:	18e4      	addlt	r4, r4, r3
 8012d56:	f000 fb47 	bl	80133e8 <__malloc_lock>
 8012d5a:	4a1e      	ldr	r2, [pc, #120]	; (8012dd4 <_free_r+0x94>)
 8012d5c:	9801      	ldr	r0, [sp, #4]
 8012d5e:	6813      	ldr	r3, [r2, #0]
 8012d60:	b933      	cbnz	r3, 8012d70 <_free_r+0x30>
 8012d62:	6063      	str	r3, [r4, #4]
 8012d64:	6014      	str	r4, [r2, #0]
 8012d66:	b003      	add	sp, #12
 8012d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d6c:	f000 bb42 	b.w	80133f4 <__malloc_unlock>
 8012d70:	42a3      	cmp	r3, r4
 8012d72:	d908      	bls.n	8012d86 <_free_r+0x46>
 8012d74:	6825      	ldr	r5, [r4, #0]
 8012d76:	1961      	adds	r1, r4, r5
 8012d78:	428b      	cmp	r3, r1
 8012d7a:	bf01      	itttt	eq
 8012d7c:	6819      	ldreq	r1, [r3, #0]
 8012d7e:	685b      	ldreq	r3, [r3, #4]
 8012d80:	1949      	addeq	r1, r1, r5
 8012d82:	6021      	streq	r1, [r4, #0]
 8012d84:	e7ed      	b.n	8012d62 <_free_r+0x22>
 8012d86:	461a      	mov	r2, r3
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	b10b      	cbz	r3, 8012d90 <_free_r+0x50>
 8012d8c:	42a3      	cmp	r3, r4
 8012d8e:	d9fa      	bls.n	8012d86 <_free_r+0x46>
 8012d90:	6811      	ldr	r1, [r2, #0]
 8012d92:	1855      	adds	r5, r2, r1
 8012d94:	42a5      	cmp	r5, r4
 8012d96:	d10b      	bne.n	8012db0 <_free_r+0x70>
 8012d98:	6824      	ldr	r4, [r4, #0]
 8012d9a:	4421      	add	r1, r4
 8012d9c:	1854      	adds	r4, r2, r1
 8012d9e:	42a3      	cmp	r3, r4
 8012da0:	6011      	str	r1, [r2, #0]
 8012da2:	d1e0      	bne.n	8012d66 <_free_r+0x26>
 8012da4:	681c      	ldr	r4, [r3, #0]
 8012da6:	685b      	ldr	r3, [r3, #4]
 8012da8:	6053      	str	r3, [r2, #4]
 8012daa:	4421      	add	r1, r4
 8012dac:	6011      	str	r1, [r2, #0]
 8012dae:	e7da      	b.n	8012d66 <_free_r+0x26>
 8012db0:	d902      	bls.n	8012db8 <_free_r+0x78>
 8012db2:	230c      	movs	r3, #12
 8012db4:	6003      	str	r3, [r0, #0]
 8012db6:	e7d6      	b.n	8012d66 <_free_r+0x26>
 8012db8:	6825      	ldr	r5, [r4, #0]
 8012dba:	1961      	adds	r1, r4, r5
 8012dbc:	428b      	cmp	r3, r1
 8012dbe:	bf04      	itt	eq
 8012dc0:	6819      	ldreq	r1, [r3, #0]
 8012dc2:	685b      	ldreq	r3, [r3, #4]
 8012dc4:	6063      	str	r3, [r4, #4]
 8012dc6:	bf04      	itt	eq
 8012dc8:	1949      	addeq	r1, r1, r5
 8012dca:	6021      	streq	r1, [r4, #0]
 8012dcc:	6054      	str	r4, [r2, #4]
 8012dce:	e7ca      	b.n	8012d66 <_free_r+0x26>
 8012dd0:	b003      	add	sp, #12
 8012dd2:	bd30      	pop	{r4, r5, pc}
 8012dd4:	2000161c 	.word	0x2000161c

08012dd8 <sbrk_aligned>:
 8012dd8:	b570      	push	{r4, r5, r6, lr}
 8012dda:	4e0e      	ldr	r6, [pc, #56]	; (8012e14 <sbrk_aligned+0x3c>)
 8012ddc:	460c      	mov	r4, r1
 8012dde:	6831      	ldr	r1, [r6, #0]
 8012de0:	4605      	mov	r5, r0
 8012de2:	b911      	cbnz	r1, 8012dea <sbrk_aligned+0x12>
 8012de4:	f000 f91a 	bl	801301c <_sbrk_r>
 8012de8:	6030      	str	r0, [r6, #0]
 8012dea:	4621      	mov	r1, r4
 8012dec:	4628      	mov	r0, r5
 8012dee:	f000 f915 	bl	801301c <_sbrk_r>
 8012df2:	1c43      	adds	r3, r0, #1
 8012df4:	d00a      	beq.n	8012e0c <sbrk_aligned+0x34>
 8012df6:	1cc4      	adds	r4, r0, #3
 8012df8:	f024 0403 	bic.w	r4, r4, #3
 8012dfc:	42a0      	cmp	r0, r4
 8012dfe:	d007      	beq.n	8012e10 <sbrk_aligned+0x38>
 8012e00:	1a21      	subs	r1, r4, r0
 8012e02:	4628      	mov	r0, r5
 8012e04:	f000 f90a 	bl	801301c <_sbrk_r>
 8012e08:	3001      	adds	r0, #1
 8012e0a:	d101      	bne.n	8012e10 <sbrk_aligned+0x38>
 8012e0c:	f04f 34ff 	mov.w	r4, #4294967295
 8012e10:	4620      	mov	r0, r4
 8012e12:	bd70      	pop	{r4, r5, r6, pc}
 8012e14:	20001620 	.word	0x20001620

08012e18 <_malloc_r>:
 8012e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e1c:	1ccd      	adds	r5, r1, #3
 8012e1e:	f025 0503 	bic.w	r5, r5, #3
 8012e22:	3508      	adds	r5, #8
 8012e24:	2d0c      	cmp	r5, #12
 8012e26:	bf38      	it	cc
 8012e28:	250c      	movcc	r5, #12
 8012e2a:	2d00      	cmp	r5, #0
 8012e2c:	4607      	mov	r7, r0
 8012e2e:	db01      	blt.n	8012e34 <_malloc_r+0x1c>
 8012e30:	42a9      	cmp	r1, r5
 8012e32:	d905      	bls.n	8012e40 <_malloc_r+0x28>
 8012e34:	230c      	movs	r3, #12
 8012e36:	603b      	str	r3, [r7, #0]
 8012e38:	2600      	movs	r6, #0
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e40:	4e2e      	ldr	r6, [pc, #184]	; (8012efc <_malloc_r+0xe4>)
 8012e42:	f000 fad1 	bl	80133e8 <__malloc_lock>
 8012e46:	6833      	ldr	r3, [r6, #0]
 8012e48:	461c      	mov	r4, r3
 8012e4a:	bb34      	cbnz	r4, 8012e9a <_malloc_r+0x82>
 8012e4c:	4629      	mov	r1, r5
 8012e4e:	4638      	mov	r0, r7
 8012e50:	f7ff ffc2 	bl	8012dd8 <sbrk_aligned>
 8012e54:	1c43      	adds	r3, r0, #1
 8012e56:	4604      	mov	r4, r0
 8012e58:	d14d      	bne.n	8012ef6 <_malloc_r+0xde>
 8012e5a:	6834      	ldr	r4, [r6, #0]
 8012e5c:	4626      	mov	r6, r4
 8012e5e:	2e00      	cmp	r6, #0
 8012e60:	d140      	bne.n	8012ee4 <_malloc_r+0xcc>
 8012e62:	6823      	ldr	r3, [r4, #0]
 8012e64:	4631      	mov	r1, r6
 8012e66:	4638      	mov	r0, r7
 8012e68:	eb04 0803 	add.w	r8, r4, r3
 8012e6c:	f000 f8d6 	bl	801301c <_sbrk_r>
 8012e70:	4580      	cmp	r8, r0
 8012e72:	d13a      	bne.n	8012eea <_malloc_r+0xd2>
 8012e74:	6821      	ldr	r1, [r4, #0]
 8012e76:	3503      	adds	r5, #3
 8012e78:	1a6d      	subs	r5, r5, r1
 8012e7a:	f025 0503 	bic.w	r5, r5, #3
 8012e7e:	3508      	adds	r5, #8
 8012e80:	2d0c      	cmp	r5, #12
 8012e82:	bf38      	it	cc
 8012e84:	250c      	movcc	r5, #12
 8012e86:	4629      	mov	r1, r5
 8012e88:	4638      	mov	r0, r7
 8012e8a:	f7ff ffa5 	bl	8012dd8 <sbrk_aligned>
 8012e8e:	3001      	adds	r0, #1
 8012e90:	d02b      	beq.n	8012eea <_malloc_r+0xd2>
 8012e92:	6823      	ldr	r3, [r4, #0]
 8012e94:	442b      	add	r3, r5
 8012e96:	6023      	str	r3, [r4, #0]
 8012e98:	e00e      	b.n	8012eb8 <_malloc_r+0xa0>
 8012e9a:	6822      	ldr	r2, [r4, #0]
 8012e9c:	1b52      	subs	r2, r2, r5
 8012e9e:	d41e      	bmi.n	8012ede <_malloc_r+0xc6>
 8012ea0:	2a0b      	cmp	r2, #11
 8012ea2:	d916      	bls.n	8012ed2 <_malloc_r+0xba>
 8012ea4:	1961      	adds	r1, r4, r5
 8012ea6:	42a3      	cmp	r3, r4
 8012ea8:	6025      	str	r5, [r4, #0]
 8012eaa:	bf18      	it	ne
 8012eac:	6059      	strne	r1, [r3, #4]
 8012eae:	6863      	ldr	r3, [r4, #4]
 8012eb0:	bf08      	it	eq
 8012eb2:	6031      	streq	r1, [r6, #0]
 8012eb4:	5162      	str	r2, [r4, r5]
 8012eb6:	604b      	str	r3, [r1, #4]
 8012eb8:	4638      	mov	r0, r7
 8012eba:	f104 060b 	add.w	r6, r4, #11
 8012ebe:	f000 fa99 	bl	80133f4 <__malloc_unlock>
 8012ec2:	f026 0607 	bic.w	r6, r6, #7
 8012ec6:	1d23      	adds	r3, r4, #4
 8012ec8:	1af2      	subs	r2, r6, r3
 8012eca:	d0b6      	beq.n	8012e3a <_malloc_r+0x22>
 8012ecc:	1b9b      	subs	r3, r3, r6
 8012ece:	50a3      	str	r3, [r4, r2]
 8012ed0:	e7b3      	b.n	8012e3a <_malloc_r+0x22>
 8012ed2:	6862      	ldr	r2, [r4, #4]
 8012ed4:	42a3      	cmp	r3, r4
 8012ed6:	bf0c      	ite	eq
 8012ed8:	6032      	streq	r2, [r6, #0]
 8012eda:	605a      	strne	r2, [r3, #4]
 8012edc:	e7ec      	b.n	8012eb8 <_malloc_r+0xa0>
 8012ede:	4623      	mov	r3, r4
 8012ee0:	6864      	ldr	r4, [r4, #4]
 8012ee2:	e7b2      	b.n	8012e4a <_malloc_r+0x32>
 8012ee4:	4634      	mov	r4, r6
 8012ee6:	6876      	ldr	r6, [r6, #4]
 8012ee8:	e7b9      	b.n	8012e5e <_malloc_r+0x46>
 8012eea:	230c      	movs	r3, #12
 8012eec:	603b      	str	r3, [r7, #0]
 8012eee:	4638      	mov	r0, r7
 8012ef0:	f000 fa80 	bl	80133f4 <__malloc_unlock>
 8012ef4:	e7a1      	b.n	8012e3a <_malloc_r+0x22>
 8012ef6:	6025      	str	r5, [r4, #0]
 8012ef8:	e7de      	b.n	8012eb8 <_malloc_r+0xa0>
 8012efa:	bf00      	nop
 8012efc:	2000161c 	.word	0x2000161c

08012f00 <iprintf>:
 8012f00:	b40f      	push	{r0, r1, r2, r3}
 8012f02:	4b0a      	ldr	r3, [pc, #40]	; (8012f2c <iprintf+0x2c>)
 8012f04:	b513      	push	{r0, r1, r4, lr}
 8012f06:	681c      	ldr	r4, [r3, #0]
 8012f08:	b124      	cbz	r4, 8012f14 <iprintf+0x14>
 8012f0a:	69a3      	ldr	r3, [r4, #24]
 8012f0c:	b913      	cbnz	r3, 8012f14 <iprintf+0x14>
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f7ff fe10 	bl	8012b34 <__sinit>
 8012f14:	ab05      	add	r3, sp, #20
 8012f16:	9a04      	ldr	r2, [sp, #16]
 8012f18:	68a1      	ldr	r1, [r4, #8]
 8012f1a:	9301      	str	r3, [sp, #4]
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	f000 fbf5 	bl	801370c <_vfiprintf_r>
 8012f22:	b002      	add	sp, #8
 8012f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f28:	b004      	add	sp, #16
 8012f2a:	4770      	bx	lr
 8012f2c:	20000134 	.word	0x20000134

08012f30 <_puts_r>:
 8012f30:	b570      	push	{r4, r5, r6, lr}
 8012f32:	460e      	mov	r6, r1
 8012f34:	4605      	mov	r5, r0
 8012f36:	b118      	cbz	r0, 8012f40 <_puts_r+0x10>
 8012f38:	6983      	ldr	r3, [r0, #24]
 8012f3a:	b90b      	cbnz	r3, 8012f40 <_puts_r+0x10>
 8012f3c:	f7ff fdfa 	bl	8012b34 <__sinit>
 8012f40:	69ab      	ldr	r3, [r5, #24]
 8012f42:	68ac      	ldr	r4, [r5, #8]
 8012f44:	b913      	cbnz	r3, 8012f4c <_puts_r+0x1c>
 8012f46:	4628      	mov	r0, r5
 8012f48:	f7ff fdf4 	bl	8012b34 <__sinit>
 8012f4c:	4b2c      	ldr	r3, [pc, #176]	; (8013000 <_puts_r+0xd0>)
 8012f4e:	429c      	cmp	r4, r3
 8012f50:	d120      	bne.n	8012f94 <_puts_r+0x64>
 8012f52:	686c      	ldr	r4, [r5, #4]
 8012f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f56:	07db      	lsls	r3, r3, #31
 8012f58:	d405      	bmi.n	8012f66 <_puts_r+0x36>
 8012f5a:	89a3      	ldrh	r3, [r4, #12]
 8012f5c:	0598      	lsls	r0, r3, #22
 8012f5e:	d402      	bmi.n	8012f66 <_puts_r+0x36>
 8012f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f62:	f7ff feaa 	bl	8012cba <__retarget_lock_acquire_recursive>
 8012f66:	89a3      	ldrh	r3, [r4, #12]
 8012f68:	0719      	lsls	r1, r3, #28
 8012f6a:	d51d      	bpl.n	8012fa8 <_puts_r+0x78>
 8012f6c:	6923      	ldr	r3, [r4, #16]
 8012f6e:	b1db      	cbz	r3, 8012fa8 <_puts_r+0x78>
 8012f70:	3e01      	subs	r6, #1
 8012f72:	68a3      	ldr	r3, [r4, #8]
 8012f74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012f78:	3b01      	subs	r3, #1
 8012f7a:	60a3      	str	r3, [r4, #8]
 8012f7c:	bb39      	cbnz	r1, 8012fce <_puts_r+0x9e>
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	da38      	bge.n	8012ff4 <_puts_r+0xc4>
 8012f82:	4622      	mov	r2, r4
 8012f84:	210a      	movs	r1, #10
 8012f86:	4628      	mov	r0, r5
 8012f88:	f000 f8d4 	bl	8013134 <__swbuf_r>
 8012f8c:	3001      	adds	r0, #1
 8012f8e:	d011      	beq.n	8012fb4 <_puts_r+0x84>
 8012f90:	250a      	movs	r5, #10
 8012f92:	e011      	b.n	8012fb8 <_puts_r+0x88>
 8012f94:	4b1b      	ldr	r3, [pc, #108]	; (8013004 <_puts_r+0xd4>)
 8012f96:	429c      	cmp	r4, r3
 8012f98:	d101      	bne.n	8012f9e <_puts_r+0x6e>
 8012f9a:	68ac      	ldr	r4, [r5, #8]
 8012f9c:	e7da      	b.n	8012f54 <_puts_r+0x24>
 8012f9e:	4b1a      	ldr	r3, [pc, #104]	; (8013008 <_puts_r+0xd8>)
 8012fa0:	429c      	cmp	r4, r3
 8012fa2:	bf08      	it	eq
 8012fa4:	68ec      	ldreq	r4, [r5, #12]
 8012fa6:	e7d5      	b.n	8012f54 <_puts_r+0x24>
 8012fa8:	4621      	mov	r1, r4
 8012faa:	4628      	mov	r0, r5
 8012fac:	f000 f926 	bl	80131fc <__swsetup_r>
 8012fb0:	2800      	cmp	r0, #0
 8012fb2:	d0dd      	beq.n	8012f70 <_puts_r+0x40>
 8012fb4:	f04f 35ff 	mov.w	r5, #4294967295
 8012fb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012fba:	07da      	lsls	r2, r3, #31
 8012fbc:	d405      	bmi.n	8012fca <_puts_r+0x9a>
 8012fbe:	89a3      	ldrh	r3, [r4, #12]
 8012fc0:	059b      	lsls	r3, r3, #22
 8012fc2:	d402      	bmi.n	8012fca <_puts_r+0x9a>
 8012fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fc6:	f7ff fe79 	bl	8012cbc <__retarget_lock_release_recursive>
 8012fca:	4628      	mov	r0, r5
 8012fcc:	bd70      	pop	{r4, r5, r6, pc}
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	da04      	bge.n	8012fdc <_puts_r+0xac>
 8012fd2:	69a2      	ldr	r2, [r4, #24]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	dc06      	bgt.n	8012fe6 <_puts_r+0xb6>
 8012fd8:	290a      	cmp	r1, #10
 8012fda:	d004      	beq.n	8012fe6 <_puts_r+0xb6>
 8012fdc:	6823      	ldr	r3, [r4, #0]
 8012fde:	1c5a      	adds	r2, r3, #1
 8012fe0:	6022      	str	r2, [r4, #0]
 8012fe2:	7019      	strb	r1, [r3, #0]
 8012fe4:	e7c5      	b.n	8012f72 <_puts_r+0x42>
 8012fe6:	4622      	mov	r2, r4
 8012fe8:	4628      	mov	r0, r5
 8012fea:	f000 f8a3 	bl	8013134 <__swbuf_r>
 8012fee:	3001      	adds	r0, #1
 8012ff0:	d1bf      	bne.n	8012f72 <_puts_r+0x42>
 8012ff2:	e7df      	b.n	8012fb4 <_puts_r+0x84>
 8012ff4:	6823      	ldr	r3, [r4, #0]
 8012ff6:	250a      	movs	r5, #10
 8012ff8:	1c5a      	adds	r2, r3, #1
 8012ffa:	6022      	str	r2, [r4, #0]
 8012ffc:	701d      	strb	r5, [r3, #0]
 8012ffe:	e7db      	b.n	8012fb8 <_puts_r+0x88>
 8013000:	0801d5e0 	.word	0x0801d5e0
 8013004:	0801d600 	.word	0x0801d600
 8013008:	0801d5c0 	.word	0x0801d5c0

0801300c <puts>:
 801300c:	4b02      	ldr	r3, [pc, #8]	; (8013018 <puts+0xc>)
 801300e:	4601      	mov	r1, r0
 8013010:	6818      	ldr	r0, [r3, #0]
 8013012:	f7ff bf8d 	b.w	8012f30 <_puts_r>
 8013016:	bf00      	nop
 8013018:	20000134 	.word	0x20000134

0801301c <_sbrk_r>:
 801301c:	b538      	push	{r3, r4, r5, lr}
 801301e:	4d06      	ldr	r5, [pc, #24]	; (8013038 <_sbrk_r+0x1c>)
 8013020:	2300      	movs	r3, #0
 8013022:	4604      	mov	r4, r0
 8013024:	4608      	mov	r0, r1
 8013026:	602b      	str	r3, [r5, #0]
 8013028:	f7ef fa1e 	bl	8002468 <_sbrk>
 801302c:	1c43      	adds	r3, r0, #1
 801302e:	d102      	bne.n	8013036 <_sbrk_r+0x1a>
 8013030:	682b      	ldr	r3, [r5, #0]
 8013032:	b103      	cbz	r3, 8013036 <_sbrk_r+0x1a>
 8013034:	6023      	str	r3, [r4, #0]
 8013036:	bd38      	pop	{r3, r4, r5, pc}
 8013038:	20001624 	.word	0x20001624

0801303c <__sread>:
 801303c:	b510      	push	{r4, lr}
 801303e:	460c      	mov	r4, r1
 8013040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013044:	f000 fe26 	bl	8013c94 <_read_r>
 8013048:	2800      	cmp	r0, #0
 801304a:	bfab      	itete	ge
 801304c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801304e:	89a3      	ldrhlt	r3, [r4, #12]
 8013050:	181b      	addge	r3, r3, r0
 8013052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013056:	bfac      	ite	ge
 8013058:	6563      	strge	r3, [r4, #84]	; 0x54
 801305a:	81a3      	strhlt	r3, [r4, #12]
 801305c:	bd10      	pop	{r4, pc}

0801305e <__swrite>:
 801305e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013062:	461f      	mov	r7, r3
 8013064:	898b      	ldrh	r3, [r1, #12]
 8013066:	05db      	lsls	r3, r3, #23
 8013068:	4605      	mov	r5, r0
 801306a:	460c      	mov	r4, r1
 801306c:	4616      	mov	r6, r2
 801306e:	d505      	bpl.n	801307c <__swrite+0x1e>
 8013070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013074:	2302      	movs	r3, #2
 8013076:	2200      	movs	r2, #0
 8013078:	f000 f93e 	bl	80132f8 <_lseek_r>
 801307c:	89a3      	ldrh	r3, [r4, #12]
 801307e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013086:	81a3      	strh	r3, [r4, #12]
 8013088:	4632      	mov	r2, r6
 801308a:	463b      	mov	r3, r7
 801308c:	4628      	mov	r0, r5
 801308e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013092:	f000 b8a1 	b.w	80131d8 <_write_r>

08013096 <__sseek>:
 8013096:	b510      	push	{r4, lr}
 8013098:	460c      	mov	r4, r1
 801309a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801309e:	f000 f92b 	bl	80132f8 <_lseek_r>
 80130a2:	1c43      	adds	r3, r0, #1
 80130a4:	89a3      	ldrh	r3, [r4, #12]
 80130a6:	bf15      	itete	ne
 80130a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80130aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80130ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80130b2:	81a3      	strheq	r3, [r4, #12]
 80130b4:	bf18      	it	ne
 80130b6:	81a3      	strhne	r3, [r4, #12]
 80130b8:	bd10      	pop	{r4, pc}

080130ba <__sclose>:
 80130ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130be:	f000 b90b 	b.w	80132d8 <_close_r>

080130c2 <_vsniprintf_r>:
 80130c2:	b530      	push	{r4, r5, lr}
 80130c4:	4614      	mov	r4, r2
 80130c6:	2c00      	cmp	r4, #0
 80130c8:	b09b      	sub	sp, #108	; 0x6c
 80130ca:	4605      	mov	r5, r0
 80130cc:	461a      	mov	r2, r3
 80130ce:	da05      	bge.n	80130dc <_vsniprintf_r+0x1a>
 80130d0:	238b      	movs	r3, #139	; 0x8b
 80130d2:	6003      	str	r3, [r0, #0]
 80130d4:	f04f 30ff 	mov.w	r0, #4294967295
 80130d8:	b01b      	add	sp, #108	; 0x6c
 80130da:	bd30      	pop	{r4, r5, pc}
 80130dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80130e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80130e4:	bf14      	ite	ne
 80130e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80130ea:	4623      	moveq	r3, r4
 80130ec:	9302      	str	r3, [sp, #8]
 80130ee:	9305      	str	r3, [sp, #20]
 80130f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130f4:	9100      	str	r1, [sp, #0]
 80130f6:	9104      	str	r1, [sp, #16]
 80130f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80130fc:	4669      	mov	r1, sp
 80130fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013100:	f000 f9da 	bl	80134b8 <_svfiprintf_r>
 8013104:	1c43      	adds	r3, r0, #1
 8013106:	bfbc      	itt	lt
 8013108:	238b      	movlt	r3, #139	; 0x8b
 801310a:	602b      	strlt	r3, [r5, #0]
 801310c:	2c00      	cmp	r4, #0
 801310e:	d0e3      	beq.n	80130d8 <_vsniprintf_r+0x16>
 8013110:	9b00      	ldr	r3, [sp, #0]
 8013112:	2200      	movs	r2, #0
 8013114:	701a      	strb	r2, [r3, #0]
 8013116:	e7df      	b.n	80130d8 <_vsniprintf_r+0x16>

08013118 <vsniprintf>:
 8013118:	b507      	push	{r0, r1, r2, lr}
 801311a:	9300      	str	r3, [sp, #0]
 801311c:	4613      	mov	r3, r2
 801311e:	460a      	mov	r2, r1
 8013120:	4601      	mov	r1, r0
 8013122:	4803      	ldr	r0, [pc, #12]	; (8013130 <vsniprintf+0x18>)
 8013124:	6800      	ldr	r0, [r0, #0]
 8013126:	f7ff ffcc 	bl	80130c2 <_vsniprintf_r>
 801312a:	b003      	add	sp, #12
 801312c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013130:	20000134 	.word	0x20000134

08013134 <__swbuf_r>:
 8013134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013136:	460e      	mov	r6, r1
 8013138:	4614      	mov	r4, r2
 801313a:	4605      	mov	r5, r0
 801313c:	b118      	cbz	r0, 8013146 <__swbuf_r+0x12>
 801313e:	6983      	ldr	r3, [r0, #24]
 8013140:	b90b      	cbnz	r3, 8013146 <__swbuf_r+0x12>
 8013142:	f7ff fcf7 	bl	8012b34 <__sinit>
 8013146:	4b21      	ldr	r3, [pc, #132]	; (80131cc <__swbuf_r+0x98>)
 8013148:	429c      	cmp	r4, r3
 801314a:	d12b      	bne.n	80131a4 <__swbuf_r+0x70>
 801314c:	686c      	ldr	r4, [r5, #4]
 801314e:	69a3      	ldr	r3, [r4, #24]
 8013150:	60a3      	str	r3, [r4, #8]
 8013152:	89a3      	ldrh	r3, [r4, #12]
 8013154:	071a      	lsls	r2, r3, #28
 8013156:	d52f      	bpl.n	80131b8 <__swbuf_r+0x84>
 8013158:	6923      	ldr	r3, [r4, #16]
 801315a:	b36b      	cbz	r3, 80131b8 <__swbuf_r+0x84>
 801315c:	6923      	ldr	r3, [r4, #16]
 801315e:	6820      	ldr	r0, [r4, #0]
 8013160:	1ac0      	subs	r0, r0, r3
 8013162:	6963      	ldr	r3, [r4, #20]
 8013164:	b2f6      	uxtb	r6, r6
 8013166:	4283      	cmp	r3, r0
 8013168:	4637      	mov	r7, r6
 801316a:	dc04      	bgt.n	8013176 <__swbuf_r+0x42>
 801316c:	4621      	mov	r1, r4
 801316e:	4628      	mov	r0, r5
 8013170:	f7ff fc3a 	bl	80129e8 <_fflush_r>
 8013174:	bb30      	cbnz	r0, 80131c4 <__swbuf_r+0x90>
 8013176:	68a3      	ldr	r3, [r4, #8]
 8013178:	3b01      	subs	r3, #1
 801317a:	60a3      	str	r3, [r4, #8]
 801317c:	6823      	ldr	r3, [r4, #0]
 801317e:	1c5a      	adds	r2, r3, #1
 8013180:	6022      	str	r2, [r4, #0]
 8013182:	701e      	strb	r6, [r3, #0]
 8013184:	6963      	ldr	r3, [r4, #20]
 8013186:	3001      	adds	r0, #1
 8013188:	4283      	cmp	r3, r0
 801318a:	d004      	beq.n	8013196 <__swbuf_r+0x62>
 801318c:	89a3      	ldrh	r3, [r4, #12]
 801318e:	07db      	lsls	r3, r3, #31
 8013190:	d506      	bpl.n	80131a0 <__swbuf_r+0x6c>
 8013192:	2e0a      	cmp	r6, #10
 8013194:	d104      	bne.n	80131a0 <__swbuf_r+0x6c>
 8013196:	4621      	mov	r1, r4
 8013198:	4628      	mov	r0, r5
 801319a:	f7ff fc25 	bl	80129e8 <_fflush_r>
 801319e:	b988      	cbnz	r0, 80131c4 <__swbuf_r+0x90>
 80131a0:	4638      	mov	r0, r7
 80131a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131a4:	4b0a      	ldr	r3, [pc, #40]	; (80131d0 <__swbuf_r+0x9c>)
 80131a6:	429c      	cmp	r4, r3
 80131a8:	d101      	bne.n	80131ae <__swbuf_r+0x7a>
 80131aa:	68ac      	ldr	r4, [r5, #8]
 80131ac:	e7cf      	b.n	801314e <__swbuf_r+0x1a>
 80131ae:	4b09      	ldr	r3, [pc, #36]	; (80131d4 <__swbuf_r+0xa0>)
 80131b0:	429c      	cmp	r4, r3
 80131b2:	bf08      	it	eq
 80131b4:	68ec      	ldreq	r4, [r5, #12]
 80131b6:	e7ca      	b.n	801314e <__swbuf_r+0x1a>
 80131b8:	4621      	mov	r1, r4
 80131ba:	4628      	mov	r0, r5
 80131bc:	f000 f81e 	bl	80131fc <__swsetup_r>
 80131c0:	2800      	cmp	r0, #0
 80131c2:	d0cb      	beq.n	801315c <__swbuf_r+0x28>
 80131c4:	f04f 37ff 	mov.w	r7, #4294967295
 80131c8:	e7ea      	b.n	80131a0 <__swbuf_r+0x6c>
 80131ca:	bf00      	nop
 80131cc:	0801d5e0 	.word	0x0801d5e0
 80131d0:	0801d600 	.word	0x0801d600
 80131d4:	0801d5c0 	.word	0x0801d5c0

080131d8 <_write_r>:
 80131d8:	b538      	push	{r3, r4, r5, lr}
 80131da:	4d07      	ldr	r5, [pc, #28]	; (80131f8 <_write_r+0x20>)
 80131dc:	4604      	mov	r4, r0
 80131de:	4608      	mov	r0, r1
 80131e0:	4611      	mov	r1, r2
 80131e2:	2200      	movs	r2, #0
 80131e4:	602a      	str	r2, [r5, #0]
 80131e6:	461a      	mov	r2, r3
 80131e8:	f7ed fba0 	bl	800092c <_write>
 80131ec:	1c43      	adds	r3, r0, #1
 80131ee:	d102      	bne.n	80131f6 <_write_r+0x1e>
 80131f0:	682b      	ldr	r3, [r5, #0]
 80131f2:	b103      	cbz	r3, 80131f6 <_write_r+0x1e>
 80131f4:	6023      	str	r3, [r4, #0]
 80131f6:	bd38      	pop	{r3, r4, r5, pc}
 80131f8:	20001624 	.word	0x20001624

080131fc <__swsetup_r>:
 80131fc:	4b32      	ldr	r3, [pc, #200]	; (80132c8 <__swsetup_r+0xcc>)
 80131fe:	b570      	push	{r4, r5, r6, lr}
 8013200:	681d      	ldr	r5, [r3, #0]
 8013202:	4606      	mov	r6, r0
 8013204:	460c      	mov	r4, r1
 8013206:	b125      	cbz	r5, 8013212 <__swsetup_r+0x16>
 8013208:	69ab      	ldr	r3, [r5, #24]
 801320a:	b913      	cbnz	r3, 8013212 <__swsetup_r+0x16>
 801320c:	4628      	mov	r0, r5
 801320e:	f7ff fc91 	bl	8012b34 <__sinit>
 8013212:	4b2e      	ldr	r3, [pc, #184]	; (80132cc <__swsetup_r+0xd0>)
 8013214:	429c      	cmp	r4, r3
 8013216:	d10f      	bne.n	8013238 <__swsetup_r+0x3c>
 8013218:	686c      	ldr	r4, [r5, #4]
 801321a:	89a3      	ldrh	r3, [r4, #12]
 801321c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013220:	0719      	lsls	r1, r3, #28
 8013222:	d42c      	bmi.n	801327e <__swsetup_r+0x82>
 8013224:	06dd      	lsls	r5, r3, #27
 8013226:	d411      	bmi.n	801324c <__swsetup_r+0x50>
 8013228:	2309      	movs	r3, #9
 801322a:	6033      	str	r3, [r6, #0]
 801322c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013230:	81a3      	strh	r3, [r4, #12]
 8013232:	f04f 30ff 	mov.w	r0, #4294967295
 8013236:	e03e      	b.n	80132b6 <__swsetup_r+0xba>
 8013238:	4b25      	ldr	r3, [pc, #148]	; (80132d0 <__swsetup_r+0xd4>)
 801323a:	429c      	cmp	r4, r3
 801323c:	d101      	bne.n	8013242 <__swsetup_r+0x46>
 801323e:	68ac      	ldr	r4, [r5, #8]
 8013240:	e7eb      	b.n	801321a <__swsetup_r+0x1e>
 8013242:	4b24      	ldr	r3, [pc, #144]	; (80132d4 <__swsetup_r+0xd8>)
 8013244:	429c      	cmp	r4, r3
 8013246:	bf08      	it	eq
 8013248:	68ec      	ldreq	r4, [r5, #12]
 801324a:	e7e6      	b.n	801321a <__swsetup_r+0x1e>
 801324c:	0758      	lsls	r0, r3, #29
 801324e:	d512      	bpl.n	8013276 <__swsetup_r+0x7a>
 8013250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013252:	b141      	cbz	r1, 8013266 <__swsetup_r+0x6a>
 8013254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013258:	4299      	cmp	r1, r3
 801325a:	d002      	beq.n	8013262 <__swsetup_r+0x66>
 801325c:	4630      	mov	r0, r6
 801325e:	f7ff fd6f 	bl	8012d40 <_free_r>
 8013262:	2300      	movs	r3, #0
 8013264:	6363      	str	r3, [r4, #52]	; 0x34
 8013266:	89a3      	ldrh	r3, [r4, #12]
 8013268:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801326c:	81a3      	strh	r3, [r4, #12]
 801326e:	2300      	movs	r3, #0
 8013270:	6063      	str	r3, [r4, #4]
 8013272:	6923      	ldr	r3, [r4, #16]
 8013274:	6023      	str	r3, [r4, #0]
 8013276:	89a3      	ldrh	r3, [r4, #12]
 8013278:	f043 0308 	orr.w	r3, r3, #8
 801327c:	81a3      	strh	r3, [r4, #12]
 801327e:	6923      	ldr	r3, [r4, #16]
 8013280:	b94b      	cbnz	r3, 8013296 <__swsetup_r+0x9a>
 8013282:	89a3      	ldrh	r3, [r4, #12]
 8013284:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801328c:	d003      	beq.n	8013296 <__swsetup_r+0x9a>
 801328e:	4621      	mov	r1, r4
 8013290:	4630      	mov	r0, r6
 8013292:	f000 f869 	bl	8013368 <__smakebuf_r>
 8013296:	89a0      	ldrh	r0, [r4, #12]
 8013298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801329c:	f010 0301 	ands.w	r3, r0, #1
 80132a0:	d00a      	beq.n	80132b8 <__swsetup_r+0xbc>
 80132a2:	2300      	movs	r3, #0
 80132a4:	60a3      	str	r3, [r4, #8]
 80132a6:	6963      	ldr	r3, [r4, #20]
 80132a8:	425b      	negs	r3, r3
 80132aa:	61a3      	str	r3, [r4, #24]
 80132ac:	6923      	ldr	r3, [r4, #16]
 80132ae:	b943      	cbnz	r3, 80132c2 <__swsetup_r+0xc6>
 80132b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80132b4:	d1ba      	bne.n	801322c <__swsetup_r+0x30>
 80132b6:	bd70      	pop	{r4, r5, r6, pc}
 80132b8:	0781      	lsls	r1, r0, #30
 80132ba:	bf58      	it	pl
 80132bc:	6963      	ldrpl	r3, [r4, #20]
 80132be:	60a3      	str	r3, [r4, #8]
 80132c0:	e7f4      	b.n	80132ac <__swsetup_r+0xb0>
 80132c2:	2000      	movs	r0, #0
 80132c4:	e7f7      	b.n	80132b6 <__swsetup_r+0xba>
 80132c6:	bf00      	nop
 80132c8:	20000134 	.word	0x20000134
 80132cc:	0801d5e0 	.word	0x0801d5e0
 80132d0:	0801d600 	.word	0x0801d600
 80132d4:	0801d5c0 	.word	0x0801d5c0

080132d8 <_close_r>:
 80132d8:	b538      	push	{r3, r4, r5, lr}
 80132da:	4d06      	ldr	r5, [pc, #24]	; (80132f4 <_close_r+0x1c>)
 80132dc:	2300      	movs	r3, #0
 80132de:	4604      	mov	r4, r0
 80132e0:	4608      	mov	r0, r1
 80132e2:	602b      	str	r3, [r5, #0]
 80132e4:	f7ef f88b 	bl	80023fe <_close>
 80132e8:	1c43      	adds	r3, r0, #1
 80132ea:	d102      	bne.n	80132f2 <_close_r+0x1a>
 80132ec:	682b      	ldr	r3, [r5, #0]
 80132ee:	b103      	cbz	r3, 80132f2 <_close_r+0x1a>
 80132f0:	6023      	str	r3, [r4, #0]
 80132f2:	bd38      	pop	{r3, r4, r5, pc}
 80132f4:	20001624 	.word	0x20001624

080132f8 <_lseek_r>:
 80132f8:	b538      	push	{r3, r4, r5, lr}
 80132fa:	4d07      	ldr	r5, [pc, #28]	; (8013318 <_lseek_r+0x20>)
 80132fc:	4604      	mov	r4, r0
 80132fe:	4608      	mov	r0, r1
 8013300:	4611      	mov	r1, r2
 8013302:	2200      	movs	r2, #0
 8013304:	602a      	str	r2, [r5, #0]
 8013306:	461a      	mov	r2, r3
 8013308:	f7ef f8a0 	bl	800244c <_lseek>
 801330c:	1c43      	adds	r3, r0, #1
 801330e:	d102      	bne.n	8013316 <_lseek_r+0x1e>
 8013310:	682b      	ldr	r3, [r5, #0]
 8013312:	b103      	cbz	r3, 8013316 <_lseek_r+0x1e>
 8013314:	6023      	str	r3, [r4, #0]
 8013316:	bd38      	pop	{r3, r4, r5, pc}
 8013318:	20001624 	.word	0x20001624

0801331c <__swhatbuf_r>:
 801331c:	b570      	push	{r4, r5, r6, lr}
 801331e:	460e      	mov	r6, r1
 8013320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013324:	2900      	cmp	r1, #0
 8013326:	b096      	sub	sp, #88	; 0x58
 8013328:	4614      	mov	r4, r2
 801332a:	461d      	mov	r5, r3
 801332c:	da08      	bge.n	8013340 <__swhatbuf_r+0x24>
 801332e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013332:	2200      	movs	r2, #0
 8013334:	602a      	str	r2, [r5, #0]
 8013336:	061a      	lsls	r2, r3, #24
 8013338:	d410      	bmi.n	801335c <__swhatbuf_r+0x40>
 801333a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801333e:	e00e      	b.n	801335e <__swhatbuf_r+0x42>
 8013340:	466a      	mov	r2, sp
 8013342:	f000 fcb9 	bl	8013cb8 <_fstat_r>
 8013346:	2800      	cmp	r0, #0
 8013348:	dbf1      	blt.n	801332e <__swhatbuf_r+0x12>
 801334a:	9a01      	ldr	r2, [sp, #4]
 801334c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013350:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013354:	425a      	negs	r2, r3
 8013356:	415a      	adcs	r2, r3
 8013358:	602a      	str	r2, [r5, #0]
 801335a:	e7ee      	b.n	801333a <__swhatbuf_r+0x1e>
 801335c:	2340      	movs	r3, #64	; 0x40
 801335e:	2000      	movs	r0, #0
 8013360:	6023      	str	r3, [r4, #0]
 8013362:	b016      	add	sp, #88	; 0x58
 8013364:	bd70      	pop	{r4, r5, r6, pc}
	...

08013368 <__smakebuf_r>:
 8013368:	898b      	ldrh	r3, [r1, #12]
 801336a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801336c:	079d      	lsls	r5, r3, #30
 801336e:	4606      	mov	r6, r0
 8013370:	460c      	mov	r4, r1
 8013372:	d507      	bpl.n	8013384 <__smakebuf_r+0x1c>
 8013374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013378:	6023      	str	r3, [r4, #0]
 801337a:	6123      	str	r3, [r4, #16]
 801337c:	2301      	movs	r3, #1
 801337e:	6163      	str	r3, [r4, #20]
 8013380:	b002      	add	sp, #8
 8013382:	bd70      	pop	{r4, r5, r6, pc}
 8013384:	ab01      	add	r3, sp, #4
 8013386:	466a      	mov	r2, sp
 8013388:	f7ff ffc8 	bl	801331c <__swhatbuf_r>
 801338c:	9900      	ldr	r1, [sp, #0]
 801338e:	4605      	mov	r5, r0
 8013390:	4630      	mov	r0, r6
 8013392:	f7ff fd41 	bl	8012e18 <_malloc_r>
 8013396:	b948      	cbnz	r0, 80133ac <__smakebuf_r+0x44>
 8013398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801339c:	059a      	lsls	r2, r3, #22
 801339e:	d4ef      	bmi.n	8013380 <__smakebuf_r+0x18>
 80133a0:	f023 0303 	bic.w	r3, r3, #3
 80133a4:	f043 0302 	orr.w	r3, r3, #2
 80133a8:	81a3      	strh	r3, [r4, #12]
 80133aa:	e7e3      	b.n	8013374 <__smakebuf_r+0xc>
 80133ac:	4b0d      	ldr	r3, [pc, #52]	; (80133e4 <__smakebuf_r+0x7c>)
 80133ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80133b0:	89a3      	ldrh	r3, [r4, #12]
 80133b2:	6020      	str	r0, [r4, #0]
 80133b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133b8:	81a3      	strh	r3, [r4, #12]
 80133ba:	9b00      	ldr	r3, [sp, #0]
 80133bc:	6163      	str	r3, [r4, #20]
 80133be:	9b01      	ldr	r3, [sp, #4]
 80133c0:	6120      	str	r0, [r4, #16]
 80133c2:	b15b      	cbz	r3, 80133dc <__smakebuf_r+0x74>
 80133c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133c8:	4630      	mov	r0, r6
 80133ca:	f000 fc87 	bl	8013cdc <_isatty_r>
 80133ce:	b128      	cbz	r0, 80133dc <__smakebuf_r+0x74>
 80133d0:	89a3      	ldrh	r3, [r4, #12]
 80133d2:	f023 0303 	bic.w	r3, r3, #3
 80133d6:	f043 0301 	orr.w	r3, r3, #1
 80133da:	81a3      	strh	r3, [r4, #12]
 80133dc:	89a0      	ldrh	r0, [r4, #12]
 80133de:	4305      	orrs	r5, r0
 80133e0:	81a5      	strh	r5, [r4, #12]
 80133e2:	e7cd      	b.n	8013380 <__smakebuf_r+0x18>
 80133e4:	08012acd 	.word	0x08012acd

080133e8 <__malloc_lock>:
 80133e8:	4801      	ldr	r0, [pc, #4]	; (80133f0 <__malloc_lock+0x8>)
 80133ea:	f7ff bc66 	b.w	8012cba <__retarget_lock_acquire_recursive>
 80133ee:	bf00      	nop
 80133f0:	20001618 	.word	0x20001618

080133f4 <__malloc_unlock>:
 80133f4:	4801      	ldr	r0, [pc, #4]	; (80133fc <__malloc_unlock+0x8>)
 80133f6:	f7ff bc61 	b.w	8012cbc <__retarget_lock_release_recursive>
 80133fa:	bf00      	nop
 80133fc:	20001618 	.word	0x20001618

08013400 <__ssputs_r>:
 8013400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013404:	688e      	ldr	r6, [r1, #8]
 8013406:	429e      	cmp	r6, r3
 8013408:	4682      	mov	sl, r0
 801340a:	460c      	mov	r4, r1
 801340c:	4690      	mov	r8, r2
 801340e:	461f      	mov	r7, r3
 8013410:	d838      	bhi.n	8013484 <__ssputs_r+0x84>
 8013412:	898a      	ldrh	r2, [r1, #12]
 8013414:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013418:	d032      	beq.n	8013480 <__ssputs_r+0x80>
 801341a:	6825      	ldr	r5, [r4, #0]
 801341c:	6909      	ldr	r1, [r1, #16]
 801341e:	eba5 0901 	sub.w	r9, r5, r1
 8013422:	6965      	ldr	r5, [r4, #20]
 8013424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013428:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801342c:	3301      	adds	r3, #1
 801342e:	444b      	add	r3, r9
 8013430:	106d      	asrs	r5, r5, #1
 8013432:	429d      	cmp	r5, r3
 8013434:	bf38      	it	cc
 8013436:	461d      	movcc	r5, r3
 8013438:	0553      	lsls	r3, r2, #21
 801343a:	d531      	bpl.n	80134a0 <__ssputs_r+0xa0>
 801343c:	4629      	mov	r1, r5
 801343e:	f7ff fceb 	bl	8012e18 <_malloc_r>
 8013442:	4606      	mov	r6, r0
 8013444:	b950      	cbnz	r0, 801345c <__ssputs_r+0x5c>
 8013446:	230c      	movs	r3, #12
 8013448:	f8ca 3000 	str.w	r3, [sl]
 801344c:	89a3      	ldrh	r3, [r4, #12]
 801344e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013452:	81a3      	strh	r3, [r4, #12]
 8013454:	f04f 30ff 	mov.w	r0, #4294967295
 8013458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801345c:	6921      	ldr	r1, [r4, #16]
 801345e:	464a      	mov	r2, r9
 8013460:	f7ff fc3e 	bl	8012ce0 <memcpy>
 8013464:	89a3      	ldrh	r3, [r4, #12]
 8013466:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801346a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801346e:	81a3      	strh	r3, [r4, #12]
 8013470:	6126      	str	r6, [r4, #16]
 8013472:	6165      	str	r5, [r4, #20]
 8013474:	444e      	add	r6, r9
 8013476:	eba5 0509 	sub.w	r5, r5, r9
 801347a:	6026      	str	r6, [r4, #0]
 801347c:	60a5      	str	r5, [r4, #8]
 801347e:	463e      	mov	r6, r7
 8013480:	42be      	cmp	r6, r7
 8013482:	d900      	bls.n	8013486 <__ssputs_r+0x86>
 8013484:	463e      	mov	r6, r7
 8013486:	6820      	ldr	r0, [r4, #0]
 8013488:	4632      	mov	r2, r6
 801348a:	4641      	mov	r1, r8
 801348c:	f7ff fc36 	bl	8012cfc <memmove>
 8013490:	68a3      	ldr	r3, [r4, #8]
 8013492:	1b9b      	subs	r3, r3, r6
 8013494:	60a3      	str	r3, [r4, #8]
 8013496:	6823      	ldr	r3, [r4, #0]
 8013498:	4433      	add	r3, r6
 801349a:	6023      	str	r3, [r4, #0]
 801349c:	2000      	movs	r0, #0
 801349e:	e7db      	b.n	8013458 <__ssputs_r+0x58>
 80134a0:	462a      	mov	r2, r5
 80134a2:	f000 fc2b 	bl	8013cfc <_realloc_r>
 80134a6:	4606      	mov	r6, r0
 80134a8:	2800      	cmp	r0, #0
 80134aa:	d1e1      	bne.n	8013470 <__ssputs_r+0x70>
 80134ac:	6921      	ldr	r1, [r4, #16]
 80134ae:	4650      	mov	r0, sl
 80134b0:	f7ff fc46 	bl	8012d40 <_free_r>
 80134b4:	e7c7      	b.n	8013446 <__ssputs_r+0x46>
	...

080134b8 <_svfiprintf_r>:
 80134b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134bc:	4698      	mov	r8, r3
 80134be:	898b      	ldrh	r3, [r1, #12]
 80134c0:	061b      	lsls	r3, r3, #24
 80134c2:	b09d      	sub	sp, #116	; 0x74
 80134c4:	4607      	mov	r7, r0
 80134c6:	460d      	mov	r5, r1
 80134c8:	4614      	mov	r4, r2
 80134ca:	d50e      	bpl.n	80134ea <_svfiprintf_r+0x32>
 80134cc:	690b      	ldr	r3, [r1, #16]
 80134ce:	b963      	cbnz	r3, 80134ea <_svfiprintf_r+0x32>
 80134d0:	2140      	movs	r1, #64	; 0x40
 80134d2:	f7ff fca1 	bl	8012e18 <_malloc_r>
 80134d6:	6028      	str	r0, [r5, #0]
 80134d8:	6128      	str	r0, [r5, #16]
 80134da:	b920      	cbnz	r0, 80134e6 <_svfiprintf_r+0x2e>
 80134dc:	230c      	movs	r3, #12
 80134de:	603b      	str	r3, [r7, #0]
 80134e0:	f04f 30ff 	mov.w	r0, #4294967295
 80134e4:	e0d1      	b.n	801368a <_svfiprintf_r+0x1d2>
 80134e6:	2340      	movs	r3, #64	; 0x40
 80134e8:	616b      	str	r3, [r5, #20]
 80134ea:	2300      	movs	r3, #0
 80134ec:	9309      	str	r3, [sp, #36]	; 0x24
 80134ee:	2320      	movs	r3, #32
 80134f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80134f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80134f8:	2330      	movs	r3, #48	; 0x30
 80134fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80136a4 <_svfiprintf_r+0x1ec>
 80134fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013502:	f04f 0901 	mov.w	r9, #1
 8013506:	4623      	mov	r3, r4
 8013508:	469a      	mov	sl, r3
 801350a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801350e:	b10a      	cbz	r2, 8013514 <_svfiprintf_r+0x5c>
 8013510:	2a25      	cmp	r2, #37	; 0x25
 8013512:	d1f9      	bne.n	8013508 <_svfiprintf_r+0x50>
 8013514:	ebba 0b04 	subs.w	fp, sl, r4
 8013518:	d00b      	beq.n	8013532 <_svfiprintf_r+0x7a>
 801351a:	465b      	mov	r3, fp
 801351c:	4622      	mov	r2, r4
 801351e:	4629      	mov	r1, r5
 8013520:	4638      	mov	r0, r7
 8013522:	f7ff ff6d 	bl	8013400 <__ssputs_r>
 8013526:	3001      	adds	r0, #1
 8013528:	f000 80aa 	beq.w	8013680 <_svfiprintf_r+0x1c8>
 801352c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801352e:	445a      	add	r2, fp
 8013530:	9209      	str	r2, [sp, #36]	; 0x24
 8013532:	f89a 3000 	ldrb.w	r3, [sl]
 8013536:	2b00      	cmp	r3, #0
 8013538:	f000 80a2 	beq.w	8013680 <_svfiprintf_r+0x1c8>
 801353c:	2300      	movs	r3, #0
 801353e:	f04f 32ff 	mov.w	r2, #4294967295
 8013542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013546:	f10a 0a01 	add.w	sl, sl, #1
 801354a:	9304      	str	r3, [sp, #16]
 801354c:	9307      	str	r3, [sp, #28]
 801354e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013552:	931a      	str	r3, [sp, #104]	; 0x68
 8013554:	4654      	mov	r4, sl
 8013556:	2205      	movs	r2, #5
 8013558:	f814 1b01 	ldrb.w	r1, [r4], #1
 801355c:	4851      	ldr	r0, [pc, #324]	; (80136a4 <_svfiprintf_r+0x1ec>)
 801355e:	f7ec feaf 	bl	80002c0 <memchr>
 8013562:	9a04      	ldr	r2, [sp, #16]
 8013564:	b9d8      	cbnz	r0, 801359e <_svfiprintf_r+0xe6>
 8013566:	06d0      	lsls	r0, r2, #27
 8013568:	bf44      	itt	mi
 801356a:	2320      	movmi	r3, #32
 801356c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013570:	0711      	lsls	r1, r2, #28
 8013572:	bf44      	itt	mi
 8013574:	232b      	movmi	r3, #43	; 0x2b
 8013576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801357a:	f89a 3000 	ldrb.w	r3, [sl]
 801357e:	2b2a      	cmp	r3, #42	; 0x2a
 8013580:	d015      	beq.n	80135ae <_svfiprintf_r+0xf6>
 8013582:	9a07      	ldr	r2, [sp, #28]
 8013584:	4654      	mov	r4, sl
 8013586:	2000      	movs	r0, #0
 8013588:	f04f 0c0a 	mov.w	ip, #10
 801358c:	4621      	mov	r1, r4
 801358e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013592:	3b30      	subs	r3, #48	; 0x30
 8013594:	2b09      	cmp	r3, #9
 8013596:	d94e      	bls.n	8013636 <_svfiprintf_r+0x17e>
 8013598:	b1b0      	cbz	r0, 80135c8 <_svfiprintf_r+0x110>
 801359a:	9207      	str	r2, [sp, #28]
 801359c:	e014      	b.n	80135c8 <_svfiprintf_r+0x110>
 801359e:	eba0 0308 	sub.w	r3, r0, r8
 80135a2:	fa09 f303 	lsl.w	r3, r9, r3
 80135a6:	4313      	orrs	r3, r2
 80135a8:	9304      	str	r3, [sp, #16]
 80135aa:	46a2      	mov	sl, r4
 80135ac:	e7d2      	b.n	8013554 <_svfiprintf_r+0x9c>
 80135ae:	9b03      	ldr	r3, [sp, #12]
 80135b0:	1d19      	adds	r1, r3, #4
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	9103      	str	r1, [sp, #12]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	bfbb      	ittet	lt
 80135ba:	425b      	neglt	r3, r3
 80135bc:	f042 0202 	orrlt.w	r2, r2, #2
 80135c0:	9307      	strge	r3, [sp, #28]
 80135c2:	9307      	strlt	r3, [sp, #28]
 80135c4:	bfb8      	it	lt
 80135c6:	9204      	strlt	r2, [sp, #16]
 80135c8:	7823      	ldrb	r3, [r4, #0]
 80135ca:	2b2e      	cmp	r3, #46	; 0x2e
 80135cc:	d10c      	bne.n	80135e8 <_svfiprintf_r+0x130>
 80135ce:	7863      	ldrb	r3, [r4, #1]
 80135d0:	2b2a      	cmp	r3, #42	; 0x2a
 80135d2:	d135      	bne.n	8013640 <_svfiprintf_r+0x188>
 80135d4:	9b03      	ldr	r3, [sp, #12]
 80135d6:	1d1a      	adds	r2, r3, #4
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	9203      	str	r2, [sp, #12]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	bfb8      	it	lt
 80135e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80135e4:	3402      	adds	r4, #2
 80135e6:	9305      	str	r3, [sp, #20]
 80135e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80136b4 <_svfiprintf_r+0x1fc>
 80135ec:	7821      	ldrb	r1, [r4, #0]
 80135ee:	2203      	movs	r2, #3
 80135f0:	4650      	mov	r0, sl
 80135f2:	f7ec fe65 	bl	80002c0 <memchr>
 80135f6:	b140      	cbz	r0, 801360a <_svfiprintf_r+0x152>
 80135f8:	2340      	movs	r3, #64	; 0x40
 80135fa:	eba0 000a 	sub.w	r0, r0, sl
 80135fe:	fa03 f000 	lsl.w	r0, r3, r0
 8013602:	9b04      	ldr	r3, [sp, #16]
 8013604:	4303      	orrs	r3, r0
 8013606:	3401      	adds	r4, #1
 8013608:	9304      	str	r3, [sp, #16]
 801360a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801360e:	4826      	ldr	r0, [pc, #152]	; (80136a8 <_svfiprintf_r+0x1f0>)
 8013610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013614:	2206      	movs	r2, #6
 8013616:	f7ec fe53 	bl	80002c0 <memchr>
 801361a:	2800      	cmp	r0, #0
 801361c:	d038      	beq.n	8013690 <_svfiprintf_r+0x1d8>
 801361e:	4b23      	ldr	r3, [pc, #140]	; (80136ac <_svfiprintf_r+0x1f4>)
 8013620:	bb1b      	cbnz	r3, 801366a <_svfiprintf_r+0x1b2>
 8013622:	9b03      	ldr	r3, [sp, #12]
 8013624:	3307      	adds	r3, #7
 8013626:	f023 0307 	bic.w	r3, r3, #7
 801362a:	3308      	adds	r3, #8
 801362c:	9303      	str	r3, [sp, #12]
 801362e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013630:	4433      	add	r3, r6
 8013632:	9309      	str	r3, [sp, #36]	; 0x24
 8013634:	e767      	b.n	8013506 <_svfiprintf_r+0x4e>
 8013636:	fb0c 3202 	mla	r2, ip, r2, r3
 801363a:	460c      	mov	r4, r1
 801363c:	2001      	movs	r0, #1
 801363e:	e7a5      	b.n	801358c <_svfiprintf_r+0xd4>
 8013640:	2300      	movs	r3, #0
 8013642:	3401      	adds	r4, #1
 8013644:	9305      	str	r3, [sp, #20]
 8013646:	4619      	mov	r1, r3
 8013648:	f04f 0c0a 	mov.w	ip, #10
 801364c:	4620      	mov	r0, r4
 801364e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013652:	3a30      	subs	r2, #48	; 0x30
 8013654:	2a09      	cmp	r2, #9
 8013656:	d903      	bls.n	8013660 <_svfiprintf_r+0x1a8>
 8013658:	2b00      	cmp	r3, #0
 801365a:	d0c5      	beq.n	80135e8 <_svfiprintf_r+0x130>
 801365c:	9105      	str	r1, [sp, #20]
 801365e:	e7c3      	b.n	80135e8 <_svfiprintf_r+0x130>
 8013660:	fb0c 2101 	mla	r1, ip, r1, r2
 8013664:	4604      	mov	r4, r0
 8013666:	2301      	movs	r3, #1
 8013668:	e7f0      	b.n	801364c <_svfiprintf_r+0x194>
 801366a:	ab03      	add	r3, sp, #12
 801366c:	9300      	str	r3, [sp, #0]
 801366e:	462a      	mov	r2, r5
 8013670:	4b0f      	ldr	r3, [pc, #60]	; (80136b0 <_svfiprintf_r+0x1f8>)
 8013672:	a904      	add	r1, sp, #16
 8013674:	4638      	mov	r0, r7
 8013676:	f3af 8000 	nop.w
 801367a:	1c42      	adds	r2, r0, #1
 801367c:	4606      	mov	r6, r0
 801367e:	d1d6      	bne.n	801362e <_svfiprintf_r+0x176>
 8013680:	89ab      	ldrh	r3, [r5, #12]
 8013682:	065b      	lsls	r3, r3, #25
 8013684:	f53f af2c 	bmi.w	80134e0 <_svfiprintf_r+0x28>
 8013688:	9809      	ldr	r0, [sp, #36]	; 0x24
 801368a:	b01d      	add	sp, #116	; 0x74
 801368c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013690:	ab03      	add	r3, sp, #12
 8013692:	9300      	str	r3, [sp, #0]
 8013694:	462a      	mov	r2, r5
 8013696:	4b06      	ldr	r3, [pc, #24]	; (80136b0 <_svfiprintf_r+0x1f8>)
 8013698:	a904      	add	r1, sp, #16
 801369a:	4638      	mov	r0, r7
 801369c:	f000 f9d4 	bl	8013a48 <_printf_i>
 80136a0:	e7eb      	b.n	801367a <_svfiprintf_r+0x1c2>
 80136a2:	bf00      	nop
 80136a4:	0801d624 	.word	0x0801d624
 80136a8:	0801d62e 	.word	0x0801d62e
 80136ac:	00000000 	.word	0x00000000
 80136b0:	08013401 	.word	0x08013401
 80136b4:	0801d62a 	.word	0x0801d62a

080136b8 <__sfputc_r>:
 80136b8:	6893      	ldr	r3, [r2, #8]
 80136ba:	3b01      	subs	r3, #1
 80136bc:	2b00      	cmp	r3, #0
 80136be:	b410      	push	{r4}
 80136c0:	6093      	str	r3, [r2, #8]
 80136c2:	da08      	bge.n	80136d6 <__sfputc_r+0x1e>
 80136c4:	6994      	ldr	r4, [r2, #24]
 80136c6:	42a3      	cmp	r3, r4
 80136c8:	db01      	blt.n	80136ce <__sfputc_r+0x16>
 80136ca:	290a      	cmp	r1, #10
 80136cc:	d103      	bne.n	80136d6 <__sfputc_r+0x1e>
 80136ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136d2:	f7ff bd2f 	b.w	8013134 <__swbuf_r>
 80136d6:	6813      	ldr	r3, [r2, #0]
 80136d8:	1c58      	adds	r0, r3, #1
 80136da:	6010      	str	r0, [r2, #0]
 80136dc:	7019      	strb	r1, [r3, #0]
 80136de:	4608      	mov	r0, r1
 80136e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136e4:	4770      	bx	lr

080136e6 <__sfputs_r>:
 80136e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136e8:	4606      	mov	r6, r0
 80136ea:	460f      	mov	r7, r1
 80136ec:	4614      	mov	r4, r2
 80136ee:	18d5      	adds	r5, r2, r3
 80136f0:	42ac      	cmp	r4, r5
 80136f2:	d101      	bne.n	80136f8 <__sfputs_r+0x12>
 80136f4:	2000      	movs	r0, #0
 80136f6:	e007      	b.n	8013708 <__sfputs_r+0x22>
 80136f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136fc:	463a      	mov	r2, r7
 80136fe:	4630      	mov	r0, r6
 8013700:	f7ff ffda 	bl	80136b8 <__sfputc_r>
 8013704:	1c43      	adds	r3, r0, #1
 8013706:	d1f3      	bne.n	80136f0 <__sfputs_r+0xa>
 8013708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801370c <_vfiprintf_r>:
 801370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013710:	460d      	mov	r5, r1
 8013712:	b09d      	sub	sp, #116	; 0x74
 8013714:	4614      	mov	r4, r2
 8013716:	4698      	mov	r8, r3
 8013718:	4606      	mov	r6, r0
 801371a:	b118      	cbz	r0, 8013724 <_vfiprintf_r+0x18>
 801371c:	6983      	ldr	r3, [r0, #24]
 801371e:	b90b      	cbnz	r3, 8013724 <_vfiprintf_r+0x18>
 8013720:	f7ff fa08 	bl	8012b34 <__sinit>
 8013724:	4b89      	ldr	r3, [pc, #548]	; (801394c <_vfiprintf_r+0x240>)
 8013726:	429d      	cmp	r5, r3
 8013728:	d11b      	bne.n	8013762 <_vfiprintf_r+0x56>
 801372a:	6875      	ldr	r5, [r6, #4]
 801372c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801372e:	07d9      	lsls	r1, r3, #31
 8013730:	d405      	bmi.n	801373e <_vfiprintf_r+0x32>
 8013732:	89ab      	ldrh	r3, [r5, #12]
 8013734:	059a      	lsls	r2, r3, #22
 8013736:	d402      	bmi.n	801373e <_vfiprintf_r+0x32>
 8013738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801373a:	f7ff fabe 	bl	8012cba <__retarget_lock_acquire_recursive>
 801373e:	89ab      	ldrh	r3, [r5, #12]
 8013740:	071b      	lsls	r3, r3, #28
 8013742:	d501      	bpl.n	8013748 <_vfiprintf_r+0x3c>
 8013744:	692b      	ldr	r3, [r5, #16]
 8013746:	b9eb      	cbnz	r3, 8013784 <_vfiprintf_r+0x78>
 8013748:	4629      	mov	r1, r5
 801374a:	4630      	mov	r0, r6
 801374c:	f7ff fd56 	bl	80131fc <__swsetup_r>
 8013750:	b1c0      	cbz	r0, 8013784 <_vfiprintf_r+0x78>
 8013752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013754:	07dc      	lsls	r4, r3, #31
 8013756:	d50e      	bpl.n	8013776 <_vfiprintf_r+0x6a>
 8013758:	f04f 30ff 	mov.w	r0, #4294967295
 801375c:	b01d      	add	sp, #116	; 0x74
 801375e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013762:	4b7b      	ldr	r3, [pc, #492]	; (8013950 <_vfiprintf_r+0x244>)
 8013764:	429d      	cmp	r5, r3
 8013766:	d101      	bne.n	801376c <_vfiprintf_r+0x60>
 8013768:	68b5      	ldr	r5, [r6, #8]
 801376a:	e7df      	b.n	801372c <_vfiprintf_r+0x20>
 801376c:	4b79      	ldr	r3, [pc, #484]	; (8013954 <_vfiprintf_r+0x248>)
 801376e:	429d      	cmp	r5, r3
 8013770:	bf08      	it	eq
 8013772:	68f5      	ldreq	r5, [r6, #12]
 8013774:	e7da      	b.n	801372c <_vfiprintf_r+0x20>
 8013776:	89ab      	ldrh	r3, [r5, #12]
 8013778:	0598      	lsls	r0, r3, #22
 801377a:	d4ed      	bmi.n	8013758 <_vfiprintf_r+0x4c>
 801377c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801377e:	f7ff fa9d 	bl	8012cbc <__retarget_lock_release_recursive>
 8013782:	e7e9      	b.n	8013758 <_vfiprintf_r+0x4c>
 8013784:	2300      	movs	r3, #0
 8013786:	9309      	str	r3, [sp, #36]	; 0x24
 8013788:	2320      	movs	r3, #32
 801378a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801378e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013792:	2330      	movs	r3, #48	; 0x30
 8013794:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013958 <_vfiprintf_r+0x24c>
 8013798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801379c:	f04f 0901 	mov.w	r9, #1
 80137a0:	4623      	mov	r3, r4
 80137a2:	469a      	mov	sl, r3
 80137a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137a8:	b10a      	cbz	r2, 80137ae <_vfiprintf_r+0xa2>
 80137aa:	2a25      	cmp	r2, #37	; 0x25
 80137ac:	d1f9      	bne.n	80137a2 <_vfiprintf_r+0x96>
 80137ae:	ebba 0b04 	subs.w	fp, sl, r4
 80137b2:	d00b      	beq.n	80137cc <_vfiprintf_r+0xc0>
 80137b4:	465b      	mov	r3, fp
 80137b6:	4622      	mov	r2, r4
 80137b8:	4629      	mov	r1, r5
 80137ba:	4630      	mov	r0, r6
 80137bc:	f7ff ff93 	bl	80136e6 <__sfputs_r>
 80137c0:	3001      	adds	r0, #1
 80137c2:	f000 80aa 	beq.w	801391a <_vfiprintf_r+0x20e>
 80137c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137c8:	445a      	add	r2, fp
 80137ca:	9209      	str	r2, [sp, #36]	; 0x24
 80137cc:	f89a 3000 	ldrb.w	r3, [sl]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f000 80a2 	beq.w	801391a <_vfiprintf_r+0x20e>
 80137d6:	2300      	movs	r3, #0
 80137d8:	f04f 32ff 	mov.w	r2, #4294967295
 80137dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137e0:	f10a 0a01 	add.w	sl, sl, #1
 80137e4:	9304      	str	r3, [sp, #16]
 80137e6:	9307      	str	r3, [sp, #28]
 80137e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137ec:	931a      	str	r3, [sp, #104]	; 0x68
 80137ee:	4654      	mov	r4, sl
 80137f0:	2205      	movs	r2, #5
 80137f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137f6:	4858      	ldr	r0, [pc, #352]	; (8013958 <_vfiprintf_r+0x24c>)
 80137f8:	f7ec fd62 	bl	80002c0 <memchr>
 80137fc:	9a04      	ldr	r2, [sp, #16]
 80137fe:	b9d8      	cbnz	r0, 8013838 <_vfiprintf_r+0x12c>
 8013800:	06d1      	lsls	r1, r2, #27
 8013802:	bf44      	itt	mi
 8013804:	2320      	movmi	r3, #32
 8013806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801380a:	0713      	lsls	r3, r2, #28
 801380c:	bf44      	itt	mi
 801380e:	232b      	movmi	r3, #43	; 0x2b
 8013810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013814:	f89a 3000 	ldrb.w	r3, [sl]
 8013818:	2b2a      	cmp	r3, #42	; 0x2a
 801381a:	d015      	beq.n	8013848 <_vfiprintf_r+0x13c>
 801381c:	9a07      	ldr	r2, [sp, #28]
 801381e:	4654      	mov	r4, sl
 8013820:	2000      	movs	r0, #0
 8013822:	f04f 0c0a 	mov.w	ip, #10
 8013826:	4621      	mov	r1, r4
 8013828:	f811 3b01 	ldrb.w	r3, [r1], #1
 801382c:	3b30      	subs	r3, #48	; 0x30
 801382e:	2b09      	cmp	r3, #9
 8013830:	d94e      	bls.n	80138d0 <_vfiprintf_r+0x1c4>
 8013832:	b1b0      	cbz	r0, 8013862 <_vfiprintf_r+0x156>
 8013834:	9207      	str	r2, [sp, #28]
 8013836:	e014      	b.n	8013862 <_vfiprintf_r+0x156>
 8013838:	eba0 0308 	sub.w	r3, r0, r8
 801383c:	fa09 f303 	lsl.w	r3, r9, r3
 8013840:	4313      	orrs	r3, r2
 8013842:	9304      	str	r3, [sp, #16]
 8013844:	46a2      	mov	sl, r4
 8013846:	e7d2      	b.n	80137ee <_vfiprintf_r+0xe2>
 8013848:	9b03      	ldr	r3, [sp, #12]
 801384a:	1d19      	adds	r1, r3, #4
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	9103      	str	r1, [sp, #12]
 8013850:	2b00      	cmp	r3, #0
 8013852:	bfbb      	ittet	lt
 8013854:	425b      	neglt	r3, r3
 8013856:	f042 0202 	orrlt.w	r2, r2, #2
 801385a:	9307      	strge	r3, [sp, #28]
 801385c:	9307      	strlt	r3, [sp, #28]
 801385e:	bfb8      	it	lt
 8013860:	9204      	strlt	r2, [sp, #16]
 8013862:	7823      	ldrb	r3, [r4, #0]
 8013864:	2b2e      	cmp	r3, #46	; 0x2e
 8013866:	d10c      	bne.n	8013882 <_vfiprintf_r+0x176>
 8013868:	7863      	ldrb	r3, [r4, #1]
 801386a:	2b2a      	cmp	r3, #42	; 0x2a
 801386c:	d135      	bne.n	80138da <_vfiprintf_r+0x1ce>
 801386e:	9b03      	ldr	r3, [sp, #12]
 8013870:	1d1a      	adds	r2, r3, #4
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	9203      	str	r2, [sp, #12]
 8013876:	2b00      	cmp	r3, #0
 8013878:	bfb8      	it	lt
 801387a:	f04f 33ff 	movlt.w	r3, #4294967295
 801387e:	3402      	adds	r4, #2
 8013880:	9305      	str	r3, [sp, #20]
 8013882:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013968 <_vfiprintf_r+0x25c>
 8013886:	7821      	ldrb	r1, [r4, #0]
 8013888:	2203      	movs	r2, #3
 801388a:	4650      	mov	r0, sl
 801388c:	f7ec fd18 	bl	80002c0 <memchr>
 8013890:	b140      	cbz	r0, 80138a4 <_vfiprintf_r+0x198>
 8013892:	2340      	movs	r3, #64	; 0x40
 8013894:	eba0 000a 	sub.w	r0, r0, sl
 8013898:	fa03 f000 	lsl.w	r0, r3, r0
 801389c:	9b04      	ldr	r3, [sp, #16]
 801389e:	4303      	orrs	r3, r0
 80138a0:	3401      	adds	r4, #1
 80138a2:	9304      	str	r3, [sp, #16]
 80138a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138a8:	482c      	ldr	r0, [pc, #176]	; (801395c <_vfiprintf_r+0x250>)
 80138aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138ae:	2206      	movs	r2, #6
 80138b0:	f7ec fd06 	bl	80002c0 <memchr>
 80138b4:	2800      	cmp	r0, #0
 80138b6:	d03f      	beq.n	8013938 <_vfiprintf_r+0x22c>
 80138b8:	4b29      	ldr	r3, [pc, #164]	; (8013960 <_vfiprintf_r+0x254>)
 80138ba:	bb1b      	cbnz	r3, 8013904 <_vfiprintf_r+0x1f8>
 80138bc:	9b03      	ldr	r3, [sp, #12]
 80138be:	3307      	adds	r3, #7
 80138c0:	f023 0307 	bic.w	r3, r3, #7
 80138c4:	3308      	adds	r3, #8
 80138c6:	9303      	str	r3, [sp, #12]
 80138c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138ca:	443b      	add	r3, r7
 80138cc:	9309      	str	r3, [sp, #36]	; 0x24
 80138ce:	e767      	b.n	80137a0 <_vfiprintf_r+0x94>
 80138d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80138d4:	460c      	mov	r4, r1
 80138d6:	2001      	movs	r0, #1
 80138d8:	e7a5      	b.n	8013826 <_vfiprintf_r+0x11a>
 80138da:	2300      	movs	r3, #0
 80138dc:	3401      	adds	r4, #1
 80138de:	9305      	str	r3, [sp, #20]
 80138e0:	4619      	mov	r1, r3
 80138e2:	f04f 0c0a 	mov.w	ip, #10
 80138e6:	4620      	mov	r0, r4
 80138e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138ec:	3a30      	subs	r2, #48	; 0x30
 80138ee:	2a09      	cmp	r2, #9
 80138f0:	d903      	bls.n	80138fa <_vfiprintf_r+0x1ee>
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d0c5      	beq.n	8013882 <_vfiprintf_r+0x176>
 80138f6:	9105      	str	r1, [sp, #20]
 80138f8:	e7c3      	b.n	8013882 <_vfiprintf_r+0x176>
 80138fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80138fe:	4604      	mov	r4, r0
 8013900:	2301      	movs	r3, #1
 8013902:	e7f0      	b.n	80138e6 <_vfiprintf_r+0x1da>
 8013904:	ab03      	add	r3, sp, #12
 8013906:	9300      	str	r3, [sp, #0]
 8013908:	462a      	mov	r2, r5
 801390a:	4b16      	ldr	r3, [pc, #88]	; (8013964 <_vfiprintf_r+0x258>)
 801390c:	a904      	add	r1, sp, #16
 801390e:	4630      	mov	r0, r6
 8013910:	f3af 8000 	nop.w
 8013914:	4607      	mov	r7, r0
 8013916:	1c78      	adds	r0, r7, #1
 8013918:	d1d6      	bne.n	80138c8 <_vfiprintf_r+0x1bc>
 801391a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801391c:	07d9      	lsls	r1, r3, #31
 801391e:	d405      	bmi.n	801392c <_vfiprintf_r+0x220>
 8013920:	89ab      	ldrh	r3, [r5, #12]
 8013922:	059a      	lsls	r2, r3, #22
 8013924:	d402      	bmi.n	801392c <_vfiprintf_r+0x220>
 8013926:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013928:	f7ff f9c8 	bl	8012cbc <__retarget_lock_release_recursive>
 801392c:	89ab      	ldrh	r3, [r5, #12]
 801392e:	065b      	lsls	r3, r3, #25
 8013930:	f53f af12 	bmi.w	8013758 <_vfiprintf_r+0x4c>
 8013934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013936:	e711      	b.n	801375c <_vfiprintf_r+0x50>
 8013938:	ab03      	add	r3, sp, #12
 801393a:	9300      	str	r3, [sp, #0]
 801393c:	462a      	mov	r2, r5
 801393e:	4b09      	ldr	r3, [pc, #36]	; (8013964 <_vfiprintf_r+0x258>)
 8013940:	a904      	add	r1, sp, #16
 8013942:	4630      	mov	r0, r6
 8013944:	f000 f880 	bl	8013a48 <_printf_i>
 8013948:	e7e4      	b.n	8013914 <_vfiprintf_r+0x208>
 801394a:	bf00      	nop
 801394c:	0801d5e0 	.word	0x0801d5e0
 8013950:	0801d600 	.word	0x0801d600
 8013954:	0801d5c0 	.word	0x0801d5c0
 8013958:	0801d624 	.word	0x0801d624
 801395c:	0801d62e 	.word	0x0801d62e
 8013960:	00000000 	.word	0x00000000
 8013964:	080136e7 	.word	0x080136e7
 8013968:	0801d62a 	.word	0x0801d62a

0801396c <_printf_common>:
 801396c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013970:	4616      	mov	r6, r2
 8013972:	4699      	mov	r9, r3
 8013974:	688a      	ldr	r2, [r1, #8]
 8013976:	690b      	ldr	r3, [r1, #16]
 8013978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801397c:	4293      	cmp	r3, r2
 801397e:	bfb8      	it	lt
 8013980:	4613      	movlt	r3, r2
 8013982:	6033      	str	r3, [r6, #0]
 8013984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013988:	4607      	mov	r7, r0
 801398a:	460c      	mov	r4, r1
 801398c:	b10a      	cbz	r2, 8013992 <_printf_common+0x26>
 801398e:	3301      	adds	r3, #1
 8013990:	6033      	str	r3, [r6, #0]
 8013992:	6823      	ldr	r3, [r4, #0]
 8013994:	0699      	lsls	r1, r3, #26
 8013996:	bf42      	ittt	mi
 8013998:	6833      	ldrmi	r3, [r6, #0]
 801399a:	3302      	addmi	r3, #2
 801399c:	6033      	strmi	r3, [r6, #0]
 801399e:	6825      	ldr	r5, [r4, #0]
 80139a0:	f015 0506 	ands.w	r5, r5, #6
 80139a4:	d106      	bne.n	80139b4 <_printf_common+0x48>
 80139a6:	f104 0a19 	add.w	sl, r4, #25
 80139aa:	68e3      	ldr	r3, [r4, #12]
 80139ac:	6832      	ldr	r2, [r6, #0]
 80139ae:	1a9b      	subs	r3, r3, r2
 80139b0:	42ab      	cmp	r3, r5
 80139b2:	dc26      	bgt.n	8013a02 <_printf_common+0x96>
 80139b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80139b8:	1e13      	subs	r3, r2, #0
 80139ba:	6822      	ldr	r2, [r4, #0]
 80139bc:	bf18      	it	ne
 80139be:	2301      	movne	r3, #1
 80139c0:	0692      	lsls	r2, r2, #26
 80139c2:	d42b      	bmi.n	8013a1c <_printf_common+0xb0>
 80139c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80139c8:	4649      	mov	r1, r9
 80139ca:	4638      	mov	r0, r7
 80139cc:	47c0      	blx	r8
 80139ce:	3001      	adds	r0, #1
 80139d0:	d01e      	beq.n	8013a10 <_printf_common+0xa4>
 80139d2:	6823      	ldr	r3, [r4, #0]
 80139d4:	68e5      	ldr	r5, [r4, #12]
 80139d6:	6832      	ldr	r2, [r6, #0]
 80139d8:	f003 0306 	and.w	r3, r3, #6
 80139dc:	2b04      	cmp	r3, #4
 80139de:	bf08      	it	eq
 80139e0:	1aad      	subeq	r5, r5, r2
 80139e2:	68a3      	ldr	r3, [r4, #8]
 80139e4:	6922      	ldr	r2, [r4, #16]
 80139e6:	bf0c      	ite	eq
 80139e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80139ec:	2500      	movne	r5, #0
 80139ee:	4293      	cmp	r3, r2
 80139f0:	bfc4      	itt	gt
 80139f2:	1a9b      	subgt	r3, r3, r2
 80139f4:	18ed      	addgt	r5, r5, r3
 80139f6:	2600      	movs	r6, #0
 80139f8:	341a      	adds	r4, #26
 80139fa:	42b5      	cmp	r5, r6
 80139fc:	d11a      	bne.n	8013a34 <_printf_common+0xc8>
 80139fe:	2000      	movs	r0, #0
 8013a00:	e008      	b.n	8013a14 <_printf_common+0xa8>
 8013a02:	2301      	movs	r3, #1
 8013a04:	4652      	mov	r2, sl
 8013a06:	4649      	mov	r1, r9
 8013a08:	4638      	mov	r0, r7
 8013a0a:	47c0      	blx	r8
 8013a0c:	3001      	adds	r0, #1
 8013a0e:	d103      	bne.n	8013a18 <_printf_common+0xac>
 8013a10:	f04f 30ff 	mov.w	r0, #4294967295
 8013a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a18:	3501      	adds	r5, #1
 8013a1a:	e7c6      	b.n	80139aa <_printf_common+0x3e>
 8013a1c:	18e1      	adds	r1, r4, r3
 8013a1e:	1c5a      	adds	r2, r3, #1
 8013a20:	2030      	movs	r0, #48	; 0x30
 8013a22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013a26:	4422      	add	r2, r4
 8013a28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013a2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013a30:	3302      	adds	r3, #2
 8013a32:	e7c7      	b.n	80139c4 <_printf_common+0x58>
 8013a34:	2301      	movs	r3, #1
 8013a36:	4622      	mov	r2, r4
 8013a38:	4649      	mov	r1, r9
 8013a3a:	4638      	mov	r0, r7
 8013a3c:	47c0      	blx	r8
 8013a3e:	3001      	adds	r0, #1
 8013a40:	d0e6      	beq.n	8013a10 <_printf_common+0xa4>
 8013a42:	3601      	adds	r6, #1
 8013a44:	e7d9      	b.n	80139fa <_printf_common+0x8e>
	...

08013a48 <_printf_i>:
 8013a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a4c:	7e0f      	ldrb	r7, [r1, #24]
 8013a4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013a50:	2f78      	cmp	r7, #120	; 0x78
 8013a52:	4691      	mov	r9, r2
 8013a54:	4680      	mov	r8, r0
 8013a56:	460c      	mov	r4, r1
 8013a58:	469a      	mov	sl, r3
 8013a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013a5e:	d807      	bhi.n	8013a70 <_printf_i+0x28>
 8013a60:	2f62      	cmp	r7, #98	; 0x62
 8013a62:	d80a      	bhi.n	8013a7a <_printf_i+0x32>
 8013a64:	2f00      	cmp	r7, #0
 8013a66:	f000 80d8 	beq.w	8013c1a <_printf_i+0x1d2>
 8013a6a:	2f58      	cmp	r7, #88	; 0x58
 8013a6c:	f000 80a3 	beq.w	8013bb6 <_printf_i+0x16e>
 8013a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013a78:	e03a      	b.n	8013af0 <_printf_i+0xa8>
 8013a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013a7e:	2b15      	cmp	r3, #21
 8013a80:	d8f6      	bhi.n	8013a70 <_printf_i+0x28>
 8013a82:	a101      	add	r1, pc, #4	; (adr r1, 8013a88 <_printf_i+0x40>)
 8013a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a88:	08013ae1 	.word	0x08013ae1
 8013a8c:	08013af5 	.word	0x08013af5
 8013a90:	08013a71 	.word	0x08013a71
 8013a94:	08013a71 	.word	0x08013a71
 8013a98:	08013a71 	.word	0x08013a71
 8013a9c:	08013a71 	.word	0x08013a71
 8013aa0:	08013af5 	.word	0x08013af5
 8013aa4:	08013a71 	.word	0x08013a71
 8013aa8:	08013a71 	.word	0x08013a71
 8013aac:	08013a71 	.word	0x08013a71
 8013ab0:	08013a71 	.word	0x08013a71
 8013ab4:	08013c01 	.word	0x08013c01
 8013ab8:	08013b25 	.word	0x08013b25
 8013abc:	08013be3 	.word	0x08013be3
 8013ac0:	08013a71 	.word	0x08013a71
 8013ac4:	08013a71 	.word	0x08013a71
 8013ac8:	08013c23 	.word	0x08013c23
 8013acc:	08013a71 	.word	0x08013a71
 8013ad0:	08013b25 	.word	0x08013b25
 8013ad4:	08013a71 	.word	0x08013a71
 8013ad8:	08013a71 	.word	0x08013a71
 8013adc:	08013beb 	.word	0x08013beb
 8013ae0:	682b      	ldr	r3, [r5, #0]
 8013ae2:	1d1a      	adds	r2, r3, #4
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	602a      	str	r2, [r5, #0]
 8013ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013af0:	2301      	movs	r3, #1
 8013af2:	e0a3      	b.n	8013c3c <_printf_i+0x1f4>
 8013af4:	6820      	ldr	r0, [r4, #0]
 8013af6:	6829      	ldr	r1, [r5, #0]
 8013af8:	0606      	lsls	r6, r0, #24
 8013afa:	f101 0304 	add.w	r3, r1, #4
 8013afe:	d50a      	bpl.n	8013b16 <_printf_i+0xce>
 8013b00:	680e      	ldr	r6, [r1, #0]
 8013b02:	602b      	str	r3, [r5, #0]
 8013b04:	2e00      	cmp	r6, #0
 8013b06:	da03      	bge.n	8013b10 <_printf_i+0xc8>
 8013b08:	232d      	movs	r3, #45	; 0x2d
 8013b0a:	4276      	negs	r6, r6
 8013b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b10:	485e      	ldr	r0, [pc, #376]	; (8013c8c <_printf_i+0x244>)
 8013b12:	230a      	movs	r3, #10
 8013b14:	e019      	b.n	8013b4a <_printf_i+0x102>
 8013b16:	680e      	ldr	r6, [r1, #0]
 8013b18:	602b      	str	r3, [r5, #0]
 8013b1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013b1e:	bf18      	it	ne
 8013b20:	b236      	sxthne	r6, r6
 8013b22:	e7ef      	b.n	8013b04 <_printf_i+0xbc>
 8013b24:	682b      	ldr	r3, [r5, #0]
 8013b26:	6820      	ldr	r0, [r4, #0]
 8013b28:	1d19      	adds	r1, r3, #4
 8013b2a:	6029      	str	r1, [r5, #0]
 8013b2c:	0601      	lsls	r1, r0, #24
 8013b2e:	d501      	bpl.n	8013b34 <_printf_i+0xec>
 8013b30:	681e      	ldr	r6, [r3, #0]
 8013b32:	e002      	b.n	8013b3a <_printf_i+0xf2>
 8013b34:	0646      	lsls	r6, r0, #25
 8013b36:	d5fb      	bpl.n	8013b30 <_printf_i+0xe8>
 8013b38:	881e      	ldrh	r6, [r3, #0]
 8013b3a:	4854      	ldr	r0, [pc, #336]	; (8013c8c <_printf_i+0x244>)
 8013b3c:	2f6f      	cmp	r7, #111	; 0x6f
 8013b3e:	bf0c      	ite	eq
 8013b40:	2308      	moveq	r3, #8
 8013b42:	230a      	movne	r3, #10
 8013b44:	2100      	movs	r1, #0
 8013b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013b4a:	6865      	ldr	r5, [r4, #4]
 8013b4c:	60a5      	str	r5, [r4, #8]
 8013b4e:	2d00      	cmp	r5, #0
 8013b50:	bfa2      	ittt	ge
 8013b52:	6821      	ldrge	r1, [r4, #0]
 8013b54:	f021 0104 	bicge.w	r1, r1, #4
 8013b58:	6021      	strge	r1, [r4, #0]
 8013b5a:	b90e      	cbnz	r6, 8013b60 <_printf_i+0x118>
 8013b5c:	2d00      	cmp	r5, #0
 8013b5e:	d04d      	beq.n	8013bfc <_printf_i+0x1b4>
 8013b60:	4615      	mov	r5, r2
 8013b62:	fbb6 f1f3 	udiv	r1, r6, r3
 8013b66:	fb03 6711 	mls	r7, r3, r1, r6
 8013b6a:	5dc7      	ldrb	r7, [r0, r7]
 8013b6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013b70:	4637      	mov	r7, r6
 8013b72:	42bb      	cmp	r3, r7
 8013b74:	460e      	mov	r6, r1
 8013b76:	d9f4      	bls.n	8013b62 <_printf_i+0x11a>
 8013b78:	2b08      	cmp	r3, #8
 8013b7a:	d10b      	bne.n	8013b94 <_printf_i+0x14c>
 8013b7c:	6823      	ldr	r3, [r4, #0]
 8013b7e:	07de      	lsls	r6, r3, #31
 8013b80:	d508      	bpl.n	8013b94 <_printf_i+0x14c>
 8013b82:	6923      	ldr	r3, [r4, #16]
 8013b84:	6861      	ldr	r1, [r4, #4]
 8013b86:	4299      	cmp	r1, r3
 8013b88:	bfde      	ittt	le
 8013b8a:	2330      	movle	r3, #48	; 0x30
 8013b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013b90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013b94:	1b52      	subs	r2, r2, r5
 8013b96:	6122      	str	r2, [r4, #16]
 8013b98:	f8cd a000 	str.w	sl, [sp]
 8013b9c:	464b      	mov	r3, r9
 8013b9e:	aa03      	add	r2, sp, #12
 8013ba0:	4621      	mov	r1, r4
 8013ba2:	4640      	mov	r0, r8
 8013ba4:	f7ff fee2 	bl	801396c <_printf_common>
 8013ba8:	3001      	adds	r0, #1
 8013baa:	d14c      	bne.n	8013c46 <_printf_i+0x1fe>
 8013bac:	f04f 30ff 	mov.w	r0, #4294967295
 8013bb0:	b004      	add	sp, #16
 8013bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bb6:	4835      	ldr	r0, [pc, #212]	; (8013c8c <_printf_i+0x244>)
 8013bb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013bbc:	6829      	ldr	r1, [r5, #0]
 8013bbe:	6823      	ldr	r3, [r4, #0]
 8013bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8013bc4:	6029      	str	r1, [r5, #0]
 8013bc6:	061d      	lsls	r5, r3, #24
 8013bc8:	d514      	bpl.n	8013bf4 <_printf_i+0x1ac>
 8013bca:	07df      	lsls	r7, r3, #31
 8013bcc:	bf44      	itt	mi
 8013bce:	f043 0320 	orrmi.w	r3, r3, #32
 8013bd2:	6023      	strmi	r3, [r4, #0]
 8013bd4:	b91e      	cbnz	r6, 8013bde <_printf_i+0x196>
 8013bd6:	6823      	ldr	r3, [r4, #0]
 8013bd8:	f023 0320 	bic.w	r3, r3, #32
 8013bdc:	6023      	str	r3, [r4, #0]
 8013bde:	2310      	movs	r3, #16
 8013be0:	e7b0      	b.n	8013b44 <_printf_i+0xfc>
 8013be2:	6823      	ldr	r3, [r4, #0]
 8013be4:	f043 0320 	orr.w	r3, r3, #32
 8013be8:	6023      	str	r3, [r4, #0]
 8013bea:	2378      	movs	r3, #120	; 0x78
 8013bec:	4828      	ldr	r0, [pc, #160]	; (8013c90 <_printf_i+0x248>)
 8013bee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013bf2:	e7e3      	b.n	8013bbc <_printf_i+0x174>
 8013bf4:	0659      	lsls	r1, r3, #25
 8013bf6:	bf48      	it	mi
 8013bf8:	b2b6      	uxthmi	r6, r6
 8013bfa:	e7e6      	b.n	8013bca <_printf_i+0x182>
 8013bfc:	4615      	mov	r5, r2
 8013bfe:	e7bb      	b.n	8013b78 <_printf_i+0x130>
 8013c00:	682b      	ldr	r3, [r5, #0]
 8013c02:	6826      	ldr	r6, [r4, #0]
 8013c04:	6961      	ldr	r1, [r4, #20]
 8013c06:	1d18      	adds	r0, r3, #4
 8013c08:	6028      	str	r0, [r5, #0]
 8013c0a:	0635      	lsls	r5, r6, #24
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	d501      	bpl.n	8013c14 <_printf_i+0x1cc>
 8013c10:	6019      	str	r1, [r3, #0]
 8013c12:	e002      	b.n	8013c1a <_printf_i+0x1d2>
 8013c14:	0670      	lsls	r0, r6, #25
 8013c16:	d5fb      	bpl.n	8013c10 <_printf_i+0x1c8>
 8013c18:	8019      	strh	r1, [r3, #0]
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	6123      	str	r3, [r4, #16]
 8013c1e:	4615      	mov	r5, r2
 8013c20:	e7ba      	b.n	8013b98 <_printf_i+0x150>
 8013c22:	682b      	ldr	r3, [r5, #0]
 8013c24:	1d1a      	adds	r2, r3, #4
 8013c26:	602a      	str	r2, [r5, #0]
 8013c28:	681d      	ldr	r5, [r3, #0]
 8013c2a:	6862      	ldr	r2, [r4, #4]
 8013c2c:	2100      	movs	r1, #0
 8013c2e:	4628      	mov	r0, r5
 8013c30:	f7ec fb46 	bl	80002c0 <memchr>
 8013c34:	b108      	cbz	r0, 8013c3a <_printf_i+0x1f2>
 8013c36:	1b40      	subs	r0, r0, r5
 8013c38:	6060      	str	r0, [r4, #4]
 8013c3a:	6863      	ldr	r3, [r4, #4]
 8013c3c:	6123      	str	r3, [r4, #16]
 8013c3e:	2300      	movs	r3, #0
 8013c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c44:	e7a8      	b.n	8013b98 <_printf_i+0x150>
 8013c46:	6923      	ldr	r3, [r4, #16]
 8013c48:	462a      	mov	r2, r5
 8013c4a:	4649      	mov	r1, r9
 8013c4c:	4640      	mov	r0, r8
 8013c4e:	47d0      	blx	sl
 8013c50:	3001      	adds	r0, #1
 8013c52:	d0ab      	beq.n	8013bac <_printf_i+0x164>
 8013c54:	6823      	ldr	r3, [r4, #0]
 8013c56:	079b      	lsls	r3, r3, #30
 8013c58:	d413      	bmi.n	8013c82 <_printf_i+0x23a>
 8013c5a:	68e0      	ldr	r0, [r4, #12]
 8013c5c:	9b03      	ldr	r3, [sp, #12]
 8013c5e:	4298      	cmp	r0, r3
 8013c60:	bfb8      	it	lt
 8013c62:	4618      	movlt	r0, r3
 8013c64:	e7a4      	b.n	8013bb0 <_printf_i+0x168>
 8013c66:	2301      	movs	r3, #1
 8013c68:	4632      	mov	r2, r6
 8013c6a:	4649      	mov	r1, r9
 8013c6c:	4640      	mov	r0, r8
 8013c6e:	47d0      	blx	sl
 8013c70:	3001      	adds	r0, #1
 8013c72:	d09b      	beq.n	8013bac <_printf_i+0x164>
 8013c74:	3501      	adds	r5, #1
 8013c76:	68e3      	ldr	r3, [r4, #12]
 8013c78:	9903      	ldr	r1, [sp, #12]
 8013c7a:	1a5b      	subs	r3, r3, r1
 8013c7c:	42ab      	cmp	r3, r5
 8013c7e:	dcf2      	bgt.n	8013c66 <_printf_i+0x21e>
 8013c80:	e7eb      	b.n	8013c5a <_printf_i+0x212>
 8013c82:	2500      	movs	r5, #0
 8013c84:	f104 0619 	add.w	r6, r4, #25
 8013c88:	e7f5      	b.n	8013c76 <_printf_i+0x22e>
 8013c8a:	bf00      	nop
 8013c8c:	0801d635 	.word	0x0801d635
 8013c90:	0801d646 	.word	0x0801d646

08013c94 <_read_r>:
 8013c94:	b538      	push	{r3, r4, r5, lr}
 8013c96:	4d07      	ldr	r5, [pc, #28]	; (8013cb4 <_read_r+0x20>)
 8013c98:	4604      	mov	r4, r0
 8013c9a:	4608      	mov	r0, r1
 8013c9c:	4611      	mov	r1, r2
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	602a      	str	r2, [r5, #0]
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	f7ee fb8e 	bl	80023c4 <_read>
 8013ca8:	1c43      	adds	r3, r0, #1
 8013caa:	d102      	bne.n	8013cb2 <_read_r+0x1e>
 8013cac:	682b      	ldr	r3, [r5, #0]
 8013cae:	b103      	cbz	r3, 8013cb2 <_read_r+0x1e>
 8013cb0:	6023      	str	r3, [r4, #0]
 8013cb2:	bd38      	pop	{r3, r4, r5, pc}
 8013cb4:	20001624 	.word	0x20001624

08013cb8 <_fstat_r>:
 8013cb8:	b538      	push	{r3, r4, r5, lr}
 8013cba:	4d07      	ldr	r5, [pc, #28]	; (8013cd8 <_fstat_r+0x20>)
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	4608      	mov	r0, r1
 8013cc2:	4611      	mov	r1, r2
 8013cc4:	602b      	str	r3, [r5, #0]
 8013cc6:	f7ee fba6 	bl	8002416 <_fstat>
 8013cca:	1c43      	adds	r3, r0, #1
 8013ccc:	d102      	bne.n	8013cd4 <_fstat_r+0x1c>
 8013cce:	682b      	ldr	r3, [r5, #0]
 8013cd0:	b103      	cbz	r3, 8013cd4 <_fstat_r+0x1c>
 8013cd2:	6023      	str	r3, [r4, #0]
 8013cd4:	bd38      	pop	{r3, r4, r5, pc}
 8013cd6:	bf00      	nop
 8013cd8:	20001624 	.word	0x20001624

08013cdc <_isatty_r>:
 8013cdc:	b538      	push	{r3, r4, r5, lr}
 8013cde:	4d06      	ldr	r5, [pc, #24]	; (8013cf8 <_isatty_r+0x1c>)
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	4604      	mov	r4, r0
 8013ce4:	4608      	mov	r0, r1
 8013ce6:	602b      	str	r3, [r5, #0]
 8013ce8:	f7ee fba5 	bl	8002436 <_isatty>
 8013cec:	1c43      	adds	r3, r0, #1
 8013cee:	d102      	bne.n	8013cf6 <_isatty_r+0x1a>
 8013cf0:	682b      	ldr	r3, [r5, #0]
 8013cf2:	b103      	cbz	r3, 8013cf6 <_isatty_r+0x1a>
 8013cf4:	6023      	str	r3, [r4, #0]
 8013cf6:	bd38      	pop	{r3, r4, r5, pc}
 8013cf8:	20001624 	.word	0x20001624

08013cfc <_realloc_r>:
 8013cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d00:	4680      	mov	r8, r0
 8013d02:	4614      	mov	r4, r2
 8013d04:	460e      	mov	r6, r1
 8013d06:	b921      	cbnz	r1, 8013d12 <_realloc_r+0x16>
 8013d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d0c:	4611      	mov	r1, r2
 8013d0e:	f7ff b883 	b.w	8012e18 <_malloc_r>
 8013d12:	b92a      	cbnz	r2, 8013d20 <_realloc_r+0x24>
 8013d14:	f7ff f814 	bl	8012d40 <_free_r>
 8013d18:	4625      	mov	r5, r4
 8013d1a:	4628      	mov	r0, r5
 8013d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d20:	f000 f81b 	bl	8013d5a <_malloc_usable_size_r>
 8013d24:	4284      	cmp	r4, r0
 8013d26:	4607      	mov	r7, r0
 8013d28:	d802      	bhi.n	8013d30 <_realloc_r+0x34>
 8013d2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013d2e:	d812      	bhi.n	8013d56 <_realloc_r+0x5a>
 8013d30:	4621      	mov	r1, r4
 8013d32:	4640      	mov	r0, r8
 8013d34:	f7ff f870 	bl	8012e18 <_malloc_r>
 8013d38:	4605      	mov	r5, r0
 8013d3a:	2800      	cmp	r0, #0
 8013d3c:	d0ed      	beq.n	8013d1a <_realloc_r+0x1e>
 8013d3e:	42bc      	cmp	r4, r7
 8013d40:	4622      	mov	r2, r4
 8013d42:	4631      	mov	r1, r6
 8013d44:	bf28      	it	cs
 8013d46:	463a      	movcs	r2, r7
 8013d48:	f7fe ffca 	bl	8012ce0 <memcpy>
 8013d4c:	4631      	mov	r1, r6
 8013d4e:	4640      	mov	r0, r8
 8013d50:	f7fe fff6 	bl	8012d40 <_free_r>
 8013d54:	e7e1      	b.n	8013d1a <_realloc_r+0x1e>
 8013d56:	4635      	mov	r5, r6
 8013d58:	e7df      	b.n	8013d1a <_realloc_r+0x1e>

08013d5a <_malloc_usable_size_r>:
 8013d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d5e:	1f18      	subs	r0, r3, #4
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	bfbc      	itt	lt
 8013d64:	580b      	ldrlt	r3, [r1, r0]
 8013d66:	18c0      	addlt	r0, r0, r3
 8013d68:	4770      	bx	lr

08013d6a <fmaxf>:
 8013d6a:	b508      	push	{r3, lr}
 8013d6c:	ed2d 8b02 	vpush	{d8}
 8013d70:	eeb0 8a40 	vmov.f32	s16, s0
 8013d74:	eef0 8a60 	vmov.f32	s17, s1
 8013d78:	f000 f82e 	bl	8013dd8 <__fpclassifyf>
 8013d7c:	b148      	cbz	r0, 8013d92 <fmaxf+0x28>
 8013d7e:	eeb0 0a68 	vmov.f32	s0, s17
 8013d82:	f000 f829 	bl	8013dd8 <__fpclassifyf>
 8013d86:	b130      	cbz	r0, 8013d96 <fmaxf+0x2c>
 8013d88:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d90:	dc01      	bgt.n	8013d96 <fmaxf+0x2c>
 8013d92:	eeb0 8a68 	vmov.f32	s16, s17
 8013d96:	eeb0 0a48 	vmov.f32	s0, s16
 8013d9a:	ecbd 8b02 	vpop	{d8}
 8013d9e:	bd08      	pop	{r3, pc}

08013da0 <fminf>:
 8013da0:	b508      	push	{r3, lr}
 8013da2:	ed2d 8b02 	vpush	{d8}
 8013da6:	eeb0 8a40 	vmov.f32	s16, s0
 8013daa:	eef0 8a60 	vmov.f32	s17, s1
 8013dae:	f000 f813 	bl	8013dd8 <__fpclassifyf>
 8013db2:	b148      	cbz	r0, 8013dc8 <fminf+0x28>
 8013db4:	eeb0 0a68 	vmov.f32	s0, s17
 8013db8:	f000 f80e 	bl	8013dd8 <__fpclassifyf>
 8013dbc:	b130      	cbz	r0, 8013dcc <fminf+0x2c>
 8013dbe:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc6:	d401      	bmi.n	8013dcc <fminf+0x2c>
 8013dc8:	eeb0 8a68 	vmov.f32	s16, s17
 8013dcc:	eeb0 0a48 	vmov.f32	s0, s16
 8013dd0:	ecbd 8b02 	vpop	{d8}
 8013dd4:	bd08      	pop	{r3, pc}
	...

08013dd8 <__fpclassifyf>:
 8013dd8:	ee10 3a10 	vmov	r3, s0
 8013ddc:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8013de0:	d00d      	beq.n	8013dfe <__fpclassifyf+0x26>
 8013de2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8013de6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8013dea:	d30a      	bcc.n	8013e02 <__fpclassifyf+0x2a>
 8013dec:	4b07      	ldr	r3, [pc, #28]	; (8013e0c <__fpclassifyf+0x34>)
 8013dee:	1e42      	subs	r2, r0, #1
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d908      	bls.n	8013e06 <__fpclassifyf+0x2e>
 8013df4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8013df8:	4258      	negs	r0, r3
 8013dfa:	4158      	adcs	r0, r3
 8013dfc:	4770      	bx	lr
 8013dfe:	2002      	movs	r0, #2
 8013e00:	4770      	bx	lr
 8013e02:	2004      	movs	r0, #4
 8013e04:	4770      	bx	lr
 8013e06:	2003      	movs	r0, #3
 8013e08:	4770      	bx	lr
 8013e0a:	bf00      	nop
 8013e0c:	007ffffe 	.word	0x007ffffe

08013e10 <roundf>:
 8013e10:	ee10 0a10 	vmov	r0, s0
 8013e14:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8013e18:	3a7f      	subs	r2, #127	; 0x7f
 8013e1a:	2a16      	cmp	r2, #22
 8013e1c:	dc15      	bgt.n	8013e4a <roundf+0x3a>
 8013e1e:	2a00      	cmp	r2, #0
 8013e20:	da08      	bge.n	8013e34 <roundf+0x24>
 8013e22:	3201      	adds	r2, #1
 8013e24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8013e28:	d101      	bne.n	8013e2e <roundf+0x1e>
 8013e2a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8013e2e:	ee00 3a10 	vmov	s0, r3
 8013e32:	4770      	bx	lr
 8013e34:	4907      	ldr	r1, [pc, #28]	; (8013e54 <roundf+0x44>)
 8013e36:	4111      	asrs	r1, r2
 8013e38:	4208      	tst	r0, r1
 8013e3a:	d0fa      	beq.n	8013e32 <roundf+0x22>
 8013e3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013e40:	4113      	asrs	r3, r2
 8013e42:	4403      	add	r3, r0
 8013e44:	ea23 0301 	bic.w	r3, r3, r1
 8013e48:	e7f1      	b.n	8013e2e <roundf+0x1e>
 8013e4a:	2a80      	cmp	r2, #128	; 0x80
 8013e4c:	d1f1      	bne.n	8013e32 <roundf+0x22>
 8013e4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013e52:	4770      	bx	lr
 8013e54:	007fffff 	.word	0x007fffff

08013e58 <expf>:
 8013e58:	b508      	push	{r3, lr}
 8013e5a:	ed2d 8b02 	vpush	{d8}
 8013e5e:	eef0 8a40 	vmov.f32	s17, s0
 8013e62:	f000 f85d 	bl	8013f20 <__ieee754_expf>
 8013e66:	eeb0 8a40 	vmov.f32	s16, s0
 8013e6a:	eeb0 0a68 	vmov.f32	s0, s17
 8013e6e:	f000 f99f 	bl	80141b0 <finitef>
 8013e72:	b160      	cbz	r0, 8013e8e <expf+0x36>
 8013e74:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013eb4 <expf+0x5c>
 8013e78:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e80:	dd0a      	ble.n	8013e98 <expf+0x40>
 8013e82:	f7fe fd25 	bl	80128d0 <__errno>
 8013e86:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8013eb8 <expf+0x60>
 8013e8a:	2322      	movs	r3, #34	; 0x22
 8013e8c:	6003      	str	r3, [r0, #0]
 8013e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8013e92:	ecbd 8b02 	vpop	{d8}
 8013e96:	bd08      	pop	{r3, pc}
 8013e98:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013ebc <expf+0x64>
 8013e9c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ea4:	d5f3      	bpl.n	8013e8e <expf+0x36>
 8013ea6:	f7fe fd13 	bl	80128d0 <__errno>
 8013eaa:	2322      	movs	r3, #34	; 0x22
 8013eac:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8013ec0 <expf+0x68>
 8013eb0:	6003      	str	r3, [r0, #0]
 8013eb2:	e7ec      	b.n	8013e8e <expf+0x36>
 8013eb4:	42b17180 	.word	0x42b17180
 8013eb8:	7f800000 	.word	0x7f800000
 8013ebc:	c2cff1b5 	.word	0xc2cff1b5
 8013ec0:	00000000 	.word	0x00000000

08013ec4 <log10f>:
 8013ec4:	b508      	push	{r3, lr}
 8013ec6:	ed2d 8b02 	vpush	{d8}
 8013eca:	eeb0 8a40 	vmov.f32	s16, s0
 8013ece:	f000 f8f5 	bl	80140bc <__ieee754_log10f>
 8013ed2:	eeb4 8a48 	vcmp.f32	s16, s16
 8013ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eda:	d60f      	bvs.n	8013efc <log10f+0x38>
 8013edc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee4:	d80a      	bhi.n	8013efc <log10f+0x38>
 8013ee6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eee:	d108      	bne.n	8013f02 <log10f+0x3e>
 8013ef0:	f7fe fcee 	bl	80128d0 <__errno>
 8013ef4:	2322      	movs	r3, #34	; 0x22
 8013ef6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8013f18 <log10f+0x54>
 8013efa:	6003      	str	r3, [r0, #0]
 8013efc:	ecbd 8b02 	vpop	{d8}
 8013f00:	bd08      	pop	{r3, pc}
 8013f02:	f7fe fce5 	bl	80128d0 <__errno>
 8013f06:	ecbd 8b02 	vpop	{d8}
 8013f0a:	2321      	movs	r3, #33	; 0x21
 8013f0c:	6003      	str	r3, [r0, #0]
 8013f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013f12:	4802      	ldr	r0, [pc, #8]	; (8013f1c <log10f+0x58>)
 8013f14:	f000 b95a 	b.w	80141cc <nanf>
 8013f18:	ff800000 	.word	0xff800000
 8013f1c:	0801d629 	.word	0x0801d629

08013f20 <__ieee754_expf>:
 8013f20:	ee10 2a10 	vmov	r2, s0
 8013f24:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013f28:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013f2c:	d902      	bls.n	8013f34 <__ieee754_expf+0x14>
 8013f2e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013f32:	4770      	bx	lr
 8013f34:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8013f38:	d106      	bne.n	8013f48 <__ieee754_expf+0x28>
 8013f3a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8014074 <__ieee754_expf+0x154>
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	bf18      	it	ne
 8013f42:	eeb0 0a67 	vmovne.f32	s0, s15
 8013f46:	4770      	bx	lr
 8013f48:	484b      	ldr	r0, [pc, #300]	; (8014078 <__ieee754_expf+0x158>)
 8013f4a:	4282      	cmp	r2, r0
 8013f4c:	dd02      	ble.n	8013f54 <__ieee754_expf+0x34>
 8013f4e:	2000      	movs	r0, #0
 8013f50:	f000 b928 	b.w	80141a4 <__math_oflowf>
 8013f54:	2a00      	cmp	r2, #0
 8013f56:	da05      	bge.n	8013f64 <__ieee754_expf+0x44>
 8013f58:	4a48      	ldr	r2, [pc, #288]	; (801407c <__ieee754_expf+0x15c>)
 8013f5a:	4291      	cmp	r1, r2
 8013f5c:	d902      	bls.n	8013f64 <__ieee754_expf+0x44>
 8013f5e:	2000      	movs	r0, #0
 8013f60:	f000 b91a 	b.w	8014198 <__math_uflowf>
 8013f64:	4a46      	ldr	r2, [pc, #280]	; (8014080 <__ieee754_expf+0x160>)
 8013f66:	4291      	cmp	r1, r2
 8013f68:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013f6c:	d952      	bls.n	8014014 <__ieee754_expf+0xf4>
 8013f6e:	4a45      	ldr	r2, [pc, #276]	; (8014084 <__ieee754_expf+0x164>)
 8013f70:	4291      	cmp	r1, r2
 8013f72:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013f76:	d834      	bhi.n	8013fe2 <__ieee754_expf+0xc2>
 8013f78:	4943      	ldr	r1, [pc, #268]	; (8014088 <__ieee754_expf+0x168>)
 8013f7a:	4411      	add	r1, r2
 8013f7c:	ed91 7a00 	vldr	s14, [r1]
 8013f80:	4942      	ldr	r1, [pc, #264]	; (801408c <__ieee754_expf+0x16c>)
 8013f82:	440a      	add	r2, r1
 8013f84:	edd2 7a00 	vldr	s15, [r2]
 8013f88:	ee30 7a47 	vsub.f32	s14, s0, s14
 8013f8c:	f1c3 0201 	rsb	r2, r3, #1
 8013f90:	1ad2      	subs	r2, r2, r3
 8013f92:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013f96:	ee20 6a00 	vmul.f32	s12, s0, s0
 8013f9a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8014090 <__ieee754_expf+0x170>
 8013f9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014094 <__ieee754_expf+0x174>
 8013fa2:	eee6 6a05 	vfma.f32	s13, s12, s10
 8013fa6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8014098 <__ieee754_expf+0x178>
 8013faa:	eea6 5a86 	vfma.f32	s10, s13, s12
 8013fae:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801409c <__ieee754_expf+0x17c>
 8013fb2:	eee5 6a06 	vfma.f32	s13, s10, s12
 8013fb6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80140a0 <__ieee754_expf+0x180>
 8013fba:	eea6 5a86 	vfma.f32	s10, s13, s12
 8013fbe:	eef0 6a40 	vmov.f32	s13, s0
 8013fc2:	eee5 6a46 	vfms.f32	s13, s10, s12
 8013fc6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8013fca:	ee20 5a26 	vmul.f32	s10, s0, s13
 8013fce:	bb92      	cbnz	r2, 8014036 <__ieee754_expf+0x116>
 8013fd0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8013fd4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013fd8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013fdc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8013fe0:	4770      	bx	lr
 8013fe2:	4b30      	ldr	r3, [pc, #192]	; (80140a4 <__ieee754_expf+0x184>)
 8013fe4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80140a8 <__ieee754_expf+0x188>
 8013fe8:	eddf 6a30 	vldr	s13, [pc, #192]	; 80140ac <__ieee754_expf+0x18c>
 8013fec:	4413      	add	r3, r2
 8013fee:	edd3 7a00 	vldr	s15, [r3]
 8013ff2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013ff6:	eeb0 7a40 	vmov.f32	s14, s0
 8013ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ffe:	ee17 2a90 	vmov	r2, s15
 8014002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014006:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801400a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80140b0 <__ieee754_expf+0x190>
 801400e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014012:	e7be      	b.n	8013f92 <__ieee754_expf+0x72>
 8014014:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8014018:	d20b      	bcs.n	8014032 <__ieee754_expf+0x112>
 801401a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80140b4 <__ieee754_expf+0x194>
 801401e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8014022:	eef4 6ae5 	vcmpe.f32	s13, s11
 8014026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801402a:	dd02      	ble.n	8014032 <__ieee754_expf+0x112>
 801402c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8014030:	4770      	bx	lr
 8014032:	2200      	movs	r2, #0
 8014034:	e7af      	b.n	8013f96 <__ieee754_expf+0x76>
 8014036:	ee76 6a66 	vsub.f32	s13, s12, s13
 801403a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801403e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8014042:	bfb8      	it	lt
 8014044:	3264      	addlt	r2, #100	; 0x64
 8014046:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801404a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801404e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8014052:	ee17 3a90 	vmov	r3, s15
 8014056:	bfab      	itete	ge
 8014058:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801405c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8014060:	ee00 3a10 	vmovge	s0, r3
 8014064:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80140b8 <__ieee754_expf+0x198>
 8014068:	bfbc      	itt	lt
 801406a:	ee00 3a10 	vmovlt	s0, r3
 801406e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8014072:	4770      	bx	lr
 8014074:	00000000 	.word	0x00000000
 8014078:	42b17217 	.word	0x42b17217
 801407c:	42cff1b5 	.word	0x42cff1b5
 8014080:	3eb17218 	.word	0x3eb17218
 8014084:	3f851591 	.word	0x3f851591
 8014088:	0801d660 	.word	0x0801d660
 801408c:	0801d668 	.word	0x0801d668
 8014090:	3331bb4c 	.word	0x3331bb4c
 8014094:	b5ddea0e 	.word	0xb5ddea0e
 8014098:	388ab355 	.word	0x388ab355
 801409c:	bb360b61 	.word	0xbb360b61
 80140a0:	3e2aaaab 	.word	0x3e2aaaab
 80140a4:	0801d658 	.word	0x0801d658
 80140a8:	3fb8aa3b 	.word	0x3fb8aa3b
 80140ac:	3f317180 	.word	0x3f317180
 80140b0:	3717f7d1 	.word	0x3717f7d1
 80140b4:	7149f2ca 	.word	0x7149f2ca
 80140b8:	0d800000 	.word	0x0d800000

080140bc <__ieee754_log10f>:
 80140bc:	b508      	push	{r3, lr}
 80140be:	ee10 2a10 	vmov	r2, s0
 80140c2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80140c6:	ed2d 8b02 	vpush	{d8}
 80140ca:	d108      	bne.n	80140de <__ieee754_log10f+0x22>
 80140cc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8014154 <__ieee754_log10f+0x98>
 80140d0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8014158 <__ieee754_log10f+0x9c>
 80140d4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80140d8:	ecbd 8b02 	vpop	{d8}
 80140dc:	bd08      	pop	{r3, pc}
 80140de:	2a00      	cmp	r2, #0
 80140e0:	da02      	bge.n	80140e8 <__ieee754_log10f+0x2c>
 80140e2:	ee30 7a40 	vsub.f32	s14, s0, s0
 80140e6:	e7f3      	b.n	80140d0 <__ieee754_log10f+0x14>
 80140e8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80140ec:	db02      	blt.n	80140f4 <__ieee754_log10f+0x38>
 80140ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80140f2:	e7f1      	b.n	80140d8 <__ieee754_log10f+0x1c>
 80140f4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80140f8:	bfbf      	itttt	lt
 80140fa:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801415c <__ieee754_log10f+0xa0>
 80140fe:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8014102:	f06f 0118 	mvnlt.w	r1, #24
 8014106:	ee17 2a90 	vmovlt	r2, s15
 801410a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801410e:	bfa8      	it	ge
 8014110:	2100      	movge	r1, #0
 8014112:	3b7f      	subs	r3, #127	; 0x7f
 8014114:	440b      	add	r3, r1
 8014116:	0fd9      	lsrs	r1, r3, #31
 8014118:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801411c:	ee07 3a90 	vmov	s15, r3
 8014120:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8014124:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8014128:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801412c:	ee00 3a10 	vmov	s0, r3
 8014130:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8014134:	f000 f850 	bl	80141d8 <__ieee754_logf>
 8014138:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014160 <__ieee754_log10f+0xa4>
 801413c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014140:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014164 <__ieee754_log10f+0xa8>
 8014144:	eea8 0a27 	vfma.f32	s0, s16, s15
 8014148:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014168 <__ieee754_log10f+0xac>
 801414c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8014150:	e7c2      	b.n	80140d8 <__ieee754_log10f+0x1c>
 8014152:	bf00      	nop
 8014154:	cc000000 	.word	0xcc000000
 8014158:	00000000 	.word	0x00000000
 801415c:	4c000000 	.word	0x4c000000
 8014160:	3ede5bd9 	.word	0x3ede5bd9
 8014164:	355427db 	.word	0x355427db
 8014168:	3e9a2080 	.word	0x3e9a2080

0801416c <with_errnof>:
 801416c:	b513      	push	{r0, r1, r4, lr}
 801416e:	4604      	mov	r4, r0
 8014170:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014174:	f7fe fbac 	bl	80128d0 <__errno>
 8014178:	ed9d 0a01 	vldr	s0, [sp, #4]
 801417c:	6004      	str	r4, [r0, #0]
 801417e:	b002      	add	sp, #8
 8014180:	bd10      	pop	{r4, pc}

08014182 <xflowf>:
 8014182:	b130      	cbz	r0, 8014192 <xflowf+0x10>
 8014184:	eef1 7a40 	vneg.f32	s15, s0
 8014188:	ee27 0a80 	vmul.f32	s0, s15, s0
 801418c:	2022      	movs	r0, #34	; 0x22
 801418e:	f7ff bfed 	b.w	801416c <with_errnof>
 8014192:	eef0 7a40 	vmov.f32	s15, s0
 8014196:	e7f7      	b.n	8014188 <xflowf+0x6>

08014198 <__math_uflowf>:
 8014198:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80141a0 <__math_uflowf+0x8>
 801419c:	f7ff bff1 	b.w	8014182 <xflowf>
 80141a0:	10000000 	.word	0x10000000

080141a4 <__math_oflowf>:
 80141a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80141ac <__math_oflowf+0x8>
 80141a8:	f7ff bfeb 	b.w	8014182 <xflowf>
 80141ac:	70000000 	.word	0x70000000

080141b0 <finitef>:
 80141b0:	b082      	sub	sp, #8
 80141b2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80141b6:	9801      	ldr	r0, [sp, #4]
 80141b8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80141bc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80141c0:	bfac      	ite	ge
 80141c2:	2000      	movge	r0, #0
 80141c4:	2001      	movlt	r0, #1
 80141c6:	b002      	add	sp, #8
 80141c8:	4770      	bx	lr
	...

080141cc <nanf>:
 80141cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80141d4 <nanf+0x8>
 80141d0:	4770      	bx	lr
 80141d2:	bf00      	nop
 80141d4:	7fc00000 	.word	0x7fc00000

080141d8 <__ieee754_logf>:
 80141d8:	ee10 3a10 	vmov	r3, s0
 80141dc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80141e0:	d106      	bne.n	80141f0 <__ieee754_logf+0x18>
 80141e2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8014378 <__ieee754_logf+0x1a0>
 80141e6:	eddf 7a65 	vldr	s15, [pc, #404]	; 801437c <__ieee754_logf+0x1a4>
 80141ea:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80141ee:	4770      	bx	lr
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	da02      	bge.n	80141fa <__ieee754_logf+0x22>
 80141f4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80141f8:	e7f5      	b.n	80141e6 <__ieee754_logf+0xe>
 80141fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80141fe:	db02      	blt.n	8014206 <__ieee754_logf+0x2e>
 8014200:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014204:	4770      	bx	lr
 8014206:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801420a:	bfb8      	it	lt
 801420c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8014380 <__ieee754_logf+0x1a8>
 8014210:	485c      	ldr	r0, [pc, #368]	; (8014384 <__ieee754_logf+0x1ac>)
 8014212:	bfbe      	ittt	lt
 8014214:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8014218:	f06f 0118 	mvnlt.w	r1, #24
 801421c:	ee17 3a90 	vmovlt	r3, s15
 8014220:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8014224:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014228:	4418      	add	r0, r3
 801422a:	bfa8      	it	ge
 801422c:	2100      	movge	r1, #0
 801422e:	3a7f      	subs	r2, #127	; 0x7f
 8014230:	440a      	add	r2, r1
 8014232:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8014236:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801423a:	4319      	orrs	r1, r3
 801423c:	ee00 1a10 	vmov	s0, r1
 8014240:	4951      	ldr	r1, [pc, #324]	; (8014388 <__ieee754_logf+0x1b0>)
 8014242:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8014246:	f103 000f 	add.w	r0, r3, #15
 801424a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801424e:	4001      	ands	r1, r0
 8014250:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014254:	bb89      	cbnz	r1, 80142ba <__ieee754_logf+0xe2>
 8014256:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801425e:	d10f      	bne.n	8014280 <__ieee754_logf+0xa8>
 8014260:	2a00      	cmp	r2, #0
 8014262:	f000 8085 	beq.w	8014370 <__ieee754_logf+0x198>
 8014266:	ee07 2a90 	vmov	s15, r2
 801426a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801438c <__ieee754_logf+0x1b4>
 801426e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8014390 <__ieee754_logf+0x1b8>
 8014272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014276:	ee27 0a80 	vmul.f32	s0, s15, s0
 801427a:	eea7 0a87 	vfma.f32	s0, s15, s14
 801427e:	4770      	bx	lr
 8014280:	eddf 6a44 	vldr	s13, [pc, #272]	; 8014394 <__ieee754_logf+0x1bc>
 8014284:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014288:	eee0 7a66 	vfms.f32	s15, s0, s13
 801428c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014294:	b912      	cbnz	r2, 801429c <__ieee754_logf+0xc4>
 8014296:	ee30 0a47 	vsub.f32	s0, s0, s14
 801429a:	4770      	bx	lr
 801429c:	ee07 2a90 	vmov	s15, r2
 80142a0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801438c <__ieee754_logf+0x1b4>
 80142a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142a8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80142ac:	ee37 0a40 	vsub.f32	s0, s14, s0
 80142b0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8014390 <__ieee754_logf+0x1b8>
 80142b4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80142b8:	4770      	bx	lr
 80142ba:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80142be:	ee70 7a27 	vadd.f32	s15, s0, s15
 80142c2:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014398 <__ieee754_logf+0x1c0>
 80142c6:	eddf 4a35 	vldr	s9, [pc, #212]	; 801439c <__ieee754_logf+0x1c4>
 80142ca:	4935      	ldr	r1, [pc, #212]	; (80143a0 <__ieee754_logf+0x1c8>)
 80142cc:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80142d0:	4419      	add	r1, r3
 80142d2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80142d6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80142da:	430b      	orrs	r3, r1
 80142dc:	2b00      	cmp	r3, #0
 80142de:	ee07 2a90 	vmov	s15, r2
 80142e2:	ee26 5a06 	vmul.f32	s10, s12, s12
 80142e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80142ea:	ee25 7a05 	vmul.f32	s14, s10, s10
 80142ee:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80143a4 <__ieee754_logf+0x1cc>
 80142f2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80142f6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80143a8 <__ieee754_logf+0x1d0>
 80142fa:	eee7 5a87 	vfma.f32	s11, s15, s14
 80142fe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80143ac <__ieee754_logf+0x1d4>
 8014302:	eee7 7a24 	vfma.f32	s15, s14, s9
 8014306:	eddf 4a2a 	vldr	s9, [pc, #168]	; 80143b0 <__ieee754_logf+0x1d8>
 801430a:	eee7 4a87 	vfma.f32	s9, s15, s14
 801430e:	eddf 7a29 	vldr	s15, [pc, #164]	; 80143b4 <__ieee754_logf+0x1dc>
 8014312:	eee4 7a87 	vfma.f32	s15, s9, s14
 8014316:	ee67 7a85 	vmul.f32	s15, s15, s10
 801431a:	eee5 7a87 	vfma.f32	s15, s11, s14
 801431e:	dd1c      	ble.n	801435a <__ieee754_logf+0x182>
 8014320:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014324:	ee20 7a07 	vmul.f32	s14, s0, s14
 8014328:	ee27 7a00 	vmul.f32	s14, s14, s0
 801432c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014330:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014334:	b922      	cbnz	r2, 8014340 <__ieee754_logf+0x168>
 8014336:	ee77 7a67 	vsub.f32	s15, s14, s15
 801433a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801433e:	4770      	bx	lr
 8014340:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801438c <__ieee754_logf+0x1b4>
 8014344:	eee6 7a86 	vfma.f32	s15, s13, s12
 8014348:	ee77 7a67 	vsub.f32	s15, s14, s15
 801434c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014350:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8014390 <__ieee754_logf+0x1b8>
 8014354:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8014358:	4770      	bx	lr
 801435a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801435e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014362:	2a00      	cmp	r2, #0
 8014364:	d0e9      	beq.n	801433a <__ieee754_logf+0x162>
 8014366:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801438c <__ieee754_logf+0x1b4>
 801436a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801436e:	e7ed      	b.n	801434c <__ieee754_logf+0x174>
 8014370:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801437c <__ieee754_logf+0x1a4>
 8014374:	4770      	bx	lr
 8014376:	bf00      	nop
 8014378:	cc000000 	.word	0xcc000000
 801437c:	00000000 	.word	0x00000000
 8014380:	4c000000 	.word	0x4c000000
 8014384:	004afb20 	.word	0x004afb20
 8014388:	007ffff0 	.word	0x007ffff0
 801438c:	3717f7d1 	.word	0x3717f7d1
 8014390:	3f317180 	.word	0x3f317180
 8014394:	3eaaaaab 	.word	0x3eaaaaab
 8014398:	3e1cd04f 	.word	0x3e1cd04f
 801439c:	3e178897 	.word	0x3e178897
 80143a0:	ffcf5c30 	.word	0xffcf5c30
 80143a4:	3e638e29 	.word	0x3e638e29
 80143a8:	3ecccccd 	.word	0x3ecccccd
 80143ac:	3e3a3325 	.word	0x3e3a3325
 80143b0:	3e924925 	.word	0x3e924925
 80143b4:	3f2aaaab 	.word	0x3f2aaaab

080143b8 <_init>:
 80143b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ba:	bf00      	nop
 80143bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143be:	bc08      	pop	{r3}
 80143c0:	469e      	mov	lr, r3
 80143c2:	4770      	bx	lr

080143c4 <_fini>:
 80143c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143c6:	bf00      	nop
 80143c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143ca:	bc08      	pop	{r3}
 80143cc:	469e      	mov	lr, r3
 80143ce:	4770      	bx	lr
